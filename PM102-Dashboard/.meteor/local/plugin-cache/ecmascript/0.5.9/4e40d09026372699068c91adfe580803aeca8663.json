{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/accounts-password/email_tests_setup.js","filenameRelative":"/packages/accounts-password/email_tests_setup.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/accounts-password/email_tests_setup.js.map","sourceFileName":"/packages/accounts-password/email_tests_setup.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"email_tests_setup"},"ignored":false,"code":"//\n// a mechanism to intercept emails sent to addressing including\n// the string \"intercept\", storing them in an array that can then\n// be retrieved using the getInterceptedEmails method\n//\nvar interceptedEmails = {}; // (email address) -> (array of options)\n\n// add html email templates that just contain the url\nAccounts.emailTemplates.resetPassword.html = Accounts.emailTemplates.enrollAccount.html = Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n  return url;\n};\n\n// override the from address\nAccounts.emailTemplates.resetPassword.from = Accounts.emailTemplates.enrollAccount.from = Accounts.emailTemplates.verifyEmail.from = function (user) {\n  return 'test@meteor.com';\n};\n\n// add a custom header to check against\nAccounts.emailTemplates.headers = {\n  'My-Custom-Header': 'Cool'\n};\n\nEmailTest.hookSend(function (options) {\n  var to = options.to;\n  if (!to || to.indexOf('intercept') === -1) {\n    return true; // go ahead and send\n  } else {\n    if (!interceptedEmails[to]) interceptedEmails[to] = [];\n\n    interceptedEmails[to].push(options);\n    return false; // skip sending\n  }\n});\n\nMeteor.methods({\n  getInterceptedEmails: function () {\n    function getInterceptedEmails(email) {\n      check(email, String);\n      return interceptedEmails[email];\n    }\n\n    return getInterceptedEmails;\n  }(),\n\n  addEmailForTestAndVerify: function () {\n    function addEmailForTestAndVerify(email) {\n      check(email, String);\n      Meteor.users.update({ _id: this.userId }, { $push: { emails: { address: email, verified: false } } });\n      Accounts.sendVerificationEmail(this.userId, email);\n    }\n\n    return addEmailForTestAndVerify;\n  }(),\n\n  createUserOnServer: function () {\n    function createUserOnServer(email) {\n      check(email, String);\n      var userId = Accounts.createUser({ email: email });\n      Accounts.sendEnrollmentEmail(userId);\n      return Meteor.users.findOne(userId);\n    }\n\n    return createUserOnServer;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/packages/accounts-password/email_tests_setup.js"],"names":["interceptedEmails","Accounts","emailTemplates","resetPassword","html","enrollAccount","verifyEmail","user","url","from","headers","EmailTest","hookSend","options","to","indexOf","push","Meteor","methods","getInterceptedEmails","email","check","String","addEmailForTestAndVerify","users","update","_id","userId","$push","emails","address","verified","sendVerificationEmail","createUserOnServer","createUser","sendEnrollmentEmail","findOne"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,oBAAoB,EAAxB,C,CAA4B;;AAE5B;AACAC,SAASC,cAAT,CAAwBC,aAAxB,CAAsCC,IAAtC,GACEH,SAASC,cAAT,CAAwBG,aAAxB,CAAsCD,IAAtC,GACAH,SAASC,cAAT,CAAwBI,WAAxB,CAAoCF,IAApC,GAA2C,UAAUG,IAAV,EAAgBC,GAAhB,EAAqB;AAC9D,SAAOA,GAAP;AACD,CAJH;;AAMA;AACAP,SAASC,cAAT,CAAwBC,aAAxB,CAAsCM,IAAtC,GACER,SAASC,cAAT,CAAwBG,aAAxB,CAAsCI,IAAtC,GACER,SAASC,cAAT,CAAwBI,WAAxB,CAAoCG,IAApC,GAA2C,UAAUF,IAAV,EAAgB;AACzD,SAAO,iBAAP;AACD,CAJL;;AAMA;AACAN,SAASC,cAAT,CAAwBQ,OAAxB,GAAkC;AAChC,sBAAqB;AADW,CAAlC;;AAIAC,UAAUC,QAAV,CAAmB,UAAUC,OAAV,EAAmB;AACpC,MAAIC,KAAKD,QAAQC,EAAjB;AACA,MAAI,CAACA,EAAD,IAAOA,GAAGC,OAAH,CAAW,WAAX,MAA4B,CAAC,CAAxC,EAA2C;AACzC,WAAO,IAAP,CADyC,CAC5B;AACd,GAFD,MAEO;AACL,QAAI,CAACf,kBAAkBc,EAAlB,CAAL,EACEd,kBAAkBc,EAAlB,IAAwB,EAAxB;;AAEFd,sBAAkBc,EAAlB,EAAsBE,IAAtB,CAA2BH,OAA3B;AACA,WAAO,KAAP,CALK,CAKS;AACf;AACF,CAXD;;AAaAI,OAAOC,OAAP,CAAe;AACbC;AAAsB,kCAAUC,KAAV,EAAiB;AACrCC,YAAMD,KAAN,EAAaE,MAAb;AACA,aAAOtB,kBAAkBoB,KAAlB,CAAP;AACD;;AAHD;AAAA,KADa;;AAMbG;AAA0B,sCAAUH,KAAV,EAAiB;AACzCC,YAAMD,KAAN,EAAaE,MAAb;AACAL,aAAOO,KAAP,CAAaC,MAAb,CACE,EAACC,KAAK,KAAKC,MAAX,EADF,EAEE,EAACC,OAAO,EAACC,QAAQ,EAACC,SAASV,KAAV,EAAiBW,UAAU,KAA3B,EAAT,EAAR,EAFF;AAGA9B,eAAS+B,qBAAT,CAA+B,KAAKL,MAApC,EAA4CP,KAA5C;AACD;;AAND;AAAA,KANa;;AAcba;AAAoB,gCAAUb,KAAV,EAAiB;AACnCC,YAAMD,KAAN,EAAaE,MAAb;AACA,UAAIK,SAAS1B,SAASiC,UAAT,CAAoB,EAACd,OAAOA,KAAR,EAApB,CAAb;AACAnB,eAASkC,mBAAT,CAA6BR,MAA7B;AACA,aAAOV,OAAOO,KAAP,CAAaY,OAAb,CAAqBT,MAArB,CAAP;AACD;;AALD;AAAA;AAda,CAAf","file":"/packages/accounts-password/email_tests_setup.js.map","sourcesContent":["//\n// a mechanism to intercept emails sent to addressing including\n// the string \"intercept\", storing them in an array that can then\n// be retrieved using the getInterceptedEmails method\n//\nvar interceptedEmails = {}; // (email address) -> (array of options)\n\n// add html email templates that just contain the url\nAccounts.emailTemplates.resetPassword.html =\n  Accounts.emailTemplates.enrollAccount.html =\n  Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n    return url;\n  };\n\n// override the from address\nAccounts.emailTemplates.resetPassword.from =\n  Accounts.emailTemplates.enrollAccount.from =\n    Accounts.emailTemplates.verifyEmail.from = function (user) {\n      return 'test@meteor.com';\n    };\n\n// add a custom header to check against\nAccounts.emailTemplates.headers = {\n  'My-Custom-Header' : 'Cool'\n};\n\nEmailTest.hookSend(function (options) {\n  var to = options.to;\n  if (!to || to.indexOf('intercept') === -1) {\n    return true; // go ahead and send\n  } else {\n    if (!interceptedEmails[to])\n      interceptedEmails[to] = [];\n\n    interceptedEmails[to].push(options);\n    return false; // skip sending\n  }\n});\n\nMeteor.methods({\n  getInterceptedEmails: function (email) {\n    check(email, String);\n    return interceptedEmails[email];\n  },\n\n  addEmailForTestAndVerify: function (email) {\n    check(email, String);\n    Meteor.users.update(\n      {_id: this.userId},\n      {$push: {emails: {address: email, verified: false}}});\n    Accounts.sendVerificationEmail(this.userId, email);\n  },\n\n  createUserOnServer: function (email) {\n    check(email, String);\n    var userId = Accounts.createUser({email: email});\n    Accounts.sendEnrollmentEmail(userId);\n    return Meteor.users.findOne(userId);\n  }\n});\n"]},"hash":"4e40d09026372699068c91adfe580803aeca8663"}
