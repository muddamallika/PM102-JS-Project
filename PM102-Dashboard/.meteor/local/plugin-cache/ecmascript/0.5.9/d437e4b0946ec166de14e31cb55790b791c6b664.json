{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/oplog_observe_driver.js","filenameRelative":"/packages/mongo/oplog_observe_driver.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/oplog_observe_driver.js.map","sourceFileName":"/packages/mongo/oplog_observe_driver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"oplog_observe_driver"},"ignored":false,"code":"var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function SwitchedToQuery() {};\nvar finishIfNeedToPollQuery = function finishIfNeedToPollQuery(f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery)) throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function OplogObserveDriver(options) {\n  var self = this;\n  self._usesOplog = true; // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap();\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  var selector = self._cursorDescription.selector;\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter) self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap();\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(finishIfNeedToPollQuery(function () {\n    self._needToPollQuery();\n  })));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(trigger, function (notification) {\n      Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n        var op = notification.op;\n        if (notification.dropCollection || notification.dropDatabase) {\n          // Note: this call is not allowed to block on anything (especially\n          // on waiting for oplog entries to catch up) because that will block\n          // onOplogEntry!\n          self._needToPollQuery();\n        } else {\n          // All other operators should be handled depending on phase\n          if (self._phase === PHASE.QUERYING) self._handleOplogEntryQuerying(op);else self._handleOplogEntrySteadyOrFetching(op);\n        }\n      }));\n    }));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(self._cursorDescription, function (notification) {\n    // If we're not in a pre-fire write fence, we don't have to do anything.\n    var fence = DDPServer._CurrentWriteFence.get();\n    if (!fence || fence.fired) return;\n\n    if (fence._oplogObserveDrivers) {\n      fence._oplogObserveDrivers[self._id] = self;\n      return;\n    }\n\n    fence._oplogObserveDrivers = {};\n    fence._oplogObserveDrivers[self._id] = self;\n\n    fence.onBeforeFire(function () {\n      var drivers = fence._oplogObserveDrivers;\n      delete fence._oplogObserveDrivers;\n\n      // This fence cannot fire until we've caught up to \"this point\" in the\n      // oplog, and all observers made it back to the steady state.\n      self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n      _.each(drivers, function (driver) {\n        if (driver._stopped) return;\n\n        var write = fence.beginWrite();\n        if (driver._phase === PHASE.STEADY) {\n          // Make sure that all of the callbacks have made it through the\n          // multiplexer and been delivered to ObserveHandles before committing\n          // writes.\n          driver._multiplexer.onFlush(function () {\n            write.committed();\n          });\n        } else {\n          driver._writesToCommitWhenWeReachSteady.push(write);\n        }\n      });\n    });\n  }));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(function () {\n    self._needToPollQuery();\n  })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function () {\n    function _addPublished(id, doc) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        var fields = _.clone(doc);\n        delete fields._id;\n        self._published.set(id, self._sharedProjectionFn(doc));\n        self._multiplexer.added(id, self._projectionFn(fields));\n\n        // After adding this document, the published set might be overflowed\n        // (exceeding capacity specified by limit). If so, push the maximum\n        // element to the buffer, we might want to save it in memory to reduce the\n        // amount of Mongo lookups in the future.\n        if (self._limit && self._published.size() > self._limit) {\n          // XXX in theory the size of published is no more than limit+1\n          if (self._published.size() !== self._limit + 1) {\n            throw new Error(\"After adding to published, \" + (self._published.size() - self._limit) + \" documents are overflowing the set\");\n          }\n\n          var overflowingDocId = self._published.maxElementId();\n          var overflowingDoc = self._published.get(overflowingDocId);\n\n          if (EJSON.equals(overflowingDocId, id)) {\n            throw new Error(\"The document just added is overflowing the published set\");\n          }\n\n          self._published.remove(overflowingDocId);\n          self._multiplexer.removed(overflowingDocId);\n          self._addBuffered(overflowingDocId, overflowingDoc);\n        }\n      });\n    }\n\n    return _addPublished;\n  }(),\n  _removePublished: function () {\n    function _removePublished(id) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        self._published.remove(id);\n        self._multiplexer.removed(id);\n        if (!self._limit || self._published.size() === self._limit) return;\n\n        if (self._published.size() > self._limit) throw Error(\"self._published got too big\");\n\n        // OK, we are publishing less than the limit. Maybe we should look in the\n        // buffer to find the next element past what we were publishing before.\n\n        if (!self._unpublishedBuffer.empty()) {\n          // There's something in the buffer; move the first thing in it to\n          // _published.\n          var newDocId = self._unpublishedBuffer.minElementId();\n          var newDoc = self._unpublishedBuffer.get(newDocId);\n          self._removeBuffered(newDocId);\n          self._addPublished(newDocId, newDoc);\n          return;\n        }\n\n        // There's nothing in the buffer.  This could mean one of a few things.\n\n        // (a) We could be in the middle of re-running the query (specifically, we\n        // could be in _publishNewResults). In that case, _unpublishedBuffer is\n        // empty because we clear it at the beginning of _publishNewResults. In\n        // this case, our caller already knows the entire answer to the query and\n        // we don't need to do anything fancy here.  Just return.\n        if (self._phase === PHASE.QUERYING) return;\n\n        // (b) We're pretty confident that the union of _published and\n        // _unpublishedBuffer contain all documents that match selector. Because\n        // _unpublishedBuffer is empty, that means we're confident that _published\n        // contains all documents that match selector. So we have nothing to do.\n        if (self._safeAppendToBuffer) return;\n\n        // (c) Maybe there are other documents out there that should be in our\n        // buffer. But in that case, when we emptied _unpublishedBuffer in\n        // _removeBuffered, we should have called _needToPollQuery, which will\n        // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n        // (or both), and it will put us in QUERYING for that whole time. So in\n        // fact, we shouldn't be able to get here.\n\n        throw new Error(\"Buffer inexplicably empty\");\n      });\n    }\n\n    return _removePublished;\n  }(),\n  _changePublished: function () {\n    function _changePublished(id, oldDoc, newDoc) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        self._published.set(id, self._sharedProjectionFn(newDoc));\n        var projectedNew = self._projectionFn(newDoc);\n        var projectedOld = self._projectionFn(oldDoc);\n        var changed = DiffSequence.makeChangedFields(projectedNew, projectedOld);\n        if (!_.isEmpty(changed)) self._multiplexer.changed(id, changed);\n      });\n    }\n\n    return _changePublished;\n  }(),\n  _addBuffered: function () {\n    function _addBuffered(id, doc) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n        // If something is overflowing the buffer, we just remove it from cache\n        if (self._unpublishedBuffer.size() > self._limit) {\n          var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n          self._unpublishedBuffer.remove(maxBufferedId);\n\n          // Since something matching is removed from cache (both published set and\n          // buffer), set flag to false\n          self._safeAppendToBuffer = false;\n        }\n      });\n    }\n\n    return _addBuffered;\n  }(),\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function () {\n    function _removeBuffered(id) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        self._unpublishedBuffer.remove(id);\n        // To keep the contract \"buffer is never empty in STEADY phase unless the\n        // everything matching fits into published\" true, we poll everything as\n        // soon as we see the buffer becoming empty.\n        if (!self._unpublishedBuffer.size() && !self._safeAppendToBuffer) self._needToPollQuery();\n      });\n    }\n\n    return _removeBuffered;\n  }(),\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function () {\n    function _addMatching(doc) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        var id = doc._id;\n        if (self._published.has(id)) throw Error(\"tried to add something already published \" + id);\n        if (self._limit && self._unpublishedBuffer.has(id)) throw Error(\"tried to add something already existed in buffer \" + id);\n\n        var limit = self._limit;\n        var comparator = self._comparator;\n        var maxPublished = limit && self._published.size() > 0 ? self._published.get(self._published.maxElementId()) : null;\n        var maxBuffered = limit && self._unpublishedBuffer.size() > 0 ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId()) : null;\n        // The query is unlimited or didn't publish enough documents yet or the\n        // new document would fit into published set pushing the maximum element\n        // out, then we need to publish the doc.\n        var toPublish = !limit || self._published.size() < limit || comparator(doc, maxPublished) < 0;\n\n        // Otherwise we might need to buffer it (only in case of limited query).\n        // Buffering is allowed if the buffer is not filled up yet and all\n        // matching docs are either in the published set or in the buffer.\n        var canAppendToBuffer = !toPublish && self._safeAppendToBuffer && self._unpublishedBuffer.size() < limit;\n\n        // Or if it is small enough to be safely inserted to the middle or the\n        // beginning of the buffer.\n        var canInsertIntoBuffer = !toPublish && maxBuffered && comparator(doc, maxBuffered) <= 0;\n\n        var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n        if (toPublish) {\n          self._addPublished(id, doc);\n        } else if (toBuffer) {\n          self._addBuffered(id, doc);\n        } else {\n          // dropping it and not saving to the cache\n          self._safeAppendToBuffer = false;\n        }\n      });\n    }\n\n    return _addMatching;\n  }(),\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function () {\n    function _removeMatching(id) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        if (!self._published.has(id) && !self._limit) throw Error(\"tried to remove something matching but not cached \" + id);\n\n        if (self._published.has(id)) {\n          self._removePublished(id);\n        } else if (self._unpublishedBuffer.has(id)) {\n          self._removeBuffered(id);\n        }\n      });\n    }\n\n    return _removeMatching;\n  }(),\n  _handleDoc: function () {\n    function _handleDoc(id, newDoc) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n        var cachedBefore = publishedBefore || bufferedBefore;\n\n        if (matchesNow && !cachedBefore) {\n          self._addMatching(newDoc);\n        } else if (cachedBefore && !matchesNow) {\n          self._removeMatching(id);\n        } else if (cachedBefore && matchesNow) {\n          var oldDoc = self._published.get(id);\n          var comparator = self._comparator;\n          var minBuffered = self._limit && self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n\n          if (publishedBefore) {\n            // Unlimited case where the document stays in published once it\n            // matches or the case when we don't have enough matching docs to\n            // publish or the changed but matching doc will stay in published\n            // anyways.\n            //\n            // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n            // fact that buffer can't be empty if there are matching documents not\n            // published. Notably, we don't want to schedule repoll and continue\n            // relying on this property.\n            var staysInPublished = !self._limit || self._unpublishedBuffer.size() === 0 || comparator(newDoc, minBuffered) <= 0;\n\n            if (staysInPublished) {\n              self._changePublished(id, oldDoc, newDoc);\n            } else {\n              // after the change doc doesn't stay in the published, remove it\n              self._removePublished(id);\n              // but it can move into buffered now, check it\n              var maxBuffered = self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());\n\n              var toBuffer = self._safeAppendToBuffer || maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n\n              if (toBuffer) {\n                self._addBuffered(id, newDoc);\n              } else {\n                // Throw away from both published set and buffer\n                self._safeAppendToBuffer = false;\n              }\n            }\n          } else if (bufferedBefore) {\n            oldDoc = self._unpublishedBuffer.get(id);\n            // remove the old version manually instead of using _removeBuffered so\n            // we don't trigger the querying immediately.  if we end this block\n            // with the buffer empty, we will need to trigger the query poll\n            // manually too.\n            self._unpublishedBuffer.remove(id);\n\n            var maxPublished = self._published.get(self._published.maxElementId());\n            var maxBuffered = self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());\n\n            // the buffered doc was updated, it could move to published\n            var toPublish = comparator(newDoc, maxPublished) < 0;\n\n            // or stays in buffer even after the change\n            var staysInBuffer = !toPublish && self._safeAppendToBuffer || !toPublish && maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n\n            if (toPublish) {\n              self._addPublished(id, newDoc);\n            } else if (staysInBuffer) {\n              // stays in buffer but changes\n              self._unpublishedBuffer.set(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n              // Normally this check would have been done in _removeBuffered but\n              // we didn't use it, so we need to do it ourself now.\n              if (!self._unpublishedBuffer.size()) {\n                self._needToPollQuery();\n              }\n            }\n          } else {\n            throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n          }\n        }\n      });\n    }\n\n    return _handleDoc;\n  }(),\n  _fetchModifiedDocuments: function () {\n    function _fetchModifiedDocuments() {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        self._registerPhaseChange(PHASE.FETCHING);\n        // Defer, because nothing called from the oplog entry handler may yield,\n        // but fetch() yields.\n        Meteor.defer(finishIfNeedToPollQuery(function () {\n          while (!self._stopped && !self._needToFetch.empty()) {\n            if (self._phase === PHASE.QUERYING) {\n              // While fetching, we decided to go into QUERYING mode, and then we\n              // saw another oplog entry, so _needToFetch is not empty. But we\n              // shouldn't fetch these documents until AFTER the query is done.\n              break;\n            }\n\n            // Being in steady phase here would be surprising.\n            if (self._phase !== PHASE.FETCHING) throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n            self._currentlyFetching = self._needToFetch;\n            var thisGeneration = ++self._fetchGeneration;\n            self._needToFetch = new LocalCollection._IdMap();\n            var waiting = 0;\n            var fut = new Future();\n            // This loop is safe, because _currentlyFetching will not be updated\n            // during this loop (in fact, it is never mutated).\n            self._currentlyFetching.forEach(function (cacheKey, id) {\n              waiting++;\n              self._mongoHandle._docFetcher.fetch(self._cursorDescription.collectionName, id, cacheKey, finishIfNeedToPollQuery(function (err, doc) {\n                try {\n                  if (err) {\n                    Meteor._debug(\"Got exception while fetching documents: \" + err);\n                    // If we get an error from the fetcher (eg, trouble\n                    // connecting to Mongo), let's just abandon the fetch phase\n                    // altogether and fall back to polling. It's not like we're\n                    // getting live updates anyway.\n                    if (self._phase !== PHASE.QUERYING) {\n                      self._needToPollQuery();\n                    }\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0) fut['return']();\n                }\n              }));\n            });\n            fut.wait();\n            // Exit now if we've had a _pollQuery call (here or in another fiber).\n            if (self._phase === PHASE.QUERYING) return;\n            self._currentlyFetching = null;\n          }\n          // We're done fetching, so we can be steady, unless we've had a\n          // _pollQuery call (here or in another fiber).\n          if (self._phase !== PHASE.QUERYING) self._beSteady();\n        }));\n      });\n    }\n\n    return _fetchModifiedDocuments;\n  }(),\n  _beSteady: function () {\n    function _beSteady() {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        self._registerPhaseChange(PHASE.STEADY);\n        var writes = self._writesToCommitWhenWeReachSteady;\n        self._writesToCommitWhenWeReachSteady = [];\n        self._multiplexer.onFlush(function () {\n          _.each(writes, function (w) {\n            w.committed();\n          });\n        });\n      });\n    }\n\n    return _beSteady;\n  }(),\n  _handleOplogEntryQuerying: function () {\n    function _handleOplogEntryQuerying(op) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        self._needToFetch.set(idForOp(op), op.ts.toString());\n      });\n    }\n\n    return _handleOplogEntryQuerying;\n  }(),\n  _handleOplogEntrySteadyOrFetching: function () {\n    function _handleOplogEntrySteadyOrFetching(op) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        var id = idForOp(op);\n        // If we're already fetching this one, or about to, we can't optimize;\n        // make sure that we fetch it again if necessary.\n        if (self._phase === PHASE.FETCHING && (self._currentlyFetching && self._currentlyFetching.has(id) || self._needToFetch.has(id))) {\n          self._needToFetch.set(id, op.ts.toString());\n          return;\n        }\n\n        if (op.op === 'd') {\n          if (self._published.has(id) || self._limit && self._unpublishedBuffer.has(id)) self._removeMatching(id);\n        } else if (op.op === 'i') {\n          if (self._published.has(id)) throw new Error(\"insert found for already-existing ID in published\");\n          if (self._unpublishedBuffer && self._unpublishedBuffer.has(id)) throw new Error(\"insert found for already-existing ID in buffer\");\n\n          // XXX what if selector yields?  for now it can't but later it could\n          // have $where\n          if (self._matcher.documentMatches(op.o).result) self._addMatching(op.o);\n        } else if (op.op === 'u') {\n          // Is this a modifier ($set/$unset, which may require us to poll the\n          // database to figure out if the whole document matches the selector) or\n          // a replacement (in which case we can just directly re-evaluate the\n          // selector)?\n          var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n          // If this modifier modifies something inside an EJSON custom type (ie,\n          // anything with EJSON$), then we can't try to use\n          // LocalCollection._modify, since that just mutates the EJSON encoding,\n          // not the actual object.\n          var canDirectlyModifyDoc = !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n          var publishedBefore = self._published.has(id);\n          var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n          if (isReplace) {\n            self._handleDoc(id, _.extend({ _id: id }, op.o));\n          } else if ((publishedBefore || bufferedBefore) && canDirectlyModifyDoc) {\n            // Oh great, we actually know what the document is, so we can apply\n            // this directly.\n            var newDoc = self._published.has(id) ? self._published.get(id) : self._unpublishedBuffer.get(id);\n            newDoc = EJSON.clone(newDoc);\n\n            newDoc._id = id;\n            try {\n              LocalCollection._modify(newDoc, op.o);\n            } catch (e) {\n              if (e.name !== \"MinimongoError\") throw e;\n              // We didn't understand the modifier.  Re-fetch.\n              self._needToFetch.set(id, op.ts.toString());\n              if (self._phase === PHASE.STEADY) {\n                self._fetchModifiedDocuments();\n              }\n              return;\n            }\n            self._handleDoc(id, self._sharedProjectionFn(newDoc));\n          } else if (!canDirectlyModifyDoc || self._matcher.canBecomeTrueByModifier(op.o) || self._sorter && self._sorter.affectedByModifier(op.o)) {\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) self._fetchModifiedDocuments();\n          }\n        } else {\n          throw Error(\"XXX SURPRISING OPERATION: \" + op);\n        }\n      });\n    }\n\n    return _handleOplogEntrySteadyOrFetching;\n  }(),\n  // Yields!\n  _runInitialQuery: function () {\n    function _runInitialQuery() {\n      var self = this;\n      if (self._stopped) throw new Error(\"oplog stopped surprisingly early\");\n\n      self._runQuery({ initial: true }); // yields\n\n      if (self._stopped) return; // can happen on queryError\n\n      // Allow observeChanges calls to return. (After this, it's possible for\n      // stop() to be called.)\n      self._multiplexer.ready();\n\n      self._doneQuerying(); // yields\n    }\n\n    return _runInitialQuery;\n  }(),\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    function _pollQuery() {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        if (self._stopped) return;\n\n        // Yay, we get to forget about all the things we thought we had to fetch.\n        self._needToFetch = new LocalCollection._IdMap();\n        self._currentlyFetching = null;\n        ++self._fetchGeneration; // ignore any in-flight fetches\n        self._registerPhaseChange(PHASE.QUERYING);\n\n        // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n        // here because SwitchedToQuery is not thrown in QUERYING mode.\n        Meteor.defer(function () {\n          self._runQuery();\n          self._doneQuerying();\n        });\n      });\n    }\n\n    return _pollQuery;\n  }(),\n\n  // Yields!\n  _runQuery: function () {\n    function _runQuery(options) {\n      var self = this;\n      options = options || {};\n      var newResults, newBuffer;\n\n      // This while loop is just to retry failures.\n      while (true) {\n        // If we've been stopped, we don't have to run anything any more.\n        if (self._stopped) return;\n\n        newResults = new LocalCollection._IdMap();\n        newBuffer = new LocalCollection._IdMap();\n\n        // Query 2x documents as the half excluded from the original query will go\n        // into unpublished buffer to reduce additional Mongo lookups in cases\n        // when documents are removed from the published set and need a\n        // replacement.\n        // XXX needs more thought on non-zero skip\n        // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n        // buffer if such is needed.\n        var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n        try {\n          cursor.forEach(function (doc, i) {\n            // yields\n            if (!self._limit || i < self._limit) newResults.set(doc._id, doc);else newBuffer.set(doc._id, doc);\n          });\n          break;\n        } catch (e) {\n          if (options.initial && typeof e.code === 'number') {\n            // This is an error document sent to us by mongod, not a connection\n            // error generated by the client. And we've never seen this query work\n            // successfully. Probably it's a bad selector or something, so we\n            // should NOT retry. Instead, we should halt the observe (which ends\n            // up calling `stop` on us).\n            self._multiplexer.queryError(e);\n            return;\n          }\n\n          // During failover (eg) if we get an exception we should log and retry\n          // instead of crashing.\n          Meteor._debug(\"Got exception while polling query: \" + e);\n          Meteor._sleepForMs(100);\n        }\n      }\n\n      if (self._stopped) return;\n\n      self._publishNewResults(newResults, newBuffer);\n    }\n\n    return _runQuery;\n  }(),\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    function _needToPollQuery() {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        if (self._stopped) return;\n\n        // If we're not already in the middle of a query, we can query now\n        // (possibly pausing FETCHING).\n        if (self._phase !== PHASE.QUERYING) {\n          self._pollQuery();\n          throw new SwitchedToQuery();\n        }\n\n        // We're currently in QUERYING. Set a flag to ensure that we run another\n        // query when we're done.\n        self._requeryWhenDoneThisQuery = true;\n      });\n    }\n\n    return _needToPollQuery;\n  }(),\n\n  // Yields!\n  _doneQuerying: function () {\n    function _doneQuerying() {\n      var self = this;\n\n      if (self._stopped) return;\n      self._mongoHandle._oplogHandle.waitUntilCaughtUp(); // yields\n      if (self._stopped) return;\n      if (self._phase !== PHASE.QUERYING) throw Error(\"Phase unexpectedly \" + self._phase);\n\n      Meteor._noYieldsAllowed(function () {\n        if (self._requeryWhenDoneThisQuery) {\n          self._requeryWhenDoneThisQuery = false;\n          self._pollQuery();\n        } else if (self._needToFetch.empty()) {\n          self._beSteady();\n        } else {\n          self._fetchModifiedDocuments();\n        }\n      });\n    }\n\n    return _doneQuerying;\n  }(),\n\n  _cursorForQuery: function () {\n    function _cursorForQuery(optionsOverwrite) {\n      var self = this;\n      return Meteor._noYieldsAllowed(function () {\n        // The query we run is almost the same as the cursor we are observing,\n        // with a few changes. We need to read all the fields that are relevant to\n        // the selector, not just the fields we are going to publish (that's the\n        // \"shared\" projection). And we don't want to apply any transform in the\n        // cursor, because observeChanges shouldn't use the transform.\n        var options = _.clone(self._cursorDescription.options);\n\n        // Allow the caller to modify the options. Useful to specify different\n        // skip and limit values.\n        _.extend(options, optionsOverwrite);\n\n        options.fields = self._sharedProjection;\n        delete options.transform;\n        // We are NOT deep cloning fields or selector here, which should be OK.\n        var description = new CursorDescription(self._cursorDescription.collectionName, self._cursorDescription.selector, options);\n        return new Cursor(self._mongoHandle, description);\n      });\n    }\n\n    return _cursorForQuery;\n  }(),\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function () {\n    function _publishNewResults(newResults, newBuffer) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n\n        // If the query is limited and there is a buffer, shut down so it doesn't\n        // stay in a way.\n        if (self._limit) {\n          self._unpublishedBuffer.clear();\n        }\n\n        // First remove anything that's gone. Be careful not to modify\n        // self._published while iterating over it.\n        var idsToRemove = [];\n        self._published.forEach(function (doc, id) {\n          if (!newResults.has(id)) idsToRemove.push(id);\n        });\n        _.each(idsToRemove, function (id) {\n          self._removePublished(id);\n        });\n\n        // Now do adds and changes.\n        // If self has a buffer and limit, the new fetched result will be\n        // limited correctly as the query has sort specifier.\n        newResults.forEach(function (doc, id) {\n          self._handleDoc(id, doc);\n        });\n\n        // Sanity-check that everything we tried to put into _published ended up\n        // there.\n        // XXX if this is slow, remove it later\n        if (self._published.size() !== newResults.size()) {\n          throw Error(\"The Mongo server and the Meteor query disagree on how \" + \"many documents match your query. Maybe it is hitting a Mongo \" + \"edge case? The query is: \" + EJSON.stringify(self._cursorDescription.selector));\n        }\n        self._published.forEach(function (doc, id) {\n          if (!newResults.has(id)) throw Error(\"_published has a doc that newResults doesn't; \" + id);\n        });\n\n        // Finally, replace the buffer\n        newBuffer.forEach(function (doc, id) {\n          self._addBuffered(id, doc);\n        });\n\n        self._safeAppendToBuffer = newBuffer.size() < self._limit;\n      });\n    }\n\n    return _publishNewResults;\n  }(),\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function () {\n    function stop() {\n      var self = this;\n      if (self._stopped) return;\n      self._stopped = true;\n      _.each(self._stopHandles, function (handle) {\n        handle.stop();\n      });\n\n      // Note: we *don't* use multiplexer.onFlush here because this stop\n      // callback is actually invoked by the multiplexer itself when it has\n      // determined that there are no handles left. So nothing is actually going\n      // to get flushed (and it's probably not valid to call methods on the\n      // dying multiplexer).\n      _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n        w.committed(); // maybe yields?\n      });\n      self._writesToCommitWhenWeReachSteady = null;\n\n      // Proactively drop references to potentially big things.\n      self._published = null;\n      self._unpublishedBuffer = null;\n      self._needToFetch = null;\n      self._currentlyFetching = null;\n      self._oplogEntryHandle = null;\n      self._listenersHandle = null;\n\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", -1);\n    }\n\n    return stop;\n  }(),\n\n  _registerPhaseChange: function () {\n    function _registerPhaseChange(phase) {\n      var self = this;\n      Meteor._noYieldsAllowed(function () {\n        var now = new Date();\n\n        if (self._phase) {\n          var timeDiff = now - self._phaseStartTime;\n          Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n        }\n\n        self._phase = phase;\n        self._phaseStartTime = now;\n      });\n    }\n\n    return _registerPhaseChange;\n  }()\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  // underscored version of the option is COMPAT with 1.2\n  if (options.disableOplog || options._disableOplog) return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || options.limit && !options.sort) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\") return false;else throw e;\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function modifierCanBeDirectlyApplied(modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;","ast":null,"map":{"version":3,"sources":["/packages/mongo/oplog_observe_driver.js"],"names":["Fiber","Npm","require","Future","PHASE","QUERYING","FETCHING","STEADY","SwitchedToQuery","finishIfNeedToPollQuery","f","apply","arguments","e","currentId","OplogObserveDriver","options","self","_usesOplog","_id","_cursorDescription","cursorDescription","_mongoHandle","mongoHandle","_multiplexer","multiplexer","ordered","Error","sorter","comparator","getComparator","limit","heapOptions","IdMap","LocalCollection","_IdMap","_limit","_comparator","_sorter","_unpublishedBuffer","MinMaxHeap","_published","MaxHeap","_safeAppendToBuffer","_stopped","_stopHandles","Package","facts","Facts","incrementServerFact","_registerPhaseChange","selector","_matcher","matcher","projection","fields","_projectionFn","_compileProjection","_sharedProjection","combineIntoProjection","_sharedProjectionFn","_needToFetch","_currentlyFetching","_fetchGeneration","_requeryWhenDoneThisQuery","_writesToCommitWhenWeReachSteady","push","_oplogHandle","onSkippedEntries","_needToPollQuery","forEachTrigger","trigger","onOplogEntry","notification","Meteor","_noYieldsAllowed","op","dropCollection","dropDatabase","_phase","_handleOplogEntryQuerying","_handleOplogEntrySteadyOrFetching","listenAll","fence","DDPServer","_CurrentWriteFence","get","fired","_oplogObserveDrivers","onBeforeFire","drivers","waitUntilCaughtUp","_","each","driver","write","beginWrite","onFlush","committed","_onFailover","defer","_runInitialQuery","extend","prototype","_addPublished","id","doc","clone","set","added","size","overflowingDocId","maxElementId","overflowingDoc","EJSON","equals","remove","removed","_addBuffered","_removePublished","empty","newDocId","minElementId","newDoc","_removeBuffered","_changePublished","oldDoc","projectedNew","projectedOld","changed","DiffSequence","makeChangedFields","isEmpty","maxBufferedId","_addMatching","has","maxPublished","maxBuffered","toPublish","canAppendToBuffer","canInsertIntoBuffer","toBuffer","_removeMatching","_handleDoc","matchesNow","documentMatches","result","publishedBefore","bufferedBefore","cachedBefore","minBuffered","staysInPublished","staysInBuffer","_fetchModifiedDocuments","thisGeneration","waiting","fut","forEach","cacheKey","_docFetcher","fetch","collectionName","err","_debug","wait","_beSteady","writes","w","idForOp","ts","toString","o","isReplace","canDirectlyModifyDoc","modifierCanBeDirectlyApplied","_modify","name","canBecomeTrueByModifier","affectedByModifier","_runQuery","initial","ready","_doneQuerying","_pollQuery","newResults","newBuffer","cursor","_cursorForQuery","i","code","queryError","_sleepForMs","_publishNewResults","optionsOverwrite","transform","description","CursorDescription","Cursor","clear","idsToRemove","stringify","stop","handle","_oplogEntryHandle","_listenersHandle","phase","now","Date","timeDiff","_phaseStartTime","cursorSupported","disableOplog","_disableOplog","skip","sort","_checkSupportedProjection","hasWhere","hasGeoQuery","modifier","all","operation","value","field","test","MongoInternals"],"mappings":"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","file":"/packages/mongo/oplog_observe_driver.js.map","sourcesContent":["var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function () {};\nvar finishIfNeedToPollQuery = function (f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery))\n        throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function (options) {\n  var self = this;\n  self._usesOplog = true;  // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap;\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  var selector = self._cursorDescription.selector;\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter)\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(\n    self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap;\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(\n    finishIfNeedToPollQuery(function () {\n      self._needToPollQuery();\n    })\n  ));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(\n      trigger, function (notification) {\n        Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n          var op = notification.op;\n          if (notification.dropCollection || notification.dropDatabase) {\n            // Note: this call is not allowed to block on anything (especially\n            // on waiting for oplog entries to catch up) because that will block\n            // onOplogEntry!\n            self._needToPollQuery();\n          } else {\n            // All other operators should be handled depending on phase\n            if (self._phase === PHASE.QUERYING)\n              self._handleOplogEntryQuerying(op);\n            else\n              self._handleOplogEntrySteadyOrFetching(op);\n          }\n        }));\n      }\n    ));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(\n    self._cursorDescription, function (notification) {\n      // If we're not in a pre-fire write fence, we don't have to do anything.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (!fence || fence.fired)\n        return;\n\n      if (fence._oplogObserveDrivers) {\n        fence._oplogObserveDrivers[self._id] = self;\n        return;\n      }\n\n      fence._oplogObserveDrivers = {};\n      fence._oplogObserveDrivers[self._id] = self;\n\n      fence.onBeforeFire(function () {\n        var drivers = fence._oplogObserveDrivers;\n        delete fence._oplogObserveDrivers;\n\n        // This fence cannot fire until we've caught up to \"this point\" in the\n        // oplog, and all observers made it back to the steady state.\n        self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n        _.each(drivers, function (driver) {\n          if (driver._stopped)\n            return;\n\n          var write = fence.beginWrite();\n          if (driver._phase === PHASE.STEADY) {\n            // Make sure that all of the callbacks have made it through the\n            // multiplexer and been delivered to ObserveHandles before committing\n            // writes.\n            driver._multiplexer.onFlush(function () {\n              write.committed();\n            });\n          } else {\n            driver._writesToCommitWhenWeReachSteady.push(write);\n          }\n        });\n      });\n    }\n  ));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(\n    function () {\n      self._needToPollQuery();\n    })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = _.clone(doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" +\n                          (self._published.size() - self._limit) +\n                          \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (! self._limit || self._published.size() === self._limit)\n        return;\n\n      if (self._published.size() > self._limit)\n        throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING)\n        return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer)\n        return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function (id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(\n        projectedNew, projectedOld);\n      if (!_.isEmpty(changed))\n        self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)\n        self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function (doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id))\n        throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id))\n        throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = (limit && self._published.size() > 0) ?\n        self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())\n        : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = ! limit || self._published.size() < limit ||\n        comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&\n        self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&\n        comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (! self._published.has(id) && ! self._limit)\n        throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function (id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = ! self._limit ||\n            self._unpublishedBuffer.size() === 0 ||\n            comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            var maxBuffered = self._unpublishedBuffer.get(\n              self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer ||\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(\n            self._published.maxElementId());\n          var maxBuffered = self._unpublishedBuffer.size() &&\n                self._unpublishedBuffer.get(\n                  self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||\n                (!toPublish && maxBuffered &&\n                 comparator(newDoc, maxBuffered) <= 0);\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (! self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.FETCHING);\n      // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.\n      Meteor.defer(finishIfNeedToPollQuery(function () {\n        while (!self._stopped && !self._needToFetch.empty()) {\n          if (self._phase === PHASE.QUERYING) {\n            // While fetching, we decided to go into QUERYING mode, and then we\n            // saw another oplog entry, so _needToFetch is not empty. But we\n            // shouldn't fetch these documents until AFTER the query is done.\n            break;\n          }\n\n          // Being in steady phase here would be surprising.\n          if (self._phase !== PHASE.FETCHING)\n            throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n          self._currentlyFetching = self._needToFetch;\n          var thisGeneration = ++self._fetchGeneration;\n          self._needToFetch = new LocalCollection._IdMap;\n          var waiting = 0;\n          var fut = new Future;\n          // This loop is safe, because _currentlyFetching will not be updated\n          // during this loop (in fact, it is never mutated).\n          self._currentlyFetching.forEach(function (cacheKey, id) {\n            waiting++;\n            self._mongoHandle._docFetcher.fetch(\n              self._cursorDescription.collectionName, id, cacheKey,\n              finishIfNeedToPollQuery(function (err, doc) {\n                try {\n                  if (err) {\n                    Meteor._debug(\"Got exception while fetching documents: \" +\n                                  err);\n                    // If we get an error from the fetcher (eg, trouble\n                    // connecting to Mongo), let's just abandon the fetch phase\n                    // altogether and fall back to polling. It's not like we're\n                    // getting live updates anyway.\n                    if (self._phase !== PHASE.QUERYING) {\n                      self._needToPollQuery();\n                    }\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING\n                             && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0)\n                    fut.return();\n                }\n              }));\n          });\n          fut.wait();\n          // Exit now if we've had a _pollQuery call (here or in another fiber).\n          if (self._phase === PHASE.QUERYING)\n            return;\n          self._currentlyFetching = null;\n        }\n        // We're done fetching, so we can be steady, unless we've had a\n        // _pollQuery call (here or in another fiber).\n        if (self._phase !== PHASE.QUERYING)\n          self._beSteady();\n      }));\n    });\n  },\n  _beSteady: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.STEADY);\n      var writes = self._writesToCommitWhenWeReachSteady;\n      self._writesToCommitWhenWeReachSteady = [];\n      self._multiplexer.onFlush(function () {\n        _.each(writes, function (w) {\n          w.committed();\n        });\n      });\n    });\n  },\n  _handleOplogEntryQuerying: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op.ts.toString());\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n      if (self._phase === PHASE.FETCHING &&\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||\n           self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) ||\n            (self._limit && self._unpublishedBuffer.has(id)))\n          self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id))\n          throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))\n          throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result)\n          self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc =\n          !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, _.extend({_id: id}, op.o));\n        } else if ((publishedBefore || bufferedBefore) &&\n                   canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id)\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\")\n              throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc ||\n                   self._matcher.canBecomeTrueByModifier(op.o) ||\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {\n          self._needToFetch.set(id, op.ts.toString());\n          if (self._phase === PHASE.STEADY)\n            self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n  // Yields!\n  _runInitialQuery: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"oplog stopped surprisingly early\");\n\n    self._runQuery({initial: true});  // yields\n\n    if (self._stopped)\n      return;  // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    self._multiplexer.ready();\n\n    self._doneQuerying();  // yields\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap;\n      self._currentlyFetching = null;\n      ++self._fetchGeneration;  // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(function () {\n        self._runQuery();\n        self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  _runQuery: function (options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped)\n        return;\n\n      newResults = new LocalCollection._IdMap;\n      newBuffer = new LocalCollection._IdMap;\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        cursor.forEach(function (doc, i) {  // yields\n          if (!self._limit || i < self._limit)\n            newResults.set(doc._id, doc);\n          else\n            newBuffer.set(doc._id, doc);\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof(e.code) === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery;\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: function () {\n    var self = this;\n\n    if (self._stopped)\n      return;\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp();  // yields\n    if (self._stopped)\n      return;\n    if (self._phase !== PHASE.QUERYING)\n      throw Error(\"Phase unexpectedly \" + self._phase);\n\n    Meteor._noYieldsAllowed(function () {\n      if (self._requeryWhenDoneThisQuery) {\n        self._requeryWhenDoneThisQuery = false;\n        self._pollQuery();\n      } else if (self._needToFetch.empty()) {\n        self._beSteady();\n      } else {\n        self._fetchModifiedDocuments();\n      }\n    });\n  },\n\n  _cursorForQuery: function (optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = _.clone(self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      _.extend(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(\n        self._cursorDescription.collectionName,\n        self._cursorDescription.selector,\n        options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function (newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          idsToRemove.push(id);\n      });\n      _.each(idsToRemove, function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        throw Error(\n          \"The Mongo server and the Meteor query disagree on how \" +\n            \"many documents match your query. Maybe it is hitting a Mongo \" +\n            \"edge case? The query is: \" +\n            EJSON.stringify(self._cursorDescription.selector));\n      }\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    _.each(self._stopHandles, function (handle) {\n      handle.stop();\n    });\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n      w.committed();  // maybe yields?\n    });\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-oplog\", -1);\n  },\n\n  _registerPhaseChange: function (phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date;\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package.facts && Package.facts.Facts.incrementServerFact(\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  // underscored version of the option is COMPAT with 1.2\n  if (options.disableOplog || options._disableOplog)\n    return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || (options.limit && !options.sort)) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\")\n        return false;\n      else\n        throw e;\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function (modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;\n"]},"hash":"d437e4b0946ec166de14e31cb55790b791c6b664"}
