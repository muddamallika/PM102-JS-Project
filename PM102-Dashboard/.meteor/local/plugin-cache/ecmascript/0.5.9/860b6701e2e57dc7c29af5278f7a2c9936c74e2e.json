{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/polling_observe_driver.js","filenameRelative":"/packages/mongo/polling_observe_driver.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/polling_observe_driver.js.map","sourceFileName":"/packages/mongo/polling_observe_driver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"polling_observe_driver"},"ignored":false,"code":"PollingObserveDriver = function PollingObserveDriver(options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(self._unthrottledEnsurePollIsScheduled, self._cursorDescription.options.pollingThrottleMs || 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(self._cursorDescription, function (notification) {\n    // When someone does a transaction that might affect us, schedule a poll\n    // of the database. If that transaction happens inside of a write fence,\n    // block the fence until we've polled and notified observers.\n    var fence = DDPServer._CurrentWriteFence.get();\n    if (fence) self._pendingWrites.push(fence.beginWrite());\n    // Ensure a poll is scheduled... but if we already know that one is,\n    // don't hit the throttled _ensurePollIsScheduled function (which might\n    // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n    if (self._pollsScheduledButNotStarted === 0) self._ensurePollIsScheduled();\n  });\n  self._stopCallbacks.push(function () {\n    listenersHandle.stop();\n  });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval = self._cursorDescription.options.pollingIntervalMs || self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n    10 * 1000;\n    var intervalHandle = Meteor.setInterval(_.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    function _unthrottledEnsurePollIsScheduled() {\n      var self = this;\n      if (self._pollsScheduledButNotStarted > 0) return;\n      ++self._pollsScheduledButNotStarted;\n      self._taskQueue.queueTask(function () {\n        self._pollMongo();\n      });\n    }\n\n    return _unthrottledEnsurePollIsScheduled;\n  }(),\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function () {\n    function _suspendPolling() {\n      var self = this;\n      // Pretend that there's another poll scheduled (which will prevent\n      // _ensurePollIsScheduled from queueing any more polls).\n      ++self._pollsScheduledButNotStarted;\n      // Now block until all currently running or scheduled polls are done.\n      self._taskQueue.runTask(function () {});\n\n      // Confirm that there is only one \"poll\" (the fake one we're pretending to\n      // have) scheduled.\n      if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n    }\n\n    return _suspendPolling;\n  }(),\n  _resumePolling: function () {\n    function _resumePolling() {\n      var self = this;\n      // We should be in the same state as in the end of _suspendPolling.\n      if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n      // Run a poll synchronously (which will counteract the\n      // ++_pollsScheduledButNotStarted from _suspendPolling).\n      self._taskQueue.runTask(function () {\n        self._pollMongo();\n      });\n    }\n\n    return _resumePolling;\n  }(),\n\n  _pollMongo: function () {\n    function _pollMongo() {\n      var self = this;\n      --self._pollsScheduledButNotStarted;\n\n      if (self._stopped) return;\n\n      var first = false;\n      var oldResults = self._results;\n      if (!oldResults) {\n        first = true;\n        // XXX maybe use OrderedDict instead?\n        oldResults = self._ordered ? [] : new LocalCollection._IdMap();\n      }\n\n      self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n      // Save the list of pending writes which this round will commit.\n      var writesForCycle = self._pendingWrites;\n      self._pendingWrites = [];\n\n      // Get the new query results. (This yields.)\n      try {\n        var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n      } catch (e) {\n        if (first && typeof e.code === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we should\n          // NOT retry. Instead, we should halt the observe (which ends up calling\n          // `stop` on us).\n          self._multiplexer.queryError(new Error(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.message));\n          return;\n        }\n\n        // getRawObjects can throw if we're having trouble talking to the\n        // database.  That's fine --- we will repoll later anyway. But we should\n        // make sure not to lose track of this cycle's writes.\n        // (It also can throw if there's just something invalid about this query;\n        // unfortunately the ObserveDriver API doesn't provide a good way to\n        // \"cancel\" the observe from the inside in this case.\n        Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n        Meteor._debug(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n        return;\n      }\n\n      // Run diffs.\n      if (!self._stopped) {\n        LocalCollection._diffQueryChanges(self._ordered, oldResults, newResults, self._multiplexer);\n      }\n\n      // Signals the multiplexer to allow all observeChanges calls that share this\n      // multiplexer to return. (This happens asynchronously, via the\n      // multiplexer's queue.)\n      if (first) self._multiplexer.ready();\n\n      // Replace self._results atomically.  (This assignment is what makes `first`\n      // stay through on the next cycle, so we've waited until after we've\n      // committed to ready-ing the multiplexer.)\n      self._results = newResults;\n\n      // Once the ObserveMultiplexer has processed everything we've done in this\n      // round, mark all the writes which existed before this call as\n      // commmitted. (If new writes have shown up in the meantime, there'll\n      // already be another _pollMongo task scheduled.)\n      self._multiplexer.onFlush(function () {\n        _.each(writesForCycle, function (w) {\n          w.committed();\n        });\n      });\n    }\n\n    return _pollMongo;\n  }(),\n\n  stop: function () {\n    function stop() {\n      var self = this;\n      self._stopped = true;\n      _.each(self._stopCallbacks, function (c) {\n        c();\n      });\n      // Release any write fences that are waiting on us.\n      _.each(self._pendingWrites, function (w) {\n        w.committed();\n      });\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", -1);\n    }\n\n    return stop;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/polling_observe_driver.js"],"names":["PollingObserveDriver","options","self","_cursorDescription","cursorDescription","_mongoHandle","mongoHandle","_ordered","ordered","_multiplexer","multiplexer","_stopCallbacks","_stopped","_synchronousCursor","_createSynchronousCursor","_results","_pollsScheduledButNotStarted","_pendingWrites","_ensurePollIsScheduled","_","throttle","_unthrottledEnsurePollIsScheduled","pollingThrottleMs","_taskQueue","Meteor","_SynchronousQueue","listenersHandle","listenAll","notification","fence","DDPServer","_CurrentWriteFence","get","push","beginWrite","stop","_testOnlyPollCallback","pollingInterval","pollingIntervalMs","_pollingInterval","intervalHandle","setInterval","bind","clearInterval","Package","facts","Facts","incrementServerFact","extend","prototype","queueTask","_pollMongo","_suspendPolling","runTask","Error","_resumePolling","first","oldResults","LocalCollection","_IdMap","writesForCycle","newResults","getRawObjects","e","code","queryError","JSON","stringify","message","Array","apply","_debug","stack","_diffQueryChanges","ready","onFlush","each","w","committed","c"],"mappings":"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","file":"/packages/mongo/polling_observe_driver.js.map","sourcesContent":["PollingObserveDriver = function (options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n    self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled,\n    self._cursorDescription.options.pollingThrottleMs || 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(\n    self._cursorDescription, function (notification) {\n      // When someone does a transaction that might affect us, schedule a poll\n      // of the database. If that transaction happens inside of a write fence,\n      // block the fence until we've polled and notified observers.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (fence)\n        self._pendingWrites.push(fence.beginWrite());\n      // Ensure a poll is scheduled... but if we already know that one is,\n      // don't hit the throttled _ensurePollIsScheduled function (which might\n      // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n      if (self._pollsScheduledButNotStarted === 0)\n        self._ensurePollIsScheduled();\n    }\n  );\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval =\n          self._cursorDescription.options.pollingIntervalMs ||\n          self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n          10 * 1000;\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    if (self._stopped)\n      return;\n\n    var first = false;\n    var oldResults = self._results;\n    if (!oldResults) {\n      first = true;\n      // XXX maybe use OrderedDict instead?\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (This yields.)\n    try {\n      var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof(e.code) === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(\n          new Error(\n            \"Exception while polling query \" +\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;\n      }\n\n      // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n      Meteor._debug(\"Exception while polling query \" +\n                    JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n      return;\n    }\n\n    // Run diffs.\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._multiplexer);\n    }\n\n    // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n    if (first)\n      self._multiplexer.ready();\n\n    // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n    self._results = newResults;\n\n    // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n    _.each(self._stopCallbacks, function (c) { c(); });\n    // Release any write fences that are waiting on us.\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});\n"]},"hash":"860b6701e2e57dc7c29af5278f7a2c9936c74e2e"}
