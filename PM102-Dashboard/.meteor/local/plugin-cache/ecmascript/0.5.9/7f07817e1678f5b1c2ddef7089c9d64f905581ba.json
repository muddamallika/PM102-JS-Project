{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/upsert_compatibility_test.js","filenameRelative":"/packages/mongo/upsert_compatibility_test.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/upsert_compatibility_test.js.map","sourceFileName":"/packages/mongo/upsert_compatibility_test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"upsert_compatibility_test"},"ignored":false,"code":"Tinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  coll.insert({ foo: 1 });\n  var result = coll.upsert({ foo: 1 }, { $set: { foo: 2 } });\n  var updated = coll.findOne({ foo: 2 });\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, { foo: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  var result = coll.upsert({ foo: 1 }, { $set: { bar: 2 } });\n  var inserted = coll.findOne({ foo: 1 });\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, { foo: 1, bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  coll.insert({ foo: 1, baz: 42 });\n  var result = coll.upsert({ foo: 1 }, { bar: 2 });\n  var updated = coll.findOne({ bar: 2 });\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, { bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  var result = coll.upsert({ foo: 1 }, { bar: 2 });\n  var inserted = coll.findOne({ bar: 2 });\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.isTrue(result.insertedId instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, { bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'STRING' });\n\n  coll.insert({ foo: 1 });\n  var result = coll.upsert({ foo: 1 }, { $set: { foo: 2 } });\n  var updated = coll.findOne({ foo: 2 });\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, { foo: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'STRING' });\n\n  var result = coll.upsert({ foo: 1 }, { $set: { bar: 2 } });\n  var inserted = coll.findOne({ foo: 1 });\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, { foo: 1, bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'STRING' });\n\n  coll.insert({ foo: 1, baz: 42 });\n  var result = coll.upsert({ foo: 1 }, { bar: 2 });\n  var updated = coll.findOne({ bar: 2 });\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, { bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'STRING' });\n\n  var result = coll.upsert({ foo: 1 }, { bar: 2 });\n  var inserted = coll.findOne({ bar: 2 });\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, { bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - MONGO passing id insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  var result = coll.upsert({ foo: 1 }, { _id: 'meu id' });\n  var inserted = coll.findOne({ _id: 'meu id' });\n\n  test.equal(result.insertedId, 'meu id');\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n\n  test.equal(EJSON.equals(inserted, { _id: 'meu id' }), true);\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/upsert_compatibility_test.js"],"names":["Tinytest","add","test","collName","Random","id","coll","Mongo","Collection","idGeneration","insert","foo","result","upsert","$set","updated","findOne","equal","insertedId","undefined","numberAffected","isTrue","_id","ObjectID","EJSON","equals","bar","inserted","baz"],"mappings":"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","file":"/packages/mongo/upsert_compatibility_test.js.map","sourcesContent":["Tinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  coll.insert({foo: 1});\n  var result = coll.upsert({foo: 1}, {$set: {foo:2}});\n  var updated = coll.findOne({foo: 2});\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {foo: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {$set: {bar:2}});\n  var inserted = coll.findOne({foo: 1});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId)\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {foo: 1, bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  coll.insert({foo: 1, baz: 42});\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var updated = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var inserted = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.isTrue(result.insertedId instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  coll.insert({foo: 1});\n  var result = coll.upsert({foo: 1}, {$set: {foo:2}});\n  var updated = coll.findOne({foo: 2});\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {foo: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  var result = coll.upsert({foo: 1}, {$set: {bar:2}});\n  var inserted = coll.findOne({foo: 1});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {foo: 1, bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  coll.insert({foo: 1, baz: 42});\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var updated = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var inserted = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - MONGO passing id insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {_id: 'meu id'});\n  var inserted = coll.findOne({_id: 'meu id'});\n\n  test.equal(result.insertedId, 'meu id');\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n\n  test.equal(EJSON.equals(inserted, {_id: 'meu id'}), true);\n});\n"]},"hash":"7f07817e1678f5b1c2ddef7089c9d64f905581ba"}
