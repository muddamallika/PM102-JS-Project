{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/observe_changes_tests.js","filenameRelative":"/packages/mongo/observe_changes_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/observe_changes_tests.js.map","sourceFileName":"/packages/mongo/observe_changes_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"observe_changes_tests"},"ignored":false,"code":"var makeCollection = function makeCollection() {\n  if (Meteor.isServer) return new Mongo.Collection(Random.id());else return new Mongo.Collection(null);\n};\n\n_.each([{ added: 'added', forceOrdered: true }, { added: 'added', forceOrdered: false }, { added: 'addedBefore', forceOrdered: false }], function (options) {\n  var added = options.added;\n  var forceOrdered = options.forceOrdered;\n  Tinytest.addAsync(\"observeChanges - single id - basics \" + added + (forceOrdered ? \" force ordered\" : \"\"), function (test, onComplete) {\n    var c = makeCollection();\n    var counter = 0;\n    var callbacks = [added, \"changed\", \"removed\"];\n    if (forceOrdered) callbacks.push(\"movedBefore\");\n    withCallbackLogger(test, callbacks, Meteor.isServer, function (logger) {\n      var barid = c.insert({ thing: \"stuff\" });\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n      var handle = c.find(fooid).observeChanges(logger);\n      if (added === 'added') logger.expectResult(added, [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);else logger.expectResult(added, [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }, null]);\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n      logger.expectResult(\"changed\", [fooid, { noodles: \"alright\", potatoes: \"tasty\", bacon: undefined }]);\n\n      c.remove(fooid);\n      logger.expectResult(\"removed\", [fooid]);\n\n      c.remove(barid);\n\n      c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n      logger.expectNoResult();\n      handle.stop();\n\n      var badCursor = c.find({}, { fields: { noodles: 1, _id: false } });\n      test.throws(function () {\n        badCursor.observeChanges(logger);\n      });\n\n      onComplete();\n    });\n  });\n});\n\nTinytest.addAsync(\"observeChanges - callback isolation\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handles = [];\n    var cursor = c.find();\n    handles.push(cursor.observeChanges(logger));\n    // fields-tampering observer\n    handles.push(cursor.observeChanges({\n      added: function () {\n        function added(id, fields) {\n          fields.apples = 'green';\n        }\n\n        return added;\n      }(),\n      changed: function () {\n        function changed(id, fields) {\n          fields.apples = 'green';\n        }\n\n        return changed;\n      }()\n    }));\n\n    var fooid = c.insert({ apples: \"ok\" });\n    logger.expectResult(\"added\", [fooid, { apples: \"ok\" }]);\n\n    c.update(fooid, { apples: \"not ok\" });\n    logger.expectResult(\"changed\", [fooid, { apples: \"not ok\" }]);\n\n    test.equal(c.findOne(fooid).apples, \"not ok\");\n\n    _.each(handles, function (handle) {\n      handle.stop();\n    });\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - single id - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    var handle = c.find(fooid).observeChanges(logger);\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    var barid = c.insert({ noodles: \"good\", bacon: \"weird\", apples: \"ok\" });\n    var handle = c.find().observeChanges(logger);\n    logger.expectResultUnordered([{ callback: \"added\",\n      args: [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }] }, { callback: \"added\",\n      args: [barid, { noodles: \"good\", bacon: \"weird\", apples: \"ok\" }] }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - basics\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find().observeChanges(logger);\n    var barid = c.insert({ thing: \"stuff\" });\n    logger.expectResultOnly(\"added\", [barid, { thing: \"stuff\" }]);\n\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", potatoes: \"tasty\", bacon: undefined }]);\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    c.remove(barid);\n    logger.expectResultOnly(\"removed\", [barid]);\n\n    fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({}, { fields: { noodles: 1, bacon: 1 } }).observeChanges(logger);\n      var barid = c.insert({ thing: \"stuff\" });\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n      logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n      logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", bacon: undefined }]);\n      c.update(fooid, { noodles: \"alright\", potatoes: \"meh\", apples: \"ok\" });\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({ noodles: \"good\", bacon: \"bad\" });\n\n      logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields + selector on excluded fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({ mac: 1, cheese: 2 }, { fields: { noodles: 1, bacon: 1, eggs: 1 } }).observeChanges(logger);\n      var barid = c.insert({ thing: \"stuff\", mac: 1, cheese: 2 });\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2 });\n\n      logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\", mac: 1, cheese: 2 });\n      logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", bacon: undefined }]);\n\n      // Doesn't get update event, since modifies only hidden fields\n      c.update(fooid, { noodles: \"alright\", potatoes: \"meh\", apples: \"ok\", mac: 1, cheese: 2 });\n      logger.expectNoResult();\n\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({ noodles: \"good\", bacon: \"bad\", mac: 1, cheese: 2 });\n\n      logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n}\n\nTinytest.addAsync(\"observeChanges - unordered - specific fields + modify on excluded fields\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ mac: 1, cheese: 2 }, { fields: { noodles: 1, bacon: 1, eggs: 1 } }).observeChanges(logger);\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2 });\n\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n    // Noodles go into shadow, mac appears as eggs\n    c.update(fooid, { $rename: { noodles: 'shadow', apples: 'eggs' } });\n    logger.expectResultOnly(\"changed\", [fooid, { eggs: \"ok\", noodles: undefined }]);\n\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - unset parent of observed field\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, ['added', 'changed', 'removed'], Meteor.isServer, function (logger) {\n    var handle = c.find({}, { fields: { 'type.name': 1 } }).observeChanges(logger);\n    var id = c.insert({ type: { name: 'foobar' } });\n    logger.expectResultOnly('added', [id, { type: { name: 'foobar' } }]);\n\n    c.update(id, { $unset: { type: 1 } });\n    test.equal(c.find().fetch(), [{ _id: id }]);\n    logger.expectResultOnly('changed', [id, { type: undefined }]);\n\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - enters and exits result set through change\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ noodles: \"good\" }).observeChanges(logger);\n    var barid = c.insert({ thing: \"stuff\" });\n\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResultOnly(\"removed\", [fooid]);\n    c.remove(fooid);\n    c.remove(barid);\n\n    fooid = c.insert({ noodles: \"ok\", bacon: \"bad\", apples: \"ok\" });\n    c.update(fooid, { noodles: \"good\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", potatoes: \"tasty\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  testAsyncMulti(\"observeChanges - tailable\", [function (test, expect) {\n    var self = this;\n    var collName = \"cap_\" + Random.id();\n    var coll = new Mongo.Collection(collName);\n    coll._createCappedCollection(1000000);\n    self.xs = [];\n    self.expects = [];\n    self.insert = function (fields) {\n      coll.insert(_.extend({ ts: new MongoInternals.MongoTimestamp(0, 0) }, fields));\n    };\n\n    // Tailable observe shouldn't show things that are in the initial\n    // contents.\n    self.insert({ x: 1 });\n    // Wait for one added call before going to the next test function.\n    self.expects.push(expect());\n\n    var cursor = coll.find({ y: { $ne: 7 } }, { tailable: true });\n    self.handle = cursor.observeChanges({\n      added: function () {\n        function added(id, fields) {\n          self.xs.push(fields.x);\n          test.notEqual(self.expects.length, 0);\n          self.expects.pop()();\n        }\n\n        return added;\n      }(),\n      changed: function () {\n        function changed() {\n          test.fail({ unexpected: \"changed\" });\n        }\n\n        return changed;\n      }(),\n      removed: function () {\n        function removed() {\n          test.fail({ unexpected: \"removed\" });\n        }\n\n        return removed;\n      }()\n    });\n\n    // Nothing happens synchronously.\n    test.equal(self.xs, []);\n  }, function (test, expect) {\n    var self = this;\n    // The cursors sees the first element.\n    test.equal(self.xs, [1]);\n    self.xs = [];\n\n    self.insert({ x: 2, y: 3 });\n    self.insert({ x: 3, y: 7 }); // filtered out by the query\n    self.insert({ x: 4 });\n    // Expect two added calls to happen.\n    self.expects = [expect(), expect()];\n  }, function (test, expect) {\n    var self = this;\n    test.equal(self.xs, [2, 4]);\n    self.xs = [];\n    self.handle.stop();\n\n    self.insert({ x: 5 });\n    // XXX This timeout isn't perfect but it's pretty hard to prove that an\n    // event WON'T happen without something like a write fence.\n    Meteor.setTimeout(expect(), 1000);\n  }, function (test, expect) {\n    var self = this;\n    test.equal(self.xs, []);\n  }]);\n}\n\ntestAsyncMulti(\"observeChanges - bad query\", [function (test, expect) {\n  var c = makeCollection();\n  var observeThrows = function observeThrows() {\n    test.throws(function () {\n      c.find({ __id: { $in: null } }).observeChanges({\n        added: function () {\n          function added() {\n            test.fail(\"added shouldn't be called\");\n          }\n\n          return added;\n        }()\n      });\n    }, '$in needs an array');\n  };\n\n  if (Meteor.isClient) {\n    observeThrows();\n    return;\n  }\n\n  // Test that if two copies of the same bad observeChanges run in parallel\n  // and are de-duped, both observeChanges calls will throw.\n  var Fiber = Npm.require('fibers');\n  var Future = Npm.require('fibers/future');\n  var f1 = new Future();\n  var f2 = new Future();\n  Fiber(function () {\n    // The observeChanges call in here will yield when we talk to mongod,\n    // which will allow the second Fiber to start and observe a duplicate\n    // query.\n    observeThrows();\n    f1['return']();\n  }).run();\n  Fiber(function () {\n    test.isFalse(f1.isResolved()); // first observe hasn't thrown yet\n    observeThrows();\n    f2['return']();\n  }).run();\n  f1.wait();\n  f2.wait();\n}]);","ast":null,"map":{"version":3,"sources":["/packages/mongo/observe_changes_tests.js"],"names":["makeCollection","Meteor","isServer","Mongo","Collection","Random","id","_","each","added","forceOrdered","options","Tinytest","addAsync","test","onComplete","c","counter","callbacks","push","withCallbackLogger","logger","barid","insert","thing","fooid","noodles","bacon","apples","handle","find","observeChanges","expectResult","update","potatoes","undefined","remove","expectNoResult","stop","badCursor","fields","_id","throws","handles","cursor","changed","equal","findOne","expectResultUnordered","callback","args","expectResultOnly","mac","cheese","eggs","$rename","type","name","$unset","fetch","testAsyncMulti","expect","self","collName","coll","_createCappedCollection","xs","expects","extend","ts","MongoInternals","MongoTimestamp","x","y","$ne","tailable","notEqual","length","pop","fail","unexpected","removed","setTimeout","observeThrows","__id","$in","isClient","Fiber","Npm","require","Future","f1","f2","run","isFalse","isResolved","wait"],"mappings":"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","file":"/packages/mongo/observe_changes_tests.js.map","sourcesContent":["var makeCollection = function () {\n  if (Meteor.isServer)\n    return new Mongo.Collection(Random.id());\n  else\n    return new Mongo.Collection(null);\n};\n\n_.each ([{added:'added', forceOrdered: true},\n         {added:'added', forceOrdered: false},\n         {added: 'addedBefore', forceOrdered: false}], function (options) {\n           var added = options.added;\n           var forceOrdered = options.forceOrdered;\n  Tinytest.addAsync(\"observeChanges - single id - basics \"\n                    + added\n                    + (forceOrdered ? \" force ordered\" : \"\"),\n                    function (test, onComplete) {\n    var c = makeCollection();\n    var counter = 0;\n    var callbacks = [added, \"changed\", \"removed\"];\n    if (forceOrdered)\n      callbacks.push(\"movedBefore\");\n    withCallbackLogger(test,\n                       callbacks,\n                       Meteor.isServer,\n                       function (logger) {\n    var barid = c.insert({thing: \"stuff\"});\n    var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n    var handle = c.find(fooid).observeChanges(logger);\n    if (added === 'added')\n      logger.expectResult(added, [fooid, {noodles: \"good\", bacon: \"bad\",apples: \"ok\"}]);\n    else\n      logger.expectResult(added,\n                          [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}, null]);\n    c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n    logger.expectResult(\"changed\",\n                        [fooid, {noodles: \"alright\", potatoes: \"tasty\", bacon: undefined}]);\n\n    c.remove(fooid);\n    logger.expectResult(\"removed\", [fooid]);\n\n    c.remove(barid);\n\n    c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n    logger.expectNoResult();\n    handle.stop();\n\n    var badCursor = c.find({}, {fields: {noodles: 1, _id: false}});\n    test.throws(function () {\n      badCursor.observeChanges(logger);\n    });\n\n    onComplete();\n    });\n  });\n});\n\nTinytest.addAsync(\"observeChanges - callback isolation\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handles = [];\n    var cursor = c.find();\n    handles.push(cursor.observeChanges(logger));\n    // fields-tampering observer\n    handles.push(cursor.observeChanges({\n      added: function(id, fields) {\n        fields.apples = 'green';\n      },\n      changed: function(id, fields) {\n        fields.apples = 'green';\n      },\n    }));\n\n    var fooid = c.insert({apples: \"ok\"});\n    logger.expectResult(\"added\", [fooid, {apples: \"ok\"}]);\n\n    c.update(fooid, {apples: \"not ok\"})\n    logger.expectResult(\"changed\", [fooid, {apples: \"not ok\"}]);\n\n    test.equal(c.findOne(fooid).apples, \"not ok\");\n\n    _.each(handles, function(handle) { handle.stop(); });\n    onComplete();\n  });\n\n});\n\nTinytest.addAsync(\"observeChanges - single id - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  var handle = c.find(fooid).observeChanges(logger);\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\n\n\nTinytest.addAsync(\"observeChanges - unordered - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  var barid = c.insert({noodles: \"good\", bacon: \"weird\", apples: \"ok\"});\n  var handle = c.find().observeChanges(logger);\n  logger.expectResultUnordered([\n    {callback: \"added\",\n     args: [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]},\n    {callback: \"added\",\n     args: [barid, {noodles: \"good\", bacon: \"weird\", apples: \"ok\"}]}\n  ]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - basics\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var handle = c.find().observeChanges(logger);\n  var barid = c.insert({thing: \"stuff\"});\n  logger.expectResultOnly(\"added\", [barid, {thing: \"stuff\"}]);\n\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n  logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResultOnly(\"changed\",\n                      [fooid, {noodles: \"alright\", potatoes: \"tasty\", bacon: undefined}]);\n  c.remove(fooid);\n  logger.expectResultOnly(\"removed\", [fooid]);\n  c.remove(barid);\n  logger.expectResultOnly(\"removed\", [barid]);\n\n  fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({}, {fields:{noodles: 1, bacon: 1}}).observeChanges(logger);\n      var barid = c.insert({thing: \"stuff\"});\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n      logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n      c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n      logger.expectResultOnly(\"changed\",\n                              [fooid, {noodles: \"alright\", bacon: undefined}]);\n      c.update(fooid, {noodles: \"alright\", potatoes: \"meh\", apples: \"ok\"});\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({noodles: \"good\", bacon: \"bad\"});\n\n      logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields + selector on excluded fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({ mac: 1, cheese: 2 },\n                          {fields:{noodles: 1, bacon: 1, eggs: 1}}).observeChanges(logger);\n      var barid = c.insert({thing: \"stuff\", mac: 1, cheese: 2});\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2});\n\n      logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n      c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\", mac: 1, cheese: 2});\n      logger.expectResultOnly(\"changed\",\n                              [fooid, {noodles: \"alright\", bacon: undefined}]);\n\n      // Doesn't get update event, since modifies only hidden fields\n      c.update(fooid, {noodles: \"alright\", potatoes: \"meh\", apples: \"ok\", mac: 1, cheese: 2});\n      logger.expectNoResult();\n\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({noodles: \"good\", bacon: \"bad\", mac: 1, cheese: 2});\n\n      logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n}\n\nTinytest.addAsync(\"observeChanges - unordered - specific fields + modify on excluded fields\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ mac: 1, cheese: 2 },\n                        {fields:{noodles: 1, bacon: 1, eggs: 1}}).observeChanges(logger);\n    var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2});\n\n    logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n\n    // Noodles go into shadow, mac appears as eggs\n    c.update(fooid, {$rename: { noodles: 'shadow', apples: 'eggs' }});\n    logger.expectResultOnly(\"changed\",\n                            [fooid, {eggs:\"ok\", noodles: undefined}]);\n\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\n  \"observeChanges - unordered - unset parent of observed field\",\n  function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(\n      test, ['added', 'changed', 'removed'], Meteor.isServer,\n      function (logger) {\n        var handle = c.find({}, {fields: {'type.name': 1}}).observeChanges(logger);\n        var id = c.insert({ type: { name: 'foobar' } });\n        logger.expectResultOnly('added', [id, { type: { name: 'foobar' } }]);\n\n        c.update(id, { $unset: { type: 1 } });\n        test.equal(c.find().fetch(), [{ _id: id }]);\n        logger.expectResultOnly('changed', [id, { type: undefined }]);\n\n        handle.stop();\n        onComplete();\n      }\n    );\n  }\n);\n\n\n\nTinytest.addAsync(\"observeChanges - unordered - enters and exits result set through change\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var handle = c.find({noodles: \"good\"}).observeChanges(logger);\n  var barid = c.insert({thing: \"stuff\"});\n\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResultOnly(\"removed\",\n                      [fooid]);\n  c.remove(fooid);\n  c.remove(barid);\n\n  fooid = c.insert({noodles: \"ok\", bacon: \"bad\", apples: \"ok\"});\n  c.update(fooid, {noodles: \"good\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", potatoes: \"tasty\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\n\nif (Meteor.isServer) {\n  testAsyncMulti(\"observeChanges - tailable\", [\n    function (test, expect) {\n      var self = this;\n      var collName = \"cap_\" + Random.id();\n      var coll = new Mongo.Collection(collName);\n      coll._createCappedCollection(1000000);\n      self.xs = [];\n      self.expects = [];\n      self.insert = function (fields) {\n        coll.insert(_.extend({ts: new MongoInternals.MongoTimestamp(0, 0)},\n                             fields));\n      };\n\n      // Tailable observe shouldn't show things that are in the initial\n      // contents.\n      self.insert({x: 1});\n      // Wait for one added call before going to the next test function.\n      self.expects.push(expect());\n\n      var cursor = coll.find({y: {$ne: 7}}, {tailable: true});\n      self.handle = cursor.observeChanges({\n        added: function (id, fields) {\n          self.xs.push(fields.x);\n          test.notEqual(self.expects.length, 0);\n          self.expects.pop()();\n        },\n        changed: function () {\n          test.fail({unexpected: \"changed\"});\n        },\n        removed: function () {\n          test.fail({unexpected: \"removed\"});\n        }\n      });\n\n      // Nothing happens synchronously.\n      test.equal(self.xs, []);\n    },\n    function (test, expect) {\n      var self = this;\n      // The cursors sees the first element.\n      test.equal(self.xs, [1]);\n      self.xs = [];\n\n      self.insert({x: 2, y: 3});\n      self.insert({x: 3, y: 7});  // filtered out by the query\n      self.insert({x: 4});\n      // Expect two added calls to happen.\n      self.expects = [expect(), expect()];\n    },\n    function (test, expect) {\n      var self = this;\n      test.equal(self.xs, [2, 4]);\n      self.xs = [];\n      self.handle.stop();\n\n      self.insert({x: 5});\n      // XXX This timeout isn't perfect but it's pretty hard to prove that an\n      // event WON'T happen without something like a write fence.\n      Meteor.setTimeout(expect(), 1000);\n    },\n    function (test, expect) {\n      var self = this;\n      test.equal(self.xs, []);\n    }\n  ]);\n}\n\n\ntestAsyncMulti(\"observeChanges - bad query\", [\n  function (test, expect) {\n    var c = makeCollection();\n    var observeThrows = function () {\n      test.throws(function () {\n        c.find({__id: {$in: null}}).observeChanges({\n          added: function () {\n            test.fail(\"added shouldn't be called\");\n          }\n        });\n      }, '$in needs an array');\n    };\n\n    if (Meteor.isClient) {\n      observeThrows();\n      return;\n    }\n\n    // Test that if two copies of the same bad observeChanges run in parallel\n    // and are de-duped, both observeChanges calls will throw.\n    var Fiber = Npm.require('fibers');\n    var Future = Npm.require('fibers/future');\n    var f1 = new Future;\n    var f2 = new Future;\n    Fiber(function () {\n      // The observeChanges call in here will yield when we talk to mongod,\n      // which will allow the second Fiber to start and observe a duplicate\n      // query.\n      observeThrows();\n      f1['return']();\n    }).run();\n    Fiber(function () {\n      test.isFalse(f1.isResolved());  // first observe hasn't thrown yet\n      observeThrows();\n      f2['return']();\n    }).run();\n    f1.wait();\n    f2.wait();\n  }\n]);\n"]},"hash":"8e7683a55346e5e404be26d2f880f305f76ee243"}
