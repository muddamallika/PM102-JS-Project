{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ddp-server/crossbar.js","filenameRelative":"/packages/ddp-server/crossbar.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ddp-server/crossbar.js.map","sourceFileName":"/packages/ddp-server/crossbar.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"crossbar"},"ignored":false,"code":"// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function () {\n    function _collectionForMessage(msg) {\n      var self = this;\n      if (!_.has(msg, 'collection')) {\n        return '';\n      } else if (typeof msg.collection === 'string') {\n        if (msg.collection === '') throw Error(\"Message has empty collection!\");\n        return msg.collection;\n      } else {\n        throw Error(\"Message has non-string collection!\");\n      }\n    }\n\n    return _collectionForMessage;\n  }(),\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function () {\n    function listen(trigger, callback) {\n      var self = this;\n      var id = self.nextId++;\n\n      var collection = self._collectionForMessage(trigger);\n      var record = { trigger: EJSON.clone(trigger), callback: callback };\n      if (!_.has(self.listenersByCollection, collection)) {\n        self.listenersByCollection[collection] = {};\n      }\n      self.listenersByCollection[collection][id] = record;\n\n      if (self.factName && Package.facts) {\n        Package.facts.Facts.incrementServerFact(self.factPackage, self.factName, 1);\n      }\n\n      return {\n        stop: function () {\n          function stop() {\n            if (self.factName && Package.facts) {\n              Package.facts.Facts.incrementServerFact(self.factPackage, self.factName, -1);\n            }\n            delete self.listenersByCollection[collection][id];\n            if (_.isEmpty(self.listenersByCollection[collection])) {\n              delete self.listenersByCollection[collection];\n            }\n          }\n\n          return stop;\n        }()\n      };\n    }\n\n    return listen;\n  }(),\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function () {\n    function fire(notification) {\n      var self = this;\n\n      var collection = self._collectionForMessage(notification);\n\n      if (!_.has(self.listenersByCollection, collection)) {\n        return;\n      }\n\n      var listenersForCollection = self.listenersByCollection[collection];\n      var callbackIds = [];\n      _.each(listenersForCollection, function (l, id) {\n        if (self._matches(notification, l.trigger)) {\n          callbackIds.push(id);\n        }\n      });\n\n      // Listener callbacks can yield, so we need to first find all the ones that\n      // match in a single iteration over self.listenersByCollection (which can't\n      // be mutated during this iteration), and then invoke the matching\n      // callbacks, checking before each call to ensure they haven't stopped.\n      // Note that we don't have to check that\n      // self.listenersByCollection[collection] still === listenersForCollection,\n      // because the only way that stops being true is if listenersForCollection\n      // first gets reduced down to the empty object (and then never gets\n      // increased again).\n      _.each(callbackIds, function (id) {\n        if (_.has(listenersForCollection, id)) {\n          listenersForCollection[id].callback(notification);\n        }\n      });\n    }\n\n    return fire;\n  }(),\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function () {\n    function _matches(notification, trigger) {\n      // Most notifications that use the crossbar have a string `collection` and\n      // maybe an `id` that is a string or ObjectID. We're already dividing up\n      // triggers by collection, but let's fast-track \"nope, different ID\" (and\n      // avoid the overly generic EJSON.equals). This makes a noticeable\n      // performance difference; see https://github.com/meteor/meteor/pull/3697\n      if (typeof notification.id === 'string' && typeof trigger.id === 'string' && notification.id !== trigger.id) {\n        return false;\n      }\n      if (notification.id instanceof MongoID.ObjectID && trigger.id instanceof MongoID.ObjectID && !notification.id.equals(trigger.id)) {\n        return false;\n      }\n\n      return _.all(trigger, function (triggerValue, key) {\n        return !_.has(notification, key) || EJSON.equals(triggerValue, notification[key]);\n      });\n    }\n\n    return _matches;\n  }()\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});","ast":null,"map":{"version":3,"sources":["/packages/ddp-server/crossbar.js"],"names":["DDPServer","_Crossbar","options","self","nextId","listenersByCollection","factPackage","factName","_","extend","prototype","_collectionForMessage","msg","has","collection","Error","listen","trigger","callback","id","record","EJSON","clone","Package","facts","Facts","incrementServerFact","stop","isEmpty","fire","notification","listenersForCollection","callbackIds","each","l","_matches","push","MongoID","ObjectID","equals","all","triggerValue","key","_InvalidationCrossbar"],"mappings":"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","file":"/packages/ddp-server/crossbar.js.map","sourcesContent":["// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n    }\n    self.listenersByCollection[collection][id] = record;\n\n    if (self.factName && Package.facts) {\n      Package.facts.Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package.facts) {\n          Package.facts.Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        if (_.isEmpty(self.listenersByCollection[collection])) {\n          delete self.listenersByCollection[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n"]},"hash":"b42e52008fb4fdcf45805dfaaace3f0a89339f34"}
