{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mdg:validation-error/validation-error.js","filenameRelative":"/packages/mdg:validation-error/validation-error.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mdg:validation-error/validation-error.js.map","sourceFileName":"/packages/mdg:validation-error/validation-error.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"validation-error"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});\n\n\n/* global ValidationError:true */\n/* global SimpleSchema */\n\n// This is exactly what comes out of SS.\nvar errorSchema = new SimpleSchema({\n  name: { type: String },\n  type: { type: String },\n  details: { type: Object, blackbox: true, optional: true }\n});\n\nvar errorsSchema = new SimpleSchema({\n  errors: { type: Array },\n  'errors.$': { type: errorSchema }\n});\n\nValidationError = function (_Meteor$Error) {\n  _inherits(_class, _Meteor$Error);\n\n  function _class(errors) {\n    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Validation Failed';\n\n    _classCallCheck(this, _class);\n\n    errorsSchema.validate({ errors: errors });\n\n    var _this = _possibleConstructorReturn(this, _Meteor$Error.call(this, ValidationError.ERROR_CODE, message, errors));\n\n    _this.errors = errors;\n    return _this;\n  }\n\n  return _class;\n}(Meteor.Error);\n\n// If people use this to check for the error code, we can change it\n// in future versions\nValidationError.ERROR_CODE = 'validation-error';","ast":null,"map":{"version":3,"sources":["/packages/mdg:validation-error/validation-error.js"],"names":["errorSchema","SimpleSchema","name","type","String","details","Object","blackbox","optional","errorsSchema","errors","Array","ValidationError","message","validate","ERROR_CODE","Meteor","Error"],"mappings":";;;AAAA;AACA;;AAEA;AACA,IAAMA,cAAc,IAAIC,YAAJ,CAAiB;AACnCC,QAAM,EAACC,MAAMC,MAAP,EAD6B;AAEnCD,QAAM,EAACA,MAAMC,MAAP,EAF6B;AAGnCC,WAAS,EAACF,MAAMG,MAAP,EAAeC,UAAU,IAAzB,EAA+BC,UAAU,IAAzC;AAH0B,CAAjB,CAApB;;AAMA,IAAMC,eAAe,IAAIR,YAAJ,CAAiB;AACpCS,UAAQ,EAACP,MAAMQ,KAAP,EAD4B;AAEpC,cAAY,EAACR,MAAMH,WAAP;AAFwB,CAAjB,CAArB;;AAKAY;AAAA;;AACE,kBAAYF,MAAZ,EAAmD;AAAA,QAA/BG,OAA+B,uEAArB,mBAAqB;;AAAA;;AACjDJ,iBAAaK,QAAb,CAAsB,EAACJ,cAAD,EAAtB;;AADiD,iDAGjD,yBAAME,gBAAgBG,UAAtB,EAAkCF,OAAlC,EAA2CH,MAA3C,CAHiD;;AAKjD,UAAKA,MAAL,GAAcA,MAAd;AALiD;AAMlD;;AAPH;AAAA,EAAgCM,OAAOC,KAAvC;;AAUA;AACA;AACAL,gBAAgBG,UAAhB,GAA6B,kBAA7B","file":"/packages/mdg:validation-error/validation-error.js.map","sourcesContent":["/* global ValidationError:true */\n/* global SimpleSchema */\n\n// This is exactly what comes out of SS.\nconst errorSchema = new SimpleSchema({\n  name: {type: String},\n  type: {type: String},\n  details: {type: Object, blackbox: true, optional: true}\n});\n\nconst errorsSchema = new SimpleSchema({\n  errors: {type: Array},\n  'errors.$': {type: errorSchema}\n});\n\nValidationError = class extends Meteor.Error {\n  constructor(errors, message = 'Validation Failed') {\n    errorsSchema.validate({errors});\n\n    super(ValidationError.ERROR_CODE, message, errors);\n\n    this.errors = errors;\n  }\n};\n\n// If people use this to check for the error code, we can change it\n// in future versions\nValidationError.ERROR_CODE = 'validation-error';\n"]},"hash":"9531e624eaeb43c3cc49c9cf7ab660d180314f94"}
