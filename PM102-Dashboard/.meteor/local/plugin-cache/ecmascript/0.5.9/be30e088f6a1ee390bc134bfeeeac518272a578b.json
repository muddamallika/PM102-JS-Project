{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/observe_multiplex.js","filenameRelative":"/packages/mongo/observe_multiplex.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/observe_multiplex.js.map","sourceFileName":"/packages/mongo/observe_multiplex.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"observe_multiplex"},"ignored":false,"code":"var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function ObserveMultiplexer(options) {\n  var self = this;\n\n  if (!options || !_.has(options, 'ordered')) throw Error(\"must specified ordered\");\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", 1);\n\n  self._ordered = options.ordered;\n  self._onStop = options.onStop || function () {};\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future();\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered });\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function () /* ... */{\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function () {\n    function addHandleAndSendInitialAdds(handle) {\n      var self = this;\n\n      // Check this before calling runTask (even though runTask does the same\n      // check) so that we don't leak an ObserveMultiplexer on error by\n      // incrementing _addHandleTasksScheduledButNotPerformed and never\n      // decrementing it.\n      if (!self._queue.safeToRunTask()) throw new Error(\"Can't call observeChanges from an observe callback on the same query\");\n      ++self._addHandleTasksScheduledButNotPerformed;\n\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", 1);\n\n      self._queue.runTask(function () {\n        self._handles[handle._id] = handle;\n        // Send out whatever adds we have so far (whether or not we the\n        // multiplexer is ready).\n        self._sendAdds(handle);\n        --self._addHandleTasksScheduledButNotPerformed;\n      });\n      // *outside* the task, since otherwise we'd deadlock\n      self._readyFuture.wait();\n    }\n\n    return addHandleAndSendInitialAdds;\n  }(),\n\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function () {\n    function removeHandle(id) {\n      var self = this;\n\n      // This should not be possible: you can only call removeHandle by having\n      // access to the ObserveHandle, which isn't returned to user code until the\n      // multiplex is ready.\n      if (!self._ready()) throw new Error(\"Can't remove handles until the multiplex is ready\");\n\n      delete self._handles[id];\n\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", -1);\n\n      if (_.isEmpty(self._handles) && self._addHandleTasksScheduledButNotPerformed === 0) {\n        self._stop();\n      }\n    }\n\n    return removeHandle;\n  }(),\n  _stop: function () {\n    function _stop(options) {\n      var self = this;\n      options = options || {};\n\n      // It shouldn't be possible for us to stop when all our handles still\n      // haven't been returned from observeChanges!\n      if (!self._ready() && !options.fromQueryError) throw Error(\"surprising _stop: not ready\");\n\n      // Call stop callback (which kills the underlying process which sends us\n      // callbacks and removes us from the connection's dictionary).\n      self._onStop();\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", -1);\n\n      // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n      // callback should make our connection forget about us).\n      self._handles = null;\n    }\n\n    return _stop;\n  }(),\n\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    function ready() {\n      var self = this;\n      self._queue.queueTask(function () {\n        if (self._ready()) throw Error(\"can't make ObserveMultiplex ready twice!\");\n        self._readyFuture['return']();\n      });\n    }\n\n    return ready;\n  }(),\n\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function () {\n    function queryError(err) {\n      var self = this;\n      self._queue.runTask(function () {\n        if (self._ready()) throw Error(\"can't claim query has an error after it worked!\");\n        self._stop({ fromQueryError: true });\n        self._readyFuture['throw'](err);\n      });\n    }\n\n    return queryError;\n  }(),\n\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function () {\n    function onFlush(cb) {\n      var self = this;\n      self._queue.queueTask(function () {\n        if (!self._ready()) throw Error(\"only call onFlush on a multiplexer that will be ready\");\n        cb();\n      });\n    }\n\n    return onFlush;\n  }(),\n  callbackNames: function () {\n    function callbackNames() {\n      var self = this;\n      if (self._ordered) return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];else return [\"added\", \"changed\", \"removed\"];\n    }\n\n    return callbackNames;\n  }(),\n  _ready: function () {\n    function _ready() {\n      return this._readyFuture.isResolved();\n    }\n\n    return _ready;\n  }(),\n  _applyCallback: function () {\n    function _applyCallback(callbackName, args) {\n      var self = this;\n      self._queue.queueTask(function () {\n        // If we stopped in the meantime, do nothing.\n        if (!self._handles) return;\n\n        // First, apply the change to the cache.\n        // XXX We could make applyChange callbacks promise not to hang on to any\n        // state from their arguments (assuming that their supplied callbacks\n        // don't) and skip this clone. Currently 'changed' hangs on to state\n        // though.\n        self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));\n\n        // If we haven't finished the initial adds, then we should only be getting\n        // adds.\n        if (!self._ready() && callbackName !== 'added' && callbackName !== 'addedBefore') {\n          throw new Error(\"Got \" + callbackName + \" during initial adds\");\n        }\n\n        // Now multiplex the callbacks out to all observe handles. It's OK if\n        // these calls yield; since we're inside a task, no other use of our queue\n        // can continue until these are done. (But we do have to be careful to not\n        // use a handle that got removed, because removeHandle does not use the\n        // queue; thus, we iterate over an array of keys that we control.)\n        _.each(_.keys(self._handles), function (handleId) {\n          var handle = self._handles && self._handles[handleId];\n          if (!handle) return;\n          var callback = handle['_' + callbackName];\n          // clone arguments so that callbacks can mutate their arguments\n          callback && callback.apply(null, EJSON.clone(args));\n        });\n      });\n    }\n\n    return _applyCallback;\n  }(),\n\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function () {\n    function _sendAdds(handle) {\n      var self = this;\n      if (self._queue.safeToRunTask()) throw Error(\"_sendAdds may only be called from within a task!\");\n      var add = self._ordered ? handle._addedBefore : handle._added;\n      if (!add) return;\n      // note: docs may be an _IdMap or an OrderedDict\n      self._cache.docs.forEach(function (doc, id) {\n        if (!_.has(self._handles, handle._id)) throw Error(\"handle got removed before sending initial adds!\");\n        var fields = EJSON.clone(doc);\n        delete fields._id;\n        if (self._ordered) add(id, fields, null); // we're going in order, so add at end\n        else add(id, fields);\n      });\n    }\n\n    return _sendAdds;\n  }()\n});\n\nvar nextObserveHandleId = 1;\nObserveHandle = function ObserveHandle(multiplexer, callbacks) {\n  var self = this;\n  // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n  self._multiplexer = multiplexer;\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped) return;\n  self._stopped = true;\n  self._multiplexer.removeHandle(self._id);\n};","ast":null,"map":{"version":3,"sources":["/packages/mongo/observe_multiplex.js"],"names":["Future","Npm","require","ObserveMultiplexer","options","self","_","has","Error","Package","facts","Facts","incrementServerFact","_ordered","ordered","_onStop","onStop","_queue","Meteor","_SynchronousQueue","_handles","_readyFuture","_cache","LocalCollection","_CachingChangeObserver","_addHandleTasksScheduledButNotPerformed","each","callbackNames","callbackName","_applyCallback","toArray","arguments","extend","prototype","addHandleAndSendInitialAdds","handle","safeToRunTask","runTask","_id","_sendAdds","wait","removeHandle","id","_ready","isEmpty","_stop","fromQueryError","ready","queueTask","queryError","err","onFlush","cb","isResolved","args","applyChange","apply","EJSON","clone","keys","handleId","callback","add","_addedBefore","_added","docs","forEach","doc","fields","nextObserveHandleId","ObserveHandle","multiplexer","callbacks","_multiplexer","name","added","before","_stopped","stop"],"mappings":"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","file":"/packages/mongo/observe_multiplex.js.map","sourcesContent":["var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function (options) {\n  var self = this;\n\n  if (!options || !_.has(options, 'ordered'))\n    throw Error(\"must specified ordered\");\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-multiplexers\", 1);\n\n  self._ordered = options.ordered;\n  self._onStop = options.onStop || function () {};\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future;\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered});\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function (/* ... */) {\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function (handle) {\n    var self = this;\n\n    // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak an ObserveMultiplexer on error by\n    // incrementing _addHandleTasksScheduledButNotPerformed and never\n    // decrementing it.\n    if (!self._queue.safeToRunTask())\n      throw new Error(\n        \"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", 1);\n\n    self._queue.runTask(function () {\n      self._handles[handle._id] = handle;\n      // Send out whatever adds we have so far (whether or not we the\n      // multiplexer is ready).\n      self._sendAdds(handle);\n      --self._addHandleTasksScheduledButNotPerformed;\n    });\n    // *outside* the task, since otherwise we'd deadlock\n    self._readyFuture.wait();\n  },\n\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function (id) {\n    var self = this;\n\n    // This should not be possible: you can only call removeHandle by having\n    // access to the ObserveHandle, which isn't returned to user code until the\n    // multiplex is ready.\n    if (!self._ready())\n      throw new Error(\"Can't remove handles until the multiplex is ready\");\n\n    delete self._handles[id];\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", -1);\n\n    if (_.isEmpty(self._handles) &&\n        self._addHandleTasksScheduledButNotPerformed === 0) {\n      self._stop();\n    }\n  },\n  _stop: function (options) {\n    var self = this;\n    options = options || {};\n\n    // It shouldn't be possible for us to stop when all our handles still\n    // haven't been returned from observeChanges!\n    if (! self._ready() && ! options.fromQueryError)\n      throw Error(\"surprising _stop: not ready\");\n\n    // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).\n    self._onStop();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-multiplexers\", -1);\n\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).\n    self._handles = null;\n  },\n\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (self._ready())\n        throw Error(\"can't make ObserveMultiplex ready twice!\");\n      self._readyFuture.return();\n    });\n  },\n\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function (err) {\n    var self = this;\n    self._queue.runTask(function () {\n      if (self._ready())\n        throw Error(\"can't claim query has an error after it worked!\");\n      self._stop({fromQueryError: true});\n      self._readyFuture.throw(err);\n    });\n  },\n\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function (cb) {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (!self._ready())\n        throw Error(\"only call onFlush on a multiplexer that will be ready\");\n      cb();\n    });\n  },\n  callbackNames: function () {\n    var self = this;\n    if (self._ordered)\n      return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];\n    else\n      return [\"added\", \"changed\", \"removed\"];\n  },\n  _ready: function () {\n    return this._readyFuture.isResolved();\n  },\n  _applyCallback: function (callbackName, args) {\n    var self = this;\n    self._queue.queueTask(function () {\n      // If we stopped in the meantime, do nothing.\n      if (!self._handles)\n        return;\n\n      // First, apply the change to the cache.\n      // XXX We could make applyChange callbacks promise not to hang on to any\n      // state from their arguments (assuming that their supplied callbacks\n      // don't) and skip this clone. Currently 'changed' hangs on to state\n      // though.\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));\n\n      // If we haven't finished the initial adds, then we should only be getting\n      // adds.\n      if (!self._ready() &&\n          (callbackName !== 'added' && callbackName !== 'addedBefore')) {\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");\n      }\n\n      // Now multiplex the callbacks out to all observe handles. It's OK if\n      // these calls yield; since we're inside a task, no other use of our queue\n      // can continue until these are done. (But we do have to be careful to not\n      // use a handle that got removed, because removeHandle does not use the\n      // queue; thus, we iterate over an array of keys that we control.)\n      _.each(_.keys(self._handles), function (handleId) {\n        var handle = self._handles && self._handles[handleId];\n        if (!handle)\n          return;\n        var callback = handle['_' + callbackName];\n        // clone arguments so that callbacks can mutate their arguments\n        callback && callback.apply(null, EJSON.clone(args));\n      });\n    });\n  },\n\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function (handle) {\n    var self = this;\n    if (self._queue.safeToRunTask())\n      throw Error(\"_sendAdds may only be called from within a task!\");\n    var add = self._ordered ? handle._addedBefore : handle._added;\n    if (!add)\n      return;\n    // note: docs may be an _IdMap or an OrderedDict\n    self._cache.docs.forEach(function (doc, id) {\n      if (!_.has(self._handles, handle._id))\n        throw Error(\"handle got removed before sending initial adds!\");\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (self._ordered)\n        add(id, fields, null); // we're going in order, so add at end\n      else\n        add(id, fields);\n    });\n  }\n});\n\n\nvar nextObserveHandleId = 1;\nObserveHandle = function (multiplexer, callbacks) {\n  var self = this;\n  // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n  self._multiplexer = multiplexer;\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped)\n    return;\n  self._stopped = true;\n  self._multiplexer.removeHandle(self._id);\n};\n"]},"hash":"be30e088f6a1ee390bc134bfeeeac518272a578b"}
