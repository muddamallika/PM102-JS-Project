{"metadata":{"usedHelpers":["typeof"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/mongo_driver.js","filenameRelative":"/packages/mongo/mongo_driver.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/mongo_driver.js.map","sourceFileName":"/packages/mongo/mongo_driver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"mongo_driver"},"ignored":false,"code":"var _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});\n/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function replaceNames(filter, thing) {\n  if ((typeof thing === 'undefined' ? 'undefined' : _typeof(thing)) === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function makeMongoLegal(name) {\n  return \"EJSON\" + name;\n};\nvar unmakeMongoLegal = function unmakeMongoLegal(name) {\n  return name.substr(5);\n};\n\nvar replaceMongoAtomWithMeteor = function replaceMongoAtomWithMeteor(document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function replaceMeteorAtomWithMongo(document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function replaceTypes(document, atomTransformer) {\n  if ((typeof document === 'undefined' ? 'undefined' : _typeof(document)) !== 'object' || document === null) return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined) return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document) ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\nMongoConnection = function MongoConnection(url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook();\n\n  var mongoOptions = _.extend({\n    db: { safe: true },\n    // http://mongodb.github.io/node-mongodb-native/2.2/api/Server.html\n    server: {\n      // Reconnect on error.\n      autoReconnect: true,\n      // Try to reconnect forever, instead of stopping after 30 tries (the\n      // default), with each attempt separated by 1000ms.\n      reconnectTries: Infinity\n    },\n    replSet: {}\n  }, Mongo._connectionOptions);\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!/[\\?&]native_?[pP]arser=/.test(url)) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // Internally the oplog connections specify their own poolSize\n  // which we don't want to overwrite with any user defined value\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n  var connectFuture = new Future();\n  MongoDB.connect(url, mongoOptions, Meteor.bindEnvironment(function (err, db) {\n    if (err) {\n      throw err;\n    }\n\n    // First, figure out what the current primary is, if any.\n    if (db.serverConfig.isMasterDoc) {\n      self._primary = db.serverConfig.isMasterDoc.primary;\n    }\n\n    db.serverConfig.on('joined', Meteor.bindEnvironment(function (kind, doc) {\n      if (kind === 'primary') {\n        if (doc.primary !== self._primary) {\n          self._primary = doc.primary;\n          self._onFailoverHook.each(function (callback) {\n            callback();\n            return true;\n          });\n        }\n      } else if (doc.me === self._primary) {\n        // The thing we thought was primary is now something other than\n        // primary.  Forget that we thought it was primary.  (This means\n        // that if a server stops being primary and then starts being\n        // primary again without another server becoming primary in the\n        // middle, we'll correctly count it as a failover.)\n        self._primary = null;\n      }\n    }));\n\n    // Allow the constructor to return.\n    connectFuture['return'](db);\n  }, connectFuture.resolver() // onException\n  ));\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && !Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function () {\n  var self = this;\n\n  if (!self.db) throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle) oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (!self.db) throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (!self.db) throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(collectionName, { capped: true, size: byteSize, max: maxDocuments }, future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence) return fence.beginWrite();else return { committed: function () {\n      function committed() {}\n\n      return committed;\n    }() };\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function writeCallback(write, refresh, callback) {\n  return function (err, result) {\n    if (!err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback) callback(err, result);else if (err) throw err;\n  };\n};\n\nvar bindEnvironmentForWrite = function bindEnvironmentForWrite(callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document, callback) {\n  var self = this;\n\n  var sendError = function sendError(e) {\n    if (callback) return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) && !EJSON._isCustomType(document))) {\n    sendError(new Error(\"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    Meteor.refresh({ collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo), { safe: true }, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = { collection: collectionName };\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({ id: id }, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector, callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback) return callback(e);else throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    var wrappedCallback = function wrappedCallback(err, driverResult) {\n      callback(err, transformResult(driverResult).numberAffected);\n    };\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo), { safe: true }, wrappedCallback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    Meteor.refresh({ collection: collectionName, id: null,\n      dropCollection: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod, options, callback) {\n  var self = this;\n\n  if (!callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback) return callback(e);else throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || (typeof mod === 'undefined' ? 'undefined' : _typeof(mod)) !== 'object') throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) && !EJSON._isCustomType(mod))) {\n    throw new Error(\"Only plain objects may be used as replacement\" + \" documents in MongoDB\");\n    return;\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function refresh() {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = { safe: true };\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && !isModify) {\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.upsert && !knownId && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(collection, mongoSelector, mongoMod, isModify, options,\n      // This callback does not need to be bindEnvironment'ed because\n      // simulateUpsertWithInsertedId() wraps it and then passes it through\n      // bindEnvironmentForWrite.\n      function (err, result) {\n        // If we got here via a upsert() call, then options._returnObject will\n        // be set and we should return the whole object. Otherwise, we should\n        // just return the number of affected docs to match the mongo API.\n        if (result && !options._returnObject) callback(err, result.numberAffected);else callback(err, result);\n      });\n    } else {\n      collection.update(mongoSelector, mongoMod, mongoOpts, bindEnvironmentForWrite(function (err, result) {\n        if (!err) {\n          var meteorResult = transformResult(result);\n          if (meteorResult && options._returnObject) {\n            // If this was an upsert() call, and we ended up\n            // inserting a new doc and we know its id, then\n            // return that id as well.\n\n            if (options.upsert && meteorResult.insertedId && knownId) {\n              meteorResult.insertedId = knownId;\n            }\n            callback(err, meteorResult);\n          } else {\n            callback(err, meteorResult.numberAffected);\n          }\n        } else {\n          callback(err);\n        }\n      }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function isModificationMod(mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in meteorBabelHelpers.sanitizeForInObject(mod)) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar transformResult = function transformResult(driverResult) {\n  var meteorResult = { numberAffected: 0 };\n  if (driverResult) {\n    mongoResult = driverResult.result;\n\n    // On updates with upsert:true, the inserted values come as a list of\n    // upserted values -- even with options.multi, when the upsert does insert,\n    // it only inserts one element.\n    if (mongoResult.upserted) {\n      meteorResult.numberAffected += mongoResult.upserted.length;\n\n      if (mongoResult.upserted.length == 1) {\n        meteorResult.insertedId = mongoResult.upserted[0]._id;\n      }\n    } else {\n      meteorResult.numberAffected = mongoResult.n;\n    }\n  }\n\n  return meteorResult;\n};\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596) return true;\n  if (err.errmsg.indexOf(\"cannot change _id of a document\") === 0) return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.errmsg.indexOf(\"The _id field cannot be changed\") === 0) return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function simulateUpsertWithInsertedId(collection, selector, mod, isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while (key = trail.shift()) {\n          if (_typeof(obj[key]) !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, { isInsert: true });\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function doUpdate() {\n    tries--;\n    if (!tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate, bindEnvironmentForWrite(function (err, result) {\n        if (err) {\n          callback(err);\n        } else if (result && result.result.n != 0) {\n          callback(null, {\n            numberAffected: result.result.n\n          });\n        } else {\n          doConditionalInsert();\n        }\n      }));\n    }\n  };\n\n  var doConditionalInsert = function doConditionalInsert() {\n    var replacementWithId = _.extend(replaceTypes({ _id: insertedId }, replaceMeteorAtomWithMongo), newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert, bindEnvironmentForWrite(function (err, result) {\n      if (err) {\n        // figure out if this is a\n        // \"cannot change _id of document\" error, and\n        // if so, try doUpdate() again, up to 3 times.\n        if (MongoConnection._isCannotChangeIdError(err)) {\n          doUpdate();\n        } else {\n          callback(err);\n        }\n      } else {\n        callback(null, {\n          numberAffected: result.result.upserted.length,\n          insertedId: insertedId\n        });\n      }\n    }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function () /* arguments */{\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod, options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod, _.extend({}, options, {\n    upsert: true,\n    _returnObject: true\n  }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1) selector = {};\n\n  return new Cursor(self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector, options) {\n  var self = this;\n  if (arguments.length === 1) selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index, options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future();\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future();\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function CursorDescription(collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function Cursor(mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable) throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(self._cursorDescription, {\n        // Make sure that the \"self\" argument to forEach/map callbacks is the\n        // Cursor, not the SynchronousCursor.\n        selfForIteration: self,\n        useTransform: true\n      });\n    }\n\n    return self._synchronousCursor[method].apply(self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n};\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function (cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION && cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function SynchronousCursor(dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap();\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    function _nextObject() {\n      var self = this;\n\n      while (true) {\n        var doc = self._synchronousNextObject().wait();\n\n        if (!doc) return null;\n        doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n        if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n          // Did Mongo give us duplicate documents in the same cursor? If so,\n          // ignore this one. (Do this before the transform, since transform might\n          // return some unrelated value.) We don't do this for tailable cursors,\n          // because we want to maintain O(1) memory usage. And if there isn't _id\n          // for some reason (maybe it's the oplog), then we don't do this either.\n          // (Be careful to do this for falsey but existing _id, though.)\n          if (self._visitedIds.has(doc._id)) continue;\n          self._visitedIds.set(doc._id, true);\n        }\n\n        if (self._transform) doc = self._transform(doc);\n\n        return doc;\n      }\n    }\n\n    return _nextObject;\n  }(),\n\n  forEach: function () {\n    function forEach(callback, thisArg) {\n      var self = this;\n\n      // Get back to the beginning.\n      self._rewind();\n\n      // We implement the loop ourself instead of using self._dbCursor.each,\n      // because \"each\" will call its callback outside of a fiber which makes it\n      // much more complex to make this function synchronous.\n      var index = 0;\n      while (true) {\n        var doc = self._nextObject();\n        if (!doc) return;\n        callback.call(thisArg, doc, index++, self._selfForIteration);\n      }\n    }\n\n    return forEach;\n  }(),\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function () {\n    function map(callback, thisArg) {\n      var self = this;\n      var res = [];\n      self.forEach(function (doc, index) {\n        res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n      });\n      return res;\n    }\n\n    return map;\n  }(),\n\n  _rewind: function () {\n    function _rewind() {\n      var self = this;\n\n      // known to be synchronous\n      self._dbCursor.rewind();\n\n      self._visitedIds = new LocalCollection._IdMap();\n    }\n\n    return _rewind;\n  }(),\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    function close() {\n      var self = this;\n\n      self._dbCursor.close();\n    }\n\n    return close;\n  }(),\n\n  fetch: function () {\n    function fetch() {\n      var self = this;\n      return self.map(_.identity);\n    }\n\n    return fetch;\n  }(),\n\n  count: function () {\n    function count(applySkipLimit) {\n      var self = this;\n      return self._synchronousCount(applySkipLimit).wait();\n    }\n\n    return count;\n  }(),\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function () {\n    function getRawObjects(ordered) {\n      var self = this;\n      if (ordered) {\n        return self.fetch();\n      } else {\n        var results = new LocalCollection._IdMap();\n        self.forEach(function (doc) {\n          results.set(doc._id, doc);\n        });\n        return results;\n      }\n    }\n\n    return getRawObjects;\n  }()\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable) throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS = undefined;\n  var loop = function loop() {\n    while (true) {\n      if (stopped) return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped) return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = { $gt: lastTS };\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(cursorDescription.collectionName, newSelector, cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      function stop() {\n        stopped = true;\n        cursor.close();\n      }\n\n      return stop;\n    }()\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields && (cursorDescription.options.fields._id === 0 || cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(_.extend({ ordered: ordered }, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          function onStop() {\n            delete self._observeMultiplexers[observeKey];\n            observeDriver.stop();\n          }\n\n          return onStop;\n        }()\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([function () {\n      // At a bare minimum, using the oplog requires us to have an oplog, to\n      // want unordered callbacks, and to not want a callback on the polls\n      // that won't happen.\n      return self._oplogHandle && !ordered && !callbacks._testOnlyPollCallback;\n    }, function () {\n      // We need to be able to compile the selector. Fall back to polling for\n      // some newfangled $selector that minimongo doesn't support yet.\n      try {\n        matcher = new Minimongo.Matcher(cursorDescription.selector);\n        return true;\n      } catch (e) {\n        // XXX make all compilation errors MinimongoError or something\n        //     so that this doesn't ignore unrelated exceptions\n        return false;\n      }\n    }, function () {\n      // ... and the selector itself needs to support oplog.\n      return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n    }, function () {\n      // And we need to be able to compile the sort, if any.  eg, can't be\n      // {$natural: 1}.\n      if (!cursorDescription.options.sort) return true;\n      try {\n        sorter = new Minimongo.Sorter(cursorDescription.options.sort, { matcher: matcher });\n        return true;\n      } catch (e) {\n        // XXX make all compilation errors MinimongoError or something\n        //     so that this doesn't ignore unrelated exceptions\n        return false;\n      }\n    }], function (f) {\n      return f();\n    }); // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher, // ignored by polling\n      sorter: sorter, // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function listenAll(cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      function stop() {\n        _.each(listeners, function (listener) {\n          listener.stop();\n        });\n      }\n\n      return stop;\n    }()\n  };\n};\n\nforEachTrigger = function forEachTrigger(cursorDescription, triggerCallback) {\n  var key = { collection: cursorDescription.collectionName };\n  var specificIds = LocalCollection._idsMatchedBySelector(cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({ id: id }, key));\n    });\n    triggerCallback(_.extend({ dropCollection: true, id: null }, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if (ordered && !callbacks.addedBefore || !ordered && !callbacks.added) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\") + \" tailable cursor without a \" + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;","ast":null,"map":{"version":3,"sources":["/packages/mongo/mongo_driver.js"],"names":["path","Npm","require","MongoDB","NpmModuleMongodb","Fiber","Future","join","MongoInternals","MongoTest","NpmModules","mongodb","version","NpmModuleMongodbVersion","module","NpmModule","replaceNames","filter","thing","_","isArray","map","bind","ret","each","value","key","Timestamp","prototype","clone","makeMongoLegal","name","unmakeMongoLegal","substr","replaceMongoAtomWithMeteor","document","Binary","buffer","Uint8Array","ObjectID","Mongo","toHexString","size","EJSON","fromJSONValue","undefined","replaceMeteorAtomWithMongo","isBinary","Buffer","_isCustomType","toJSONValue","replaceTypes","atomTransformer","replacedTopLevelAtom","val","valReplaced","MongoConnection","url","options","self","_observeMultiplexers","_onFailoverHook","Hook","mongoOptions","extend","db","safe","server","autoReconnect","reconnectTries","Infinity","replSet","_connectionOptions","test","native_parser","has","poolSize","_primary","_oplogHandle","_docFetcher","connectFuture","connect","Meteor","bindEnvironment","err","serverConfig","isMasterDoc","primary","on","kind","doc","callback","me","resolver","wait","oplogUrl","Package","OplogHandle","databaseName","DocFetcher","close","Error","oplogHandle","stop","wrap","rawCollection","collectionName","future","collection","_createCappedCollection","byteSize","maxDocuments","createCollection","capped","max","_maybeBeginWrite","fence","DDPServer","_CurrentWriteFence","get","beginWrite","committed","_onFailover","register","writeCallback","write","refresh","result","refreshErr","bindEnvironmentForWrite","_insert","collection_name","sendError","e","expected","LocalCollection","_isPlainObject","id","_id","insert","_refresh","selector","refreshKey","specificIds","_idsMatchedBySelector","_remove","wrappedCallback","driverResult","transformResult","numberAffected","remove","_dropCollection","cb","dropCollection","drop","_dropDatabase","dropDatabase","_update","mod","Function","mongoOpts","upsert","multi","fullResult","mongoSelector","mongoMod","isModify","isModificationMod","knownId","_forbidReplace","insertedId","simulateUpsertWithInsertedId","_returnObject","update","meteorResult","isReplace","k","mongoResult","upserted","length","n","NUM_OPTIMISTIC_TRIES","_isCannotChangeIdError","code","errmsg","indexOf","newDoc","selectorDoc","_removeDollarOperators","trail","split","obj","leaf","pop","shift","_modify","isInsert","mongoOptsForUpdate","mongoOptsForInsert","tries","doUpdate","doConditionalInsert","replacementWithId","method","wrapAsync","apply","arguments","find","Cursor","CursorDescription","findOne","limit","fetch","_ensureIndex","index","indexName","ensureIndex","_dropIndex","dropIndex","Collection","_rewriteSelector","mongo","cursorDescription","_mongo","_cursorDescription","_synchronousCursor","tailable","_createSynchronousCursor","selfForIteration","useTransform","rewind","getTransform","transform","_publishCursor","sub","_getCollectionName","observe","callbacks","_observeFromObserveChanges","observeChanges","ordered","_observeChangesCallbacksAreOrdered","_observeChanges","pick","cursorOptions","sort","skip","awaitdata","numberOfRetries","OPLOG_COLLECTION","ts","oplogReplay","dbCursor","fields","SynchronousCursor","_dbCursor","_selfForIteration","_transform","wrapTransform","_synchronousNextObject","nextObject","_synchronousCount","count","_visitedIds","_IdMap","_nextObject","set","forEach","thisArg","_rewind","call","res","push","identity","applySkipLimit","getRawObjects","results","tail","docCallback","cursor","stopped","lastTS","loop","newSelector","$gt","setTimeout","defer","_observeChangesTailable","observeKey","JSON","stringify","multiplexer","observeDriver","firstHandle","_noYieldsAllowed","ObserveMultiplexer","onStop","observeHandle","ObserveHandle","matcher","sorter","canUseOplog","all","_testOnlyPollCallback","Minimongo","Matcher","OplogObserveDriver","cursorSupported","Sorter","f","driverClass","PollingObserveDriver","mongoHandle","_observeDriver","addHandleAndSendInitialAdds","listenAll","listenCallback","listeners","forEachTrigger","trigger","_InvalidationCrossbar","listen","listener","triggerCallback","addedBefore","added","MongoTimestamp","Connection"],"mappings":";AAAA;;;;;;;;;AASA,IAAIA,OAAOC,IAAIC,OAAJ,CAAY,MAAZ,CAAX;AACA,IAAIC,UAAUC,gBAAd;AACA,IAAIC,QAAQJ,IAAIC,OAAJ,CAAY,QAAZ,CAAZ;AACA,IAAII,SAASL,IAAIC,OAAJ,CAAYF,KAAKO,IAAL,CAAU,QAAV,EAAoB,QAApB,CAAZ,CAAb;;AAEAC,iBAAiB,EAAjB;AACAC,YAAY,EAAZ;;AAEAD,eAAeE,UAAf,GAA4B;AAC1BC,WAAS;AACPC,aAASC,uBADF;AAEPC,YAAQX;AAFD;AADiB,CAA5B;;AAOA;AACA;AACA;AACA;AACAK,eAAeO,SAAf,GAA2BZ,OAA3B;;AAEA;AACA;AACA,IAAIa,eAAe,SAAfA,YAAe,CAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAC1C,MAAI,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAArB,EAA+B;AAC7B,QAAIC,EAAEC,OAAF,CAAUF,KAAV,CAAJ,EAAsB;AACpB,aAAOC,EAAEE,GAAF,CAAMH,KAAN,EAAaC,EAAEG,IAAF,CAAON,YAAP,EAAqB,IAArB,EAA2BC,MAA3B,CAAb,CAAP;AACD;AACD,QAAIM,MAAM,EAAV;AACAJ,MAAEK,IAAF,CAAON,KAAP,EAAc,UAAUO,KAAV,EAAiBC,GAAjB,EAAsB;AAClCH,UAAIN,OAAOS,GAAP,CAAJ,IAAmBV,aAAaC,MAAb,EAAqBQ,KAArB,CAAnB;AACD,KAFD;AAGA,WAAOF,GAAP;AACD;AACD,SAAOL,KAAP;AACD,CAZD;;AAcA;AACA;AACA;AACAf,QAAQwB,SAAR,CAAkBC,SAAlB,CAA4BC,KAA5B,GAAoC,YAAY;AAC9C;AACA,SAAO,IAAP;AACD,CAHD;;AAKA,IAAIC,iBAAiB,SAAjBA,cAAiB,CAAUC,IAAV,EAAgB;AAAE,SAAO,UAAUA,IAAjB;AAAwB,CAA/D;AACA,IAAIC,mBAAmB,SAAnBA,gBAAmB,CAAUD,IAAV,EAAgB;AAAE,SAAOA,KAAKE,MAAL,CAAY,CAAZ,CAAP;AAAwB,CAAjE;;AAEA,IAAIC,6BAA6B,SAA7BA,0BAA6B,CAAUC,QAAV,EAAoB;AACnD,MAAIA,oBAAoBhC,QAAQiC,MAAhC,EAAwC;AACtC,QAAIC,SAASF,SAASV,KAAT,CAAe,IAAf,CAAb;AACA,WAAO,IAAIa,UAAJ,CAAeD,MAAf,CAAP;AACD;AACD,MAAIF,oBAAoBhC,QAAQoC,QAAhC,EAA0C;AACxC,WAAO,IAAIC,MAAMD,QAAV,CAAmBJ,SAASM,WAAT,EAAnB,CAAP;AACD;AACD,MAAIN,SAAS,YAAT,KAA0BA,SAAS,aAAT,CAA1B,IACGhB,EAAEuB,IAAF,CAAOP,QAAP,MAAqB,CAD5B,EAC+B;AAC7B,WAAOQ,MAAMC,aAAN,CAAoB5B,aAAagB,gBAAb,EAA+BG,QAA/B,CAApB,CAAP;AACD;AACD,MAAIA,oBAAoBhC,QAAQwB,SAAhC,EAA2C;AACzC;AACA;AACA;AACA;AACA,WAAOQ,QAAP;AACD;AACD,SAAOU,SAAP;AACD,CApBD;;AAsBA,IAAIC,6BAA6B,SAA7BA,0BAA6B,CAAUX,QAAV,EAAoB;AACnD,MAAIQ,MAAMI,QAAN,CAAeZ,QAAf,CAAJ,EAA8B;AAC5B;AACA;AACA;AACA,WAAO,IAAIhC,QAAQiC,MAAZ,CAAmB,IAAIY,MAAJ,CAAWb,QAAX,CAAnB,CAAP;AACD;AACD,MAAIA,oBAAoBK,MAAMD,QAA9B,EAAwC;AACtC,WAAO,IAAIpC,QAAQoC,QAAZ,CAAqBJ,SAASM,WAAT,EAArB,CAAP;AACD;AACD,MAAIN,oBAAoBhC,QAAQwB,SAAhC,EAA2C;AACzC;AACA;AACA;AACA;AACA,WAAOQ,QAAP;AACD;AACD,MAAIQ,MAAMM,aAAN,CAAoBd,QAApB,CAAJ,EAAmC;AACjC,WAAOnB,aAAac,cAAb,EAA6Ba,MAAMO,WAAN,CAAkBf,QAAlB,CAA7B,CAAP;AACD;AACD;AACA;AACA,SAAOU,SAAP;AACD,CAvBD;;AAyBA,IAAIM,eAAe,SAAfA,YAAe,CAAUhB,QAAV,EAAoBiB,eAApB,EAAqC;AACtD,MAAI,QAAOjB,QAAP,yCAAOA,QAAP,OAAoB,QAApB,IAAgCA,aAAa,IAAjD,EACE,OAAOA,QAAP;;AAEF,MAAIkB,uBAAuBD,gBAAgBjB,QAAhB,CAA3B;AACA,MAAIkB,yBAAyBR,SAA7B,EACE,OAAOQ,oBAAP;;AAEF,MAAI9B,MAAMY,QAAV;AACAhB,IAAEK,IAAF,CAAOW,QAAP,EAAiB,UAAUmB,GAAV,EAAe5B,GAAf,EAAoB;AACnC,QAAI6B,cAAcJ,aAAaG,GAAb,EAAkBF,eAAlB,CAAlB;AACA,QAAIE,QAAQC,WAAZ,EAAyB;AACvB;AACA,UAAIhC,QAAQY,QAAZ,EACEZ,MAAMJ,EAAEU,KAAF,CAAQM,QAAR,CAAN;AACFZ,UAAIG,GAAJ,IAAW6B,WAAX;AACD;AACF,GARD;AASA,SAAOhC,GAAP;AACD,CAnBD;;AAsBAiC,kBAAkB,yBAAUC,GAAV,EAAeC,OAAf,EAAwB;AACxC,MAAIC,OAAO,IAAX;AACAD,YAAUA,WAAW,EAArB;AACAC,OAAKC,oBAAL,GAA4B,EAA5B;AACAD,OAAKE,eAAL,GAAuB,IAAIC,IAAJ,EAAvB;;AAEA,MAAIC,eAAe5C,EAAE6C,MAAF,CAAS;AAC1BC,QAAI,EAAEC,MAAM,IAAR,EADsB;AAE1B;AACAC,YAAQ;AACN;AACAC,qBAAe,IAFT;AAGN;AACA;AACAC,sBAAgBC;AALV,KAHkB;AAU1BC,aAAS;AAViB,GAAT,EAWhB/B,MAAMgC,kBAXU,CAAnB;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAI,CAAE,0BAA0BC,IAA1B,CAA+BhB,GAA/B,CAAN,EAA4C;AAC1CM,iBAAaE,EAAb,CAAgBS,aAAhB,GAAgC,KAAhC;AACD;;AAED;AACA;AACA,MAAIvD,EAAEwD,GAAF,CAAMjB,OAAN,EAAe,UAAf,CAAJ,EAAgC;AAC9B;AACA;AACAK,iBAAaI,MAAb,CAAoBS,QAApB,GAA+BlB,QAAQkB,QAAvC;AACAb,iBAAaQ,OAAb,CAAqBK,QAArB,GAAgClB,QAAQkB,QAAxC;AACD;;AAEDjB,OAAKM,EAAL,GAAU,IAAV;AACA;AACA;AACA;AACAN,OAAKkB,QAAL,GAAgB,IAAhB;AACAlB,OAAKmB,YAAL,GAAoB,IAApB;AACAnB,OAAKoB,WAAL,GAAmB,IAAnB;;AAGA,MAAIC,gBAAgB,IAAI1E,MAAJ,EAApB;AACAH,UAAQ8E,OAAR,CACExB,GADF,EAEEM,YAFF,EAGEmB,OAAOC,eAAP,CACE,UAAUC,GAAV,EAAenB,EAAf,EAAmB;AACjB,QAAImB,GAAJ,EAAS;AACP,YAAMA,GAAN;AACD;;AAED;AACA,QAAInB,GAAGoB,YAAH,CAAgBC,WAApB,EAAiC;AAC/B3B,WAAKkB,QAAL,GAAgBZ,GAAGoB,YAAH,CAAgBC,WAAhB,CAA4BC,OAA5C;AACD;;AAEDtB,OAAGoB,YAAH,CAAgBG,EAAhB,CACE,QADF,EACYN,OAAOC,eAAP,CAAuB,UAAUM,IAAV,EAAgBC,GAAhB,EAAqB;AACpD,UAAID,SAAS,SAAb,EAAwB;AACtB,YAAIC,IAAIH,OAAJ,KAAgB5B,KAAKkB,QAAzB,EAAmC;AACjClB,eAAKkB,QAAL,GAAgBa,IAAIH,OAApB;AACA5B,eAAKE,eAAL,CAAqBrC,IAArB,CAA0B,UAAUmE,QAAV,EAAoB;AAC5CA;AACA,mBAAO,IAAP;AACD,WAHD;AAID;AACF,OARD,MAQO,IAAID,IAAIE,EAAJ,KAAWjC,KAAKkB,QAApB,EAA8B;AACnC;AACA;AACA;AACA;AACA;AACAlB,aAAKkB,QAAL,GAAgB,IAAhB;AACD;AACF,KAjBS,CADZ;;AAoBA;AACAG,kBAAc,QAAd,EAAwBf,EAAxB;AACD,GAjCH,EAkCEe,cAAca,QAAd,EAlCF,CAkC4B;AAlC5B,GAHF;;AAyCA;AACAlC,OAAKM,EAAL,GAAUe,cAAcc,IAAd,EAAV;;AAEA,MAAIpC,QAAQqC,QAAR,IAAoB,CAAEC,QAAQ,eAAR,CAA1B,EAAoD;AAClDrC,SAAKmB,YAAL,GAAoB,IAAImB,WAAJ,CAAgBvC,QAAQqC,QAAxB,EAAkCpC,KAAKM,EAAL,CAAQiC,YAA1C,CAApB;AACAvC,SAAKoB,WAAL,GAAmB,IAAIoB,UAAJ,CAAexC,IAAf,CAAnB;AACD;AACF,CAlGD;;AAoGAH,gBAAgB5B,SAAhB,CAA0BwE,KAA1B,GAAkC,YAAW;AAC3C,MAAIzC,OAAO,IAAX;;AAEA,MAAI,CAAEA,KAAKM,EAAX,EACE,MAAMoC,MAAM,yCAAN,CAAN;;AAEF;AACA,MAAIC,cAAc3C,KAAKmB,YAAvB;AACAnB,OAAKmB,YAAL,GAAoB,IAApB;AACA,MAAIwB,WAAJ,EACEA,YAAYC,IAAZ;;AAEF;AACA;AACA;AACAjG,SAAOkG,IAAP,CAAYrF,EAAEG,IAAF,CAAOqC,KAAKM,EAAL,CAAQmC,KAAf,EAAsBzC,KAAKM,EAA3B,CAAZ,EAA4C,IAA5C,EAAkD6B,IAAlD;AACD,CAhBD;;AAkBA;AACAtC,gBAAgB5B,SAAhB,CAA0B6E,aAA1B,GAA0C,UAAUC,cAAV,EAA0B;AAClE,MAAI/C,OAAO,IAAX;;AAEA,MAAI,CAAEA,KAAKM,EAAX,EACE,MAAMoC,MAAM,iDAAN,CAAN;;AAEF,MAAIM,SAAS,IAAIrG,MAAJ,EAAb;AACAqD,OAAKM,EAAL,CAAQ2C,UAAR,CAAmBF,cAAnB,EAAmCC,OAAOd,QAAP,EAAnC;AACA,SAAOc,OAAOb,IAAP,EAAP;AACD,CATD;;AAWAtC,gBAAgB5B,SAAhB,CAA0BiF,uBAA1B,GAAoD,UAChDH,cADgD,EAChCI,QADgC,EACtBC,YADsB,EACR;AAC1C,MAAIpD,OAAO,IAAX;;AAEA,MAAI,CAAEA,KAAKM,EAAX,EACE,MAAMoC,MAAM,2DAAN,CAAN;;AAEF,MAAIM,SAAS,IAAIrG,MAAJ,EAAb;AACAqD,OAAKM,EAAL,CAAQ+C,gBAAR,CACEN,cADF,EAEE,EAAEO,QAAQ,IAAV,EAAgBvE,MAAMoE,QAAtB,EAAgCI,KAAKH,YAArC,EAFF,EAGEJ,OAAOd,QAAP,EAHF;AAIAc,SAAOb,IAAP;AACD,CAbD;;AAeA;AACA;AACA;AACA;AACA;AACAtC,gBAAgB5B,SAAhB,CAA0BuF,gBAA1B,GAA6C,YAAY;AACvD,MAAIxD,OAAO,IAAX;AACA,MAAIyD,QAAQC,UAAUC,kBAAV,CAA6BC,GAA7B,EAAZ;AACA,MAAIH,KAAJ,EACE,OAAOA,MAAMI,UAAN,EAAP,CADF,KAGE,OAAO,EAACC;AAAW,2BAAY,CAAE;;AAAzB;AAAA,OAAD,EAAP;AACH,CAPD;;AASA;AACA;AACAjE,gBAAgB5B,SAAhB,CAA0B8F,WAA1B,GAAwC,UAAU/B,QAAV,EAAoB;AAC1D,SAAO,KAAK9B,eAAL,CAAqB8D,QAArB,CAA8BhC,QAA9B,CAAP;AACD,CAFD;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIiC,gBAAgB,SAAhBA,aAAgB,CAAUC,KAAV,EAAiBC,OAAjB,EAA0BnC,QAA1B,EAAoC;AACtD,SAAO,UAAUP,GAAV,EAAe2C,MAAf,EAAuB;AAC5B,QAAI,CAAE3C,GAAN,EAAW;AACT;AACA,UAAI;AACF0C;AACD,OAFD,CAEE,OAAOE,UAAP,EAAmB;AACnB,YAAIrC,QAAJ,EAAc;AACZA,mBAASqC,UAAT;AACA;AACD,SAHD,MAGO;AACL,gBAAMA,UAAN;AACD;AACF;AACF;AACDH,UAAMJ,SAAN;AACA,QAAI9B,QAAJ,EACEA,SAASP,GAAT,EAAc2C,MAAd,EADF,KAEK,IAAI3C,GAAJ,EACH,MAAMA,GAAN;AACH,GAnBD;AAoBD,CArBD;;AAuBA,IAAI6C,0BAA0B,SAA1BA,uBAA0B,CAAUtC,QAAV,EAAoB;AAChD,SAAOT,OAAOC,eAAP,CAAuBQ,QAAvB,EAAiC,aAAjC,CAAP;AACD,CAFD;;AAIAnC,gBAAgB5B,SAAhB,CAA0BsG,OAA1B,GAAoC,UAAUC,eAAV,EAA2BhG,QAA3B,EACUwD,QADV,EACoB;AACtD,MAAIhC,OAAO,IAAX;;AAEA,MAAIyE,YAAY,SAAZA,SAAY,CAAUC,CAAV,EAAa;AAC3B,QAAI1C,QAAJ,EACE,OAAOA,SAAS0C,CAAT,CAAP;AACF,UAAMA,CAAN;AACD,GAJD;;AAMA,MAAIF,oBAAoB,mCAAxB,EAA6D;AAC3D,QAAIE,IAAI,IAAIhC,KAAJ,CAAU,cAAV,CAAR;AACAgC,MAAEC,QAAF,GAAa,IAAb;AACAF,cAAUC,CAAV;AACA;AACD;;AAED,MAAI,EAAEE,gBAAgBC,cAAhB,CAA+BrG,QAA/B,KACA,CAACQ,MAAMM,aAAN,CAAoBd,QAApB,CADH,CAAJ,EACuC;AACrCiG,cAAU,IAAI/B,KAAJ,CACR,iDADQ,CAAV;AAEA;AACD;;AAED,MAAIwB,QAAQlE,KAAKwD,gBAAL,EAAZ;AACA,MAAIW,UAAU,SAAVA,OAAU,GAAY;AACxB5C,WAAO4C,OAAP,CAAe,EAAClB,YAAYuB,eAAb,EAA8BM,IAAItG,SAASuG,GAA3C,EAAf;AACD,GAFD;AAGA/C,aAAWsC,wBAAwBL,cAAcC,KAAd,EAAqBC,OAArB,EAA8BnC,QAA9B,CAAxB,CAAX;AACA,MAAI;AACF,QAAIiB,aAAajD,KAAK8C,aAAL,CAAmB0B,eAAnB,CAAjB;AACAvB,eAAW+B,MAAX,CAAkBxF,aAAahB,QAAb,EAAuBW,0BAAvB,CAAlB,EACkB,EAACoB,MAAM,IAAP,EADlB,EACgCyB,QADhC;AAED,GAJD,CAIE,OAAO0C,CAAP,EAAU;AACVR,UAAMJ,SAAN;AACA,UAAMY,CAAN;AACD;AACF,CArCD;;AAuCA;AACA;AACA7E,gBAAgB5B,SAAhB,CAA0BgH,QAA1B,GAAqC,UAAUlC,cAAV,EAA0BmC,QAA1B,EAAoC;AACvE,MAAIlF,OAAO,IAAX;AACA,MAAImF,aAAa,EAAClC,YAAYF,cAAb,EAAjB;AACA;AACA;AACA;AACA;AACA,MAAIqC,cAAcR,gBAAgBS,qBAAhB,CAAsCH,QAAtC,CAAlB;AACA,MAAIE,WAAJ,EAAiB;AACf5H,MAAEK,IAAF,CAAOuH,WAAP,EAAoB,UAAUN,EAAV,EAAc;AAChCvD,aAAO4C,OAAP,CAAe3G,EAAE6C,MAAF,CAAS,EAACyE,IAAIA,EAAL,EAAT,EAAmBK,UAAnB,CAAf;AACD,KAFD;AAGD,GAJD,MAIO;AACL5D,WAAO4C,OAAP,CAAegB,UAAf;AACD;AACF,CAfD;;AAiBAtF,gBAAgB5B,SAAhB,CAA0BqH,OAA1B,GAAoC,UAAUd,eAAV,EAA2BU,QAA3B,EACUlD,QADV,EACoB;AACtD,MAAIhC,OAAO,IAAX;;AAEA,MAAIwE,oBAAoB,mCAAxB,EAA6D;AAC3D,QAAIE,IAAI,IAAIhC,KAAJ,CAAU,cAAV,CAAR;AACAgC,MAAEC,QAAF,GAAa,IAAb;AACA,QAAI3C,QAAJ,EACE,OAAOA,SAAS0C,CAAT,CAAP,CADF,KAGE,MAAMA,CAAN;AACH;;AAED,MAAIR,QAAQlE,KAAKwD,gBAAL,EAAZ;AACA,MAAIW,UAAU,SAAVA,OAAU,GAAY;AACxBnE,SAAKiF,QAAL,CAAcT,eAAd,EAA+BU,QAA/B;AACD,GAFD;AAGAlD,aAAWsC,wBAAwBL,cAAcC,KAAd,EAAqBC,OAArB,EAA8BnC,QAA9B,CAAxB,CAAX;;AAEA,MAAI;AACF,QAAIiB,aAAajD,KAAK8C,aAAL,CAAmB0B,eAAnB,CAAjB;AACA,QAAIe,kBAAkB,SAAlBA,eAAkB,CAAS9D,GAAT,EAAc+D,YAAd,EAA4B;AAChDxD,eAASP,GAAT,EAAcgE,gBAAgBD,YAAhB,EAA8BE,cAA5C;AACD,KAFD;AAGAzC,eAAW0C,MAAX,CAAkBnG,aAAa0F,QAAb,EAAuB/F,0BAAvB,CAAlB,EACmB,EAACoB,MAAM,IAAP,EADnB,EACiCgF,eADjC;AAED,GAPD,CAOE,OAAOb,CAAP,EAAU;AACVR,UAAMJ,SAAN;AACA,UAAMY,CAAN;AACD;AACF,CA9BD;;AAgCA7E,gBAAgB5B,SAAhB,CAA0B2H,eAA1B,GAA4C,UAAU7C,cAAV,EAA0B8C,EAA1B,EAA8B;AACxE,MAAI7F,OAAO,IAAX;;AAEA,MAAIkE,QAAQlE,KAAKwD,gBAAL,EAAZ;AACA,MAAIW,UAAU,SAAVA,OAAU,GAAY;AACxB5C,WAAO4C,OAAP,CAAe,EAAClB,YAAYF,cAAb,EAA6B+B,IAAI,IAAjC;AACCgB,sBAAgB,IADjB,EAAf;AAED,GAHD;AAIAD,OAAKvB,wBAAwBL,cAAcC,KAAd,EAAqBC,OAArB,EAA8B0B,EAA9B,CAAxB,CAAL;;AAEA,MAAI;AACF,QAAI5C,aAAajD,KAAK8C,aAAL,CAAmBC,cAAnB,CAAjB;AACAE,eAAW8C,IAAX,CAAgBF,EAAhB;AACD,GAHD,CAGE,OAAOnB,CAAP,EAAU;AACVR,UAAMJ,SAAN;AACA,UAAMY,CAAN;AACD;AACF,CAjBD;;AAmBA;AACA;AACA7E,gBAAgB5B,SAAhB,CAA0B+H,aAA1B,GAA0C,UAAUH,EAAV,EAAc;AACtD,MAAI7F,OAAO,IAAX;;AAEA,MAAIkE,QAAQlE,KAAKwD,gBAAL,EAAZ;AACA,MAAIW,UAAU,SAAVA,OAAU,GAAY;AACxB5C,WAAO4C,OAAP,CAAe,EAAE8B,cAAc,IAAhB,EAAf;AACD,GAFD;AAGAJ,OAAKvB,wBAAwBL,cAAcC,KAAd,EAAqBC,OAArB,EAA8B0B,EAA9B,CAAxB,CAAL;;AAEA,MAAI;AACF7F,SAAKM,EAAL,CAAQ2F,YAAR,CAAqBJ,EAArB;AACD,GAFD,CAEE,OAAOnB,CAAP,EAAU;AACVR,UAAMJ,SAAN;AACA,UAAMY,CAAN;AACD;AACF,CAfD;;AAiBA7E,gBAAgB5B,SAAhB,CAA0BiI,OAA1B,GAAoC,UAAU1B,eAAV,EAA2BU,QAA3B,EAAqCiB,GAArC,EACUpG,OADV,EACmBiC,QADnB,EAC6B;AAC/D,MAAIhC,OAAO,IAAX;;AAEA,MAAI,CAAEgC,QAAF,IAAcjC,mBAAmBqG,QAArC,EAA+C;AAC7CpE,eAAWjC,OAAX;AACAA,cAAU,IAAV;AACD;;AAED,MAAIyE,oBAAoB,mCAAxB,EAA6D;AAC3D,QAAIE,IAAI,IAAIhC,KAAJ,CAAU,cAAV,CAAR;AACAgC,MAAEC,QAAF,GAAa,IAAb;AACA,QAAI3C,QAAJ,EACE,OAAOA,SAAS0C,CAAT,CAAP,CADF,KAGE,MAAMA,CAAN;AACH;;AAED;AACA;AACA;AACA;AACA;AACA,MAAI,CAACyB,GAAD,IAAQ,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAA3B,EACE,MAAM,IAAIzD,KAAJ,CAAU,+CAAV,CAAN;;AAEF,MAAI,EAAEkC,gBAAgBC,cAAhB,CAA+BsB,GAA/B,KACA,CAACnH,MAAMM,aAAN,CAAoB6G,GAApB,CADH,CAAJ,EACkC;AAChC,UAAM,IAAIzD,KAAJ,CACJ,kDACE,uBAFE,CAAN;AAGA;AACD;;AAED,MAAI,CAAC3C,OAAL,EAAcA,UAAU,EAAV;;AAEd,MAAImE,QAAQlE,KAAKwD,gBAAL,EAAZ;AACA,MAAIW,UAAU,SAAVA,OAAU,GAAY;AACxBnE,SAAKiF,QAAL,CAAcT,eAAd,EAA+BU,QAA/B;AACD,GAFD;AAGAlD,aAAWiC,cAAcC,KAAd,EAAqBC,OAArB,EAA8BnC,QAA9B,CAAX;AACA,MAAI;AACF,QAAIiB,aAAajD,KAAK8C,aAAL,CAAmB0B,eAAnB,CAAjB;AACA,QAAI6B,YAAY,EAAC9F,MAAM,IAAP,EAAhB;AACA;AACA,QAAIR,QAAQuG,MAAZ,EAAoBD,UAAUC,MAAV,GAAmB,IAAnB;AACpB,QAAIvG,QAAQwG,KAAZ,EAAmBF,UAAUE,KAAV,GAAkB,IAAlB;AACnB;AACA;AACA;AACA,QAAIxG,QAAQyG,UAAZ,EAAwBH,UAAUG,UAAV,GAAuB,IAAvB;;AAExB,QAAIC,gBAAgBjH,aAAa0F,QAAb,EAAuB/F,0BAAvB,CAApB;AACA,QAAIuH,WAAWlH,aAAa2G,GAAb,EAAkBhH,0BAAlB,CAAf;;AAEA,QAAIwH,WAAWC,kBAAkBF,QAAlB,CAAf;AACA,QAAIG,UAAU3B,SAASH,GAAT,IAAgBoB,IAAIpB,GAAlC;;AAEA,QAAIhF,QAAQ+G,cAAR,IAA0B,CAAEH,QAAhC,EAA0C;AACxC,UAAIjC,IAAI,IAAIhC,KAAJ,CAAU,+CAAV,CAAR;AACA,UAAIV,QAAJ,EAAc;AACZ,eAAOA,SAAS0C,CAAT,CAAP;AACD,OAFD,MAEO;AACL,cAAMA,CAAN;AACD;AACF;;AAED,QAAI3E,QAAQuG,MAAR,IAAmB,CAAEO,OAArB,IAAiC9G,QAAQgH,UAA7C,EAAyD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,mCACE/D,UADF,EACcwD,aADd,EAC6BC,QAD7B,EAEEC,QAFF,EAEY5G,OAFZ;AAGE;AACA;AACA;AACA,gBAAU0B,GAAV,EAAe2C,MAAf,EAAuB;AACrB;AACA;AACA;AACA,YAAIA,UAAU,CAAErE,QAAQkH,aAAxB,EACEjF,SAASP,GAAT,EAAc2C,OAAOsB,cAArB,EADF,KAGE1D,SAASP,GAAT,EAAc2C,MAAd;AACH,OAdH;AAgBD,KA7BD,MA6BO;AACLnB,iBAAWiE,MAAX,CACET,aADF,EACiBC,QADjB,EAC2BL,SAD3B,EAEE/B,wBAAwB,UAAU7C,GAAV,EAAe2C,MAAf,EAAuB;AAC7C,YAAI,CAAE3C,GAAN,EAAW;AACT,cAAI0F,eAAe1B,gBAAgBrB,MAAhB,CAAnB;AACA,cAAI+C,gBAAgBpH,QAAQkH,aAA5B,EAA2C;AACzC;AACA;AACA;;AAEA,gBAAIlH,QAAQuG,MAAR,IAAkBa,aAAaJ,UAA/B,IAA6CF,OAAjD,EAA0D;AACxDM,2BAAaJ,UAAb,GAA0BF,OAA1B;AACD;AACD7E,qBAASP,GAAT,EAAc0F,YAAd;AACD,WATD,MASO;AACLnF,qBAASP,GAAT,EAAc0F,aAAazB,cAA3B;AACD;AACF,SAdD,MAcO;AACL1D,mBAASP,GAAT;AACD;AACF,OAlBD,CAFF;AAqBD;AACF,GA9ED,CA8EE,OAAOiD,CAAP,EAAU;AACVR,UAAMJ,SAAN;AACA,UAAMY,CAAN;AACD;AACF,CA3HD;;AA6HA,IAAIkC,oBAAoB,SAApBA,iBAAoB,CAAUT,GAAV,EAAe;AACrC,MAAIiB,YAAY,KAAhB;AACA,MAAIT,WAAW,KAAf;AACA,OAAK,IAAIU,CAAT,2CAAclB,GAAd,GAAmB;AACjB,QAAIkB,EAAE/I,MAAF,CAAS,CAAT,EAAY,CAAZ,MAAmB,GAAvB,EAA4B;AAC1BqI,iBAAW,IAAX;AACD,KAFD,MAEO;AACLS,kBAAY,IAAZ;AACD;AACF;AACD,MAAIT,YAAYS,SAAhB,EAA2B;AACzB,UAAM,IAAI1E,KAAJ,CACJ,qEADI,CAAN;AAED;AACD,SAAOiE,QAAP;AACD,CAfD;;AAiBA,IAAIlB,kBAAkB,SAAlBA,eAAkB,CAAUD,YAAV,EAAwB;AAC5C,MAAI2B,eAAe,EAAEzB,gBAAgB,CAAlB,EAAnB;AACA,MAAIF,YAAJ,EAAkB;AAChB8B,kBAAc9B,aAAapB,MAA3B;;AAEA;AACA;AACA;AACA,QAAIkD,YAAYC,QAAhB,EAA0B;AACxBJ,mBAAazB,cAAb,IAA+B4B,YAAYC,QAAZ,CAAqBC,MAApD;;AAEA,UAAIF,YAAYC,QAAZ,CAAqBC,MAArB,IAA+B,CAAnC,EAAsC;AACpCL,qBAAaJ,UAAb,GAA0BO,YAAYC,QAAZ,CAAqB,CAArB,EAAwBxC,GAAlD;AACD;AACF,KAND,MAMO;AACLoC,mBAAazB,cAAb,GAA8B4B,YAAYG,CAA1C;AACD;AACF;;AAED,SAAON,YAAP;AACD,CApBD;;AAuBA,IAAIO,uBAAuB,CAA3B;;AAEA;AACA7H,gBAAgB8H,sBAAhB,GAAyC,UAAUlG,GAAV,EAAe;AACtD;AACA;AACA,MAAIA,IAAImG,IAAJ,KAAa,KAAjB,EACE,OAAO,IAAP;AACF,MAAInG,IAAIoG,MAAJ,CAAWC,OAAX,CAAmB,iCAAnB,MAA0D,CAA9D,EACE,OAAO,IAAP;;AAEF;AACA;AACA;AACA,MAAIrG,IAAIoG,MAAJ,CAAWC,OAAX,CAAmB,iCAAnB,MAA0D,CAA9D,EACE,OAAO,IAAP;;AAEF,SAAO,KAAP;AACD,CAfD;;AAiBA,IAAId,+BAA+B,SAA/BA,4BAA+B,CAAU/D,UAAV,EAAsBiC,QAAtB,EAAgCiB,GAAhC,EACUQ,QADV,EACoB5G,OADpB,EAC6BiC,QAD7B,EACuC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI+F,MAAJ;AACA;AACA;AACA,MAAIpB,QAAJ,EAAc;AACZ;AACA;AACA;AACA;AACA,QAAIqB,cAAcpD,gBAAgBqD,sBAAhB,CAAuC/C,QAAvC,CAAlB;;AAEA6C,aAASC,WAAT;;AAEA;AACAxK,MAAEK,IAAF,CAAOkK,MAAP,EAAe,UAAUjK,KAAV,EAAiBC,GAAjB,EAAsB;AACnC,UAAImK,QAAQnK,IAAIoK,KAAJ,CAAU,GAAV,CAAZ;;AAEA,UAAID,MAAMV,MAAN,GAAe,CAAnB,EAAsB;AACpB;AACA,eAAOO,OAAOhK,GAAP,CAAP;;AAEA,YAAIqK,MAAML,MAAV;AAAA,YACIM,OAAOH,MAAMI,GAAN,EADX;;AAGA;AACA;AACA;AACA;;AAEA,eAAQvK,MAAMmK,MAAMK,KAAN,EAAd,EAA8B;AAC5B,cAAI,QAAOH,IAAIrK,GAAJ,CAAP,MAAoB,QAAxB,EAAkC;AAChCqK,gBAAIrK,GAAJ,IAAW,EAAX;AACD;;AAEDqK,gBAAMA,IAAIrK,GAAJ,CAAN;AACD;;AAEDqK,YAAIC,IAAJ,IAAYvK,KAAZ;AACD;AACF,KAzBD;;AA2BA8G,oBAAgB4D,OAAhB,CAAwBT,MAAxB,EAAgC5B,GAAhC,EAAqC,EAACsC,UAAU,IAAX,EAArC;AACD,GAtCD,MAsCO;AACLV,aAAS5B,GAAT;AACD;;AAED,MAAIY,aAAahH,QAAQgH,UAAzB,CA5DwE,CA4DnC;AACrC,MAAI2B,qBAAqB;AACvBnI,UAAM,IADiB;AAEvBgG,WAAOxG,QAAQwG;AAFQ,GAAzB;AAIA,MAAIoC,qBAAqB;AACvBpI,UAAM,IADiB;AAEvB+F,YAAQ;AAFe,GAAzB;;AAKA,MAAIsC,QAAQlB,oBAAZ;;AAEA,MAAImB,WAAW,SAAXA,QAAW,GAAY;AACzBD;AACA,QAAI,CAAEA,KAAN,EAAa;AACX5G,eAAS,IAAIU,KAAJ,CAAU,yBAAyBgF,oBAAzB,GAAgD,SAA1D,CAAT;AACD,KAFD,MAEO;AACLzE,iBAAWiE,MAAX,CAAkBhC,QAAlB,EAA4BiB,GAA5B,EAAiCuC,kBAAjC,EACkBpE,wBAAwB,UAAU7C,GAAV,EAAe2C,MAAf,EAAuB;AAC7C,YAAI3C,GAAJ,EAAS;AACPO,mBAASP,GAAT;AACD,SAFD,MAEO,IAAI2C,UAAUA,OAAOA,MAAP,CAAcqD,CAAd,IAAmB,CAAjC,EAAoC;AACzCzF,mBAAS,IAAT,EAAe;AACb0D,4BAAgBtB,OAAOA,MAAP,CAAcqD;AADjB,WAAf;AAGD,SAJM,MAIA;AACLqB;AACD;AACF,OAVD,CADlB;AAYD;AACF,GAlBD;;AAoBA,MAAIA,sBAAsB,SAAtBA,mBAAsB,GAAY;AACpC,QAAIC,oBAAoBvL,EAAE6C,MAAF,CACtBb,aAAa,EAACuF,KAAKgC,UAAN,EAAb,EAAgC5H,0BAAhC,CADsB,EAEtB4I,MAFsB,CAAxB;AAGA9E,eAAWiE,MAAX,CAAkBhC,QAAlB,EAA4B6D,iBAA5B,EAA+CJ,kBAA/C,EACkBrE,wBAAwB,UAAU7C,GAAV,EAAe2C,MAAf,EAAuB;AAC7C,UAAI3C,GAAJ,EAAS;AACP;AACA;AACA;AACA,YAAI5B,gBAAgB8H,sBAAhB,CAAuClG,GAAvC,CAAJ,EAAiD;AAC/CoH;AACD,SAFD,MAEO;AACL7G,mBAASP,GAAT;AACD;AACF,OATD,MASO;AACLO,iBAAS,IAAT,EAAe;AACb0D,0BAAgBtB,OAAOA,MAAP,CAAcmD,QAAd,CAAuBC,MAD1B;AAEbT,sBAAYA;AAFC,SAAf;AAID;AACF,KAhBD,CADlB;AAkBD,GAtBD;;AAwBA8B;AACD,CAtHD;;AAwHArL,EAAEK,IAAF,CAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,gBAA/B,EAAiD,cAAjD,CAAP,EAAyE,UAAUmL,MAAV,EAAkB;AACzFnJ,kBAAgB5B,SAAhB,CAA0B+K,MAA1B,IAAoC,YAAU,eAAiB;AAC7D,QAAIhJ,OAAO,IAAX;AACA,WAAOuB,OAAO0H,SAAP,CAAiBjJ,KAAK,MAAMgJ,MAAX,CAAjB,EAAqCE,KAArC,CAA2ClJ,IAA3C,EAAiDmJ,SAAjD,CAAP;AACD,GAHD;AAID,CALD;;AAOA;AACA;AACA;AACAtJ,gBAAgB5B,SAAhB,CAA0BqI,MAA1B,GAAmC,UAAUvD,cAAV,EAA0BmC,QAA1B,EAAoCiB,GAApC,EACUpG,OADV,EACmBiC,QADnB,EAC6B;AAC9D,MAAIhC,OAAO,IAAX;AACA,MAAI,OAAOD,OAAP,KAAmB,UAAnB,IAAiC,CAAEiC,QAAvC,EAAiD;AAC/CA,eAAWjC,OAAX;AACAA,cAAU,EAAV;AACD;;AAED,SAAOC,KAAKkH,MAAL,CAAYnE,cAAZ,EAA4BmC,QAA5B,EAAsCiB,GAAtC,EACY3I,EAAE6C,MAAF,CAAS,EAAT,EAAaN,OAAb,EAAsB;AACpBuG,YAAQ,IADY;AAEpBW,mBAAe;AAFK,GAAtB,CADZ,EAIgBjF,QAJhB,CAAP;AAKD,CAbD;;AAeAnC,gBAAgB5B,SAAhB,CAA0BmL,IAA1B,GAAiC,UAAUrG,cAAV,EAA0BmC,QAA1B,EAAoCnF,OAApC,EAA6C;AAC5E,MAAIC,OAAO,IAAX;;AAEA,MAAImJ,UAAU3B,MAAV,KAAqB,CAAzB,EACEtC,WAAW,EAAX;;AAEF,SAAO,IAAImE,MAAJ,CACLrJ,IADK,EACC,IAAIsJ,iBAAJ,CAAsBvG,cAAtB,EAAsCmC,QAAtC,EAAgDnF,OAAhD,CADD,CAAP;AAED,CARD;;AAUAF,gBAAgB5B,SAAhB,CAA0BsL,OAA1B,GAAoC,UAAU/E,eAAV,EAA2BU,QAA3B,EACUnF,OADV,EACmB;AACrD,MAAIC,OAAO,IAAX;AACA,MAAImJ,UAAU3B,MAAV,KAAqB,CAAzB,EACEtC,WAAW,EAAX;;AAEFnF,YAAUA,WAAW,EAArB;AACAA,UAAQyJ,KAAR,GAAgB,CAAhB;AACA,SAAOxJ,KAAKoJ,IAAL,CAAU5E,eAAV,EAA2BU,QAA3B,EAAqCnF,OAArC,EAA8C0J,KAA9C,GAAsD,CAAtD,CAAP;AACD,CATD;;AAWA;AACA;AACA5J,gBAAgB5B,SAAhB,CAA0ByL,YAA1B,GAAyC,UAAU3G,cAAV,EAA0B4G,KAA1B,EACU5J,OADV,EACmB;AAC1D,MAAIC,OAAO,IAAX;;AAEA;AACA;AACA,MAAIiD,aAAajD,KAAK8C,aAAL,CAAmBC,cAAnB,CAAjB;AACA,MAAIC,SAAS,IAAIrG,MAAJ,EAAb;AACA,MAAIiN,YAAY3G,WAAW4G,WAAX,CAAuBF,KAAvB,EAA8B5J,OAA9B,EAAuCiD,OAAOd,QAAP,EAAvC,CAAhB;AACAc,SAAOb,IAAP;AACD,CAVD;AAWAtC,gBAAgB5B,SAAhB,CAA0B6L,UAA1B,GAAuC,UAAU/G,cAAV,EAA0B4G,KAA1B,EAAiC;AACtE,MAAI3J,OAAO,IAAX;;AAEA;AACA;AACA,MAAIiD,aAAajD,KAAK8C,aAAL,CAAmBC,cAAnB,CAAjB;AACA,MAAIC,SAAS,IAAIrG,MAAJ,EAAb;AACA,MAAIiN,YAAY3G,WAAW8G,SAAX,CAAqBJ,KAArB,EAA4B3G,OAAOd,QAAP,EAA5B,CAAhB;AACAc,SAAOb,IAAP;AACD,CATD;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAmH,oBAAoB,2BAAUvG,cAAV,EAA0BmC,QAA1B,EAAoCnF,OAApC,EAA6C;AAC/D,MAAIC,OAAO,IAAX;AACAA,OAAK+C,cAAL,GAAsBA,cAAtB;AACA/C,OAAKkF,QAAL,GAAgBrG,MAAMmL,UAAN,CAAiBC,gBAAjB,CAAkC/E,QAAlC,CAAhB;AACAlF,OAAKD,OAAL,GAAeA,WAAW,EAA1B;AACD,CALD;;AAOAsJ,SAAS,gBAAUa,KAAV,EAAiBC,iBAAjB,EAAoC;AAC3C,MAAInK,OAAO,IAAX;;AAEAA,OAAKoK,MAAL,GAAcF,KAAd;AACAlK,OAAKqK,kBAAL,GAA0BF,iBAA1B;AACAnK,OAAKsK,kBAAL,GAA0B,IAA1B;AACD,CAND;;AAQA9M,EAAEK,IAAF,CAAO,CAAC,SAAD,EAAY,KAAZ,EAAmB,OAAnB,EAA4B,OAA5B,CAAP,EAA6C,UAAUmL,MAAV,EAAkB;AAC7DK,SAAOpL,SAAP,CAAiB+K,MAAjB,IAA2B,YAAY;AACrC,QAAIhJ,OAAO,IAAX;;AAEA;AACA,QAAIA,KAAKqK,kBAAL,CAAwBtK,OAAxB,CAAgCwK,QAApC,EACE,MAAM,IAAI7H,KAAJ,CAAU,iBAAiBsG,MAAjB,GAA0B,uBAApC,CAAN;;AAEF,QAAI,CAAChJ,KAAKsK,kBAAV,EAA8B;AAC5BtK,WAAKsK,kBAAL,GAA0BtK,KAAKoK,MAAL,CAAYI,wBAAZ,CACxBxK,KAAKqK,kBADmB,EACC;AACvB;AACA;AACAI,0BAAkBzK,IAHK;AAIvB0K,sBAAc;AAJS,OADD,CAA1B;AAOD;;AAED,WAAO1K,KAAKsK,kBAAL,CAAwBtB,MAAxB,EAAgCE,KAAhC,CACLlJ,KAAKsK,kBADA,EACoBnB,SADpB,CAAP;AAED,GAnBD;AAoBD,CArBD;;AAuBA;AACA;AACA;AACA;AACAE,OAAOpL,SAAP,CAAiB0M,MAAjB,GAA0B,YAAY,CACrC,CADD;;AAGAtB,OAAOpL,SAAP,CAAiB2M,YAAjB,GAAgC,YAAY;AAC1C,SAAO,KAAKP,kBAAL,CAAwBtK,OAAxB,CAAgC8K,SAAvC;AACD,CAFD;;AAIA;AACA;AACA;;AAEAxB,OAAOpL,SAAP,CAAiB6M,cAAjB,GAAkC,UAAUC,GAAV,EAAe;AAC/C,MAAI/K,OAAO,IAAX;AACA,MAAIiD,aAAajD,KAAKqK,kBAAL,CAAwBtH,cAAzC;AACA,SAAOlE,MAAMmL,UAAN,CAAiBc,cAAjB,CAAgC9K,IAAhC,EAAsC+K,GAAtC,EAA2C9H,UAA3C,CAAP;AACD,CAJD;;AAMA;AACA;AACA;AACAoG,OAAOpL,SAAP,CAAiB+M,kBAAjB,GAAsC,YAAY;AAChD,MAAIhL,OAAO,IAAX;AACA,SAAOA,KAAKqK,kBAAL,CAAwBtH,cAA/B;AACD,CAHD;;AAKAsG,OAAOpL,SAAP,CAAiBgN,OAAjB,GAA2B,UAAUC,SAAV,EAAqB;AAC9C,MAAIlL,OAAO,IAAX;AACA,SAAO4E,gBAAgBuG,0BAAhB,CAA2CnL,IAA3C,EAAiDkL,SAAjD,CAAP;AACD,CAHD;;AAKA7B,OAAOpL,SAAP,CAAiBmN,cAAjB,GAAkC,UAAUF,SAAV,EAAqB;AACrD,MAAIlL,OAAO,IAAX;AACA,MAAIqL,UAAUzG,gBAAgB0G,kCAAhB,CAAmDJ,SAAnD,CAAd;AACA,SAAOlL,KAAKoK,MAAL,CAAYmB,eAAZ,CACLvL,KAAKqK,kBADA,EACoBgB,OADpB,EAC6BH,SAD7B,CAAP;AAED,CALD;;AAOArL,gBAAgB5B,SAAhB,CAA0BuM,wBAA1B,GAAqD,UACjDL,iBADiD,EAC9BpK,OAD8B,EACrB;AAC9B,MAAIC,OAAO,IAAX;AACAD,YAAUvC,EAAEgO,IAAF,CAAOzL,WAAW,EAAlB,EAAsB,kBAAtB,EAA0C,cAA1C,CAAV;;AAEA,MAAIkD,aAAajD,KAAK8C,aAAL,CAAmBqH,kBAAkBpH,cAArC,CAAjB;AACA,MAAI0I,gBAAgBtB,kBAAkBpK,OAAtC;AACA,MAAIK,eAAe;AACjBsL,UAAMD,cAAcC,IADH;AAEjBlC,WAAOiC,cAAcjC,KAFJ;AAGjBmC,UAAMF,cAAcE;AAHH,GAAnB;;AAMA;AACA,MAAIF,cAAclB,QAAlB,EAA4B;AAC1B;AACAnK,iBAAamK,QAAb,GAAwB,IAAxB;AACA;AACA;AACAnK,iBAAawL,SAAb,GAAyB,IAAzB;AACA;AACA;AACAxL,iBAAayL,eAAb,GAA+B,CAAC,CAAhC;AACA;AACA;AACA;AACA;AACA;AACA,QAAI1B,kBAAkBpH,cAAlB,KAAqC+I,gBAArC,IACA3B,kBAAkBjF,QAAlB,CAA2B6G,EAD/B,EACmC;AACjC3L,mBAAa4L,WAAb,GAA2B,IAA3B;AACD;AACF;;AAED,MAAIC,WAAWhJ,WAAWmG,IAAX,CACb5J,aAAa2K,kBAAkBjF,QAA/B,EAAyC/F,0BAAzC,CADa,EAEbsM,cAAcS,MAFD,EAES9L,YAFT,CAAf;;AAIA,SAAO,IAAI+L,iBAAJ,CAAsBF,QAAtB,EAAgC9B,iBAAhC,EAAmDpK,OAAnD,CAAP;AACD,CAvCD;;AAyCA,IAAIoM,oBAAoB,SAApBA,iBAAoB,CAAUF,QAAV,EAAoB9B,iBAApB,EAAuCpK,OAAvC,EAAgD;AACtE,MAAIC,OAAO,IAAX;AACAD,YAAUvC,EAAEgO,IAAF,CAAOzL,WAAW,EAAlB,EAAsB,kBAAtB,EAA0C,cAA1C,CAAV;;AAEAC,OAAKoM,SAAL,GAAiBH,QAAjB;AACAjM,OAAKqK,kBAAL,GAA0BF,iBAA1B;AACA;AACA;AACAnK,OAAKqM,iBAAL,GAAyBtM,QAAQ0K,gBAAR,IAA4BzK,IAArD;AACA,MAAID,QAAQ2K,YAAR,IAAwBP,kBAAkBpK,OAAlB,CAA0B8K,SAAtD,EAAiE;AAC/D7K,SAAKsM,UAAL,GAAkB1H,gBAAgB2H,aAAhB,CAChBpC,kBAAkBpK,OAAlB,CAA0B8K,SADV,CAAlB;AAED,GAHD,MAGO;AACL7K,SAAKsM,UAAL,GAAkB,IAAlB;AACD;;AAED;AACA;AACA;AACAtM,OAAKwM,sBAAL,GAA8B7P,OAAOkG,IAAP,CAC5BoJ,SAASQ,UAAT,CAAoB9O,IAApB,CAAyBsO,QAAzB,CAD4B,EACQ,CADR,CAA9B;AAEAjM,OAAK0M,iBAAL,GAAyB/P,OAAOkG,IAAP,CAAYoJ,SAASU,KAAT,CAAehP,IAAf,CAAoBsO,QAApB,CAAZ,CAAzB;AACAjM,OAAK4M,WAAL,GAAmB,IAAIhI,gBAAgBiI,MAApB,EAAnB;AACD,CAvBD;;AAyBArP,EAAE6C,MAAF,CAAS8L,kBAAkBlO,SAA3B,EAAsC;AACpC6O;AAAa,2BAAY;AACvB,UAAI9M,OAAO,IAAX;;AAEA,aAAO,IAAP,EAAa;AACX,YAAI+B,MAAM/B,KAAKwM,sBAAL,GAA8BrK,IAA9B,EAAV;;AAEA,YAAI,CAACJ,GAAL,EAAU,OAAO,IAAP;AACVA,cAAMvC,aAAauC,GAAb,EAAkBxD,0BAAlB,CAAN;;AAEA,YAAI,CAACyB,KAAKqK,kBAAL,CAAwBtK,OAAxB,CAAgCwK,QAAjC,IAA6C/M,EAAEwD,GAAF,CAAMe,GAAN,EAAW,KAAX,CAAjD,EAAoE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,cAAI/B,KAAK4M,WAAL,CAAiB5L,GAAjB,CAAqBe,IAAIgD,GAAzB,CAAJ,EAAmC;AACnC/E,eAAK4M,WAAL,CAAiBG,GAAjB,CAAqBhL,IAAIgD,GAAzB,EAA8B,IAA9B;AACD;;AAED,YAAI/E,KAAKsM,UAAT,EACEvK,MAAM/B,KAAKsM,UAAL,CAAgBvK,GAAhB,CAAN;;AAEF,eAAOA,GAAP;AACD;AACF;;AAzBD;AAAA,KADoC;;AA4BpCiL;AAAS,qBAAUhL,QAAV,EAAoBiL,OAApB,EAA6B;AACpC,UAAIjN,OAAO,IAAX;;AAEA;AACAA,WAAKkN,OAAL;;AAEA;AACA;AACA;AACA,UAAIvD,QAAQ,CAAZ;AACA,aAAO,IAAP,EAAa;AACX,YAAI5H,MAAM/B,KAAK8M,WAAL,EAAV;AACA,YAAI,CAAC/K,GAAL,EAAU;AACVC,iBAASmL,IAAT,CAAcF,OAAd,EAAuBlL,GAAvB,EAA4B4H,OAA5B,EAAqC3J,KAAKqM,iBAA1C;AACD;AACF;;AAfD;AAAA,KA5BoC;;AA6CpC;AACA3O;AAAK,iBAAUsE,QAAV,EAAoBiL,OAApB,EAA6B;AAChC,UAAIjN,OAAO,IAAX;AACA,UAAIoN,MAAM,EAAV;AACApN,WAAKgN,OAAL,CAAa,UAAUjL,GAAV,EAAe4H,KAAf,EAAsB;AACjCyD,YAAIC,IAAJ,CAASrL,SAASmL,IAAT,CAAcF,OAAd,EAAuBlL,GAAvB,EAA4B4H,KAA5B,EAAmC3J,KAAKqM,iBAAxC,CAAT;AACD,OAFD;AAGA,aAAOe,GAAP;AACD;;AAPD;AAAA,KA9CoC;;AAuDpCF;AAAS,uBAAY;AACnB,UAAIlN,OAAO,IAAX;;AAEA;AACAA,WAAKoM,SAAL,CAAezB,MAAf;;AAEA3K,WAAK4M,WAAL,GAAmB,IAAIhI,gBAAgBiI,MAApB,EAAnB;AACD;;AAPD;AAAA,KAvDoC;;AAgEpC;AACApK;AAAO,qBAAY;AACjB,UAAIzC,OAAO,IAAX;;AAEAA,WAAKoM,SAAL,CAAe3J,KAAf;AACD;;AAJD;AAAA,KAjEoC;;AAuEpCgH;AAAO,qBAAY;AACjB,UAAIzJ,OAAO,IAAX;AACA,aAAOA,KAAKtC,GAAL,CAASF,EAAE8P,QAAX,CAAP;AACD;;AAHD;AAAA,KAvEoC;;AA4EpCX;AAAO,mBAAUY,cAAV,EAAiC;AACtC,UAAIvN,OAAO,IAAX;AACA,aAAOA,KAAK0M,iBAAL,CAAuBa,cAAvB,EAAuCpL,IAAvC,EAAP;AACD;;AAHD;AAAA,KA5EoC;;AAiFpC;AACAqL;AAAe,2BAAUnC,OAAV,EAAmB;AAChC,UAAIrL,OAAO,IAAX;AACA,UAAIqL,OAAJ,EAAa;AACX,eAAOrL,KAAKyJ,KAAL,EAAP;AACD,OAFD,MAEO;AACL,YAAIgE,UAAU,IAAI7I,gBAAgBiI,MAApB,EAAd;AACA7M,aAAKgN,OAAL,CAAa,UAAUjL,GAAV,EAAe;AAC1B0L,kBAAQV,GAAR,CAAYhL,IAAIgD,GAAhB,EAAqBhD,GAArB;AACD,SAFD;AAGA,eAAO0L,OAAP;AACD;AACF;;AAXD;AAAA;AAlFoC,CAAtC;;AAgGA5N,gBAAgB5B,SAAhB,CAA0ByP,IAA1B,GAAiC,UAAUvD,iBAAV,EAA6BwD,WAA7B,EAA0C;AACzE,MAAI3N,OAAO,IAAX;AACA,MAAI,CAACmK,kBAAkBpK,OAAlB,CAA0BwK,QAA/B,EACE,MAAM,IAAI7H,KAAJ,CAAU,iCAAV,CAAN;;AAEF,MAAIkL,SAAS5N,KAAKwK,wBAAL,CAA8BL,iBAA9B,CAAb;;AAEA,MAAI0D,UAAU,KAAd;AACA,MAAIC,SAAS5O,SAAb;AACA,MAAI6O,OAAO,SAAPA,IAAO,GAAY;AACrB,WAAO,IAAP,EAAa;AACX,UAAIF,OAAJ,EACE;AACF,UAAI;AACF,YAAI9L,MAAM6L,OAAOd,WAAP,EAAV;AACD,OAFD,CAEE,OAAOrL,GAAP,EAAY;AACZ;AACA;AACA;AACAM,cAAM,IAAN;AACD;AACD;AACA;AACA,UAAI8L,OAAJ,EACE;AACF,UAAI9L,GAAJ,EAAS;AACP;AACA;AACA;AACA;AACA+L,iBAAS/L,IAAIgK,EAAb;AACA4B,oBAAY5L,GAAZ;AACD,OAPD,MAOO;AACL,YAAIiM,cAAcxQ,EAAEU,KAAF,CAAQiM,kBAAkBjF,QAA1B,CAAlB;AACA,YAAI4I,MAAJ,EAAY;AACVE,sBAAYjC,EAAZ,GAAiB,EAACkC,KAAKH,MAAN,EAAjB;AACD;AACDF,iBAAS5N,KAAKwK,wBAAL,CAA8B,IAAIlB,iBAAJ,CACrCa,kBAAkBpH,cADmB,EAErCiL,WAFqC,EAGrC7D,kBAAkBpK,OAHmB,CAA9B,CAAT;AAIA;AACA;AACA;AACAwB,eAAO2M,UAAP,CAAkBH,IAAlB,EAAwB,GAAxB;AACA;AACD;AACF;AACF,GAvCD;;AAyCAxM,SAAO4M,KAAP,CAAaJ,IAAb;;AAEA,SAAO;AACLnL;AAAM,sBAAY;AAChBiL,kBAAU,IAAV;AACAD,eAAOnL,KAAP;AACD;;AAHD;AAAA;AADK,GAAP;AAMD,CA1DD;;AA4DA5C,gBAAgB5B,SAAhB,CAA0BsN,eAA1B,GAA4C,UACxCpB,iBADwC,EACrBkB,OADqB,EACZH,SADY,EACD;AACzC,MAAIlL,OAAO,IAAX;;AAEA,MAAImK,kBAAkBpK,OAAlB,CAA0BwK,QAA9B,EAAwC;AACtC,WAAOvK,KAAKoO,uBAAL,CAA6BjE,iBAA7B,EAAgDkB,OAAhD,EAAyDH,SAAzD,CAAP;AACD;;AAED;AACA;AACA,MAAIf,kBAAkBpK,OAAlB,CAA0BmM,MAA1B,KACC/B,kBAAkBpK,OAAlB,CAA0BmM,MAA1B,CAAiCnH,GAAjC,KAAyC,CAAzC,IACAoF,kBAAkBpK,OAAlB,CAA0BmM,MAA1B,CAAiCnH,GAAjC,KAAyC,KAF1C,CAAJ,EAEsD;AACpD,UAAMrC,MAAM,sDAAN,CAAN;AACD;;AAED,MAAI2L,aAAaC,KAAKC,SAAL,CACf/Q,EAAE6C,MAAF,CAAS,EAACgL,SAASA,OAAV,EAAT,EAA6BlB,iBAA7B,CADe,CAAjB;;AAGA,MAAIqE,WAAJ,EAAiBC,aAAjB;AACA,MAAIC,cAAc,KAAlB;;AAEA;AACA;AACA;AACAnN,SAAOoN,gBAAP,CAAwB,YAAY;AAClC,QAAInR,EAAEwD,GAAF,CAAMhB,KAAKC,oBAAX,EAAiCoO,UAAjC,CAAJ,EAAkD;AAChDG,oBAAcxO,KAAKC,oBAAL,CAA0BoO,UAA1B,CAAd;AACD,KAFD,MAEO;AACLK,oBAAc,IAAd;AACA;AACAF,oBAAc,IAAII,kBAAJ,CAAuB;AACnCvD,iBAASA,OAD0B;AAEnCwD;AAAQ,4BAAY;AAClB,mBAAO7O,KAAKC,oBAAL,CAA0BoO,UAA1B,CAAP;AACAI,0BAAc7L,IAAd;AACD;;AAHD;AAAA;AAFmC,OAAvB,CAAd;AAOA5C,WAAKC,oBAAL,CAA0BoO,UAA1B,IAAwCG,WAAxC;AACD;AACF,GAfD;;AAiBA,MAAIM,gBAAgB,IAAIC,aAAJ,CAAkBP,WAAlB,EAA+BtD,SAA/B,CAApB;;AAEA,MAAIwD,WAAJ,EAAiB;AACf,QAAIM,OAAJ,EAAaC,MAAb;AACA,QAAIC,cAAc1R,EAAE2R,GAAF,CAAM,CACtB,YAAY;AACV;AACA;AACA;AACA,aAAOnP,KAAKmB,YAAL,IAAqB,CAACkK,OAAtB,IACL,CAACH,UAAUkE,qBADb;AAED,KAPqB,EAOnB,YAAY;AACb;AACA;AACA,UAAI;AACFJ,kBAAU,IAAIK,UAAUC,OAAd,CAAsBnF,kBAAkBjF,QAAxC,CAAV;AACA,eAAO,IAAP;AACD,OAHD,CAGE,OAAOR,CAAP,EAAU;AACV;AACA;AACA,eAAO,KAAP;AACD;AACF,KAlBqB,EAkBnB,YAAY;AACb;AACA,aAAO6K,mBAAmBC,eAAnB,CAAmCrF,iBAAnC,EAAsD6E,OAAtD,CAAP;AACD,KArBqB,EAqBnB,YAAY;AACb;AACA;AACA,UAAI,CAAC7E,kBAAkBpK,OAAlB,CAA0B2L,IAA/B,EACE,OAAO,IAAP;AACF,UAAI;AACFuD,iBAAS,IAAII,UAAUI,MAAd,CAAqBtF,kBAAkBpK,OAAlB,CAA0B2L,IAA/C,EACqB,EAAEsD,SAASA,OAAX,EADrB,CAAT;AAEA,eAAO,IAAP;AACD,OAJD,CAIE,OAAOtK,CAAP,EAAU;AACV;AACA;AACA,eAAO,KAAP;AACD;AACF,KAnCqB,CAAN,EAmCZ,UAAUgL,CAAV,EAAa;AAAE,aAAOA,GAAP;AAAa,KAnChB,CAAlB,CAFe,CAqCuB;;AAEtC,QAAIC,cAAcT,cAAcK,kBAAd,GAAmCK,oBAArD;AACAnB,oBAAgB,IAAIkB,WAAJ,CAAgB;AAC9BxF,yBAAmBA,iBADW;AAE9B0F,mBAAa7P,IAFiB;AAG9BwO,mBAAaA,WAHiB;AAI9BnD,eAASA,OAJqB;AAK9B2D,eAASA,OALqB,EAKX;AACnBC,cAAQA,MANsB,EAMb;AACjBG,6BAAuBlE,UAAUkE;AAPH,KAAhB,CAAhB;;AAUA;AACAZ,gBAAYsB,cAAZ,GAA6BrB,aAA7B;AACD;;AAED;AACAD,cAAYuB,2BAAZ,CAAwCjB,aAAxC;;AAEA,SAAOA,aAAP;AACD,CAtGD;;AAwGA;AACA;AACA;AACA;AACA;;AAEAkB,YAAY,mBAAU7F,iBAAV,EAA6B8F,cAA7B,EAA6C;AACvD,MAAIC,YAAY,EAAhB;AACAC,iBAAehG,iBAAf,EAAkC,UAAUiG,OAAV,EAAmB;AACnDF,cAAU7C,IAAV,CAAe3J,UAAU2M,qBAAV,CAAgCC,MAAhC,CACbF,OADa,EACJH,cADI,CAAf;AAED,GAHD;;AAKA,SAAO;AACLrN;AAAM,sBAAY;AAChBpF,UAAEK,IAAF,CAAOqS,SAAP,EAAkB,UAAUK,QAAV,EAAoB;AACpCA,mBAAS3N,IAAT;AACD,SAFD;AAGD;;AAJD;AAAA;AADK,GAAP;AAOD,CAdD;;AAgBAuN,iBAAiB,wBAAUhG,iBAAV,EAA6BqG,eAA7B,EAA8C;AAC7D,MAAIzS,MAAM,EAACkF,YAAYkH,kBAAkBpH,cAA/B,EAAV;AACA,MAAIqC,cAAcR,gBAAgBS,qBAAhB,CAChB8E,kBAAkBjF,QADF,CAAlB;AAEA,MAAIE,WAAJ,EAAiB;AACf5H,MAAEK,IAAF,CAAOuH,WAAP,EAAoB,UAAUN,EAAV,EAAc;AAChC0L,sBAAgBhT,EAAE6C,MAAF,CAAS,EAACyE,IAAIA,EAAL,EAAT,EAAmB/G,GAAnB,CAAhB;AACD,KAFD;AAGAyS,oBAAgBhT,EAAE6C,MAAF,CAAS,EAACyF,gBAAgB,IAAjB,EAAuBhB,IAAI,IAA3B,EAAT,EAA2C/G,GAA3C,CAAhB;AACD,GALD,MAKO;AACLyS,oBAAgBzS,GAAhB;AACD;AACD;AACAyS,kBAAgB,EAAEvK,cAAc,IAAhB,EAAhB;AACD,CAdD;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApG,gBAAgB5B,SAAhB,CAA0BmQ,uBAA1B,GAAoD,UAChDjE,iBADgD,EAC7BkB,OAD6B,EACpBH,SADoB,EACT;AACzC,MAAIlL,OAAO,IAAX;;AAEA;AACA;AACA,MAAKqL,WAAW,CAACH,UAAUuF,WAAvB,IACC,CAACpF,OAAD,IAAY,CAACH,UAAUwF,KAD5B,EACoC;AAClC,UAAM,IAAIhO,KAAJ,CAAU,uBAAuB2I,UAAU,SAAV,GAAsB,WAA7C,IACE,6BADF,IAEGA,UAAU,aAAV,GAA0B,OAF7B,IAEwC,WAFlD,CAAN;AAGD;;AAED,SAAOrL,KAAK0N,IAAL,CAAUvD,iBAAV,EAA6B,UAAUpI,GAAV,EAAe;AACjD,QAAI+C,KAAK/C,IAAIgD,GAAb;AACA,WAAOhD,IAAIgD,GAAX;AACA;AACA,WAAOhD,IAAIgK,EAAX;AACA,QAAIV,OAAJ,EAAa;AACXH,gBAAUuF,WAAV,CAAsB3L,EAAtB,EAA0B/C,GAA1B,EAA+B,IAA/B;AACD,KAFD,MAEO;AACLmJ,gBAAUwF,KAAV,CAAgB5L,EAAhB,EAAoB/C,GAApB;AACD;AACF,GAVM,CAAP;AAWD,CAxBD;;AA0BA;AACA;AACA;AACAlF,eAAe8T,cAAf,GAAgCnU,QAAQwB,SAAxC;;AAEAnB,eAAe+T,UAAf,GAA4B/Q,eAA5B","file":"/packages/mongo/mongo_driver.js.map","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]\n      && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  var mongoOptions = _.extend({\n    db: { safe: true },\n    // http://mongodb.github.io/node-mongodb-native/2.2/api/Server.html\n    server: {\n      // Reconnect on error.\n      autoReconnect: true,\n      // Try to reconnect forever, instead of stopping after 30 tries (the\n      // default), with each attempt separated by 1000ms.\n      reconnectTries: Infinity\n    },\n    replSet: {}\n  }, Mongo._connectionOptions);\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // Internally the oplog connections specify their own poolSize\n  // which we don't want to overwrite with any user defined value\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n\n  var connectFuture = new Future;\n  MongoDB.connect(\n    url,\n    mongoOptions,\n    Meteor.bindEnvironment(\n      function (err, db) {\n        if (err) {\n          throw err;\n        }\n\n        // First, figure out what the current primary is, if any.\n        if (db.serverConfig.isMasterDoc) {\n          self._primary = db.serverConfig.isMasterDoc.primary;\n        }\n\n        db.serverConfig.on(\n          'joined', Meteor.bindEnvironment(function (kind, doc) {\n            if (kind === 'primary') {\n              if (doc.primary !== self._primary) {\n                self._primary = doc.primary;\n                self._onFailoverHook.each(function (callback) {\n                  callback();\n                  return true;\n                });\n              }\n            } else if (doc.me === self._primary) {\n              // The thing we thought was primary is now something other than\n              // primary.  Forget that we thought it was primary.  (This means\n              // that if a server stops being primary and then starts being\n              // primary again without another server becoming primary in the\n              // middle, we'll correctly count it as a failover.)\n              self._primary = null;\n            }\n          }));\n\n        // Allow the constructor to return.\n        connectFuture['return'](db);\n      },\n      connectFuture.resolver()  // onException\n    )\n  );\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future;\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence)\n    return fence.beginWrite();\n  else\n    return {committed: function () {}};\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback)\n      callback(err, result);\n    else if (err)\n      throw err;\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    var wrappedCallback = function(err, driverResult) {\n      callback(err, transformResult(driverResult).numberAffected);\n    };\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                       {safe: true}, wrappedCallback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n    return;\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && ! isModify) {\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.upsert && (! knownId) && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod,\n        isModify, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (err, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject)\n            callback(err, result.numberAffected);\n          else\n            callback(err, result);\n        }\n      );\n    } else {\n      collection.update(\n        mongoSelector, mongoMod, mongoOpts,\n        bindEnvironmentForWrite(function (err, result) {\n          if (! err) {\n            var meteorResult = transformResult(result);\n            if (meteorResult && options._returnObject) {\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n\n              if (options.upsert && meteorResult.insertedId && knownId) {\n                meteorResult.insertedId = knownId;\n              }\n              callback(err, meteorResult);\n            } else {\n              callback(err, meteorResult.numberAffected);\n            }\n          } else {\n            callback(err);\n          }\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function (mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in mod) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\n      \"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar transformResult = function (driverResult) {\n  var meteorResult = { numberAffected: 0 };\n  if (driverResult) {\n    mongoResult = driverResult.result;\n\n    // On updates with upsert:true, the inserted values come as a list of\n    // upserted values -- even with options.multi, when the upsert does insert,\n    // it only inserts one element.\n    if (mongoResult.upserted) {\n      meteorResult.numberAffected += mongoResult.upserted.length;\n\n      if (mongoResult.upserted.length == 1) {\n        meteorResult.insertedId = mongoResult.upserted[0]._id;\n      }\n    } else {\n      meteorResult.numberAffected = mongoResult.n;\n    }\n  }\n\n  return meteorResult;\n};\n\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596)\n    return true;\n  if (err.errmsg.indexOf(\"cannot change _id of a document\") === 0)\n    return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.errmsg.indexOf(\"The _id field cannot be changed\") === 0)\n    return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while ((key = trail.shift())) {\n          if (typeof obj[key] !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate,\n                        bindEnvironmentForWrite(function (err, result) {\n                          if (err) {\n                            callback(err);\n                          } else if (result && result.result.n != 0) {\n                            callback(null, {\n                              numberAffected: result.result.n\n                            });\n                          } else {\n                            doConditionalInsert();\n                          }\n                        }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    var replacementWithId = _.extend(\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n      newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\n                      bindEnvironmentForWrite(function (err, result) {\n                        if (err) {\n                          // figure out if this is a\n                          // \"cannot change _id of document\" error, and\n                          // if so, try doUpdate() again, up to 3 times.\n                          if (MongoConnection._isCannotChangeIdError(err)) {\n                            doUpdate();\n                          } else {\n                            callback(err);\n                          }\n                        } else {\n                          callback(null, {\n                            numberAffected: result.result.upserted.length,\n                            insertedId: insertedId,\n                          });\n                        }\n                      }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, {\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\n          // Cursor, not the SynchronousCursor.\n          selfForIteration: self,\n          useTransform: true\n        });\n    }\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {\n};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n}\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(\n    dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    var self = this;\n\n    while (true) {\n      var doc = self._synchronousNextObject().wait();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function (applySkipLimit: false) {\n    var self = this;\n    return self._synchronousCount(applySkipLimit).wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS = undefined;\n  var loop = function () {\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields &&\n      (cursorDescription.options.fields._id === 0 ||\n       cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort,\n                                        { matcher: matcher });\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n"]},"hash":"0cc50e5b66eaf090f5dda077978e0b188745a40f"}
