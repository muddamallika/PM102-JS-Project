{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/oplog_tailing.js","filenameRelative":"/packages/mongo/oplog_tailing.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/oplog_tailing.js.map","sourceFileName":"/packages/mongo/oplog_tailing.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"oplog_tailing"},"ignored":false,"code":"var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\n\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function showTS(ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function idForOp(op) {\n  if (op.op === 'd') return op.o._id;else if (op.op === 'i') return op.o._id;else if (op.op === 'u') return op.o2._id;else if (op.op === 'c') throw Error(\"Operator 'c' doesn't supply an object with id: \" + EJSON.stringify(op));else throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function OplogHandle(oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [{ op: { $in: ['i', 'u', 'd'] } },\n    // drop collection\n    { op: 'c', 'o.drop': { $exists: true } }, { op: 'c', 'o.dropDatabase': 1 }]\n  };\n\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    function stop() {\n      var self = this;\n      if (self._stopped) return;\n      self._stopped = true;\n      if (self._tailHandle) self._tailHandle.stop();\n      // XXX should close connections too\n    }\n\n    return stop;\n  }(),\n  onOplogEntry: function () {\n    function onOplogEntry(trigger, callback) {\n      var self = this;\n      if (self._stopped) throw new Error(\"Called onOplogEntry on stopped handle!\");\n\n      // Calling onOplogEntry requires us to wait for the tailing to be ready.\n      self._readyFuture.wait();\n\n      var originalCallback = callback;\n      callback = Meteor.bindEnvironment(function (notification) {\n        // XXX can we avoid this clone by making oplog.js careful?\n        originalCallback(EJSON.clone(notification));\n      }, function (err) {\n        Meteor._debug(\"Error in oplog callback\", err.stack);\n      });\n      var listenHandle = self._crossbar.listen(trigger, callback);\n      return {\n        stop: function () {\n          function stop() {\n            listenHandle.stop();\n          }\n\n          return stop;\n        }()\n      };\n    }\n\n    return onOplogEntry;\n  }(),\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function () {\n    function onSkippedEntries(callback) {\n      var self = this;\n      if (self._stopped) throw new Error(\"Called onSkippedEntries on stopped handle!\");\n      return self._onSkippedEntriesHook.register(callback);\n    }\n\n    return onSkippedEntries;\n  }(),\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    function waitUntilCaughtUp() {\n      var self = this;\n      if (self._stopped) throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");\n\n      // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n      // be ready.\n      self._readyFuture.wait();\n\n      while (!self._stopped) {\n        // We need to make the selector at least as restrictive as the actual\n        // tailing selector (ie, we need to specify the DB name) or else we might\n        // find a TS that won't show up in the actual tail stream.\n        try {\n          var lastEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, self._baseOplogSelector, { fields: { ts: 1 }, sort: { $natural: -1 } });\n          break;\n        } catch (e) {\n          // During failover (eg) if we get an exception we should log and retry\n          // instead of crashing.\n          Meteor._debug(\"Got exception while reading last entry: \" + e);\n          Meteor._sleepForMs(100);\n        }\n      }\n\n      if (self._stopped) return;\n\n      if (!lastEntry) {\n        // Really, nothing in the oplog? Well, we've processed everything.\n        return;\n      }\n\n      var ts = lastEntry.ts;\n      if (!ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n      if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n        // We've already caught up to here.\n        return;\n      }\n\n      // Insert the future into our list. Almost always, this will be at the end,\n      // but it's conceivable that if we fail over from one primary to another,\n      // the oplog entries we see will go backwards.\n      var insertAfter = self._catchingUpFutures.length;\n      while (insertAfter - 1 > 0 && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n        insertAfter--;\n      }\n      var f = new Future();\n      self._catchingUpFutures.splice(insertAfter, 0, { ts: ts, future: f });\n      f.wait();\n    }\n\n    return waitUntilCaughtUp;\n  }(),\n  _startTailing: function () {\n    function _startTailing() {\n      var self = this;\n      // First, make sure that we're talking to the local database.\n      var mongodbUri = Npm.require('mongodb-uri');\n      if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n        throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");\n      }\n\n      // We make two separate connections to Mongo. The Node Mongo driver\n      // implements a naive round-robin connection pool: each \"connection\" is a\n      // pool of several (5 by default) TCP connections, and each request is\n      // rotated through the pools. Tailable cursor queries block on the server\n      // until there is some data to return (or until a few seconds have\n      // passed). So if the connection pool used for tailing cursors is the same\n      // pool used for other queries, the other queries will be delayed by seconds\n      // 1/5 of the time.\n      //\n      // The tail connection will only ever be running a single tail command, so\n      // it only needs to make one underlying TCP connection.\n      self._oplogTailConnection = new MongoConnection(self._oplogUrl, { poolSize: 1 });\n      // XXX better docs, but: it's to get monotonic results\n      // XXX is it safe to say \"if there's an in flight query, just use its\n      //     results\"? I don't think so but should consider that\n      self._oplogLastEntryConnection = new MongoConnection(self._oplogUrl, { poolSize: 1 });\n\n      // Now, make sure that there actually is a repl set here. If not, oplog\n      // tailing won't ever find anything!\n      // More on the isMasterDoc\n      // https://docs.mongodb.com/manual/reference/command/isMaster/\n      var f = new Future();\n      self._oplogLastEntryConnection.db.admin().command({ ismaster: 1 }, f.resolver());\n      var isMasterDoc = f.wait();\n\n      if (!(isMasterDoc && isMasterDoc.setName)) {\n        throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");\n      }\n\n      // Find the last oplog entry.\n      var lastOplogEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, {}, { sort: { $natural: -1 }, fields: { ts: 1 } });\n\n      var oplogSelector = _.clone(self._baseOplogSelector);\n      if (lastOplogEntry) {\n        // Start after the last entry that currently exists.\n        oplogSelector.ts = { $gt: lastOplogEntry.ts };\n        // If there are any calls to callWhenProcessedLatest before any other\n        // oplog entries show up, allow callWhenProcessedLatest to call its\n        // callback immediately.\n        self._lastProcessedTS = lastOplogEntry.ts;\n      }\n\n      var cursorDescription = new CursorDescription(OPLOG_COLLECTION, oplogSelector, { tailable: true });\n\n      self._tailHandle = self._oplogTailConnection.tail(cursorDescription, function (doc) {\n        self._entryQueue.push(doc);\n        self._maybeStartWorker();\n      });\n      self._readyFuture['return']();\n    }\n\n    return _startTailing;\n  }(),\n\n  _maybeStartWorker: function () {\n    function _maybeStartWorker() {\n      var self = this;\n      if (self._workerActive) return;\n      self._workerActive = true;\n      Meteor.defer(function () {\n        try {\n          while (!self._stopped && !self._entryQueue.isEmpty()) {\n            // Are we too far behind? Just tell our observers that they need to\n            // repoll, and drop our queue.\n            if (self._entryQueue.length > TOO_FAR_BEHIND) {\n              var lastEntry = self._entryQueue.pop();\n              self._entryQueue.clear();\n\n              self._onSkippedEntriesHook.each(function (callback) {\n                callback();\n                return true;\n              });\n\n              // Free any waitUntilCaughtUp() calls that were waiting for us to\n              // pass something that we just skipped.\n              self._setLastProcessedTS(lastEntry.ts);\n              continue;\n            }\n\n            var doc = self._entryQueue.shift();\n\n            if (!(doc.ns && doc.ns.length > self._dbName.length + 1 && doc.ns.substr(0, self._dbName.length + 1) === self._dbName + '.')) {\n              throw new Error(\"Unexpected ns\");\n            }\n\n            var trigger = { collection: doc.ns.substr(self._dbName.length + 1),\n              dropCollection: false,\n              dropDatabase: false,\n              op: doc };\n\n            // Is it a special command and the collection name is hidden somewhere\n            // in operator?\n            if (trigger.collection === \"$cmd\") {\n              if (doc.o.dropDatabase) {\n                delete trigger.collection;\n                trigger.dropDatabase = true;\n              } else if (_.has(doc.o, 'drop')) {\n                trigger.collection = doc.o.drop;\n                trigger.dropCollection = true;\n                trigger.id = null;\n              } else {\n                throw Error(\"Unknown command \" + JSON.stringify(doc));\n              }\n            } else {\n              // All other ops have an id.\n              trigger.id = idForOp(doc);\n            }\n\n            self._crossbar.fire(trigger);\n\n            // Now that we've processed this operation, process pending\n            // sequencers.\n            if (!doc.ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n            self._setLastProcessedTS(doc.ts);\n          }\n        } finally {\n          self._workerActive = false;\n        }\n      });\n    }\n\n    return _maybeStartWorker;\n  }(),\n  _setLastProcessedTS: function () {\n    function _setLastProcessedTS(ts) {\n      var self = this;\n      self._lastProcessedTS = ts;\n      while (!_.isEmpty(self._catchingUpFutures) && self._catchingUpFutures[0].ts.lessThanOrEqual(self._lastProcessedTS)) {\n        var sequencer = self._catchingUpFutures.shift();\n        sequencer.future['return']();\n      }\n    }\n\n    return _setLastProcessedTS;\n  }(),\n\n  //Methods used on tests to dinamically change TOO_FAR_BEHIND\n  _defineTooFarBehind: function () {\n    function _defineTooFarBehind(value) {\n      TOO_FAR_BEHIND = value;\n    }\n\n    return _defineTooFarBehind;\n  }(),\n  _resetTooFarBehind: function () {\n    function _resetTooFarBehind() {\n      TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n    }\n\n    return _resetTooFarBehind;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/oplog_tailing.js"],"names":["Future","Npm","require","OPLOG_COLLECTION","TOO_FAR_BEHIND","process","env","METEOR_OPLOG_TOO_FAR_BEHIND","showTS","ts","getHighBits","getLowBits","idForOp","op","o","_id","o2","Error","EJSON","stringify","OplogHandle","oplogUrl","dbName","self","_oplogUrl","_dbName","_oplogLastEntryConnection","_oplogTailConnection","_stopped","_tailHandle","_readyFuture","_crossbar","DDPServer","_Crossbar","factPackage","factName","_baseOplogSelector","ns","RegExp","Meteor","_escapeRegExp","$or","$in","$exists","_catchingUpFutures","_lastProcessedTS","_onSkippedEntriesHook","Hook","debugPrintExceptions","_entryQueue","_DoubleEndedQueue","_workerActive","_startTailing","_","extend","prototype","stop","onOplogEntry","trigger","callback","wait","originalCallback","bindEnvironment","notification","clone","err","_debug","stack","listenHandle","listen","onSkippedEntries","register","waitUntilCaughtUp","lastEntry","findOne","fields","sort","$natural","e","_sleepForMs","lessThanOrEqual","insertAfter","length","greaterThan","f","splice","future","mongodbUri","parse","database","MongoConnection","poolSize","db","admin","command","ismaster","resolver","isMasterDoc","setName","lastOplogEntry","oplogSelector","$gt","cursorDescription","CursorDescription","tailable","tail","doc","push","_maybeStartWorker","defer","isEmpty","pop","clear","each","_setLastProcessedTS","shift","substr","collection","dropCollection","dropDatabase","has","drop","id","JSON","fire","sequencer","_defineTooFarBehind","value","_resetTooFarBehind"],"mappings":"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","file":"/packages/mongo/oplog_tailing.js.map","sourcesContent":["var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\n\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function (ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function (op) {\n  if (op.op === 'd')\n    return op.o._id;\n  else if (op.op === 'i')\n    return op.o._id;\n  else if (op.op === 'u')\n    return op.o2._id;\n  else if (op.op === 'c')\n    throw Error(\"Operator 'c' doesn't supply an object with id: \" +\n                EJSON.stringify(op));\n  else\n    throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function (oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [\n      { op: {$in: ['i', 'u', 'd']} },\n      // drop collection\n      { op: 'c', 'o.drop': { $exists: true } },\n      { op: 'c', 'o.dropDatabase': 1 },\n    ]\n  };\n\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    if (self._tailHandle)\n      self._tailHandle.stop();\n    // XXX should close connections too\n  },\n  onOplogEntry: function (trigger, callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onOplogEntry on stopped handle!\");\n\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.\n    self._readyFuture.wait();\n\n    var originalCallback = callback;\n    callback = Meteor.bindEnvironment(function (notification) {\n      // XXX can we avoid this clone by making oplog.js careful?\n      originalCallback(EJSON.clone(notification));\n    }, function (err) {\n      Meteor._debug(\"Error in oplog callback\", err.stack);\n    });\n    var listenHandle = self._crossbar.listen(trigger, callback);\n    return {\n      stop: function () {\n        listenHandle.stop();\n      }\n    };\n  },\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function (callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onSkippedEntries on stopped handle!\");\n    return self._onSkippedEntriesHook.register(callback);\n  },\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");\n\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.\n    self._readyFuture.wait();\n\n    while (!self._stopped) {\n      // We need to make the selector at least as restrictive as the actual\n      // tailing selector (ie, we need to specify the DB name) or else we might\n      // find a TS that won't show up in the actual tail stream.\n      try {\n        var lastEntry = self._oplogLastEntryConnection.findOne(\n          OPLOG_COLLECTION, self._baseOplogSelector,\n          {fields: {ts: 1}, sort: {$natural: -1}});\n        break;\n      } catch (e) {\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while reading last entry: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    if (!lastEntry) {\n      // Really, nothing in the oplog? Well, we've processed everything.\n      return;\n    }\n\n    var ts = lastEntry.ts;\n    if (!ts)\n      throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n      // We've already caught up to here.\n      return;\n    }\n\n\n    // Insert the future into our list. Almost always, this will be at the end,\n    // but it's conceivable that if we fail over from one primary to another,\n    // the oplog entries we see will go backwards.\n    var insertAfter = self._catchingUpFutures.length;\n    while (insertAfter - 1 > 0\n           && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n      insertAfter--;\n    }\n    var f = new Future;\n    self._catchingUpFutures.splice(insertAfter, 0, {ts: ts, future: f});\n    f.wait();\n  },\n  _startTailing: function () {\n    var self = this;\n    // First, make sure that we're talking to the local database.\n    var mongodbUri = Npm.require('mongodb-uri');\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // We make two separate connections to Mongo. The Node Mongo driver\n    // implements a naive round-robin connection pool: each \"connection\" is a\n    // pool of several (5 by default) TCP connections, and each request is\n    // rotated through the pools. Tailable cursor queries block on the server\n    // until there is some data to return (or until a few seconds have\n    // passed). So if the connection pool used for tailing cursors is the same\n    // pool used for other queries, the other queries will be delayed by seconds\n    // 1/5 of the time.\n    //\n    // The tail connection will only ever be running a single tail command, so\n    // it only needs to make one underlying TCP connection.\n    self._oplogTailConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n    // XXX better docs, but: it's to get monotonic results\n    // XXX is it safe to say \"if there's an in flight query, just use its\n    //     results\"? I don't think so but should consider that\n    self._oplogLastEntryConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n\n    // Now, make sure that there actually is a repl set here. If not, oplog\n    // tailing won't ever find anything!\n    // More on the isMasterDoc\n    // https://docs.mongodb.com/manual/reference/command/isMaster/\n    var f = new Future;\n    self._oplogLastEntryConnection.db.admin().command(\n      { ismaster: 1 }, f.resolver());\n    var isMasterDoc = f.wait();\n\n    if (!(isMasterDoc && isMasterDoc.setName)) {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // Find the last oplog entry.\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(\n      OPLOG_COLLECTION, {}, {sort: {$natural: -1}, fields: {ts: 1}});\n\n    var oplogSelector = _.clone(self._baseOplogSelector);\n    if (lastOplogEntry) {\n      // Start after the last entry that currently exists.\n      oplogSelector.ts = {$gt: lastOplogEntry.ts};\n      // If there are any calls to callWhenProcessedLatest before any other\n      // oplog entries show up, allow callWhenProcessedLatest to call its\n      // callback immediately.\n      self._lastProcessedTS = lastOplogEntry.ts;\n    }\n\n    var cursorDescription = new CursorDescription(\n      OPLOG_COLLECTION, oplogSelector, {tailable: true});\n\n    self._tailHandle = self._oplogTailConnection.tail(\n      cursorDescription, function (doc) {\n        self._entryQueue.push(doc);\n        self._maybeStartWorker();\n      }\n    );\n    self._readyFuture.return();\n  },\n\n  _maybeStartWorker: function () {\n    var self = this;\n    if (self._workerActive)\n      return;\n    self._workerActive = true;\n    Meteor.defer(function () {\n      try {\n        while (! self._stopped && ! self._entryQueue.isEmpty()) {\n          // Are we too far behind? Just tell our observers that they need to\n          // repoll, and drop our queue.\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {\n            var lastEntry = self._entryQueue.pop();\n            self._entryQueue.clear();\n\n            self._onSkippedEntriesHook.each(function (callback) {\n              callback();\n              return true;\n            });\n\n            // Free any waitUntilCaughtUp() calls that were waiting for us to\n            // pass something that we just skipped.\n            self._setLastProcessedTS(lastEntry.ts);\n            continue;\n          }\n\n          var doc = self._entryQueue.shift();\n\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 &&\n                doc.ns.substr(0, self._dbName.length + 1) ===\n                (self._dbName + '.'))) {\n            throw new Error(\"Unexpected ns\");\n          }\n\n          var trigger = {collection: doc.ns.substr(self._dbName.length + 1),\n                         dropCollection: false,\n                         dropDatabase: false,\n                         op: doc};\n\n          // Is it a special command and the collection name is hidden somewhere\n          // in operator?\n          if (trigger.collection === \"$cmd\") {\n            if (doc.o.dropDatabase) {\n              delete trigger.collection;\n              trigger.dropDatabase = true;\n            } else if (_.has(doc.o, 'drop')) {\n              trigger.collection = doc.o.drop;\n              trigger.dropCollection = true;\n              trigger.id = null;\n            } else {\n              throw Error(\"Unknown command \" + JSON.stringify(doc));\n            }\n          } else {\n            // All other ops have an id.\n            trigger.id = idForOp(doc);\n          }\n\n          self._crossbar.fire(trigger);\n\n          // Now that we've processed this operation, process pending\n          // sequencers.\n          if (!doc.ts)\n            throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n          self._setLastProcessedTS(doc.ts);\n        }\n      } finally {\n        self._workerActive = false;\n      }\n    });\n  },\n  _setLastProcessedTS: function (ts) {\n    var self = this;\n    self._lastProcessedTS = ts;\n    while (!_.isEmpty(self._catchingUpFutures)\n           && self._catchingUpFutures[0].ts.lessThanOrEqual(\n             self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();\n      sequencer.future.return();\n    }\n  },\n\n  //Methods used on tests to dinamically change TOO_FAR_BEHIND\n  _defineTooFarBehind: function(value) {\n    TOO_FAR_BEHIND = value;\n  },\n  _resetTooFarBehind: function() {\n    TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n  }\n});\n"]},"hash":"66f4dc70c0a73dd14114532667d2ca2fde555d13"}
