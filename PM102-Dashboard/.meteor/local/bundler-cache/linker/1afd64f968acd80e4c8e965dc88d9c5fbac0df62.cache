[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Log = Package.logging.Log;\nvar _ = Package.underscore._;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Boilerplate = Package['boilerplate-generator'].Boilerplate;\nvar WebAppHashing = Package['webapp-hashing'].WebAppHashing;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar WebApp, WebAppInternals, main;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"webapp\":{\"webapp_server.js\":[\"babel-runtime/helpers/typeof\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/webapp/webapp_server.js                                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});                        //\n////////// Requires //////////                                                                                       // 1\n                                                                                                                     //\nvar fs = Npm.require(\"fs\");                                                                                          // 3\nvar http = Npm.require(\"http\");                                                                                      // 4\nvar os = Npm.require(\"os\");                                                                                          // 5\nvar path = Npm.require(\"path\");                                                                                      // 6\nvar url = Npm.require(\"url\");                                                                                        // 7\nvar crypto = Npm.require(\"crypto\");                                                                                  // 8\n                                                                                                                     //\nvar connect = Npm.require('connect');                                                                                // 10\nvar parseurl = Npm.require('parseurl');                                                                              // 11\nvar useragent = Npm.require('useragent');                                                                            // 12\nvar send = Npm.require('send');                                                                                      // 13\n                                                                                                                     //\nvar Future = Npm.require('fibers/future');                                                                           // 15\nvar Fiber = Npm.require('fibers');                                                                                   // 16\n                                                                                                                     //\nvar SHORT_SOCKET_TIMEOUT = 5 * 1000;                                                                                 // 18\nvar LONG_SOCKET_TIMEOUT = 120 * 1000;                                                                                // 19\n                                                                                                                     //\nWebApp = {};                                                                                                         // 21\nWebAppInternals = {};                                                                                                // 22\n                                                                                                                     //\nWebAppInternals.NpmModules = {                                                                                       // 24\n  connect: {                                                                                                         // 25\n    version: Npm.require('connect/package.json').version,                                                            // 26\n    module: connect                                                                                                  // 27\n  }                                                                                                                  // 25\n};                                                                                                                   // 24\n                                                                                                                     //\nWebApp.defaultArch = 'web.browser';                                                                                  // 31\n                                                                                                                     //\n// XXX maps archs to manifests                                                                                       // 33\nWebApp.clientPrograms = {};                                                                                          // 34\n                                                                                                                     //\n// XXX maps archs to program path on filesystem                                                                      // 36\nvar archPath = {};                                                                                                   // 37\n                                                                                                                     //\nvar bundledJsCssUrlRewriteHook = function bundledJsCssUrlRewriteHook(url) {                                          // 39\n  var bundledPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';                                          // 40\n  return bundledPrefix + url;                                                                                        // 42\n};                                                                                                                   // 43\n                                                                                                                     //\nvar sha1 = function sha1(contents) {                                                                                 // 45\n  var hash = crypto.createHash('sha1');                                                                              // 46\n  hash.update(contents);                                                                                             // 47\n  return hash.digest('hex');                                                                                         // 48\n};                                                                                                                   // 49\n                                                                                                                     //\nvar readUtf8FileSync = function readUtf8FileSync(filename) {                                                         // 51\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');                                                            // 52\n};                                                                                                                   // 53\n                                                                                                                     //\n// #BrowserIdentification                                                                                            // 55\n//                                                                                                                   // 56\n// We have multiple places that want to identify the browser: the                                                    // 57\n// unsupported browser page, the appcache package, and, eventually                                                   // 58\n// delivering browser polyfills only as needed.                                                                      // 59\n//                                                                                                                   // 60\n// To avoid detecting the browser in multiple places ad-hoc, we create a                                             // 61\n// Meteor \"browser\" object. It uses but does not expose the npm                                                      // 62\n// useragent module (we could choose a different mechanism to identify                                               // 63\n// the browser in the future if we wanted to).  The browser object                                                   // 64\n// contains                                                                                                          // 65\n//                                                                                                                   // 66\n// * `name`: the name of the browser in camel case                                                                   // 67\n// * `major`, `minor`, `patch`: integers describing the browser version                                              // 68\n//                                                                                                                   // 69\n// Also here is an early version of a Meteor `request` object, intended                                              // 70\n// to be a high-level description of the request without exposing                                                    // 71\n// details of connect's low-level `req`.  Currently it contains:                                                     // 72\n//                                                                                                                   // 73\n// * `browser`: browser identification object described above                                                        // 74\n// * `url`: parsed url, including parsed query params                                                                // 75\n//                                                                                                                   // 76\n// As a temporary hack there is a `categorizeRequest` function on WebApp which                                       // 77\n// converts a connect `req` to a Meteor `request`. This can go away once smart                                       // 78\n// packages such as appcache are being passed a `request` object directly when                                       // 79\n// they serve content.                                                                                               // 80\n//                                                                                                                   // 81\n// This allows `request` to be used uniformly: it is passed to the html                                              // 82\n// attributes hook, and the appcache package can use it when deciding                                                // 83\n// whether to generate a 404 for the manifest.                                                                       // 84\n//                                                                                                                   // 85\n// Real routing / server side rendering will probably refactor this                                                  // 86\n// heavily.                                                                                                          // 87\n                                                                                                                     //\n                                                                                                                     //\n// e.g. \"Mobile Safari\" => \"mobileSafari\"                                                                            // 90\nvar camelCase = function camelCase(name) {                                                                           // 91\n  var parts = name.split(' ');                                                                                       // 92\n  parts[0] = parts[0].toLowerCase();                                                                                 // 93\n  for (var i = 1; i < parts.length; ++i) {                                                                           // 94\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);                                                // 95\n  }                                                                                                                  // 96\n  return parts.join('');                                                                                             // 97\n};                                                                                                                   // 98\n                                                                                                                     //\nvar identifyBrowser = function identifyBrowser(userAgentString) {                                                    // 100\n  var userAgent = useragent.lookup(userAgentString);                                                                 // 101\n  return {                                                                                                           // 102\n    name: camelCase(userAgent.family),                                                                               // 103\n    major: +userAgent.major,                                                                                         // 104\n    minor: +userAgent.minor,                                                                                         // 105\n    patch: +userAgent.patch                                                                                          // 106\n  };                                                                                                                 // 102\n};                                                                                                                   // 108\n                                                                                                                     //\n// XXX Refactor as part of implementing real routing.                                                                // 110\nWebAppInternals.identifyBrowser = identifyBrowser;                                                                   // 111\n                                                                                                                     //\nWebApp.categorizeRequest = function (req) {                                                                          // 113\n  return _.extend({                                                                                                  // 114\n    browser: identifyBrowser(req.headers['user-agent']),                                                             // 115\n    url: url.parse(req.url, true)                                                                                    // 116\n  }, _.pick(req, 'dynamicHead', 'dynamicBody'));                                                                     // 114\n};                                                                                                                   // 118\n                                                                                                                     //\n// HTML attribute hooks: functions to be called to determine any attributes to                                       // 120\n// be added to the '<html>' tag. Each function is passed a 'request' object (see                                     // 121\n// #BrowserIdentification) and should return null or object.                                                         // 122\nvar htmlAttributeHooks = [];                                                                                         // 123\nvar getHtmlAttributes = function getHtmlAttributes(request) {                                                        // 124\n  var combinedAttributes = {};                                                                                       // 125\n  _.each(htmlAttributeHooks || [], function (hook) {                                                                 // 126\n    var attributes = hook(request);                                                                                  // 127\n    if (attributes === null) return;                                                                                 // 128\n    if ((typeof attributes === \"undefined\" ? \"undefined\" : _typeof(attributes)) !== 'object') throw Error(\"HTML attribute hook must return null or object\");\n    _.extend(combinedAttributes, attributes);                                                                        // 132\n  });                                                                                                                // 133\n  return combinedAttributes;                                                                                         // 134\n};                                                                                                                   // 135\nWebApp.addHtmlAttributeHook = function (hook) {                                                                      // 136\n  htmlAttributeHooks.push(hook);                                                                                     // 137\n};                                                                                                                   // 138\n                                                                                                                     //\n// Serve app HTML for this URL?                                                                                      // 140\nvar appUrl = function appUrl(url) {                                                                                  // 141\n  if (url === '/favicon.ico' || url === '/robots.txt') return false;                                                 // 142\n                                                                                                                     //\n  // NOTE: app.manifest is not a web standard like favicon.ico and                                                   // 145\n  // robots.txt. It is a file name we have chosen to use for HTML5                                                   // 146\n  // appcache URLs. It is included here to prevent using an appcache                                                 // 147\n  // then removing it from poisoning an app permanently. Eventually,                                                 // 148\n  // once we have server side routing, this won't be needed as                                                       // 149\n  // unknown URLs with return a 404 automatically.                                                                   // 150\n  if (url === '/app.manifest') return false;                                                                         // 151\n                                                                                                                     //\n  // Avoid serving app HTML for declared routes such as /sockjs/.                                                    // 154\n  if (RoutePolicy.classify(url)) return false;                                                                       // 155\n                                                                                                                     //\n  // we currently return app HTML on all URLs by default                                                             // 158\n  return true;                                                                                                       // 159\n};                                                                                                                   // 160\n                                                                                                                     //\n// We need to calculate the client hash after all packages have loaded                                               // 163\n// to give them a chance to populate __meteor_runtime_config__.                                                      // 164\n//                                                                                                                   // 165\n// Calculating the hash during startup means that packages can only                                                  // 166\n// populate __meteor_runtime_config__ during load, not during startup.                                               // 167\n//                                                                                                                   // 168\n// Calculating instead it at the beginning of main after all startup                                                 // 169\n// hooks had run would allow packages to also populate                                                               // 170\n// __meteor_runtime_config__ during startup, but that's too late for                                                 // 171\n// autoupdate because it needs to have the client hash at startup to                                                 // 172\n// insert the auto update version itself into                                                                        // 173\n// __meteor_runtime_config__ to get it to the client.                                                                // 174\n//                                                                                                                   // 175\n// An alternative would be to give autoupdate a \"post-start,                                                         // 176\n// pre-listen\" hook to allow it to insert the auto update version at                                                 // 177\n// the right moment.                                                                                                 // 178\n                                                                                                                     //\nMeteor.startup(function () {                                                                                         // 180\n  var calculateClientHash = WebAppHashing.calculateClientHash;                                                       // 181\n  WebApp.clientHash = function (archName) {                                                                          // 182\n    archName = archName || WebApp.defaultArch;                                                                       // 183\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);                                            // 184\n  };                                                                                                                 // 185\n                                                                                                                     //\n  WebApp.calculateClientHashRefreshable = function (archName) {                                                      // 187\n    archName = archName || WebApp.defaultArch;                                                                       // 188\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {                           // 189\n      return name === \"css\";                                                                                         // 191\n    });                                                                                                              // 192\n  };                                                                                                                 // 193\n  WebApp.calculateClientHashNonRefreshable = function (archName) {                                                   // 194\n    archName = archName || WebApp.defaultArch;                                                                       // 195\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {                           // 196\n      return name !== \"css\";                                                                                         // 198\n    });                                                                                                              // 199\n  };                                                                                                                 // 200\n  WebApp.calculateClientHashCordova = function () {                                                                  // 201\n    var archName = 'web.cordova';                                                                                    // 202\n    if (!WebApp.clientPrograms[archName]) return 'none';                                                             // 203\n                                                                                                                     //\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, null, _.pick(__meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n  };                                                                                                                 // 209\n});                                                                                                                  // 210\n                                                                                                                     //\n// When we have a request pending, we want the socket timeout to be long, to                                         // 214\n// give ourselves a while to serve it, and to allow sockjs long polls to                                             // 215\n// complete.  On the other hand, we want to close idle sockets relatively                                            // 216\n// quickly, so that we can shut down relatively promptly but cleanly, without                                        // 217\n// cutting off anyone's response.                                                                                    // 218\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {                                                     // 219\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);                                                 // 220\n  req.setTimeout(LONG_SOCKET_TIMEOUT);                                                                               // 221\n  // Insert our new finish listener to run BEFORE the existing one which removes                                     // 222\n  // the response from the socket.                                                                                   // 223\n  var finishListeners = res.listeners('finish');                                                                     // 224\n  // XXX Apparently in Node 0.12 this event was called 'prefinish'.                                                  // 225\n  // https://github.com/joyent/node/commit/7c9b6070                                                                  // 226\n  // But it has switched back to 'finish' in Node v4:                                                                // 227\n  // https://github.com/nodejs/node/pull/1411                                                                        // 228\n  res.removeAllListeners('finish');                                                                                  // 229\n  res.on('finish', function () {                                                                                     // 230\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);                                                                            // 231\n  });                                                                                                                // 232\n  _.each(finishListeners, function (l) {                                                                             // 233\n    res.on('finish', l);                                                                                             // 233\n  });                                                                                                                // 233\n};                                                                                                                   // 234\n                                                                                                                     //\n// Will be updated by main before we listen.                                                                         // 237\n// Map from client arch to boilerplate object.                                                                       // 238\n// Boilerplate object has:                                                                                           // 239\n//   - func: XXX                                                                                                     // 240\n//   - baseData: XXX                                                                                                 // 241\nvar boilerplateByArch = {};                                                                                          // 242\n                                                                                                                     //\n// Given a request (as returned from `categorizeRequest`), return the                                                // 244\n// boilerplate HTML to serve for that request.                                                                       // 245\n//                                                                                                                   // 246\n// If a previous connect middleware has rendered content for the head or body,                                       // 247\n// returns the boilerplate with that content patched in otherwise                                                    // 248\n// memoizes on HTML attributes (used by, eg, appcache) and whether inline                                            // 249\n// scripts are currently allowed.                                                                                    // 250\n// XXX so far this function is always called with arch === 'web.browser'                                             // 251\nvar memoizedBoilerplate = {};                                                                                        // 252\nvar getBoilerplate = function getBoilerplate(request, arch) {                                                        // 253\n  var useMemoized = !(request.dynamicHead || request.dynamicBody);                                                   // 254\n  var htmlAttributes = getHtmlAttributes(request);                                                                   // 255\n                                                                                                                     //\n  if (useMemoized) {                                                                                                 // 257\n    // The only thing that changes from request to request (unless extra                                             // 258\n    // content is added to the head or body) are the HTML attributes                                                 // 259\n    // (used by, eg, appcache) and whether inline scripts are allowed, so we                                         // 260\n    // can memoize based on that.                                                                                    // 261\n    var memHash = JSON.stringify({                                                                                   // 262\n      inlineScriptsAllowed: inlineScriptsAllowed,                                                                    // 263\n      htmlAttributes: htmlAttributes,                                                                                // 264\n      arch: arch                                                                                                     // 265\n    });                                                                                                              // 262\n                                                                                                                     //\n    if (!memoizedBoilerplate[memHash]) {                                                                             // 268\n      memoizedBoilerplate[memHash] = boilerplateByArch[arch].toHTML({                                                // 269\n        htmlAttributes: htmlAttributes                                                                               // 270\n      });                                                                                                            // 269\n    }                                                                                                                // 272\n    return memoizedBoilerplate[memHash];                                                                             // 273\n  }                                                                                                                  // 274\n                                                                                                                     //\n  var boilerplateOptions = _.extend({                                                                                // 276\n    htmlAttributes: htmlAttributes                                                                                   // 277\n  }, _.pick(request, 'dynamicHead', 'dynamicBody'));                                                                 // 276\n                                                                                                                     //\n  return boilerplateByArch[arch].toHTML(boilerplateOptions);                                                         // 280\n};                                                                                                                   // 281\n                                                                                                                     //\nWebAppInternals.generateBoilerplateInstance = function (arch, manifest, additionalOptions) {                         // 283\n  additionalOptions = additionalOptions || {};                                                                       // 286\n                                                                                                                     //\n  var runtimeConfig = _.extend(_.clone(__meteor_runtime_config__), additionalOptions.runtimeConfigOverrides || {});  // 288\n  return new Boilerplate(arch, manifest, _.extend({                                                                  // 292\n    pathMapper: function () {                                                                                        // 294\n      function pathMapper(itemPath) {                                                                                // 294\n        return path.join(archPath[arch], itemPath);                                                                  // 295\n      }                                                                                                              // 295\n                                                                                                                     //\n      return pathMapper;                                                                                             // 294\n    }(),                                                                                                             // 294\n    baseDataExtension: {                                                                                             // 296\n      additionalStaticJs: _.map(additionalStaticJs || [], function (contents, pathname) {                            // 297\n        return {                                                                                                     // 300\n          pathname: pathname,                                                                                        // 301\n          contents: contents                                                                                         // 302\n        };                                                                                                           // 300\n      }),                                                                                                            // 304\n      // Convert to a JSON string, then get rid of most weird characters, then                                       // 306\n      // wrap in double quotes. (The outermost JSON.stringify really ought to                                        // 307\n      // just be \"wrap in double quotes\" but we use it to be safe.) This might                                       // 308\n      // end up inside a <script> tag so we need to be careful to not include                                        // 309\n      // \"</script>\", but normal {{spacebars}} escaping escapes too much! See                                        // 310\n      // https://github.com/meteor/meteor/issues/3730                                                                // 311\n      meteorRuntimeConfig: JSON.stringify(encodeURIComponent(JSON.stringify(runtimeConfig))),                        // 312\n      rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',                                       // 314\n      bundledJsCssUrlRewriteHook: bundledJsCssUrlRewriteHook,                                                        // 315\n      inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),                                                  // 316\n      inline: additionalOptions.inline                                                                               // 317\n    }                                                                                                                // 296\n  }, additionalOptions));                                                                                            // 293\n};                                                                                                                   // 321\n                                                                                                                     //\n// A mapping from url path to \"info\". Where \"info\" has the following fields:                                         // 323\n// - type: the type of file to be served                                                                             // 324\n// - cacheable: optionally, whether the file should be cached or not                                                 // 325\n// - sourceMapUrl: optionally, the url of the source map                                                             // 326\n//                                                                                                                   // 327\n// Info also contains one of the following:                                                                          // 328\n// - content: the stringified content that should be served at this path                                             // 329\n// - absolutePath: the absolute path on disk to the file                                                             // 330\n                                                                                                                     //\nvar staticFiles;                                                                                                     // 332\n                                                                                                                     //\n// Serve static files from the manifest or added with                                                                // 334\n// `addStaticJs`. Exported for tests.                                                                                // 335\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {                                     // 336\n  if ('GET' != req.method && 'HEAD' != req.method && 'OPTIONS' != req.method) {                                      // 337\n    next();                                                                                                          // 338\n    return;                                                                                                          // 339\n  }                                                                                                                  // 340\n  var pathname = parseurl(req).pathname;                                                                             // 341\n  try {                                                                                                              // 342\n    pathname = decodeURIComponent(pathname);                                                                         // 343\n  } catch (e) {                                                                                                      // 344\n    next();                                                                                                          // 345\n    return;                                                                                                          // 346\n  }                                                                                                                  // 347\n                                                                                                                     //\n  var serveStaticJs = function serveStaticJs(s) {                                                                    // 349\n    res.writeHead(200, {                                                                                             // 350\n      'Content-type': 'application/javascript; charset=UTF-8'                                                        // 351\n    });                                                                                                              // 350\n    res.write(s);                                                                                                    // 353\n    res.end();                                                                                                       // 354\n  };                                                                                                                 // 355\n                                                                                                                     //\n  if (pathname === \"/meteor_runtime_config.js\" && !WebAppInternals.inlineScriptsAllowed()) {                         // 357\n    serveStaticJs(\"__meteor_runtime_config__ = \" + JSON.stringify(__meteor_runtime_config__) + \";\");                 // 359\n    return;                                                                                                          // 361\n  } else if (_.has(additionalStaticJs, pathname) && !WebAppInternals.inlineScriptsAllowed()) {                       // 362\n    serveStaticJs(additionalStaticJs[pathname]);                                                                     // 364\n    return;                                                                                                          // 365\n  }                                                                                                                  // 366\n                                                                                                                     //\n  if (!_.has(staticFiles, pathname)) {                                                                               // 368\n    next();                                                                                                          // 369\n    return;                                                                                                          // 370\n  }                                                                                                                  // 371\n                                                                                                                     //\n  // We don't need to call pause because, unlike 'static', once we call into                                         // 373\n  // 'send' and yield to the event loop, we never call another handler with                                          // 374\n  // 'next'.                                                                                                         // 375\n                                                                                                                     //\n  var info = staticFiles[pathname];                                                                                  // 377\n                                                                                                                     //\n  // Cacheable files are files that should never change. Typically                                                   // 379\n  // named by their hash (eg meteor bundled js and css files).                                                       // 380\n  // We cache them ~forever (1yr).                                                                                   // 381\n  var maxAge = info.cacheable ? 1000 * 60 * 60 * 24 * 365 : 0;                                                       // 382\n                                                                                                                     //\n  // Set the X-SourceMap header, which current Chrome, FireFox, and Safari                                           // 386\n  // understand.  (The SourceMap header is slightly more spec-correct but FF                                         // 387\n  // doesn't understand it.)                                                                                         // 388\n  //                                                                                                                 // 389\n  // You may also need to enable source maps in Chrome: open dev tools, click                                        // 390\n  // the gear in the bottom right corner, and select \"enable source maps\".                                           // 391\n  if (info.sourceMapUrl) {                                                                                           // 392\n    res.setHeader('X-SourceMap', __meteor_runtime_config__.ROOT_URL_PATH_PREFIX + info.sourceMapUrl);                // 393\n  }                                                                                                                  // 396\n                                                                                                                     //\n  if (info.type === \"js\") {                                                                                          // 398\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");                                          // 399\n  } else if (info.type === \"css\") {                                                                                  // 400\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");                                                        // 401\n  } else if (info.type === \"json\") {                                                                                 // 402\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");                                                // 403\n  }                                                                                                                  // 404\n                                                                                                                     //\n  if (info.hash) {                                                                                                   // 406\n    res.setHeader('ETag', '\"' + info.hash + '\"');                                                                    // 407\n  }                                                                                                                  // 408\n                                                                                                                     //\n  if (info.content) {                                                                                                // 410\n    res.write(info.content);                                                                                         // 411\n    res.end();                                                                                                       // 412\n  } else {                                                                                                           // 413\n    send(req, info.absolutePath, {                                                                                   // 414\n      maxage: maxAge,                                                                                                // 415\n      dotfiles: 'allow', // if we specified a dotfile in the manifest, serve it                                      // 416\n      lastModified: false // don't set last-modified based on the file date                                          // 417\n    }).on('error', function (err) {                                                                                  // 414\n      Log.error(\"Error serving static file \" + err);                                                                 // 419\n      res.writeHead(500);                                                                                            // 420\n      res.end();                                                                                                     // 421\n    }).on('directory', function () {                                                                                 // 422\n      Log.error(\"Unexpected directory \" + info.absolutePath);                                                        // 424\n      res.writeHead(500);                                                                                            // 425\n      res.end();                                                                                                     // 426\n    }).pipe(res);                                                                                                    // 427\n  }                                                                                                                  // 429\n};                                                                                                                   // 430\n                                                                                                                     //\nvar getUrlPrefixForArch = function getUrlPrefixForArch(arch) {                                                       // 432\n  // XXX we rely on the fact that arch names don't contain slashes                                                   // 433\n  // in that case we would need to uri escape it                                                                     // 434\n                                                                                                                     //\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url                                           // 436\n  // to Meteor internals.                                                                                            // 437\n  return arch === WebApp.defaultArch ? '' : '/' + '__' + arch.replace(/^web\\./, '');                                 // 438\n};                                                                                                                   // 440\n                                                                                                                     //\n// parse port to see if its a Windows Server style named pipe. If so, return as-is (String), otherwise return as Int\nWebAppInternals.parsePort = function (port) {                                                                        // 443\n  if (/\\\\\\\\?.+\\\\pipe\\\\?.+/.test(port)) {                                                                             // 444\n    return port;                                                                                                     // 445\n  }                                                                                                                  // 446\n                                                                                                                     //\n  return parseInt(port);                                                                                             // 448\n};                                                                                                                   // 449\n                                                                                                                     //\nvar runWebAppServer = function runWebAppServer() {                                                                   // 451\n  var shuttingDown = false;                                                                                          // 452\n  var syncQueue = new Meteor._SynchronousQueue();                                                                    // 453\n                                                                                                                     //\n  var getItemPathname = function getItemPathname(itemUrl) {                                                          // 455\n    return decodeURIComponent(url.parse(itemUrl).pathname);                                                          // 456\n  };                                                                                                                 // 457\n                                                                                                                     //\n  WebAppInternals.reloadClientPrograms = function () {                                                               // 459\n    syncQueue.runTask(function () {                                                                                  // 460\n      staticFiles = {};                                                                                              // 461\n      var generateClientProgram = function generateClientProgram(clientPath, arch) {                                 // 462\n        // read the control for the client we'll be serving up                                                       // 463\n        var clientJsonPath = path.join(__meteor_bootstrap__.serverDir, clientPath);                                  // 464\n        var clientDir = path.dirname(clientJsonPath);                                                                // 466\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));                                               // 467\n        if (clientJson.format !== \"web-program-pre1\") throw new Error(\"Unsupported format for client assets: \" + JSON.stringify(clientJson.format));\n                                                                                                                     //\n        if (!clientJsonPath || !clientDir || !clientJson) throw new Error(\"Client config file not parsed.\");         // 472\n                                                                                                                     //\n        var urlPrefix = getUrlPrefixForArch(arch);                                                                   // 475\n                                                                                                                     //\n        var manifest = clientJson.manifest;                                                                          // 477\n        _.each(manifest, function (item) {                                                                           // 478\n          if (item.url && item.where === \"client\") {                                                                 // 479\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {                                                   // 480\n              absolutePath: path.join(clientDir, item.path),                                                         // 481\n              cacheable: item.cacheable,                                                                             // 482\n              hash: item.hash,                                                                                       // 483\n              // Link from source to its map                                                                         // 484\n              sourceMapUrl: item.sourceMapUrl,                                                                       // 485\n              type: item.type                                                                                        // 486\n            };                                                                                                       // 480\n                                                                                                                     //\n            if (item.sourceMap) {                                                                                    // 489\n              // Serve the source map too, under the specified URL. We assume all                                    // 490\n              // source maps are cacheable.                                                                          // 491\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {                                        // 492\n                absolutePath: path.join(clientDir, item.sourceMap),                                                  // 493\n                cacheable: true                                                                                      // 494\n              };                                                                                                     // 492\n            }                                                                                                        // 496\n          }                                                                                                          // 497\n        });                                                                                                          // 498\n                                                                                                                     //\n        var program = {                                                                                              // 500\n          format: \"web-program-pre1\",                                                                                // 501\n          manifest: manifest,                                                                                        // 502\n          version: WebAppHashing.calculateClientHash(manifest, null, _.pick(__meteor_runtime_config__, 'PUBLIC_SETTINGS')),\n          cordovaCompatibilityVersions: clientJson.cordovaCompatibilityVersions,                                     // 505\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS                                                 // 506\n        };                                                                                                           // 500\n                                                                                                                     //\n        WebApp.clientPrograms[arch] = program;                                                                       // 509\n                                                                                                                     //\n        // Serve the program as a string at /foo/<arch>/manifest.json                                                // 511\n        // XXX change manifest.json -> program.json                                                                  // 512\n        staticFiles[urlPrefix + getItemPathname('/manifest.json')] = {                                               // 513\n          content: JSON.stringify(program),                                                                          // 514\n          cacheable: false,                                                                                          // 515\n          hash: program.version,                                                                                     // 516\n          type: \"json\"                                                                                               // 517\n        };                                                                                                           // 513\n      };                                                                                                             // 519\n                                                                                                                     //\n      try {                                                                                                          // 521\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;                                               // 522\n        _.each(clientPaths, function (clientPath, arch) {                                                            // 523\n          archPath[arch] = path.dirname(clientPath);                                                                 // 524\n          generateClientProgram(clientPath, arch);                                                                   // 525\n        });                                                                                                          // 526\n                                                                                                                     //\n        // Exported for tests.                                                                                       // 528\n        WebAppInternals.staticFiles = staticFiles;                                                                   // 529\n      } catch (e) {                                                                                                  // 530\n        Log.error(\"Error reloading the client program: \" + e.stack);                                                 // 531\n        process.exit(1);                                                                                             // 532\n      }                                                                                                              // 533\n    });                                                                                                              // 534\n  };                                                                                                                 // 535\n                                                                                                                     //\n  WebAppInternals.generateBoilerplate = function () {                                                                // 537\n    // This boilerplate will be served to the mobile devices when used with                                          // 538\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by                                     // 539\n    // the device's server, it is important to set the DDP url to the actual                                         // 540\n    // Meteor server accepting DDP connections and not the device's file server.                                     // 541\n    var defaultOptionsForArch = {                                                                                    // 542\n      'web.cordova': {                                                                                               // 543\n        runtimeConfigOverrides: {                                                                                    // 544\n          // XXX We use absoluteUrl() here so that we serve https://                                                 // 545\n          // URLs to cordova clients if force-ssl is in use. If we were                                              // 546\n          // to use __meteor_runtime_config__.ROOT_URL instead of                                                    // 547\n          // absoluteUrl(), then Cordova clients would immediately get a                                             // 548\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to                                                         // 549\n          // http://example.meteor.com. This breaks the app, because                                                 // 550\n          // force-ssl doesn't serve CORS headers on 302                                                             // 551\n          // redirects. (Plus it's undesirable to have clients                                                       // 552\n          // connecting to http://example.meteor.com when force-ssl is                                               // 553\n          // in use.)                                                                                                // 554\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL || Meteor.absoluteUrl(),                            // 555\n          ROOT_URL: process.env.MOBILE_ROOT_URL || Meteor.absoluteUrl()                                              // 557\n        }                                                                                                            // 544\n      }                                                                                                              // 543\n    };                                                                                                               // 542\n                                                                                                                     //\n    syncQueue.runTask(function () {                                                                                  // 563\n      _.each(WebApp.clientPrograms, function (program, archName) {                                                   // 564\n        boilerplateByArch[archName] = WebAppInternals.generateBoilerplateInstance(archName, program.manifest, defaultOptionsForArch[archName]);\n      });                                                                                                            // 569\n                                                                                                                     //\n      // Clear the memoized boilerplate cache.                                                                       // 571\n      memoizedBoilerplate = {};                                                                                      // 572\n                                                                                                                     //\n      // Configure CSS injection for the default arch                                                                // 574\n      // XXX implement the CSS injection for all archs?                                                              // 575\n      var cssFiles = boilerplateByArch[WebApp.defaultArch].baseData.css;                                             // 576\n      // Rewrite all CSS files (which are written directly to <style> tags)                                          // 577\n      // by autoupdate_client to use the CDN prefix/etc                                                              // 578\n      var allCss = _.map(cssFiles, function (cssFile) {                                                              // 579\n        return { url: bundledJsCssUrlRewriteHook(cssFile.url) };                                                     // 580\n      });                                                                                                            // 581\n      WebAppInternals.refreshableAssets = { allCss: allCss };                                                        // 582\n    });                                                                                                              // 583\n  };                                                                                                                 // 584\n                                                                                                                     //\n  WebAppInternals.reloadClientPrograms();                                                                            // 586\n                                                                                                                     //\n  // webserver                                                                                                       // 588\n  var app = connect();                                                                                               // 589\n                                                                                                                     //\n  // Packages and apps can add handlers that run before any other Meteor                                             // 591\n  // handlers via WebApp.rawConnectHandlers.                                                                         // 592\n  var rawConnectHandlers = connect();                                                                                // 593\n  app.use(rawConnectHandlers);                                                                                       // 594\n                                                                                                                     //\n  // Auto-compress any json, javascript, or text.                                                                    // 596\n  app.use(connect.compress());                                                                                       // 597\n                                                                                                                     //\n  // We're not a proxy; reject (without crashing) attempts to treat us like                                          // 599\n  // one. (See #1212.)                                                                                               // 600\n  app.use(function (req, res, next) {                                                                                // 601\n    if (RoutePolicy.isValidUrl(req.url)) {                                                                           // 602\n      next();                                                                                                        // 603\n      return;                                                                                                        // 604\n    }                                                                                                                // 605\n    res.writeHead(400);                                                                                              // 606\n    res.write(\"Not a proxy\");                                                                                        // 607\n    res.end();                                                                                                       // 608\n  });                                                                                                                // 609\n                                                                                                                     //\n  // Strip off the path prefix, if it exists.                                                                        // 611\n  app.use(function (request, response, next) {                                                                       // 612\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                                 // 613\n    var url = Npm.require('url').parse(request.url);                                                                 // 614\n    var pathname = url.pathname;                                                                                     // 615\n    // check if the path in the url starts with the path prefix (and the part                                        // 616\n    // after the path prefix must start with a / if it exists.)                                                      // 617\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix && (pathname.length == pathPrefix.length || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n      request.url = request.url.substring(pathPrefix.length);                                                        // 621\n      next();                                                                                                        // 622\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {                                          // 623\n      next();                                                                                                        // 624\n    } else if (pathPrefix) {                                                                                         // 625\n      response.writeHead(404);                                                                                       // 626\n      response.write(\"Unknown path\");                                                                                // 627\n      response.end();                                                                                                // 628\n    } else {                                                                                                         // 629\n      next();                                                                                                        // 630\n    }                                                                                                                // 631\n  });                                                                                                                // 632\n                                                                                                                     //\n  // Parse the query string into res.query. Used by oauth_server, but it's                                           // 634\n  // generally pretty handy..                                                                                        // 635\n  app.use(connect.query());                                                                                          // 636\n                                                                                                                     //\n  // Serve static files from the manifest.                                                                           // 638\n  // This is inspired by the 'static' middleware.                                                                    // 639\n  app.use(function (req, res, next) {                                                                                // 640\n    Fiber(function () {                                                                                              // 641\n      WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);                                            // 642\n    }).run();                                                                                                        // 643\n  });                                                                                                                // 644\n                                                                                                                     //\n  // Packages and apps can add handlers to this via WebApp.connectHandlers.                                          // 646\n  // They are inserted before our default handler.                                                                   // 647\n  var packageAndAppHandlers = connect();                                                                             // 648\n  app.use(packageAndAppHandlers);                                                                                    // 649\n                                                                                                                     //\n  var _suppressConnectErrors = false;                                                                                // 651\n  // connect knows it is an error handler because it has 4 arguments instead of                                      // 652\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden                                      // 653\n  // inside packageAndAppHandlers.)                                                                                  // 654\n  app.use(function (err, req, res, next) {                                                                           // 655\n    if (!err || !_suppressConnectErrors || !req.headers['x-suppress-error']) {                                       // 656\n      next(err);                                                                                                     // 657\n      return;                                                                                                        // 658\n    }                                                                                                                // 659\n    res.writeHead(err.status, { 'Content-Type': 'text/plain' });                                                     // 660\n    res.end(\"An error message\");                                                                                     // 661\n  });                                                                                                                // 662\n                                                                                                                     //\n  app.use(function (req, res, next) {                                                                                // 664\n    Fiber(function () {                                                                                              // 665\n      if (!appUrl(req.url)) return next();                                                                           // 666\n                                                                                                                     //\n      var headers = {                                                                                                // 669\n        'Content-Type': 'text/html; charset=utf-8'                                                                   // 670\n      };                                                                                                             // 669\n      if (shuttingDown) headers['Connection'] = 'Close';                                                             // 672\n                                                                                                                     //\n      var request = WebApp.categorizeRequest(req);                                                                   // 675\n                                                                                                                     //\n      if (request.url.query && request.url.query['meteor_css_resource']) {                                           // 677\n        // In this case, we're requesting a CSS resource in the meteor-specific                                      // 678\n        // way, but we don't have it.  Serve a static css file that indicates that                                   // 679\n        // we didn't have it, so we can detect that and refresh.  Make sure                                          // 680\n        // that any proxies or CDNs don't cache this error!  (Normally proxies                                       // 681\n        // or CDNs are smart enough not to cache error pages, but in order to                                        // 682\n        // make this hack work, we need to return the CSS file as a 200, which                                       // 683\n        // would otherwise be cached.)                                                                               // 684\n        headers['Content-Type'] = 'text/css; charset=utf-8';                                                         // 685\n        headers['Cache-Control'] = 'no-cache';                                                                       // 686\n        res.writeHead(200, headers);                                                                                 // 687\n        res.write(\".meteor-css-not-found-error { width: 0px;}\");                                                     // 688\n        res.end();                                                                                                   // 689\n        return undefined;                                                                                            // 690\n      }                                                                                                              // 691\n                                                                                                                     //\n      if (request.url.query && request.url.query['meteor_js_resource']) {                                            // 693\n        // Similarly, we're requesting a JS resource that we don't have.                                             // 694\n        // Serve an uncached 404. (We can't use the same hack we use for CSS,                                        // 695\n        // because actually acting on that hack requires us to have the JS                                           // 696\n        // already!)                                                                                                 // 697\n        headers['Cache-Control'] = 'no-cache';                                                                       // 698\n        res.writeHead(404, headers);                                                                                 // 699\n        res.end(\"404 Not Found\");                                                                                    // 700\n        return undefined;                                                                                            // 701\n      }                                                                                                              // 702\n                                                                                                                     //\n      if (request.url.query && request.url.query['meteor_dont_serve_index']) {                                       // 704\n        // When downloading files during a Cordova hot code push, we need                                            // 705\n        // to detect if a file is not available instead of inadvertently                                             // 706\n        // downloading the default index page.                                                                       // 707\n        // So similar to the situation above, we serve an uncached 404.                                              // 708\n        headers['Cache-Control'] = 'no-cache';                                                                       // 709\n        res.writeHead(404, headers);                                                                                 // 710\n        res.end(\"404 Not Found\");                                                                                    // 711\n        return undefined;                                                                                            // 712\n      }                                                                                                              // 713\n                                                                                                                     //\n      // /packages/asdfsad ... /__cordova/dafsdf.js                                                                  // 715\n      var pathname = parseurl(req).pathname;                                                                         // 716\n      var archKey = pathname.split('/')[1];                                                                          // 717\n      var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');                                                      // 718\n                                                                                                                     //\n      if (!/^__/.test(archKey) || !_.has(archPath, archKeyCleaned)) {                                                // 720\n        archKey = WebApp.defaultArch;                                                                                // 721\n      } else {                                                                                                       // 722\n        archKey = archKeyCleaned;                                                                                    // 723\n      }                                                                                                              // 724\n                                                                                                                     //\n      var boilerplate;                                                                                               // 726\n      try {                                                                                                          // 727\n        boilerplate = getBoilerplate(request, archKey);                                                              // 728\n      } catch (e) {                                                                                                  // 729\n        Log.error(\"Error running template: \" + e.stack);                                                             // 730\n        res.writeHead(500, headers);                                                                                 // 731\n        res.end();                                                                                                   // 732\n        return undefined;                                                                                            // 733\n      }                                                                                                              // 734\n                                                                                                                     //\n      var statusCode = res.statusCode ? res.statusCode : 200;                                                        // 736\n      res.writeHead(statusCode, headers);                                                                            // 737\n      res.write(boilerplate);                                                                                        // 738\n      res.end();                                                                                                     // 739\n      return undefined;                                                                                              // 740\n    }).run();                                                                                                        // 741\n  });                                                                                                                // 742\n                                                                                                                     //\n  // Return 404 by default, if no other handlers serve this URL.                                                     // 744\n  app.use(function (req, res) {                                                                                      // 745\n    res.writeHead(404);                                                                                              // 746\n    res.end();                                                                                                       // 747\n  });                                                                                                                // 748\n                                                                                                                     //\n  var httpServer = http.createServer(app);                                                                           // 751\n  var onListeningCallbacks = [];                                                                                     // 752\n                                                                                                                     //\n  // After 5 seconds w/o data on a socket, kill it.  On the other hand, if                                           // 754\n  // there's an outstanding request, give it a higher timeout instead (to avoid                                      // 755\n  // killing long-polling requests)                                                                                  // 756\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT);                                                                       // 757\n                                                                                                                     //\n  // Do this here, and then also in livedata/stream_server.js, because                                               // 759\n  // stream_server.js kills all the current request handlers when installing its                                     // 760\n  // own.                                                                                                            // 761\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback);                                                // 762\n                                                                                                                     //\n  // start up app                                                                                                    // 765\n  _.extend(WebApp, {                                                                                                 // 766\n    connectHandlers: packageAndAppHandlers,                                                                          // 767\n    rawConnectHandlers: rawConnectHandlers,                                                                          // 768\n    httpServer: httpServer,                                                                                          // 769\n    // For testing.                                                                                                  // 770\n    suppressConnectErrors: function () {                                                                             // 771\n      function suppressConnectErrors() {                                                                             // 771\n        _suppressConnectErrors = true;                                                                               // 772\n      }                                                                                                              // 773\n                                                                                                                     //\n      return suppressConnectErrors;                                                                                  // 771\n    }(),                                                                                                             // 771\n    onListening: function () {                                                                                       // 774\n      function onListening(f) {                                                                                      // 774\n        if (onListeningCallbacks) onListeningCallbacks.push(f);else f();                                             // 775\n      }                                                                                                              // 779\n                                                                                                                     //\n      return onListening;                                                                                            // 774\n    }()                                                                                                              // 774\n  });                                                                                                                // 766\n                                                                                                                     //\n  // Let the rest of the packages (and Meteor.startup hooks) insert connect                                          // 782\n  // middlewares and update __meteor_runtime_config__, then keep going to set up                                     // 783\n  // actually serving HTML.                                                                                          // 784\n  main = function main(argv) {                                                                                       // 785\n    WebAppInternals.generateBoilerplate();                                                                           // 786\n                                                                                                                     //\n    // only start listening after all the startup code has run.                                                      // 788\n    var localPort = WebAppInternals.parsePort(process.env.PORT) || 0;                                                // 789\n    var host = process.env.BIND_IP;                                                                                  // 790\n    var localIp = host || '0.0.0.0';                                                                                 // 791\n    httpServer.listen(localPort, localIp, Meteor.bindEnvironment(function () {                                       // 792\n      if (process.env.METEOR_PRINT_ON_LISTEN) console.log(\"LISTENING\"); // must match run-app.js                     // 793\n                                                                                                                     //\n      var callbacks = onListeningCallbacks;                                                                          // 796\n      onListeningCallbacks = null;                                                                                   // 797\n      _.each(callbacks, function (x) {                                                                               // 798\n        x();                                                                                                         // 798\n      });                                                                                                            // 798\n    }, function (e) {                                                                                                // 800\n      console.error(\"Error listening:\", e);                                                                          // 801\n      console.error(e && e.stack);                                                                                   // 802\n    }));                                                                                                             // 803\n                                                                                                                     //\n    return 'DAEMON';                                                                                                 // 805\n  };                                                                                                                 // 806\n};                                                                                                                   // 807\n                                                                                                                     //\nrunWebAppServer();                                                                                                   // 810\n                                                                                                                     //\nvar inlineScriptsAllowed = true;                                                                                     // 813\n                                                                                                                     //\nWebAppInternals.inlineScriptsAllowed = function () {                                                                 // 815\n  return inlineScriptsAllowed;                                                                                       // 816\n};                                                                                                                   // 817\n                                                                                                                     //\nWebAppInternals.setInlineScriptsAllowed = function (value) {                                                         // 819\n  inlineScriptsAllowed = value;                                                                                      // 820\n  WebAppInternals.generateBoilerplate();                                                                             // 821\n};                                                                                                                   // 822\n                                                                                                                     //\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {                                                  // 825\n  bundledJsCssUrlRewriteHook = hookFn;                                                                               // 826\n  WebAppInternals.generateBoilerplate();                                                                             // 827\n};                                                                                                                   // 828\n                                                                                                                     //\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {                                                          // 830\n  var self = this;                                                                                                   // 831\n  self.setBundledJsCssUrlRewriteHook(function (url) {                                                                // 832\n    return prefix + url;                                                                                             // 834\n  });                                                                                                                // 835\n};                                                                                                                   // 836\n                                                                                                                     //\n// Packages can call `WebAppInternals.addStaticJs` to specify static                                                 // 838\n// JavaScript to be included in the app. This static JS will be inlined,                                             // 839\n// unless inline scripts have been disabled, in which case it will be                                                // 840\n// served under `/<sha1 of contents>`.                                                                               // 841\nvar additionalStaticJs = {};                                                                                         // 842\nWebAppInternals.addStaticJs = function (contents) {                                                                  // 843\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;                                                       // 844\n};                                                                                                                   // 845\n                                                                                                                     //\n// Exported for tests                                                                                                // 847\nWebAppInternals.getBoilerplate = getBoilerplate;                                                                     // 848\nWebAppInternals.additionalStaticJs = additionalStaticJs;                                                             // 849\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/webapp/webapp_server.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.webapp = {}, {\n  WebApp: WebApp,\n  main: main,\n  WebAppInternals: WebAppInternals\n});\n\n})();\n","servePath":"/packages/webapp.js","sourceMap":{"version":3,"sources":["/packages/webapp/webapp_server.js"],"names":["fs","Npm","require","http","os","path","url","crypto","connect","parseurl","useragent","send","Future","Fiber","SHORT_SOCKET_TIMEOUT","LONG_SOCKET_TIMEOUT","WebApp","WebAppInternals","NpmModules","version","module","defaultArch","clientPrograms","archPath","bundledJsCssUrlRewriteHook","bundledPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","sha1","contents","hash","createHash","update","digest","readUtf8FileSync","filename","Meteor","wrapAsync","readFile","camelCase","name","parts","split","toLowerCase","i","length","charAt","toUpperCase","substr","join","identifyBrowser","userAgentString","userAgent","lookup","family","major","minor","patch","categorizeRequest","req","_","extend","browser","headers","parse","pick","htmlAttributeHooks","getHtmlAttributes","request","combinedAttributes","each","hook","attributes","Error","addHtmlAttributeHook","push","appUrl","RoutePolicy","classify","startup","calculateClientHash","WebAppHashing","clientHash","archName","manifest","calculateClientHashRefreshable","calculateClientHashNonRefreshable","calculateClientHashCordova","_timeoutAdjustmentRequestCallback","res","setTimeout","finishListeners","listeners","removeAllListeners","on","l","boilerplateByArch","memoizedBoilerplate","getBoilerplate","arch","useMemoized","dynamicHead","dynamicBody","htmlAttributes","memHash","JSON","stringify","inlineScriptsAllowed","toHTML","boilerplateOptions","generateBoilerplateInstance","additionalOptions","runtimeConfig","clone","runtimeConfigOverrides","Boilerplate","pathMapper","itemPath","baseDataExtension","additionalStaticJs","map","pathname","meteorRuntimeConfig","encodeURIComponent","rootUrlPathPrefix","inline","staticFiles","staticFilesMiddleware","next","method","decodeURIComponent","e","serveStaticJs","s","writeHead","write","end","has","info","maxAge","cacheable","sourceMapUrl","setHeader","type","content","absolutePath","maxage","dotfiles","lastModified","err","Log","error","pipe","getUrlPrefixForArch","replace","parsePort","port","test","parseInt","runWebAppServer","shuttingDown","syncQueue","_SynchronousQueue","getItemPathname","itemUrl","reloadClientPrograms","runTask","generateClientProgram","clientPath","clientJsonPath","__meteor_bootstrap__","serverDir","clientDir","dirname","clientJson","format","urlPrefix","item","where","sourceMap","program","cordovaCompatibilityVersions","PUBLIC_SETTINGS","clientPaths","configJson","stack","process","exit","generateBoilerplate","defaultOptionsForArch","DDP_DEFAULT_CONNECTION_URL","env","MOBILE_DDP_URL","absoluteUrl","ROOT_URL","MOBILE_ROOT_URL","cssFiles","baseData","css","allCss","cssFile","refreshableAssets","app","rawConnectHandlers","use","compress","isValidUrl","response","pathPrefix","substring","query","run","packageAndAppHandlers","suppressConnectErrors","status","undefined","archKey","archKeyCleaned","boilerplate","statusCode","httpServer","createServer","onListeningCallbacks","connectHandlers","onListening","f","main","argv","localPort","PORT","host","BIND_IP","localIp","listen","bindEnvironment","METEOR_PRINT_ON_LISTEN","console","log","callbacks","x","setInlineScriptsAllowed","value","setBundledJsCssUrlRewriteHook","hookFn","setBundledJsCssPrefix","prefix","self","addStaticJs"],"mappings":"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","file":"/packages/webapp.js","sourcesContent":["////////// Requires //////////\n\nvar fs = Npm.require(\"fs\");\nvar http = Npm.require(\"http\");\nvar os = Npm.require(\"os\");\nvar path = Npm.require(\"path\");\nvar url = Npm.require(\"url\");\nvar crypto = Npm.require(\"crypto\");\n\nvar connect = Npm.require('connect');\nvar parseurl = Npm.require('parseurl');\nvar useragent = Npm.require('useragent');\nvar send = Npm.require('send');\n\nvar Future = Npm.require('fibers/future');\nvar Fiber = Npm.require('fibers');\n\nvar SHORT_SOCKET_TIMEOUT = 5*1000;\nvar LONG_SOCKET_TIMEOUT = 120*1000;\n\nWebApp = {};\nWebAppInternals = {};\n\nWebAppInternals.NpmModules = {\n  connect: {\n    version: Npm.require('connect/package.json').version,\n    module: connect\n  }\n};\n\nWebApp.defaultArch = 'web.browser';\n\n// XXX maps archs to manifests\nWebApp.clientPrograms = {};\n\n// XXX maps archs to program path on filesystem\nvar archPath = {};\n\nvar bundledJsCssUrlRewriteHook = function (url) {\n  var bundledPrefix =\n     __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n  return bundledPrefix + url;\n};\n\nvar sha1 = function (contents) {\n  var hash = crypto.createHash('sha1');\n  hash.update(contents);\n  return hash.digest('hex');\n};\n\nvar readUtf8FileSync = function (filename) {\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');\n};\n\n// #BrowserIdentification\n//\n// We have multiple places that want to identify the browser: the\n// unsupported browser page, the appcache package, and, eventually\n// delivering browser polyfills only as needed.\n//\n// To avoid detecting the browser in multiple places ad-hoc, we create a\n// Meteor \"browser\" object. It uses but does not expose the npm\n// useragent module (we could choose a different mechanism to identify\n// the browser in the future if we wanted to).  The browser object\n// contains\n//\n// * `name`: the name of the browser in camel case\n// * `major`, `minor`, `patch`: integers describing the browser version\n//\n// Also here is an early version of a Meteor `request` object, intended\n// to be a high-level description of the request without exposing\n// details of connect's low-level `req`.  Currently it contains:\n//\n// * `browser`: browser identification object described above\n// * `url`: parsed url, including parsed query params\n//\n// As a temporary hack there is a `categorizeRequest` function on WebApp which\n// converts a connect `req` to a Meteor `request`. This can go away once smart\n// packages such as appcache are being passed a `request` object directly when\n// they serve content.\n//\n// This allows `request` to be used uniformly: it is passed to the html\n// attributes hook, and the appcache package can use it when deciding\n// whether to generate a 404 for the manifest.\n//\n// Real routing / server side rendering will probably refactor this\n// heavily.\n\n\n// e.g. \"Mobile Safari\" => \"mobileSafari\"\nvar camelCase = function (name) {\n  var parts = name.split(' ');\n  parts[0] = parts[0].toLowerCase();\n  for (var i = 1;  i < parts.length;  ++i) {\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);\n  }\n  return parts.join('');\n};\n\nvar identifyBrowser = function (userAgentString) {\n  var userAgent = useragent.lookup(userAgentString);\n  return {\n    name: camelCase(userAgent.family),\n    major: +userAgent.major,\n    minor: +userAgent.minor,\n    patch: +userAgent.patch\n  };\n};\n\n// XXX Refactor as part of implementing real routing.\nWebAppInternals.identifyBrowser = identifyBrowser;\n\nWebApp.categorizeRequest = function (req) {\n  return _.extend({\n    browser: identifyBrowser(req.headers['user-agent']),\n    url: url.parse(req.url, true)\n  }, _.pick(req, 'dynamicHead', 'dynamicBody'));\n};\n\n// HTML attribute hooks: functions to be called to determine any attributes to\n// be added to the '<html>' tag. Each function is passed a 'request' object (see\n// #BrowserIdentification) and should return null or object.\nvar htmlAttributeHooks = [];\nvar getHtmlAttributes = function (request) {\n  var combinedAttributes  = {};\n  _.each(htmlAttributeHooks || [], function (hook) {\n    var attributes = hook(request);\n    if (attributes === null)\n      return;\n    if (typeof attributes !== 'object')\n      throw Error(\"HTML attribute hook must return null or object\");\n    _.extend(combinedAttributes, attributes);\n  });\n  return combinedAttributes;\n};\nWebApp.addHtmlAttributeHook = function (hook) {\n  htmlAttributeHooks.push(hook);\n};\n\n// Serve app HTML for this URL?\nvar appUrl = function (url) {\n  if (url === '/favicon.ico' || url === '/robots.txt')\n    return false;\n\n  // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5\n  // appcache URLs. It is included here to prevent using an appcache\n  // then removing it from poisoning an app permanently. Eventually,\n  // once we have server side routing, this won't be needed as\n  // unknown URLs with return a 404 automatically.\n  if (url === '/app.manifest')\n    return false;\n\n  // Avoid serving app HTML for declared routes such as /sockjs/.\n  if (RoutePolicy.classify(url))\n    return false;\n\n  // we currently return app HTML on all URLs by default\n  return true;\n};\n\n\n// We need to calculate the client hash after all packages have loaded\n// to give them a chance to populate __meteor_runtime_config__.\n//\n// Calculating the hash during startup means that packages can only\n// populate __meteor_runtime_config__ during load, not during startup.\n//\n// Calculating instead it at the beginning of main after all startup\n// hooks had run would allow packages to also populate\n// __meteor_runtime_config__ during startup, but that's too late for\n// autoupdate because it needs to have the client hash at startup to\n// insert the auto update version itself into\n// __meteor_runtime_config__ to get it to the client.\n//\n// An alternative would be to give autoupdate a \"post-start,\n// pre-listen\" hook to allow it to insert the auto update version at\n// the right moment.\n\nMeteor.startup(function () {\n  var calculateClientHash = WebAppHashing.calculateClientHash;\n  WebApp.clientHash = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);\n  };\n\n  WebApp.calculateClientHashRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,\n      function (name) {\n        return name === \"css\";\n      });\n  };\n  WebApp.calculateClientHashNonRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,\n      function (name) {\n        return name !== \"css\";\n      });\n  };\n  WebApp.calculateClientHashCordova = function () {\n    var archName = 'web.cordova';\n    if (! WebApp.clientPrograms[archName])\n      return 'none';\n\n    return calculateClientHash(\n      WebApp.clientPrograms[archName].manifest, null, _.pick(\n        __meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n  };\n});\n\n\n\n// When we have a request pending, we want the socket timeout to be long, to\n// give ourselves a while to serve it, and to allow sockjs long polls to\n// complete.  On the other hand, we want to close idle sockets relatively\n// quickly, so that we can shut down relatively promptly but cleanly, without\n// cutting off anyone's response.\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);\n  req.setTimeout(LONG_SOCKET_TIMEOUT);\n  // Insert our new finish listener to run BEFORE the existing one which removes\n  // the response from the socket.\n  var finishListeners = res.listeners('finish');\n  // XXX Apparently in Node 0.12 this event was called 'prefinish'.\n  // https://github.com/joyent/node/commit/7c9b6070\n  // But it has switched back to 'finish' in Node v4:\n  // https://github.com/nodejs/node/pull/1411\n  res.removeAllListeners('finish');\n  res.on('finish', function () {\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);\n  });\n  _.each(finishListeners, function (l) { res.on('finish', l); });\n};\n\n\n// Will be updated by main before we listen.\n// Map from client arch to boilerplate object.\n// Boilerplate object has:\n//   - func: XXX\n//   - baseData: XXX\nvar boilerplateByArch = {};\n\n// Given a request (as returned from `categorizeRequest`), return the\n// boilerplate HTML to serve for that request.\n//\n// If a previous connect middleware has rendered content for the head or body,\n// returns the boilerplate with that content patched in otherwise\n// memoizes on HTML attributes (used by, eg, appcache) and whether inline \n// scripts are currently allowed.\n// XXX so far this function is always called with arch === 'web.browser'\nvar memoizedBoilerplate = {};\nvar getBoilerplate = function (request, arch) {\n  var useMemoized = ! (request.dynamicHead || request.dynamicBody);\n  var htmlAttributes = getHtmlAttributes(request);\n  \n  if (useMemoized) {\n    // The only thing that changes from request to request (unless extra \n    // content is added to the head or body) are the HTML attributes \n    // (used by, eg, appcache) and whether inline scripts are allowed, so we \n    // can memoize based on that.\n    var memHash = JSON.stringify({\n      inlineScriptsAllowed: inlineScriptsAllowed,\n      htmlAttributes: htmlAttributes,\n      arch: arch\n    });\n\n    if (! memoizedBoilerplate[memHash]) {\n      memoizedBoilerplate[memHash] = boilerplateByArch[arch].toHTML({\n        htmlAttributes: htmlAttributes\n      });\n    }\n    return memoizedBoilerplate[memHash];\n  }\n  \n  var boilerplateOptions = _.extend({ \n    htmlAttributes: htmlAttributes \n  }, _.pick(request, 'dynamicHead', 'dynamicBody'));\n  \n  return boilerplateByArch[arch].toHTML(boilerplateOptions);\n};\n\nWebAppInternals.generateBoilerplateInstance = function (arch,\n                                                        manifest,\n                                                        additionalOptions) {\n  additionalOptions = additionalOptions || {};\n\n  var runtimeConfig = _.extend(\n    _.clone(__meteor_runtime_config__),\n    additionalOptions.runtimeConfigOverrides || {}\n  );\n  return new Boilerplate(arch, manifest,\n    _.extend({\n      pathMapper: function (itemPath) {\n        return path.join(archPath[arch], itemPath); },\n      baseDataExtension: {\n        additionalStaticJs: _.map(\n          additionalStaticJs || [],\n          function (contents, pathname) {\n            return {\n              pathname: pathname,\n              contents: contents\n            };\n          }\n        ),\n        // Convert to a JSON string, then get rid of most weird characters, then\n        // wrap in double quotes. (The outermost JSON.stringify really ought to\n        // just be \"wrap in double quotes\" but we use it to be safe.) This might\n        // end up inside a <script> tag so we need to be careful to not include\n        // \"</script>\", but normal {{spacebars}} escaping escapes too much! See\n        // https://github.com/meteor/meteor/issues/3730\n        meteorRuntimeConfig: JSON.stringify(\n          encodeURIComponent(JSON.stringify(runtimeConfig))),\n        rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',\n        bundledJsCssUrlRewriteHook: bundledJsCssUrlRewriteHook,\n        inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),\n        inline: additionalOptions.inline\n      }\n    }, additionalOptions)\n  );\n};\n\n// A mapping from url path to \"info\". Where \"info\" has the following fields:\n// - type: the type of file to be served\n// - cacheable: optionally, whether the file should be cached or not\n// - sourceMapUrl: optionally, the url of the source map\n//\n// Info also contains one of the following:\n// - content: the stringified content that should be served at this path\n// - absolutePath: the absolute path on disk to the file\n\nvar staticFiles;\n\n// Serve static files from the manifest or added with\n// `addStaticJs`. Exported for tests.\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {\n  if ('GET' != req.method && 'HEAD' != req.method && 'OPTIONS' != req.method) {\n    next();\n    return;\n  }\n  var pathname = parseurl(req).pathname;\n  try {\n    pathname = decodeURIComponent(pathname);\n  } catch (e) {\n    next();\n    return;\n  }\n\n  var serveStaticJs = function (s) {\n    res.writeHead(200, {\n      'Content-type': 'application/javascript; charset=UTF-8'\n    });\n    res.write(s);\n    res.end();\n  };\n\n  if (pathname === \"/meteor_runtime_config.js\" &&\n      ! WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(\"__meteor_runtime_config__ = \" +\n                  JSON.stringify(__meteor_runtime_config__) + \";\");\n    return;\n  } else if (_.has(additionalStaticJs, pathname) &&\n              ! WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(additionalStaticJs[pathname]);\n    return;\n  }\n\n  if (!_.has(staticFiles, pathname)) {\n    next();\n    return;\n  }\n\n  // We don't need to call pause because, unlike 'static', once we call into\n  // 'send' and yield to the event loop, we never call another handler with\n  // 'next'.\n\n  var info = staticFiles[pathname];\n\n  // Cacheable files are files that should never change. Typically\n  // named by their hash (eg meteor bundled js and css files).\n  // We cache them ~forever (1yr).\n  var maxAge = info.cacheable\n        ? 1000 * 60 * 60 * 24 * 365\n        : 0;\n\n  // Set the X-SourceMap header, which current Chrome, FireFox, and Safari\n  // understand.  (The SourceMap header is slightly more spec-correct but FF\n  // doesn't understand it.)\n  //\n  // You may also need to enable source maps in Chrome: open dev tools, click\n  // the gear in the bottom right corner, and select \"enable source maps\".\n  if (info.sourceMapUrl) {\n    res.setHeader('X-SourceMap',\n                  __meteor_runtime_config__.ROOT_URL_PATH_PREFIX +\n                  info.sourceMapUrl);\n  }\n\n  if (info.type === \"js\") {\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");\n  } else if (info.type === \"css\") {\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");\n  } else if (info.type === \"json\") {\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n  }\n\n  if (info.hash) {\n    res.setHeader('ETag', '\"' + info.hash + '\"');\n  }\n\n  if (info.content) {\n    res.write(info.content);\n    res.end();\n  } else {\n    send(req, info.absolutePath, {\n        maxage: maxAge,\n        dotfiles: 'allow', // if we specified a dotfile in the manifest, serve it\n        lastModified: false // don't set last-modified based on the file date\n      }).on('error', function (err) {\n        Log.error(\"Error serving static file \" + err);\n        res.writeHead(500);\n        res.end();\n      })\n      .on('directory', function () {\n        Log.error(\"Unexpected directory \" + info.absolutePath);\n        res.writeHead(500);\n        res.end();\n      })\n      .pipe(res);\n  }\n};\n\nvar getUrlPrefixForArch = function (arch) {\n  // XXX we rely on the fact that arch names don't contain slashes\n  // in that case we would need to uri escape it\n\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url\n  // to Meteor internals.\n  return arch === WebApp.defaultArch ?\n    '' : '/' + '__' + arch.replace(/^web\\./, '');\n};\n\n// parse port to see if its a Windows Server style named pipe. If so, return as-is (String), otherwise return as Int\nWebAppInternals.parsePort = function (port) {\n  if( /\\\\\\\\?.+\\\\pipe\\\\?.+/.test(port) ) {\n    return port;\n  }\n\n  return parseInt(port);\n};\n\nvar runWebAppServer = function () {\n  var shuttingDown = false;\n  var syncQueue = new Meteor._SynchronousQueue();\n\n  var getItemPathname = function (itemUrl) {\n    return decodeURIComponent(url.parse(itemUrl).pathname);\n  };\n\n  WebAppInternals.reloadClientPrograms = function () {\n    syncQueue.runTask(function() {\n      staticFiles = {};\n      var generateClientProgram = function (clientPath, arch) {\n        // read the control for the client we'll be serving up\n        var clientJsonPath = path.join(__meteor_bootstrap__.serverDir,\n                                   clientPath);\n        var clientDir = path.dirname(clientJsonPath);\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));\n        if (clientJson.format !== \"web-program-pre1\")\n          throw new Error(\"Unsupported format for client assets: \" +\n                          JSON.stringify(clientJson.format));\n\n        if (! clientJsonPath || ! clientDir || ! clientJson)\n          throw new Error(\"Client config file not parsed.\");\n\n        var urlPrefix = getUrlPrefixForArch(arch);\n\n        var manifest = clientJson.manifest;\n        _.each(manifest, function (item) {\n          if (item.url && item.where === \"client\") {\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {\n              absolutePath: path.join(clientDir, item.path),\n              cacheable: item.cacheable,\n              hash: item.hash,\n              // Link from source to its map\n              sourceMapUrl: item.sourceMapUrl,\n              type: item.type\n            };\n\n            if (item.sourceMap) {\n              // Serve the source map too, under the specified URL. We assume all\n              // source maps are cacheable.\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {\n                absolutePath: path.join(clientDir, item.sourceMap),\n                cacheable: true\n              };\n            }\n          }\n        });\n\n        var program = {\n          format: \"web-program-pre1\",\n          manifest: manifest,\n          version: WebAppHashing.calculateClientHash(manifest, null, _.pick(\n            __meteor_runtime_config__, 'PUBLIC_SETTINGS')),\n          cordovaCompatibilityVersions: clientJson.cordovaCompatibilityVersions,\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS\n        };\n\n        WebApp.clientPrograms[arch] = program;\n\n        // Serve the program as a string at /foo/<arch>/manifest.json\n        // XXX change manifest.json -> program.json\n        staticFiles[urlPrefix + getItemPathname('/manifest.json')] = {\n          content: JSON.stringify(program),\n          cacheable: false,\n          hash: program.version,\n          type: \"json\"\n        };\n      };\n\n      try {\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;\n        _.each(clientPaths, function (clientPath, arch) {\n          archPath[arch] = path.dirname(clientPath);\n          generateClientProgram(clientPath, arch);\n        });\n\n        // Exported for tests.\n        WebAppInternals.staticFiles = staticFiles;\n      } catch (e) {\n        Log.error(\"Error reloading the client program: \" + e.stack);\n        process.exit(1);\n      }\n    });\n  };\n\n  WebAppInternals.generateBoilerplate = function () {\n    // This boilerplate will be served to the mobile devices when used with\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by\n    // the device's server, it is important to set the DDP url to the actual\n    // Meteor server accepting DDP connections and not the device's file server.\n    var defaultOptionsForArch = {\n      'web.cordova': {\n        runtimeConfigOverrides: {\n          // XXX We use absoluteUrl() here so that we serve https://\n          // URLs to cordova clients if force-ssl is in use. If we were\n          // to use __meteor_runtime_config__.ROOT_URL instead of\n          // absoluteUrl(), then Cordova clients would immediately get a\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to\n          // http://example.meteor.com. This breaks the app, because\n          // force-ssl doesn't serve CORS headers on 302\n          // redirects. (Plus it's undesirable to have clients\n          // connecting to http://example.meteor.com when force-ssl is\n          // in use.)\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL ||\n            Meteor.absoluteUrl(),\n          ROOT_URL: process.env.MOBILE_ROOT_URL ||\n            Meteor.absoluteUrl()\n        }\n      }\n    };\n\n    syncQueue.runTask(function() {\n      _.each(WebApp.clientPrograms, function (program, archName) {\n        boilerplateByArch[archName] =\n          WebAppInternals.generateBoilerplateInstance(\n            archName, program.manifest,\n            defaultOptionsForArch[archName]);\n      });\n\n      // Clear the memoized boilerplate cache.\n      memoizedBoilerplate = {};\n\n      // Configure CSS injection for the default arch\n      // XXX implement the CSS injection for all archs?\n      var cssFiles = boilerplateByArch[WebApp.defaultArch].baseData.css;\n      // Rewrite all CSS files (which are written directly to <style> tags)\n      // by autoupdate_client to use the CDN prefix/etc\n      var allCss = _.map(cssFiles, function(cssFile) {\n        return { url: bundledJsCssUrlRewriteHook(cssFile.url) };\n      });\n      WebAppInternals.refreshableAssets = { allCss };\n    });\n  };\n\n  WebAppInternals.reloadClientPrograms();\n\n  // webserver\n  var app = connect();\n\n  // Packages and apps can add handlers that run before any other Meteor\n  // handlers via WebApp.rawConnectHandlers.\n  var rawConnectHandlers = connect();\n  app.use(rawConnectHandlers);\n\n  // Auto-compress any json, javascript, or text.\n  app.use(connect.compress());\n\n  // We're not a proxy; reject (without crashing) attempts to treat us like\n  // one. (See #1212.)\n  app.use(function(req, res, next) {\n    if (RoutePolicy.isValidUrl(req.url)) {\n      next();\n      return;\n    }\n    res.writeHead(400);\n    res.write(\"Not a proxy\");\n    res.end();\n  });\n\n  // Strip off the path prefix, if it exists.\n  app.use(function (request, response, next) {\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    var url = Npm.require('url').parse(request.url);\n    var pathname = url.pathname;\n    // check if the path in the url starts with the path prefix (and the part\n    // after the path prefix must start with a / if it exists.)\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix &&\n       (pathname.length == pathPrefix.length\n        || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n      request.url = request.url.substring(pathPrefix.length);\n      next();\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {\n      next();\n    } else if (pathPrefix) {\n      response.writeHead(404);\n      response.write(\"Unknown path\");\n      response.end();\n    } else {\n      next();\n    }\n  });\n\n  // Parse the query string into res.query. Used by oauth_server, but it's\n  // generally pretty handy..\n  app.use(connect.query());\n\n  // Serve static files from the manifest.\n  // This is inspired by the 'static' middleware.\n  app.use(function (req, res, next) {\n    Fiber(function () {\n     WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);\n    }).run();\n  });\n\n  // Packages and apps can add handlers to this via WebApp.connectHandlers.\n  // They are inserted before our default handler.\n  var packageAndAppHandlers = connect();\n  app.use(packageAndAppHandlers);\n\n  var suppressConnectErrors = false;\n  // connect knows it is an error handler because it has 4 arguments instead of\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden\n  // inside packageAndAppHandlers.)\n  app.use(function (err, req, res, next) {\n    if (!err || !suppressConnectErrors || !req.headers['x-suppress-error']) {\n      next(err);\n      return;\n    }\n    res.writeHead(err.status, { 'Content-Type': 'text/plain' });\n    res.end(\"An error message\");\n  });\n\n  app.use(function (req, res, next) {\n    Fiber(function () {\n      if (!appUrl(req.url))\n        return next();\n\n      var headers = {\n        'Content-Type': 'text/html; charset=utf-8'\n      };\n      if (shuttingDown)\n        headers['Connection'] = 'Close';\n\n      var request = WebApp.categorizeRequest(req);\n\n      if (request.url.query && request.url.query['meteor_css_resource']) {\n        // In this case, we're requesting a CSS resource in the meteor-specific\n        // way, but we don't have it.  Serve a static css file that indicates that\n        // we didn't have it, so we can detect that and refresh.  Make sure\n        // that any proxies or CDNs don't cache this error!  (Normally proxies\n        // or CDNs are smart enough not to cache error pages, but in order to\n        // make this hack work, we need to return the CSS file as a 200, which\n        // would otherwise be cached.)\n        headers['Content-Type'] = 'text/css; charset=utf-8';\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(200, headers);\n        res.write(\".meteor-css-not-found-error { width: 0px;}\");\n        res.end();\n        return undefined;\n      }\n\n      if (request.url.query && request.url.query['meteor_js_resource']) {\n        // Similarly, we're requesting a JS resource that we don't have.\n        // Serve an uncached 404. (We can't use the same hack we use for CSS,\n        // because actually acting on that hack requires us to have the JS\n        // already!)\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(404, headers);\n        res.end(\"404 Not Found\");\n        return undefined;\n      }\n\n      if (request.url.query && request.url.query['meteor_dont_serve_index']) {\n        // When downloading files during a Cordova hot code push, we need\n        // to detect if a file is not available instead of inadvertently\n        // downloading the default index page.\n        // So similar to the situation above, we serve an uncached 404.\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(404, headers);\n        res.end(\"404 Not Found\");\n        return undefined;\n      }\n\n      // /packages/asdfsad ... /__cordova/dafsdf.js\n      var pathname = parseurl(req).pathname;\n      var archKey = pathname.split('/')[1];\n      var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');\n\n      if (!/^__/.test(archKey) || !_.has(archPath, archKeyCleaned)) {\n        archKey = WebApp.defaultArch;\n      } else {\n        archKey = archKeyCleaned;\n      }\n\n      var boilerplate;\n      try {\n        boilerplate = getBoilerplate(request, archKey);\n      } catch (e) {\n        Log.error(\"Error running template: \" + e.stack);\n        res.writeHead(500, headers);\n        res.end();\n        return undefined;\n      }\n\n      var statusCode = res.statusCode ? res.statusCode : 200;\n      res.writeHead(statusCode, headers);\n      res.write(boilerplate);\n      res.end();\n      return undefined;\n    }).run();\n  });\n\n  // Return 404 by default, if no other handlers serve this URL.\n  app.use(function (req, res) {\n    res.writeHead(404);\n    res.end();\n  });\n\n\n  var httpServer = http.createServer(app);\n  var onListeningCallbacks = [];\n\n  // After 5 seconds w/o data on a socket, kill it.  On the other hand, if\n  // there's an outstanding request, give it a higher timeout instead (to avoid\n  // killing long-polling requests)\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT);\n\n  // Do this here, and then also in livedata/stream_server.js, because\n  // stream_server.js kills all the current request handlers when installing its\n  // own.\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback);\n\n\n  // start up app\n  _.extend(WebApp, {\n    connectHandlers: packageAndAppHandlers,\n    rawConnectHandlers: rawConnectHandlers,\n    httpServer: httpServer,\n    // For testing.\n    suppressConnectErrors: function () {\n      suppressConnectErrors = true;\n    },\n    onListening: function (f) {\n      if (onListeningCallbacks)\n        onListeningCallbacks.push(f);\n      else\n        f();\n    }\n  });\n\n  // Let the rest of the packages (and Meteor.startup hooks) insert connect\n  // middlewares and update __meteor_runtime_config__, then keep going to set up\n  // actually serving HTML.\n  main = function (argv) {\n    WebAppInternals.generateBoilerplate();\n\n    // only start listening after all the startup code has run.\n    var localPort = WebAppInternals.parsePort(process.env.PORT) || 0;\n    var host = process.env.BIND_IP;\n    var localIp = host || '0.0.0.0';\n    httpServer.listen(localPort, localIp, Meteor.bindEnvironment(function() {\n      if (process.env.METEOR_PRINT_ON_LISTEN)\n        console.log(\"LISTENING\"); // must match run-app.js\n\n      var callbacks = onListeningCallbacks;\n      onListeningCallbacks = null;\n      _.each(callbacks, function (x) { x(); });\n\n    }, function (e) {\n      console.error(\"Error listening:\", e);\n      console.error(e && e.stack);\n    }));\n\n    return 'DAEMON';\n  };\n};\n\n\nrunWebAppServer();\n\n\nvar inlineScriptsAllowed = true;\n\nWebAppInternals.inlineScriptsAllowed = function () {\n  return inlineScriptsAllowed;\n};\n\nWebAppInternals.setInlineScriptsAllowed = function (value) {\n  inlineScriptsAllowed = value;\n  WebAppInternals.generateBoilerplate();\n};\n\n\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {\n  bundledJsCssUrlRewriteHook = hookFn;\n  WebAppInternals.generateBoilerplate();\n};\n\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {\n  var self = this;\n  self.setBundledJsCssUrlRewriteHook(\n    function (url) {\n      return prefix + url;\n  });\n};\n\n// Packages can call `WebAppInternals.addStaticJs` to specify static\n// JavaScript to be included in the app. This static JS will be inlined,\n// unless inline scripts have been disabled, in which case it will be\n// served under `/<sha1 of contents>`.\nvar additionalStaticJs = {};\nWebAppInternals.addStaticJs = function (contents) {\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;\n};\n\n// Exported for tests\nWebAppInternals.getBoilerplate = getBoilerplate;\nWebAppInternals.additionalStaticJs = additionalStaticJs;\n"]}}]