[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar AllowDeny = Package['allow-deny'].AllowDeny;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar DDP = Package['ddp-client'].DDP;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar LocalCollectionDriver, Mongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mongo\":{\"local_collection_driver.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/local_collection_driver.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nLocalCollectionDriver = function LocalCollectionDriver() {                                                            // 1\n  var self = this;                                                                                                    // 2\n  self.noConnCollections = {};                                                                                        // 3\n};                                                                                                                    // 4\n                                                                                                                      //\nvar ensureCollection = function ensureCollection(name, collections) {                                                 // 6\n  if (!(name in collections)) collections[name] = new LocalCollection(name);                                          // 7\n  return collections[name];                                                                                           // 9\n};                                                                                                                    // 10\n                                                                                                                      //\n_.extend(LocalCollectionDriver.prototype, {                                                                           // 12\n  open: function () {                                                                                                 // 13\n    function open(name, conn) {                                                                                       // 13\n      var self = this;                                                                                                // 14\n      if (!name) return new LocalCollection();                                                                        // 15\n      if (!conn) {                                                                                                    // 17\n        return ensureCollection(name, self.noConnCollections);                                                        // 18\n      }                                                                                                               // 19\n      if (!conn._mongo_livedata_collections) conn._mongo_livedata_collections = {};                                   // 20\n      // XXX is there a way to keep track of a connection's collections without                                       // 22\n      // dangling it off the connection object?                                                                       // 23\n      return ensureCollection(name, conn._mongo_livedata_collections);                                                // 24\n    }                                                                                                                 // 25\n                                                                                                                      //\n    return open;                                                                                                      // 13\n  }()                                                                                                                 // 13\n});                                                                                                                   // 12\n                                                                                                                      //\n// singleton                                                                                                          // 28\nLocalCollectionDriver = new LocalCollectionDriver();                                                                  // 29\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"collection.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/collection.js                                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// options.connection, if given, is a LivedataClient or LivedataServer                                                // 1\n// XXX presently there is no way to destroy/clean up a Collection                                                     // 2\n                                                                                                                      //\n/**                                                                                                                   // 4\n * @summary Namespace for MongoDB-related items                                                                       //\n * @namespace                                                                                                         //\n */                                                                                                                   //\nMongo = {};                                                                                                           // 8\n                                                                                                                      //\n/**                                                                                                                   // 10\n * @summary Constructor for a Collection                                                                              //\n * @locus Anywhere                                                                                                    //\n * @instancename collection                                                                                           //\n * @class                                                                                                             //\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]                                                                                          //\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n                                                                                                                      //\n - **`'STRING'`**: random strings                                                                                     //\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                                                 //\n                                                                                                                      //\nThe default id generation technique is `'STRING'`.                                                                    //\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n */                                                                                                                   //\nMongo.Collection = function (name, options) {                                                                         // 27\n  var self = this;                                                                                                    // 28\n  if (!(self instanceof Mongo.Collection)) throw new Error('use \"new\" to construct a Mongo.Collection');              // 29\n                                                                                                                      //\n  if (!name && name !== null) {                                                                                       // 32\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" + \"saved or synchronized over the network. (Pass null for \" + \"the collection name to turn off this warning.)\");\n    name = null;                                                                                                      // 36\n  }                                                                                                                   // 37\n                                                                                                                      //\n  if (name !== null && typeof name !== \"string\") {                                                                    // 39\n    throw new Error(\"First argument to new Mongo.Collection must be a string or null\");                               // 40\n  }                                                                                                                   // 42\n                                                                                                                      //\n  if (options && options.methods) {                                                                                   // 44\n    // Backwards compatibility hack with original signature (which passed                                             // 45\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"                                // 46\n    // method.)                                                                                                       // 47\n    // XXX remove before 1.0                                                                                          // 48\n    options = { connection: options };                                                                                // 49\n  }                                                                                                                   // 50\n  // Backwards compatibility: \"connection\" used to be called \"manager\".                                               // 51\n  if (options && options.manager && !options.connection) {                                                            // 52\n    options.connection = options.manager;                                                                             // 53\n  }                                                                                                                   // 54\n  options = _.extend({                                                                                                // 55\n    connection: undefined,                                                                                            // 56\n    idGeneration: 'STRING',                                                                                           // 57\n    transform: null,                                                                                                  // 58\n    _driver: undefined,                                                                                               // 59\n    _preventAutopublish: false                                                                                        // 60\n  }, options);                                                                                                        // 55\n                                                                                                                      //\n  switch (options.idGeneration) {                                                                                     // 63\n    case 'MONGO':                                                                                                     // 64\n      self._makeNewID = function () {                                                                                 // 65\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                   // 66\n        return new Mongo.ObjectID(src.hexString(24));                                                                 // 69\n      };                                                                                                              // 70\n      break;                                                                                                          // 71\n    case 'STRING':                                                                                                    // 72\n    default:                                                                                                          // 73\n      self._makeNewID = function () {                                                                                 // 74\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                   // 75\n        return src.id();                                                                                              // 78\n      };                                                                                                              // 79\n      break;                                                                                                          // 80\n  }                                                                                                                   // 63\n                                                                                                                      //\n  self._transform = LocalCollection.wrapTransform(options.transform);                                                 // 83\n                                                                                                                      //\n  if (!name || options.connection === null)                                                                           // 85\n    // note: nameless collections never have a connection                                                             // 86\n    self._connection = null;else if (options.connection) self._connection = options.connection;else if (Meteor.isClient) self._connection = Meteor.connection;else self._connection = Meteor.server;\n                                                                                                                      //\n  if (!options._driver) {                                                                                             // 95\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==                                         // 96\n    // null. We should fully support the case of \"want to use a Mongo-backed                                          // 97\n    // collection from Node code without webapp\", but we don't yet.                                                   // 98\n    // #MeteorServerNull                                                                                              // 99\n    if (name && self._connection === Meteor.server && typeof MongoInternals !== \"undefined\" && MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();                                               // 103\n    } else {                                                                                                          // 104\n      options._driver = LocalCollectionDriver;                                                                        // 105\n    }                                                                                                                 // 106\n  }                                                                                                                   // 107\n                                                                                                                      //\n  self._collection = options._driver.open(name, self._connection);                                                    // 109\n  self._name = name;                                                                                                  // 110\n  self._driver = options._driver;                                                                                     // 111\n                                                                                                                      //\n  if (self._connection && self._connection.registerStore) {                                                           // 113\n    // OK, we're going to be a slave, replicating some remote                                                         // 114\n    // database, except possibly with some temporary divergence while                                                 // 115\n    // we have unacknowledged RPC's.                                                                                  // 116\n    var ok = self._connection.registerStore(name, {                                                                   // 117\n      // Called at the beginning of a batch of updates. batchSize is the number                                       // 118\n      // of update calls to expect.                                                                                   // 119\n      //                                                                                                              // 120\n      // XXX This interface is pretty janky. reset probably ought to go back to                                       // 121\n      // being its own function, and callers shouldn't have to calculate                                              // 122\n      // batchSize. The optimization of not calling pause/remove should be                                            // 123\n      // delayed until later: the first call to update() should buffer its                                            // 124\n      // message, and then we can either directly apply it at endUpdate time if                                       // 125\n      // it was the only update, or do pauseObservers/apply/apply at the next                                         // 126\n      // update() if there's another one.                                                                             // 127\n      beginUpdate: function () {                                                                                      // 128\n        function beginUpdate(batchSize, reset) {                                                                      // 128\n          // pause observers so users don't see flicker when updating several                                         // 129\n          // objects at once (including the post-reconnect reset-and-reapply                                          // 130\n          // stage), and so that a re-sorting of a query can take advantage of the                                    // 131\n          // full _diffQuery moved calculation instead of applying change one at a                                    // 132\n          // time.                                                                                                    // 133\n          if (batchSize > 1 || reset) self._collection.pauseObservers();                                              // 134\n                                                                                                                      //\n          if (reset) self._collection.remove({});                                                                     // 137\n        }                                                                                                             // 139\n                                                                                                                      //\n        return beginUpdate;                                                                                           // 128\n      }(),                                                                                                            // 128\n                                                                                                                      //\n      // Apply an update.                                                                                             // 141\n      // XXX better specify this interface (not in terms of a wire message)?                                          // 142\n      update: function () {                                                                                           // 143\n        function update(msg) {                                                                                        // 143\n          var mongoId = MongoID.idParse(msg.id);                                                                      // 144\n          var doc = self._collection.findOne(mongoId);                                                                // 145\n                                                                                                                      //\n          // Is this a \"replace the whole doc\" message coming from the quiescence                                     // 147\n          // of method writes to an object? (Note that 'undefined' is a valid                                         // 148\n          // value meaning \"remove it\".)                                                                              // 149\n          if (msg.msg === 'replace') {                                                                                // 150\n            var replace = msg.replace;                                                                                // 151\n            if (!replace) {                                                                                           // 152\n              if (doc) self._collection.remove(mongoId);                                                              // 153\n            } else if (!doc) {                                                                                        // 155\n              self._collection.insert(replace);                                                                       // 156\n            } else {                                                                                                  // 157\n              // XXX check that replace has no $ ops                                                                  // 158\n              self._collection.update(mongoId, replace);                                                              // 159\n            }                                                                                                         // 160\n            return;                                                                                                   // 161\n          } else if (msg.msg === 'added') {                                                                           // 162\n            if (doc) {                                                                                                // 163\n              throw new Error(\"Expected not to find a document already present for an add\");                          // 164\n            }                                                                                                         // 165\n            self._collection.insert(_.extend({ _id: mongoId }, msg.fields));                                          // 166\n          } else if (msg.msg === 'removed') {                                                                         // 167\n            if (!doc) throw new Error(\"Expected to find a document already present for removed\");                     // 168\n            self._collection.remove(mongoId);                                                                         // 170\n          } else if (msg.msg === 'changed') {                                                                         // 171\n            if (!doc) throw new Error(\"Expected to find a document to change\");                                       // 172\n            if (!_.isEmpty(msg.fields)) {                                                                             // 174\n              var modifier = {};                                                                                      // 175\n              _.each(msg.fields, function (value, key) {                                                              // 176\n                if (value === undefined) {                                                                            // 177\n                  if (!modifier.$unset) modifier.$unset = {};                                                         // 178\n                  modifier.$unset[key] = 1;                                                                           // 180\n                } else {                                                                                              // 181\n                  if (!modifier.$set) modifier.$set = {};                                                             // 182\n                  modifier.$set[key] = value;                                                                         // 184\n                }                                                                                                     // 185\n              });                                                                                                     // 186\n              self._collection.update(mongoId, modifier);                                                             // 187\n            }                                                                                                         // 188\n          } else {                                                                                                    // 189\n            throw new Error(\"I don't know how to deal with this message\");                                            // 190\n          }                                                                                                           // 191\n        }                                                                                                             // 193\n                                                                                                                      //\n        return update;                                                                                                // 143\n      }(),                                                                                                            // 143\n                                                                                                                      //\n      // Called at the end of a batch of updates.                                                                     // 195\n      endUpdate: function () {                                                                                        // 196\n        function endUpdate() {                                                                                        // 196\n          self._collection.resumeObservers();                                                                         // 197\n        }                                                                                                             // 198\n                                                                                                                      //\n        return endUpdate;                                                                                             // 196\n      }(),                                                                                                            // 196\n                                                                                                                      //\n      // Called around method stub invocations to capture the original versions                                       // 200\n      // of modified documents.                                                                                       // 201\n      saveOriginals: function () {                                                                                    // 202\n        function saveOriginals() {                                                                                    // 202\n          self._collection.saveOriginals();                                                                           // 203\n        }                                                                                                             // 204\n                                                                                                                      //\n        return saveOriginals;                                                                                         // 202\n      }(),                                                                                                            // 202\n      retrieveOriginals: function () {                                                                                // 205\n        function retrieveOriginals() {                                                                                // 205\n          return self._collection.retrieveOriginals();                                                                // 206\n        }                                                                                                             // 207\n                                                                                                                      //\n        return retrieveOriginals;                                                                                     // 205\n      }(),                                                                                                            // 205\n                                                                                                                      //\n      // Used to preserve current versions of documents across a store reset.                                         // 209\n      getDoc: function () {                                                                                           // 210\n        function getDoc(id) {                                                                                         // 210\n          return self.findOne(id);                                                                                    // 211\n        }                                                                                                             // 212\n                                                                                                                      //\n        return getDoc;                                                                                                // 210\n      }(),                                                                                                            // 210\n                                                                                                                      //\n      // To be able to get back to the collection from the store.                                                     // 214\n      _getCollection: function () {                                                                                   // 215\n        function _getCollection() {                                                                                   // 215\n          return self;                                                                                                // 216\n        }                                                                                                             // 217\n                                                                                                                      //\n        return _getCollection;                                                                                        // 215\n      }()                                                                                                             // 215\n    });                                                                                                               // 117\n                                                                                                                      //\n    if (!ok) {                                                                                                        // 220\n      var message = \"There is already a collection named \\\"\" + name + \"\\\"\";                                           // 221\n      if (options._suppressSameNameError === true) {                                                                  // 222\n        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined                     // 223\n        // for this collection name, but this will simply be another reference to it and everything                   // 224\n        // should work. However, we have historically thrown an error here, so for now we will                        // 225\n        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in                     // 226\n        // and give this some real world testing.                                                                     // 227\n        console.warn ? console.warn(message) : console.log(message);                                                  // 228\n      } else {                                                                                                        // 229\n        throw new Error(message);                                                                                     // 230\n      }                                                                                                               // 231\n    }                                                                                                                 // 232\n  }                                                                                                                   // 233\n                                                                                                                      //\n  // XXX don't define these until allow or deny is actually used for this                                             // 235\n  // collection. Could be hard if the security rules are only defined on the                                          // 236\n  // server.                                                                                                          // 237\n  if (options.defineMutationMethods !== false) {                                                                      // 238\n    try {                                                                                                             // 239\n      self._defineMutationMethods({ useExisting: options._suppressSameNameError === true });                          // 240\n    } catch (error) {                                                                                                 // 241\n      // Throw a more understandable error on the server for same collection name                                     // 242\n      if (error.message === \"A method named '/\" + name + \"/insert' is already defined\") throw new Error(\"There is already a collection named \\\"\" + name + \"\\\"\");\n      throw error;                                                                                                    // 245\n    }                                                                                                                 // 246\n  }                                                                                                                   // 247\n                                                                                                                      //\n  // autopublish                                                                                                      // 249\n  if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {          // 250\n    self._connection.publish(null, function () {                                                                      // 252\n      return self.find();                                                                                             // 253\n    }, { is_auto: true });                                                                                            // 254\n  }                                                                                                                   // 255\n};                                                                                                                    // 256\n                                                                                                                      //\n///                                                                                                                   // 258\n/// Main collection API                                                                                               // 259\n///                                                                                                                   // 260\n                                                                                                                      //\n                                                                                                                      //\n_.extend(Mongo.Collection.prototype, {                                                                                // 263\n                                                                                                                      //\n  _getFindSelector: function () {                                                                                     // 265\n    function _getFindSelector(args) {                                                                                 // 265\n      if (args.length == 0) return {};else return args[0];                                                            // 266\n    }                                                                                                                 // 270\n                                                                                                                      //\n    return _getFindSelector;                                                                                          // 265\n  }(),                                                                                                                // 265\n                                                                                                                      //\n  _getFindOptions: function () {                                                                                      // 272\n    function _getFindOptions(args) {                                                                                  // 272\n      var self = this;                                                                                                // 273\n      if (args.length < 2) {                                                                                          // 274\n        return { transform: self._transform };                                                                        // 275\n      } else {                                                                                                        // 276\n        check(args[1], Match.Optional(Match.ObjectIncluding({                                                         // 277\n          fields: Match.Optional(Match.OneOf(Object, undefined)),                                                     // 278\n          sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),                                      // 279\n          limit: Match.Optional(Match.OneOf(Number, undefined)),                                                      // 280\n          skip: Match.Optional(Match.OneOf(Number, undefined))                                                        // 281\n        })));                                                                                                         // 277\n                                                                                                                      //\n        return _.extend({                                                                                             // 284\n          transform: self._transform                                                                                  // 285\n        }, args[1]);                                                                                                  // 284\n      }                                                                                                               // 287\n    }                                                                                                                 // 288\n                                                                                                                      //\n    return _getFindOptions;                                                                                           // 272\n  }(),                                                                                                                // 272\n                                                                                                                      //\n  /**                                                                                                                 // 290\n   * @summary Find the documents in a collection that match the selector.                                             //\n   * @locus Anywhere                                                                                                  //\n   * @method find                                                                                                     //\n   * @memberOf Mongo.Collection                                                                                       //\n   * @instance                                                                                                        //\n   * @param {MongoSelector} [selector] A query describing the documents to find                                       //\n   * @param {Object} [options]                                                                                        //\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     //\n   * @param {Number} options.skip Number of results to skip at the beginning                                          //\n   * @param {Number} options.limit Maximum number of results to return                                                //\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           //\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity               //\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).\n   * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.\n   * @returns {Mongo.Cursor}                                                                                          //\n   */                                                                                                                 //\n  find: function () {                                                                                                 // 309\n    function find() /* selector, options */{                                                                          // 309\n      // Collection.find() (return all docs) behaves differently                                                      // 310\n      // from Collection.find(undefined) (return 0 docs).  so be                                                      // 311\n      // careful about the length of arguments.                                                                       // 312\n      var self = this;                                                                                                // 313\n      var argArray = _.toArray(arguments);                                                                            // 314\n      return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray));                  // 315\n    }                                                                                                                 // 317\n                                                                                                                      //\n    return find;                                                                                                      // 309\n  }(),                                                                                                                // 309\n                                                                                                                      //\n  /**                                                                                                                 // 319\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.\n   * @locus Anywhere                                                                                                  //\n   * @method findOne                                                                                                  //\n   * @memberOf Mongo.Collection                                                                                       //\n   * @instance                                                                                                        //\n   * @param {MongoSelector} [selector] A query describing the documents to find                                       //\n   * @param {Object} [options]                                                                                        //\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     //\n   * @param {Number} options.skip Number of results to skip at the beginning                                          //\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           //\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity                   //\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}                                                                                                //\n   */                                                                                                                 //\n  findOne: function () {                                                                                              // 334\n    function findOne() /* selector, options */{                                                                       // 334\n      var self = this;                                                                                                // 335\n      var argArray = _.toArray(arguments);                                                                            // 336\n      return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray));               // 337\n    }                                                                                                                 // 339\n                                                                                                                      //\n    return findOne;                                                                                                   // 334\n  }()                                                                                                                 // 334\n                                                                                                                      //\n});                                                                                                                   // 263\n                                                                                                                      //\nMongo.Collection._publishCursor = function (cursor, sub, collection) {                                                // 343\n  var observeHandle = cursor.observeChanges({                                                                         // 344\n    added: function () {                                                                                              // 345\n      function added(id, fields) {                                                                                    // 345\n        sub.added(collection, id, fields);                                                                            // 346\n      }                                                                                                               // 347\n                                                                                                                      //\n      return added;                                                                                                   // 345\n    }(),                                                                                                              // 345\n    changed: function () {                                                                                            // 348\n      function changed(id, fields) {                                                                                  // 348\n        sub.changed(collection, id, fields);                                                                          // 349\n      }                                                                                                               // 350\n                                                                                                                      //\n      return changed;                                                                                                 // 348\n    }(),                                                                                                              // 348\n    removed: function () {                                                                                            // 351\n      function removed(id) {                                                                                          // 351\n        sub.removed(collection, id);                                                                                  // 352\n      }                                                                                                               // 353\n                                                                                                                      //\n      return removed;                                                                                                 // 351\n    }()                                                                                                               // 351\n  });                                                                                                                 // 344\n                                                                                                                      //\n  // We don't call sub.ready() here: it gets called in livedata_server, after                                         // 356\n  // possibly calling _publishCursor on multiple returned cursors.                                                    // 357\n                                                                                                                      //\n  // register stop callback (expects lambda w/ no args).                                                              // 359\n  sub.onStop(function () {                                                                                            // 360\n    observeHandle.stop();                                                                                             // 360\n  });                                                                                                                 // 360\n                                                                                                                      //\n  // return the observeHandle in case it needs to be stopped early                                                    // 362\n  return observeHandle;                                                                                               // 363\n};                                                                                                                    // 364\n                                                                                                                      //\n// protect against dangerous selectors.  falsey and {_id: falsey} are both                                            // 366\n// likely programmer error, and not what you want, particularly for destructive                                       // 367\n// operations.  JS regexps don't serialize over DDP but can be trivially                                              // 368\n// replaced by $regex.                                                                                                // 369\nMongo.Collection._rewriteSelector = function (selector) {                                                             // 370\n  // shorthand -- scalars match _id                                                                                   // 371\n  if (LocalCollection._selectorIsId(selector)) selector = { _id: selector };                                          // 372\n                                                                                                                      //\n  if (_.isArray(selector)) {                                                                                          // 375\n    // This is consistent with the Mongo console itself; if we don't do this                                          // 376\n    // check passing an empty array ends up selecting all items                                                       // 377\n    throw new Error(\"Mongo selector can't be an array.\");                                                             // 378\n  }                                                                                                                   // 379\n                                                                                                                      //\n  if (!selector || '_id' in selector && !selector._id)                                                                // 381\n    // can't match anything                                                                                           // 382\n    return { _id: Random.id() };                                                                                      // 383\n                                                                                                                      //\n  var ret = {};                                                                                                       // 385\n  _.each(selector, function (value, key) {                                                                            // 386\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                                // 387\n    if (value instanceof RegExp) {                                                                                    // 388\n      ret[key] = convertRegexpToMongoSelector(value);                                                                 // 389\n    } else if (value && value.$regex instanceof RegExp) {                                                             // 390\n      ret[key] = convertRegexpToMongoSelector(value.$regex);                                                          // 391\n      // if value is {$regex: /foo/, $options: ...} then $options                                                     // 392\n      // override the ones set on $regex.                                                                             // 393\n      if (value.$options !== undefined) ret[key].$options = value.$options;                                           // 394\n    } else if (_.contains(['$or', '$and', '$nor'], key)) {                                                            // 396\n      // Translate lower levels of $and/$or/$nor                                                                      // 398\n      ret[key] = _.map(value, function (v) {                                                                          // 399\n        return Mongo.Collection._rewriteSelector(v);                                                                  // 400\n      });                                                                                                             // 401\n    } else {                                                                                                          // 402\n      ret[key] = value;                                                                                               // 403\n    }                                                                                                                 // 404\n  });                                                                                                                 // 405\n  return ret;                                                                                                         // 406\n};                                                                                                                    // 407\n                                                                                                                      //\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                                 // 409\n// selector                                                                                                           // 410\nfunction convertRegexpToMongoSelector(regexp) {                                                                       // 411\n  check(regexp, RegExp); // safety belt                                                                               // 412\n                                                                                                                      //\n  var selector = { $regex: regexp.source };                                                                           // 414\n  var regexOptions = '';                                                                                              // 415\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                                                // 416\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                                  // 417\n  if (regexp.ignoreCase) regexOptions += 'i';                                                                         // 418\n  if (regexp.multiline) regexOptions += 'm';                                                                          // 420\n  if (regexOptions) selector.$options = regexOptions;                                                                 // 422\n                                                                                                                      //\n  return selector;                                                                                                    // 425\n};                                                                                                                    // 426\n                                                                                                                      //\n// 'insert' immediately returns the inserted document's new _id.                                                      // 428\n// The others return values immediately if you are in a stub, an in-memory                                            // 429\n// unmanaged collection, or a mongo-backed collection and you don't pass a                                            // 430\n// callback. 'update' and 'remove' return the number of affected                                                      // 431\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                        // 432\n// insert happened, 'insertedId'.                                                                                     // 433\n//                                                                                                                    // 434\n// Otherwise, the semantics are exactly like other methods: they take                                                 // 435\n// a callback as an optional last argument; if no callback is                                                         // 436\n// provided, they block until the operation is complete, and throw an                                                 // 437\n// exception if it fails; if a callback is provided, then they don't                                                  // 438\n// necessarily block, and they call the callback when they finish with error and                                      // 439\n// result arguments.  (The insert method provides the document ID as its result;                                      // 440\n// update and remove provide the number of affected docs as the result; upsert                                        // 441\n// provides an object with numberAffected and maybe insertedId.)                                                      // 442\n//                                                                                                                    // 443\n// On the client, blocking is impossible, so if a callback                                                            // 444\n// isn't provided, they just return immediately and any error                                                         // 445\n// information is lost.                                                                                               // 446\n//                                                                                                                    // 447\n// There's one more tweak. On the client, if you don't provide a                                                      // 448\n// callback, then if there is an error, a message will be logged with                                                 // 449\n// Meteor._debug.                                                                                                     // 450\n//                                                                                                                    // 451\n// The intent (though this is actually determined by the underlying                                                   // 452\n// drivers) is that the operations should be done synchronously, not                                                  // 453\n// generating their result until the database has acknowledged                                                        // 454\n// them. In the future maybe we should provide a flag to turn this                                                    // 455\n// off.                                                                                                               // 456\n                                                                                                                      //\n/**                                                                                                                   // 458\n * @summary Insert a document in the collection.  Returns its unique _id.                                             //\n * @locus Anywhere                                                                                                    //\n * @method  insert                                                                                                    //\n * @memberOf Mongo.Collection                                                                                         //\n * @instance                                                                                                          //\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */                                                                                                                   //\nMongo.Collection.prototype.insert = function () {                                                                     // 467\n  function insert(doc, callback) {                                                                                    // 467\n    // Make sure we were passed a document to insert                                                                  // 468\n    if (!doc) {                                                                                                       // 469\n      throw new Error(\"insert requires an argument\");                                                                 // 470\n    }                                                                                                                 // 471\n                                                                                                                      //\n    // Shallow-copy the document and possibly generate an ID                                                          // 473\n    doc = _.extend({}, doc);                                                                                          // 474\n                                                                                                                      //\n    if ('_id' in doc) {                                                                                               // 476\n      if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {                          // 477\n        throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");                  // 479\n      }                                                                                                               // 480\n    } else {                                                                                                          // 481\n      var generateId = true;                                                                                          // 482\n                                                                                                                      //\n      // Don't generate the id if we're the client and the 'outermost' call                                           // 484\n      // This optimization saves us passing both the randomSeed and the id                                            // 485\n      // Passing both is redundant.                                                                                   // 486\n      if (this._isRemoteCollection()) {                                                                               // 487\n        var enclosing = DDP._CurrentInvocation.get();                                                                 // 488\n        if (!enclosing) {                                                                                             // 489\n          generateId = false;                                                                                         // 490\n        }                                                                                                             // 491\n      }                                                                                                               // 492\n                                                                                                                      //\n      if (generateId) {                                                                                               // 494\n        doc._id = this._makeNewID();                                                                                  // 495\n      }                                                                                                               // 496\n    }                                                                                                                 // 497\n                                                                                                                      //\n    // On inserts, always return the id that we generated; on all other                                               // 499\n    // operations, just return the result from the collection.                                                        // 500\n    var chooseReturnValueFromCollectionResult = function () {                                                         // 501\n      function chooseReturnValueFromCollectionResult(result) {                                                        // 501\n        if (doc._id) {                                                                                                // 502\n          return doc._id;                                                                                             // 503\n        }                                                                                                             // 504\n                                                                                                                      //\n        // XXX what is this for??                                                                                     // 506\n        // It's some iteraction between the callback to _callMutatorMethod and                                        // 507\n        // the return value conversion                                                                                // 508\n        doc._id = result;                                                                                             // 509\n                                                                                                                      //\n        return result;                                                                                                // 511\n      }                                                                                                               // 512\n                                                                                                                      //\n      return chooseReturnValueFromCollectionResult;                                                                   // 501\n    }();                                                                                                              // 501\n                                                                                                                      //\n    var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);                              // 514\n                                                                                                                      //\n    if (this._isRemoteCollection()) {                                                                                 // 517\n      var result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);                                         // 518\n      return chooseReturnValueFromCollectionResult(result);                                                           // 519\n    }                                                                                                                 // 520\n                                                                                                                      //\n    // it's my collection.  descend into the collection object                                                        // 522\n    // and propagate any exception.                                                                                   // 523\n    try {                                                                                                             // 524\n      // If the user provided a callback and the collection implements this                                           // 525\n      // operation asynchronously, then queryRet will be undefined, and the                                           // 526\n      // result will be returned through the callback instead.                                                        // 527\n      var _result = this._collection.insert(doc, wrappedCallback);                                                    // 528\n      return chooseReturnValueFromCollectionResult(_result);                                                          // 529\n    } catch (e) {                                                                                                     // 530\n      if (callback) {                                                                                                 // 531\n        callback(e);                                                                                                  // 532\n        return null;                                                                                                  // 533\n      }                                                                                                               // 534\n      throw e;                                                                                                        // 535\n    }                                                                                                                 // 536\n  }                                                                                                                   // 537\n                                                                                                                      //\n  return insert;                                                                                                      // 467\n}();                                                                                                                  // 467\n                                                                                                                      //\n/**                                                                                                                   // 539\n * @summary Modify one or more documents in the collection. Returns the number of matched documents.                  //\n * @locus Anywhere                                                                                                    //\n * @method update                                                                                                     //\n * @memberOf Mongo.Collection                                                                                         //\n * @instance                                                                                                          //\n * @param {MongoSelector} selector Specifies which documents to modify                                                //\n * @param {MongoModifier} modifier Specifies how to modify the documents                                              //\n * @param {Object} [options]                                                                                          //\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.                      //\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                   //\nMongo.Collection.prototype.update = function () {                                                                     // 552\n  function update(selector, modifier) {                                                                               // 552\n    for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      optionsAndCallback[_key - 2] = arguments[_key];                                                                 // 552\n    }                                                                                                                 // 552\n                                                                                                                      //\n    var callback = popCallbackFromArgs(optionsAndCallback);                                                           // 553\n                                                                                                                      //\n    selector = Mongo.Collection._rewriteSelector(selector);                                                           // 555\n                                                                                                                      //\n    // We've already popped off the callback, so we are left with an array                                            // 557\n    // of one or zero items                                                                                           // 558\n    var options = _.clone(optionsAndCallback[0]) || {};                                                               // 559\n    if (options && options.upsert) {                                                                                  // 560\n      // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                             // 561\n      if (options.insertedId) {                                                                                       // 562\n        if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error(\"insertedId must be string or ObjectID\");\n      } else if (!selector._id) {                                                                                     // 566\n        options.insertedId = this._makeNewID();                                                                       // 567\n      }                                                                                                               // 568\n    }                                                                                                                 // 569\n                                                                                                                      //\n    var wrappedCallback = wrapCallback(callback);                                                                     // 571\n                                                                                                                      //\n    if (this._isRemoteCollection()) {                                                                                 // 573\n      var args = [selector, modifier, options];                                                                       // 574\n                                                                                                                      //\n      return this._callMutatorMethod(\"update\", args, wrappedCallback);                                                // 580\n    }                                                                                                                 // 581\n                                                                                                                      //\n    // it's my collection.  descend into the collection object                                                        // 583\n    // and propagate any exception.                                                                                   // 584\n    try {                                                                                                             // 585\n      // If the user provided a callback and the collection implements this                                           // 586\n      // operation asynchronously, then queryRet will be undefined, and the                                           // 587\n      // result will be returned through the callback instead.                                                        // 588\n      return this._collection.update(selector, modifier, options, wrappedCallback);                                   // 589\n    } catch (e) {                                                                                                     // 591\n      if (callback) {                                                                                                 // 592\n        callback(e);                                                                                                  // 593\n        return null;                                                                                                  // 594\n      }                                                                                                               // 595\n      throw e;                                                                                                        // 596\n    }                                                                                                                 // 597\n  }                                                                                                                   // 598\n                                                                                                                      //\n  return update;                                                                                                      // 552\n}();                                                                                                                  // 552\n                                                                                                                      //\n/**                                                                                                                   // 600\n * @summary Remove documents from the collection                                                                      //\n * @locus Anywhere                                                                                                    //\n * @method remove                                                                                                     //\n * @memberOf Mongo.Collection                                                                                         //\n * @instance                                                                                                          //\n * @param {MongoSelector} selector Specifies which documents to remove                                                //\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.                   //\n */                                                                                                                   //\nMongo.Collection.prototype.remove = function () {                                                                     // 609\n  function remove(selector, callback) {                                                                               // 609\n    selector = Mongo.Collection._rewriteSelector(selector);                                                           // 610\n                                                                                                                      //\n    var wrappedCallback = wrapCallback(callback);                                                                     // 612\n                                                                                                                      //\n    if (this._isRemoteCollection()) {                                                                                 // 614\n      return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);                                          // 615\n    }                                                                                                                 // 616\n                                                                                                                      //\n    // it's my collection.  descend into the collection object                                                        // 618\n    // and propagate any exception.                                                                                   // 619\n    try {                                                                                                             // 620\n      // If the user provided a callback and the collection implements this                                           // 621\n      // operation asynchronously, then queryRet will be undefined, and the                                           // 622\n      // result will be returned through the callback instead.                                                        // 623\n      return this._collection.remove(selector, wrappedCallback);                                                      // 624\n    } catch (e) {                                                                                                     // 625\n      if (callback) {                                                                                                 // 626\n        callback(e);                                                                                                  // 627\n        return null;                                                                                                  // 628\n      }                                                                                                               // 629\n      throw e;                                                                                                        // 630\n    }                                                                                                                 // 631\n  }                                                                                                                   // 632\n                                                                                                                      //\n  return remove;                                                                                                      // 609\n}();                                                                                                                  // 609\n                                                                                                                      //\n// Determine if this collection is simply a minimongo representation of a real                                        // 634\n// database on another server                                                                                         // 635\nMongo.Collection.prototype._isRemoteCollection = function () {                                                        // 636\n  function _isRemoteCollection() {                                                                                    // 636\n    // XXX see #MeteorServerNull                                                                                      // 637\n    return this._connection && this._connection !== Meteor.server;                                                    // 638\n  }                                                                                                                   // 639\n                                                                                                                      //\n  return _isRemoteCollection;                                                                                         // 636\n}();                                                                                                                  // 636\n                                                                                                                      //\n// Convert the callback to not return a result if there is an error                                                   // 641\nfunction wrapCallback(callback, convertResult) {                                                                      // 642\n  if (!callback) {                                                                                                    // 643\n    return;                                                                                                           // 644\n  }                                                                                                                   // 645\n                                                                                                                      //\n  // If no convert function was passed in, just use a \"blank function\"                                                // 647\n  convertResult = convertResult || _.identity;                                                                        // 648\n                                                                                                                      //\n  return function (error, result) {                                                                                   // 650\n    callback(error, !error && convertResult(result));                                                                 // 651\n  };                                                                                                                  // 652\n}                                                                                                                     // 653\n                                                                                                                      //\n/**                                                                                                                   // 655\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere                                                                                                    //\n * @param {MongoSelector} selector Specifies which documents to modify                                                //\n * @param {MongoModifier} modifier Specifies how to modify the documents                                              //\n * @param {Object} [options]                                                                                          //\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                   //\nMongo.Collection.prototype.upsert = function () {                                                                     // 664\n  function upsert(selector, modifier, options, callback) {                                                            // 664\n    if (!callback && typeof options === \"function\") {                                                                 // 666\n      callback = options;                                                                                             // 667\n      options = {};                                                                                                   // 668\n    }                                                                                                                 // 669\n                                                                                                                      //\n    var updateOptions = _.extend({}, options, {                                                                       // 671\n      _returnObject: true,                                                                                            // 672\n      upsert: true                                                                                                    // 673\n    });                                                                                                               // 671\n                                                                                                                      //\n    return this.update(selector, modifier, updateOptions, callback);                                                  // 676\n  }                                                                                                                   // 677\n                                                                                                                      //\n  return upsert;                                                                                                      // 664\n}();                                                                                                                  // 664\n                                                                                                                      //\n// We'll actually design an index API later. For now, we just pass through to                                         // 679\n// Mongo's, but make it synchronous.                                                                                  // 680\nMongo.Collection.prototype._ensureIndex = function (index, options) {                                                 // 681\n  var self = this;                                                                                                    // 682\n  if (!self._collection._ensureIndex) throw new Error(\"Can only call _ensureIndex on server collections\");            // 683\n  self._collection._ensureIndex(index, options);                                                                      // 685\n};                                                                                                                    // 686\nMongo.Collection.prototype._dropIndex = function (index) {                                                            // 687\n  var self = this;                                                                                                    // 688\n  if (!self._collection._dropIndex) throw new Error(\"Can only call _dropIndex on server collections\");                // 689\n  self._collection._dropIndex(index);                                                                                 // 691\n};                                                                                                                    // 692\nMongo.Collection.prototype._dropCollection = function () {                                                            // 693\n  var self = this;                                                                                                    // 694\n  if (!self._collection.dropCollection) throw new Error(\"Can only call _dropCollection on server collections\");       // 695\n  self._collection.dropCollection();                                                                                  // 697\n};                                                                                                                    // 698\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                              // 699\n  var self = this;                                                                                                    // 700\n  if (!self._collection._createCappedCollection) throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);                                                   // 703\n};                                                                                                                    // 704\n                                                                                                                      //\n/**                                                                                                                   // 706\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                      //\n */                                                                                                                   //\nMongo.Collection.prototype.rawCollection = function () {                                                              // 710\n  var self = this;                                                                                                    // 711\n  if (!self._collection.rawCollection) {                                                                              // 712\n    throw new Error(\"Can only call rawCollection on server collections\");                                             // 713\n  }                                                                                                                   // 714\n  return self._collection.rawCollection();                                                                            // 715\n};                                                                                                                    // 716\n                                                                                                                      //\n/**                                                                                                                   // 718\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                      //\n */                                                                                                                   //\nMongo.Collection.prototype.rawDatabase = function () {                                                                // 722\n  var self = this;                                                                                                    // 723\n  if (!(self._driver.mongo && self._driver.mongo.db)) {                                                               // 724\n    throw new Error(\"Can only call rawDatabase on server collections\");                                               // 725\n  }                                                                                                                   // 726\n  return self._driver.mongo.db;                                                                                       // 727\n};                                                                                                                    // 728\n                                                                                                                      //\n/**                                                                                                                   // 731\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere                                                                                                    //\n * @class                                                                                                             //\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create             //\n */                                                                                                                   //\nMongo.ObjectID = MongoID.ObjectID;                                                                                    // 737\n                                                                                                                      //\n/**                                                                                                                   // 739\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.            //\n * @class                                                                                                             //\n * @instanceName cursor                                                                                               //\n */                                                                                                                   //\nMongo.Cursor = LocalCollection.Cursor;                                                                                // 744\n                                                                                                                      //\n/**                                                                                                                   // 746\n * @deprecated in 0.9.1                                                                                               //\n */                                                                                                                   //\nMongo.Collection.Cursor = Mongo.Cursor;                                                                               // 749\n                                                                                                                      //\n/**                                                                                                                   // 751\n * @deprecated in 0.9.1                                                                                               //\n */                                                                                                                   //\nMongo.Collection.ObjectID = Mongo.ObjectID;                                                                           // 754\n                                                                                                                      //\n/**                                                                                                                   // 756\n * @deprecated in 0.9.1                                                                                               //\n */                                                                                                                   //\nMeteor.Collection = Mongo.Collection;                                                                                 // 759\n                                                                                                                      //\n// Allow deny stuff is now in the allow-deny package                                                                  // 761\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);                                                 // 762\n                                                                                                                      //\nfunction popCallbackFromArgs(args) {                                                                                  // 764\n  // Pull off any callback (or perhaps a 'callback' variable that was passed                                          // 765\n  // in undefined, like how 'upsert' does it).                                                                        // 766\n  if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {            // 767\n    return args.pop();                                                                                                // 770\n  }                                                                                                                   // 771\n}                                                                                                                     // 772\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/mongo/local_collection_driver.js\");\nrequire(\"./node_modules/meteor/mongo/collection.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.mongo = {}, {\n  Mongo: Mongo\n});\n\n})();\n","servePath":"/packages/mongo.js","sourceMap":{"version":3,"sources":["/packages/mongo/local_collection_driver.js","/packages/mongo/collection.js"],"names":["LocalCollectionDriver","self","noConnCollections","ensureCollection","name","collections","LocalCollection","_","extend","prototype","open","conn","_mongo_livedata_collections","Mongo","Collection","options","Error","Meteor","_debug","methods","connection","manager","undefined","idGeneration","transform","_driver","_preventAutopublish","_makeNewID","src","DDP","randomStream","Random","insecure","ObjectID","hexString","id","_transform","wrapTransform","_connection","isClient","server","MongoInternals","defaultRemoteCollectionDriver","_collection","_name","registerStore","ok","beginUpdate","batchSize","reset","pauseObservers","remove","update","msg","mongoId","MongoID","idParse","doc","findOne","replace","insert","_id","fields","isEmpty","modifier","each","value","key","$unset","$set","endUpdate","resumeObservers","saveOriginals","retrieveOriginals","getDoc","_getCollection","message","_suppressSameNameError","console","warn","log","defineMutationMethods","_defineMutationMethods","useExisting","error","Package","autopublish","publish","find","is_auto","_getFindSelector","args","length","_getFindOptions","check","Match","Optional","ObjectIncluding","OneOf","Object","sort","Array","Function","limit","Number","skip","argArray","toArray","arguments","_publishCursor","cursor","sub","collection","observeHandle","observeChanges","added","changed","removed","onStop","stop","_rewriteSelector","selector","_selectorIsId","isArray","ret","RegExp","convertRegexpToMongoSelector","$regex","$options","contains","map","v","regexp","source","regexOptions","ignoreCase","multiline","callback","generateId","_isRemoteCollection","enclosing","_CurrentInvocation","get","chooseReturnValueFromCollectionResult","result","wrappedCallback","wrapCallback","_callMutatorMethod","e","optionsAndCallback","popCallbackFromArgs","clone","upsert","insertedId","convertResult","identity","updateOptions","_returnObject","_ensureIndex","index","_dropIndex","_dropCollection","dropCollection","_createCappedCollection","byteSize","maxDocuments","rawCollection","rawDatabase","mongo","db","Cursor","AllowDeny","CollectionPrototype","pop"],"mappings":"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","file":"/packages/mongo.js","sourcesContent":["LocalCollectionDriver = function () {\n  var self = this;\n  self.noConnCollections = {};\n};\n\nvar ensureCollection = function (name, collections) {\n  if (!(name in collections))\n    collections[name] = new LocalCollection(name);\n  return collections[name];\n};\n\n_.extend(LocalCollectionDriver.prototype, {\n  open: function (name, conn) {\n    var self = this;\n    if (!name)\n      return new LocalCollection;\n    if (! conn) {\n      return ensureCollection(name, self.noConnCollections);\n    }\n    if (! conn._mongo_livedata_collections)\n      conn._mongo_livedata_collections = {};\n    // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?\n    return ensureCollection(name, conn._mongo_livedata_collections);\n  }\n});\n\n// singleton\nLocalCollectionDriver = new LocalCollectionDriver;\n","// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Mongo.Collection))\n    throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\n      \"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return new Mongo.ObjectID(src.hexString(24));\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return src.id();\n    };\n    break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function(id) {\n        return self.findOne(id);\n      },\n\n      // To be able to get back to the collection from the store.\n      _getCollection: function () {\n        return self;\n      }\n    });\n\n    if (!ok) {\n      const message = `There is already a collection named \"${name}\"`;\n      if (options._suppressSameNameError === true) {\n        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined\n        // for this collection name, but this will simply be another reference to it and everything\n        // should work. However, we have historically thrown an error here, so for now we will\n        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in\n        // and give this some real world testing.\n        console.warn ? console.warn(message) : console.log(message);\n      } else {\n        throw new Error(message);\n      }\n    }\n  }\n\n  // XXX don't define these until allow or deny is actually used for this\n  // collection. Could be hard if the security rules are only defined on the\n  // server.\n  if (options.defineMutationMethods !== false) {\n    try {\n      self._defineMutationMethods({ useExisting: (options._suppressSameNameError === true) });\n    } catch (error) {\n      // Throw a more understandable error on the server for same collection name\n      if (error.message === `A method named '/${name}/insert' is already defined`)\n        throw new Error(`There is already a collection named \"${name}\"`);\n      throw error;\n    }\n  }\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection\n      && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n     })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).\n   * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.\n   * @returns {Mongo.Cursor}\n   */\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n\n  // return the observeHandle in case it needs to be stopped early\n  return observeHandle;\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nfunction convertRegexpToMongoSelector(regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n};\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\nMongo.Collection.prototype.insert = function insert(doc, callback) {\n  // Make sure we were passed a document to insert\n  if (!doc) {\n    throw new Error(\"insert requires an argument\");\n  }\n\n  // Shallow-copy the document and possibly generate an ID\n  doc = _.extend({}, doc);\n\n  if ('_id' in doc) {\n    if (!doc._id || !(typeof doc._id === 'string'\n          || doc._id instanceof Mongo.ObjectID)) {\n      throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n    }\n  } else {\n    let generateId = true;\n\n    // Don't generate the id if we're the client and the 'outermost' call\n    // This optimization saves us passing both the randomSeed and the id\n    // Passing both is redundant.\n    if (this._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n\n    if (generateId) {\n      doc._id = this._makeNewID();\n    }\n  }\n\n  // On inserts, always return the id that we generated; on all other\n  // operations, just return the result from the collection.\n  var chooseReturnValueFromCollectionResult = function (result) {\n    if (doc._id) {\n      return doc._id;\n    }\n\n    // XXX what is this for??\n    // It's some iteraction between the callback to _callMutatorMethod and\n    // the return value conversion\n    doc._id = result;\n\n    return result;\n  };\n\n  const wrappedCallback = wrapCallback(\n    callback, chooseReturnValueFromCollectionResult);\n\n  if (this._isRemoteCollection()) {\n    const result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    const result = this._collection.insert(doc, wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of matched documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.update = function update(selector, modifier, ...optionsAndCallback) {\n  const callback = popCallbackFromArgs(optionsAndCallback);\n\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  // We've already popped off the callback, so we are left with an array\n  // of one or zero items\n  const options = _.clone(optionsAndCallback[0]) || {};\n  if (options && options.upsert) {\n    // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n    if (options.insertedId) {\n      if (!(typeof options.insertedId === 'string'\n            || options.insertedId instanceof Mongo.ObjectID))\n        throw new Error(\"insertedId must be string or ObjectID\");\n    } else if (! selector._id) {\n      options.insertedId = this._makeNewID();\n    }\n  }\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    const args = [\n      selector,\n      modifier,\n      options\n    ];\n\n    return this._callMutatorMethod(\"update\", args, wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.update(\n      selector, modifier, options, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\nMongo.Collection.prototype.remove = function remove(selector, callback) {\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.remove(selector, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n// Determine if this collection is simply a minimongo representation of a real\n// database on another server\nMongo.Collection.prototype._isRemoteCollection = function _isRemoteCollection() {\n  // XXX see #MeteorServerNull\n  return this._connection && this._connection !== Meteor.server;\n}\n\n// Convert the callback to not return a result if there is an error\nfunction wrapCallback(callback, convertResult) {\n  if (!callback) {\n    return;\n  }\n\n  // If no convert function was passed in, just use a \"blank function\"\n  convertResult = convertResult || _.identity;\n\n  return (error, result) => {\n    callback(error, ! error && convertResult(result));\n  };\n}\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function upsert(\n    selector, modifier, options, callback) {\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  const updateOptions = _.extend({}, options, {\n    _returnObject: true,\n    upsert: true\n  });\n\n  return this.update(selector, modifier, updateOptions, callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection)\n    throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (! self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (! (self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n\n// Allow deny stuff is now in the allow-deny package\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);\n\nfunction popCallbackFromArgs(args) {\n  // Pull off any callback (or perhaps a 'callback' variable that was passed\n  // in undefined, like how 'upsert' does it).\n  if (args.length &&\n      (args[args.length - 1] === undefined ||\n       args[args.length - 1] instanceof Function)) {\n    return args.pop();\n  }\n}\n"]}}]