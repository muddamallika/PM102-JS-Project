[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"shell-server\":{\"main.js\":[\"./shell-server.js\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/shell-server/main.js                                                                                  //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nmodule.import(\"./shell-server.js\",{'*':function(v,k){exports[k]=v;}});var listen;module.import(\"./shell-server.js\",{\"listen\":function(v){listen=v}});\n                                                                                                                  // 2\n                                                                                                                  //\nvar shellDir = process.env.METEOR_SHELL_DIR;                                                                      // 4\nif (shellDir) {                                                                                                   // 5\n  listen(shellDir);                                                                                               // 6\n}                                                                                                                 // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"shell-server.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/typeof\",\"assert\",\"path\",\"stream\",\"fs\",\"net\",\"tty\",\"vm\",\"underscore\",\"repl\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/shell-server/shell-server.js                                                                          //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nmodule.export({listen:function(){return listen},disable:function(){return disable}});var _classCallCheck;module.import(\"babel-runtime/helpers/classCallCheck\",{\"default\":function(v){_classCallCheck=v}});var _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});\n                                                                                                                  //\nvar assert = require(\"assert\");                                                                                   // 1\nvar path = require(\"path\");                                                                                       // 2\nvar stream = require(\"stream\");                                                                                   // 3\nvar fs = require(\"fs\");                                                                                           // 4\nvar net = require(\"net\");                                                                                         // 5\nvar tty = require(\"tty\");                                                                                         // 6\nvar vm = require(\"vm\");                                                                                           // 7\nvar _ = require(\"underscore\");                                                                                    // 8\nvar INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.                                     // 9\nvar EXITING_MESSAGE = \"Shell exiting...\";                                                                         // 10\n                                                                                                                  //\n// Invoked by the server process to listen for incoming connections from                                          // 12\n// shell clients. Each connection gets its own REPL instance.                                                     // 13\nfunction listen(shellDir) {                                                                                       // 14\n  function callback() {                                                                                           // 15\n    new Server(shellDir).listen();                                                                                // 16\n  }                                                                                                               // 17\n                                                                                                                  //\n  // If the server is still in the very early stages of starting up,                                              // 19\n  // Meteor.startup may not available yet.                                                                        // 20\n  if ((typeof Meteor === \"undefined\" ? \"undefined\" : _typeof(Meteor)) === \"object\") {                             // 21\n    Meteor.startup(callback);                                                                                     // 22\n  } else if ((typeof __meteor_bootstrap__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_bootstrap__)) === \"object\") {\n    var hooks = __meteor_bootstrap__.startupHooks;                                                                // 24\n    if (hooks) {                                                                                                  // 25\n      hooks.push(callback);                                                                                       // 26\n    } else {                                                                                                      // 27\n      // As a fallback, just call the callback asynchronously.                                                    // 28\n      setImmediate(callback);                                                                                     // 29\n    }                                                                                                             // 30\n  }                                                                                                               // 31\n}                                                                                                                 // 32\n                                                                                                                  //\n// Disabling the shell causes all attached clients to disconnect and exit.                                        // 34\nfunction disable(shellDir) {                                                                                      // 35\n  try {                                                                                                           // 36\n    // Replace info.json with a file that says the shell server is                                                // 37\n    // disabled, so that any connected shell clients will fail to                                                 // 38\n    // reconnect after the server process closes their sockets.                                                   // 39\n    fs.writeFileSync(getInfoFile(shellDir), JSON.stringify({                                                      // 40\n      status: \"disabled\",                                                                                         // 43\n      reason: \"Shell server has shut down.\"                                                                       // 44\n    }) + \"\\n\", { mode: INFO_FILE_MODE });                                                                         // 42\n  } catch (ignored) {}                                                                                            // 48\n}                                                                                                                 // 49\n                                                                                                                  //\nvar Server = function () {                                                                                        //\n  function Server(shellDir) {                                                                                     // 52\n    _classCallCheck(this, Server);                                                                                // 52\n                                                                                                                  //\n    var self = this;                                                                                              // 53\n    assert.ok(self instanceof Server);                                                                            // 54\n                                                                                                                  //\n    self.shellDir = shellDir;                                                                                     // 56\n    self.key = Math.random().toString(36).slice(2);                                                               // 57\n                                                                                                                  //\n    self.server = net.createServer(function (socket) {                                                            // 59\n      self.onConnection(socket);                                                                                  // 60\n    }).on(\"error\", function (err) {                                                                               // 61\n      console.error(err.stack);                                                                                   // 62\n    });                                                                                                           // 63\n  }                                                                                                               // 64\n                                                                                                                  //\n  Server.prototype.listen = function () {                                                                         //\n    function listen() {                                                                                           //\n      var self = this;                                                                                            // 67\n      var infoFile = getInfoFile(self.shellDir);                                                                  // 68\n                                                                                                                  //\n      fs.unlink(infoFile, function () {                                                                           // 70\n        self.server.listen(0, \"127.0.0.1\", function () {                                                          // 71\n          fs.writeFileSync(infoFile, JSON.stringify({                                                             // 72\n            status: \"enabled\",                                                                                    // 73\n            port: self.server.address().port,                                                                     // 74\n            key: self.key                                                                                         // 75\n          }) + \"\\n\", {                                                                                            // 72\n            mode: INFO_FILE_MODE                                                                                  // 77\n          });                                                                                                     // 76\n        });                                                                                                       // 79\n      });                                                                                                         // 80\n    }                                                                                                             // 81\n                                                                                                                  //\n    return listen;                                                                                                //\n  }();                                                                                                            //\n                                                                                                                  //\n  Server.prototype.onConnection = function () {                                                                   //\n    function onConnection(socket) {                                                                               //\n      var self = this;                                                                                            // 84\n                                                                                                                  //\n      // Make sure this function doesn't try to write anything to the socket                                      // 86\n      // after it has been closed.                                                                                // 87\n      socket.on(\"close\", function () {                                                                            // 88\n        socket = null;                                                                                            // 89\n      });                                                                                                         // 90\n                                                                                                                  //\n      // If communication is not established within 1000ms of the first                                           // 92\n      // connection, forcibly close the socket.                                                                   // 93\n      var timeout = setTimeout(function () {                                                                      // 94\n        if (socket) {                                                                                             // 95\n          socket.removeAllListeners(\"data\");                                                                      // 96\n          socket.end(EXITING_MESSAGE + \"\\n\");                                                                     // 97\n        }                                                                                                         // 98\n      }, 1000);                                                                                                   // 99\n                                                                                                                  //\n      // Let connecting clients configure certain REPL options by sending a                                       // 101\n      // JSON object over the socket. For example, only the client knows                                          // 102\n      // whether it's running a TTY or an Emacs subshell or some other kind of                                    // 103\n      // terminal, so the client must decide the value of options.terminal.                                       // 104\n      readJSONFromStream(socket, function (error, options, replInputSocket) {                                     // 105\n        clearTimeout(timeout);                                                                                    // 106\n                                                                                                                  //\n        if (error) {                                                                                              // 108\n          socket = null;                                                                                          // 109\n          console.error(error.stack);                                                                             // 110\n          return;                                                                                                 // 111\n        }                                                                                                         // 112\n                                                                                                                  //\n        if (options.key !== self.key) {                                                                           // 114\n          if (socket) {                                                                                           // 115\n            socket.end(EXITING_MESSAGE + \"\\n\");                                                                   // 116\n          }                                                                                                       // 117\n          return;                                                                                                 // 118\n        }                                                                                                         // 119\n        delete options.key;                                                                                       // 120\n                                                                                                                  //\n        if (options.evaluateAndExit) {                                                                            // 122\n          evalCommand.call(Object.create(null), // Dummy repl object without ._RecoverableError.                  // 123\n          \"(\" + options.evaluateAndExit.command + \")\", null, // evalCommand ignores the context parameter, anyway\n          options.evaluateAndExit.filename || \"<meteor shell>\", function (error, result) {                        // 127\n            if (socket) {                                                                                         // 129\n              var message = error ? {                                                                             // 130\n                error: error + \"\",                                                                                // 131\n                code: 1                                                                                           // 132\n              } : {                                                                                               // 130\n                result: result                                                                                    // 134\n              };                                                                                                  // 133\n                                                                                                                  //\n              // Sending back a JSON payload allows the client to                                                 // 137\n              // distinguish between errors and successful results.                                               // 138\n              socket.end(JSON.stringify(message) + \"\\n\");                                                         // 139\n            }                                                                                                     // 140\n          });                                                                                                     // 141\n          return;                                                                                                 // 143\n        }                                                                                                         // 144\n        delete options.evaluateAndExit;                                                                           // 145\n                                                                                                                  //\n        // Immutable options.                                                                                     // 147\n        _.extend(options, {                                                                                       // 148\n          input: replInputSocket,                                                                                 // 149\n          output: socket                                                                                          // 150\n        });                                                                                                       // 148\n                                                                                                                  //\n        // Overridable options.                                                                                   // 153\n        _.defaults(options, {                                                                                     // 154\n          prompt: \"> \",                                                                                           // 155\n          terminal: true,                                                                                         // 156\n          useColors: true,                                                                                        // 157\n          useGlobal: true,                                                                                        // 158\n          ignoreUndefined: true                                                                                   // 159\n        });                                                                                                       // 154\n                                                                                                                  //\n        self.startREPL(options);                                                                                  // 162\n      });                                                                                                         // 163\n    }                                                                                                             // 164\n                                                                                                                  //\n    return onConnection;                                                                                          //\n  }();                                                                                                            //\n                                                                                                                  //\n  Server.prototype.startREPL = function () {                                                                      //\n    function startREPL(options) {                                                                                 //\n      var self = this;                                                                                            // 167\n                                                                                                                  //\n      if (!options.output.columns) {                                                                              // 169\n        // The REPL's tab completion logic assumes process.stdout is a TTY,                                       // 170\n        // and while that isn't technically true here, we can get tab                                             // 171\n        // completion to behave correctly if we fake the .columns property.                                       // 172\n        options.output.columns = getTerminalWidth();                                                              // 173\n      }                                                                                                           // 174\n                                                                                                                  //\n      // Make sure this function doesn't try to write anything to the output                                      // 176\n      // stream after it has been closed.                                                                         // 177\n      options.output.on(\"close\", function () {                                                                    // 178\n        options.output = null;                                                                                    // 179\n      });                                                                                                         // 180\n                                                                                                                  //\n      var repl = self.repl = require(\"repl\").start(options);                                                      // 182\n                                                                                                                  //\n      // History persists across shell sessions!                                                                  // 184\n      self.initializeHistory();                                                                                   // 185\n                                                                                                                  //\n      // Save the global `_` object in the server.  This is probably defined by the                               // 187\n      // underscore package.  It is unlikely to be the same object as the `var _ =                                // 188\n      // require('underscore')` in this file!                                                                     // 189\n      var originalUnderscore = repl.context._;                                                                    // 190\n                                                                                                                  //\n      Object.defineProperty(repl.context, \"_\", {                                                                  // 192\n        // Force the global _ variable to remain bound to underscore.                                             // 193\n        get: function () {                                                                                        // 194\n          function get() {                                                                                        // 194\n            return originalUnderscore;                                                                            // 194\n          }                                                                                                       // 194\n                                                                                                                  //\n          return get;                                                                                             // 194\n        }(),                                                                                                      // 194\n                                                                                                                  //\n        // Expose the last REPL result as __ instead of _.                                                        // 196\n        set: function () {                                                                                        // 197\n          function set(lastResult) {                                                                              // 197\n            repl.context.__ = lastResult;                                                                         // 198\n          }                                                                                                       // 199\n                                                                                                                  //\n          return set;                                                                                             // 197\n        }(),                                                                                                      // 197\n                                                                                                                  //\n        enumerable: true,                                                                                         // 201\n                                                                                                                  //\n        // Allow this property to be (re)defined more than once (e.g. each                                        // 203\n        // time the server restarts).                                                                             // 204\n        configurable: true                                                                                        // 205\n      });                                                                                                         // 192\n                                                                                                                  //\n      if (Package.modules) {                                                                                      // 208\n        // Use the same `require` function and `module` object visible to the                                     // 209\n        // application.                                                                                           // 210\n        var toBeInstalled = {};                                                                                   // 211\n        var shellModuleName = \"meteor-shell-\" + Math.random().toString(36).slice(2) + \".js\";                      // 212\n                                                                                                                  //\n        toBeInstalled[shellModuleName] = function (require, exports, module) {                                    // 215\n          repl.context.module = module;                                                                           // 216\n          repl.context.require = require;                                                                         // 217\n                                                                                                                  //\n          // Tab completion sometimes uses require.extensions, but only for                                       // 219\n          // the keys.                                                                                            // 220\n          require.extensions = {                                                                                  // 221\n            \".js\": true,                                                                                          // 222\n            \".json\": true,                                                                                        // 223\n            \".node\": true                                                                                         // 224\n          };                                                                                                      // 221\n        };                                                                                                        // 226\n                                                                                                                  //\n        // This populates repl.context.{module,require} by evaluating the                                         // 228\n        // module defined above.                                                                                  // 229\n        Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);                                     // 230\n      }                                                                                                           // 231\n                                                                                                                  //\n      repl.context.repl = repl;                                                                                   // 233\n                                                                                                                  //\n      // Some improvements to the existing help messages.                                                         // 235\n      function addHelp(cmd, helpText) {                                                                           // 236\n        var info = repl.commands[cmd] || repl.commands[\".\" + cmd];                                                // 237\n        if (info) {                                                                                               // 238\n          info.help = helpText;                                                                                   // 239\n        }                                                                                                         // 240\n      }                                                                                                           // 241\n      addHelp(\"break\", \"Terminate current command input and display new prompt\");                                 // 242\n      addHelp(\"exit\", \"Disconnect from server and leave shell\");                                                  // 243\n      addHelp(\"help\", \"Show this help information\");                                                              // 244\n                                                                                                                  //\n      // When the REPL exits, signal the attached client to exit by sending it                                    // 246\n      // the special EXITING_MESSAGE.                                                                             // 247\n      repl.on(\"exit\", function () {                                                                               // 248\n        if (options.output) {                                                                                     // 249\n          options.output.write(EXITING_MESSAGE + \"\\n\");                                                           // 250\n          options.output.end();                                                                                   // 251\n        }                                                                                                         // 252\n      });                                                                                                         // 253\n                                                                                                                  //\n      // When the server process exits, end the output stream but do not                                          // 255\n      // signal the attached client to exit.                                                                      // 256\n      process.on(\"exit\", function () {                                                                            // 257\n        if (options.output) {                                                                                     // 258\n          options.output.end();                                                                                   // 259\n        }                                                                                                         // 260\n      });                                                                                                         // 261\n                                                                                                                  //\n      // This Meteor-specific shell command rebuilds the application as if a                                      // 263\n      // change was made to server code.                                                                          // 264\n      repl.defineCommand(\"reload\", {                                                                              // 265\n        help: \"Restart the server and the shell\",                                                                 // 266\n        action: function () {                                                                                     // 267\n          function action() {                                                                                     // 267\n            process.exit(0);                                                                                      // 268\n          }                                                                                                       // 269\n                                                                                                                  //\n          return action;                                                                                          // 267\n        }()                                                                                                       // 267\n      });                                                                                                         // 265\n                                                                                                                  //\n      // Trigger one recoverable error using the default eval function, just                                      // 272\n      // to capture the Recoverable error constructor, so that our custom                                         // 273\n      // evalCommand function can wrap recoverable errors properly.                                               // 274\n      repl.eval(\"{\", null, \"<meteor shell>\", function (error) {                                                   // 275\n        // Capture the Recoverable error constructor.                                                             // 278\n        repl._RecoverableError = error && error.constructor;                                                      // 279\n                                                                                                                  //\n        // Now set repl.eval to the actual evalCommand function that we want                                      // 281\n        // to use, bound to repl._domain if necessary.                                                            // 282\n        repl.eval = repl._domain ? repl._domain.bind(evalCommand) : evalCommand;                                  // 283\n                                                                                                                  //\n        // Terminate the partial evaluation of the { command.                                                     // 287\n        repl.commands[\"break\"].action.call(repl);                                                                 // 288\n      });                                                                                                         // 289\n    }                                                                                                             // 291\n                                                                                                                  //\n    return startREPL;                                                                                             //\n  }();                                                                                                            //\n                                                                                                                  //\n  // This function allows a persistent history of shell commands to be saved                                      // 293\n  // to and loaded from .meteor/local/shell-history.                                                              // 294\n                                                                                                                  //\n                                                                                                                  //\n  Server.prototype.initializeHistory = function () {                                                              //\n    function initializeHistory() {                                                                                //\n      var self = this;                                                                                            // 296\n      var rli = self.repl.rli;                                                                                    // 297\n      var historyFile = getHistoryFile(self.shellDir);                                                            // 298\n      var historyFd = fs.openSync(historyFile, \"a+\");                                                             // 299\n      var historyLines = fs.readFileSync(historyFile, \"utf8\").split(\"\\n\");                                        // 300\n      var seenLines = Object.create(null);                                                                        // 301\n                                                                                                                  //\n      if (!rli.history) {                                                                                         // 303\n        rli.history = [];                                                                                         // 304\n        rli.historyIndex = -1;                                                                                    // 305\n      }                                                                                                           // 306\n                                                                                                                  //\n      while (rli.history && historyLines.length > 0) {                                                            // 308\n        var line = historyLines.pop();                                                                            // 309\n        if (line && /\\S/.test(line) && !seenLines[line]) {                                                        // 310\n          rli.history.push(line);                                                                                 // 311\n          seenLines[line] = true;                                                                                 // 312\n        }                                                                                                         // 313\n      }                                                                                                           // 314\n                                                                                                                  //\n      rli.addListener(\"line\", function (line) {                                                                   // 316\n        if (historyFd >= 0 && /\\S/.test(line)) {                                                                  // 317\n          fs.writeSync(historyFd, line + \"\\n\");                                                                   // 318\n        }                                                                                                         // 319\n      });                                                                                                         // 320\n                                                                                                                  //\n      self.repl.on(\"exit\", function () {                                                                          // 322\n        fs.closeSync(historyFd);                                                                                  // 323\n        historyFd = -1;                                                                                           // 324\n      });                                                                                                         // 325\n    }                                                                                                             // 326\n                                                                                                                  //\n    return initializeHistory;                                                                                     //\n  }();                                                                                                            //\n                                                                                                                  //\n  return Server;                                                                                                  //\n}();                                                                                                              //\n                                                                                                                  //\nfunction readJSONFromStream(inputStream, callback) {                                                              // 329\n  var outputStream = new stream.PassThrough();                                                                    // 330\n  var dataSoFar = \"\";                                                                                             // 331\n                                                                                                                  //\n  function onData(buffer) {                                                                                       // 333\n    var lines = buffer.toString(\"utf8\").split(\"\\n\");                                                              // 334\n                                                                                                                  //\n    while (lines.length > 0) {                                                                                    // 336\n      dataSoFar += lines.shift();                                                                                 // 337\n                                                                                                                  //\n      try {                                                                                                       // 339\n        var json = JSON.parse(dataSoFar);                                                                         // 340\n      } catch (error) {                                                                                           // 341\n        if (error instanceof SyntaxError) {                                                                       // 342\n          continue;                                                                                               // 343\n        }                                                                                                         // 344\n                                                                                                                  //\n        return finish(error);                                                                                     // 346\n      }                                                                                                           // 347\n                                                                                                                  //\n      if (lines.length > 0) {                                                                                     // 349\n        outputStream.write(lines.join(\"\\n\"));                                                                     // 350\n      }                                                                                                           // 351\n                                                                                                                  //\n      inputStream.pipe(outputStream);                                                                             // 353\n                                                                                                                  //\n      return finish(null, json);                                                                                  // 355\n    }                                                                                                             // 356\n  }                                                                                                               // 357\n                                                                                                                  //\n  function onClose() {                                                                                            // 359\n    finish(new Error(\"stream unexpectedly closed\"));                                                              // 360\n  }                                                                                                               // 361\n                                                                                                                  //\n  var finished = false;                                                                                           // 363\n  function finish(error, json) {                                                                                  // 364\n    if (!finished) {                                                                                              // 365\n      finished = true;                                                                                            // 366\n      inputStream.removeListener(\"data\", onData);                                                                 // 367\n      inputStream.removeListener(\"error\", finish);                                                                // 368\n      inputStream.removeListener(\"close\", onClose);                                                               // 369\n      callback(error, json, outputStream);                                                                        // 370\n    }                                                                                                             // 371\n  }                                                                                                               // 372\n                                                                                                                  //\n  inputStream.on(\"data\", onData);                                                                                 // 374\n  inputStream.on(\"error\", finish);                                                                                // 375\n  inputStream.on(\"close\", onClose);                                                                               // 376\n}                                                                                                                 // 377\n                                                                                                                  //\nfunction getInfoFile(shellDir) {                                                                                  // 379\n  return path.join(shellDir, \"info.json\");                                                                        // 380\n}                                                                                                                 // 381\n                                                                                                                  //\nfunction getHistoryFile(shellDir) {                                                                               // 383\n  return path.join(shellDir, \"history\");                                                                          // 384\n}                                                                                                                 // 385\n                                                                                                                  //\nfunction getTerminalWidth() {                                                                                     // 387\n  try {                                                                                                           // 388\n    // Inspired by https://github.com/TooTallNate/ttys/blob/master/index.js                                       // 389\n    var fd = fs.openSync(\"/dev/tty\", \"r\");                                                                        // 390\n    assert.ok(tty.isatty(fd));                                                                                    // 391\n    var ws = new tty.WriteStream(fd);                                                                             // 392\n    ws.end();                                                                                                     // 393\n    return ws.columns;                                                                                            // 394\n  } catch (fancyApproachWasTooFancy) {                                                                            // 395\n    return 80;                                                                                                    // 396\n  }                                                                                                               // 397\n}                                                                                                                 // 398\n                                                                                                                  //\n// Shell commands need to be executed in a Fiber in case they call into                                           // 400\n// code that yields. Using a Promise is an even better idea, since it runs                                        // 401\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.                                         // 402\nvar evalCommandPromise = Promise.resolve();                                                                       // 403\n                                                                                                                  //\nfunction evalCommand(command, context, filename, callback) {                                                      // 405\n  var repl = this;                                                                                                // 406\n                                                                                                                  //\n  function finish(error, result) {                                                                                // 408\n    if (error) {                                                                                                  // 409\n      if (repl._RecoverableError && isRecoverableError(error, repl)) {                                            // 410\n        callback(new repl._RecoverableError(error));                                                              // 412\n      } else {                                                                                                    // 413\n        callback(error);                                                                                          // 414\n      }                                                                                                           // 415\n    } else {                                                                                                      // 416\n      callback(null, result);                                                                                     // 417\n    }                                                                                                             // 418\n  }                                                                                                               // 419\n                                                                                                                  //\n  if (Package.ecmascript) {                                                                                       // 421\n    var noParens = stripParens(command);                                                                          // 422\n    if (noParens !== command) {                                                                                   // 423\n      var classMatch = /^\\s*class\\s+(\\w+)/.exec(noParens);                                                        // 424\n      if (classMatch && classMatch[1] !== \"extends\") {                                                            // 425\n        // If the command looks like a named ES2015 class, we remove the                                          // 426\n        // extra layer of parentheses added by the REPL so that the                                               // 427\n        // command will be evaluated as a class declaration rather than as                                        // 428\n        // a named class expression. Note that you can still type (class A                                        // 429\n        // {}) explicitly to evaluate a named class expression. The REPL                                          // 430\n        // code that calls evalCommand handles named function expressions                                         // 431\n        // similarly (first with and then without parentheses), but that                                          // 432\n        // code doesn't know about ES2015 classes, which is why we have to                                        // 433\n        // handle them here.                                                                                      // 434\n        command = noParens;                                                                                       // 435\n      }                                                                                                           // 436\n    }                                                                                                             // 437\n                                                                                                                  //\n    try {                                                                                                         // 439\n      command = Package.ecmascript.ECMAScript.compileForShell(command);                                           // 440\n    } catch (error) {                                                                                             // 441\n      finish(error);                                                                                              // 442\n      return;                                                                                                     // 443\n    }                                                                                                             // 444\n  }                                                                                                               // 445\n                                                                                                                  //\n  try {                                                                                                           // 447\n    var script = new vm.Script(command, {                                                                         // 448\n      filename: filename,                                                                                         // 449\n      displayErrors: false                                                                                        // 450\n    });                                                                                                           // 448\n  } catch (parseError) {                                                                                          // 452\n    finish(parseError);                                                                                           // 453\n    return;                                                                                                       // 454\n  }                                                                                                               // 455\n                                                                                                                  //\n  evalCommandPromise.then(function () {                                                                           // 457\n    finish(null, script.runInThisContext());                                                                      // 458\n  })[\"catch\"](finish);                                                                                            // 459\n}                                                                                                                 // 460\n                                                                                                                  //\nfunction stripParens(command) {                                                                                   // 462\n  if (command.charAt(0) === \"(\" && command.charAt(command.length - 1) === \")\") {                                  // 463\n    return command.slice(1, command.length - 1);                                                                  // 465\n  }                                                                                                               // 466\n  return command;                                                                                                 // 467\n}                                                                                                                 // 468\n                                                                                                                  //\n// The bailOnIllegalToken and isRecoverableError functions are taken from                                         // 470\n// https://github.com/nodejs/node/blob/c9e670ea2a/lib/repl.js#L1227-L1253                                         // 471\nfunction bailOnIllegalToken(parser) {                                                                             // 472\n  return parser._literal === null && !parser.blockComment && !parser.regExpLiteral;                               // 473\n}                                                                                                                 // 476\n                                                                                                                  //\n// If the error is that we've unexpectedly ended the input,                                                       // 478\n// then let the user try to recover by adding more input.                                                         // 479\nfunction isRecoverableError(e, repl) {                                                                            // 480\n  if (e && e.name === 'SyntaxError') {                                                                            // 481\n    var message = e.message;                                                                                      // 482\n    if (message === 'Unterminated template literal' || message === 'Missing } in template expression') {          // 483\n      repl._inTemplateLiteral = true;                                                                             // 485\n      return true;                                                                                                // 486\n    }                                                                                                             // 487\n                                                                                                                  //\n    if (message.startsWith('Unexpected end of input') || message.startsWith('missing ) after argument list') || message.startsWith('Unexpected token')) {\n      return true;                                                                                                // 492\n    }                                                                                                             // 493\n                                                                                                                  //\n    if (message === 'Invalid or unexpected token') {                                                              // 495\n      return !bailOnIllegalToken(repl.lineParser);                                                                // 496\n    }                                                                                                             // 497\n  }                                                                                                               // 498\n                                                                                                                  //\n  return false;                                                                                                   // 500\n}                                                                                                                 // 501\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/shell-server/main.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['shell-server'] = exports;\n\n})();\n","servePath":"/packages/shell-server.js","sourceMap":{"version":3,"sources":["/packages/shell-server/main.js","/packages/shell-server/shell-server.js"],"names":["listen","shellDir","process","env","METEOR_SHELL_DIR","assert","require","path","stream","fs","net","tty","vm","_","INFO_FILE_MODE","parseInt","EXITING_MESSAGE","callback","Server","Meteor","startup","__meteor_bootstrap__","hooks","startupHooks","push","setImmediate","disable","writeFileSync","getInfoFile","JSON","stringify","status","reason","mode","ignored","self","ok","key","Math","random","toString","slice","server","createServer","socket","onConnection","on","err","console","error","stack","infoFile","unlink","port","address","timeout","setTimeout","removeAllListeners","end","readJSONFromStream","options","replInputSocket","clearTimeout","evaluateAndExit","evalCommand","call","Object","create","command","filename","result","message","code","extend","input","output","defaults","prompt","terminal","useColors","useGlobal","ignoreUndefined","startREPL","columns","getTerminalWidth","repl","start","initializeHistory","originalUnderscore","context","defineProperty","get","set","lastResult","__","enumerable","configurable","Package","modules","toBeInstalled","shellModuleName","exports","module","extensions","meteorInstall","addHelp","cmd","helpText","info","commands","help","write","defineCommand","action","exit","eval","_RecoverableError","constructor","_domain","bind","rli","historyFile","getHistoryFile","historyFd","openSync","historyLines","readFileSync","split","seenLines","history","historyIndex","length","line","pop","test","addListener","writeSync","closeSync","inputStream","outputStream","PassThrough","dataSoFar","onData","buffer","lines","shift","json","parse","SyntaxError","finish","join","pipe","onClose","Error","finished","removeListener","fd","isatty","ws","WriteStream","fancyApproachWasTooFancy","evalCommandPromise","Promise","resolve","isRecoverableError","ecmascript","noParens","stripParens","classMatch","exec","ECMAScript","compileForShell","script","Script","displayErrors","parseError","then","runInThisContext","charAt","bailOnIllegalToken","parser","_literal","blockComment","regExpLiteral","e","name","_inTemplateLiteral","startsWith","lineParser"],"mappings":"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","file":"/packages/shell-server.js","sourcesContent":["export * from \"./shell-server.js\";\nimport { listen } from \"./shell-server.js\";\n\nconst shellDir = process.env.METEOR_SHELL_DIR;\nif (shellDir) {\n  listen(shellDir);\n}\n","var assert = require(\"assert\");\nvar path = require(\"path\");\nvar stream = require(\"stream\");\nvar fs = require(\"fs\");\nvar net = require(\"net\");\nvar tty = require(\"tty\");\nvar vm = require(\"vm\");\nvar _ = require(\"underscore\");\nvar INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.\nvar EXITING_MESSAGE = \"Shell exiting...\";\n\n// Invoked by the server process to listen for incoming connections from\n// shell clients. Each connection gets its own REPL instance.\nexport function listen(shellDir) {\n  function callback() {\n    new Server(shellDir).listen();\n  }\n\n  // If the server is still in the very early stages of starting up,\n  // Meteor.startup may not available yet.\n  if (typeof Meteor === \"object\") {\n    Meteor.startup(callback);\n  } else if (typeof __meteor_bootstrap__ === \"object\") {\n    var hooks = __meteor_bootstrap__.startupHooks;\n    if (hooks) {\n      hooks.push(callback);\n    } else {\n      // As a fallback, just call the callback asynchronously.\n      setImmediate(callback);\n    }\n  }\n}\n\n// Disabling the shell causes all attached clients to disconnect and exit.\nexport function disable(shellDir) {\n  try {\n    // Replace info.json with a file that says the shell server is\n    // disabled, so that any connected shell clients will fail to\n    // reconnect after the server process closes their sockets.\n    fs.writeFileSync(\n      getInfoFile(shellDir),\n      JSON.stringify({\n        status: \"disabled\",\n        reason: \"Shell server has shut down.\"\n      }) + \"\\n\",\n      { mode: INFO_FILE_MODE }\n    );\n  } catch (ignored) {}\n}\n\nclass Server {\n  constructor(shellDir) {\n    var self = this;\n    assert.ok(self instanceof Server);\n\n    self.shellDir = shellDir;\n    self.key = Math.random().toString(36).slice(2);\n\n    self.server = net.createServer(function(socket) {\n      self.onConnection(socket);\n    }).on(\"error\", function(err) {\n      console.error(err.stack);\n    });\n  }\n\n  listen() {\n    var self = this;\n    var infoFile = getInfoFile(self.shellDir);\n\n    fs.unlink(infoFile, function() {\n      self.server.listen(0, \"127.0.0.1\", function() {\n        fs.writeFileSync(infoFile, JSON.stringify({\n          status: \"enabled\",\n          port: self.server.address().port,\n          key: self.key\n        }) + \"\\n\", {\n          mode: INFO_FILE_MODE\n        });\n      });\n    });\n  }\n\n  onConnection(socket) {\n    var self = this;\n\n    // Make sure this function doesn't try to write anything to the socket\n    // after it has been closed.\n    socket.on(\"close\", function() {\n      socket = null;\n    });\n\n    // If communication is not established within 1000ms of the first\n    // connection, forcibly close the socket.\n    var timeout = setTimeout(function() {\n      if (socket) {\n        socket.removeAllListeners(\"data\");\n        socket.end(EXITING_MESSAGE + \"\\n\");\n      }\n    }, 1000);\n\n    // Let connecting clients configure certain REPL options by sending a\n    // JSON object over the socket. For example, only the client knows\n    // whether it's running a TTY or an Emacs subshell or some other kind of\n    // terminal, so the client must decide the value of options.terminal.\n    readJSONFromStream(socket, function (error, options, replInputSocket) {\n      clearTimeout(timeout);\n\n      if (error) {\n        socket = null;\n        console.error(error.stack);\n        return;\n      }\n\n      if (options.key !== self.key) {\n        if (socket) {\n          socket.end(EXITING_MESSAGE + \"\\n\");\n        }\n        return;\n      }\n      delete options.key;\n\n      if (options.evaluateAndExit) {\n        evalCommand.call(\n          Object.create(null), // Dummy repl object without ._RecoverableError.\n          \"(\" + options.evaluateAndExit.command + \")\",\n          null, // evalCommand ignores the context parameter, anyway\n          options.evaluateAndExit.filename || \"<meteor shell>\",\n          function (error, result) {\n            if (socket) {\n              var message = error ? {\n                error: error + \"\",\n                code: 1\n              } : {\n                result: result\n              };\n\n              // Sending back a JSON payload allows the client to\n              // distinguish between errors and successful results.\n              socket.end(JSON.stringify(message) + \"\\n\");\n            }\n          }\n        );\n        return;\n      }\n      delete options.evaluateAndExit;\n\n      // Immutable options.\n      _.extend(options, {\n        input: replInputSocket,\n        output: socket\n      });\n\n      // Overridable options.\n      _.defaults(options, {\n        prompt: \"> \",\n        terminal: true,\n        useColors: true,\n        useGlobal: true,\n        ignoreUndefined: true,\n      });\n\n      self.startREPL(options);\n    });\n  }\n\n  startREPL(options) {\n    var self = this;\n\n    if (! options.output.columns) {\n      // The REPL's tab completion logic assumes process.stdout is a TTY,\n      // and while that isn't technically true here, we can get tab\n      // completion to behave correctly if we fake the .columns property.\n      options.output.columns = getTerminalWidth();\n    }\n\n    // Make sure this function doesn't try to write anything to the output\n    // stream after it has been closed.\n    options.output.on(\"close\", function() {\n      options.output = null;\n    });\n\n    var repl = self.repl = require(\"repl\").start(options);\n\n    // History persists across shell sessions!\n    self.initializeHistory();\n\n    // Save the global `_` object in the server.  This is probably defined by the\n    // underscore package.  It is unlikely to be the same object as the `var _ =\n    // require('underscore')` in this file!\n    var originalUnderscore = repl.context._;\n\n    Object.defineProperty(repl.context, \"_\", {\n      // Force the global _ variable to remain bound to underscore.\n      get: function () { return originalUnderscore; },\n\n      // Expose the last REPL result as __ instead of _.\n      set: function(lastResult) {\n        repl.context.__ = lastResult;\n      },\n\n      enumerable: true,\n\n      // Allow this property to be (re)defined more than once (e.g. each\n      // time the server restarts).\n      configurable: true\n    });\n\n    if (Package.modules) {\n      // Use the same `require` function and `module` object visible to the\n      // application.\n      var toBeInstalled = {};\n      var shellModuleName = \"meteor-shell-\" +\n        Math.random().toString(36).slice(2) + \".js\";\n\n      toBeInstalled[shellModuleName] = function (require, exports, module) {\n        repl.context.module = module;\n        repl.context.require = require;\n\n        // Tab completion sometimes uses require.extensions, but only for\n        // the keys.\n        require.extensions = {\n          \".js\": true,\n          \".json\": true,\n          \".node\": true,\n        };\n      };\n\n      // This populates repl.context.{module,require} by evaluating the\n      // module defined above.\n      Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);\n    }\n\n    repl.context.repl = repl;\n\n    // Some improvements to the existing help messages.\n    function addHelp(cmd, helpText) {\n      var info = repl.commands[cmd] || repl.commands[\".\" + cmd];\n      if (info) {\n        info.help = helpText;\n      }\n    }\n    addHelp(\"break\", \"Terminate current command input and display new prompt\");\n    addHelp(\"exit\", \"Disconnect from server and leave shell\");\n    addHelp(\"help\", \"Show this help information\");\n\n    // When the REPL exits, signal the attached client to exit by sending it\n    // the special EXITING_MESSAGE.\n    repl.on(\"exit\", function() {\n      if (options.output) {\n        options.output.write(EXITING_MESSAGE + \"\\n\");\n        options.output.end();\n      }\n    });\n\n    // When the server process exits, end the output stream but do not\n    // signal the attached client to exit.\n    process.on(\"exit\", function() {\n      if (options.output) {\n        options.output.end();\n      }\n    });\n\n    // This Meteor-specific shell command rebuilds the application as if a\n    // change was made to server code.\n    repl.defineCommand(\"reload\", {\n      help: \"Restart the server and the shell\",\n      action: function() {\n        process.exit(0);\n      }\n    });\n\n    // Trigger one recoverable error using the default eval function, just\n    // to capture the Recoverable error constructor, so that our custom\n    // evalCommand function can wrap recoverable errors properly.\n    repl.eval(\n      \"{\", null, \"<meteor shell>\",\n      function (error) {\n        // Capture the Recoverable error constructor.\n        repl._RecoverableError = error && error.constructor;\n\n        // Now set repl.eval to the actual evalCommand function that we want\n        // to use, bound to repl._domain if necessary.\n        repl.eval = repl._domain\n          ? repl._domain.bind(evalCommand)\n          : evalCommand;\n\n        // Terminate the partial evaluation of the { command.\n        repl.commands[\"break\"].action.call(repl);\n      }\n    );\n  }\n\n  // This function allows a persistent history of shell commands to be saved\n  // to and loaded from .meteor/local/shell-history.\n  initializeHistory() {\n    var self = this;\n    var rli = self.repl.rli;\n    var historyFile = getHistoryFile(self.shellDir);\n    var historyFd = fs.openSync(historyFile, \"a+\");\n    var historyLines = fs.readFileSync(historyFile, \"utf8\").split(\"\\n\");\n    var seenLines = Object.create(null);\n\n    if (! rli.history) {\n      rli.history = [];\n      rli.historyIndex = -1;\n    }\n\n    while (rli.history && historyLines.length > 0) {\n      var line = historyLines.pop();\n      if (line && /\\S/.test(line) && ! seenLines[line]) {\n        rli.history.push(line);\n        seenLines[line] = true;\n      }\n    }\n\n    rli.addListener(\"line\", function(line) {\n      if (historyFd >= 0 && /\\S/.test(line)) {\n        fs.writeSync(historyFd, line + \"\\n\");\n      }\n    });\n\n    self.repl.on(\"exit\", function() {\n      fs.closeSync(historyFd);\n      historyFd = -1;\n    });\n  }\n}\n\nfunction readJSONFromStream(inputStream, callback) {\n  var outputStream = new stream.PassThrough;\n  var dataSoFar = \"\";\n\n  function onData(buffer) {\n    var lines = buffer.toString(\"utf8\").split(\"\\n\");\n\n    while (lines.length > 0) {\n      dataSoFar += lines.shift();\n\n      try {\n        var json = JSON.parse(dataSoFar);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          continue;\n        }\n\n        return finish(error);\n      }\n\n      if (lines.length > 0) {\n        outputStream.write(lines.join(\"\\n\"));\n      }\n\n      inputStream.pipe(outputStream);\n\n      return finish(null, json);\n    }\n  }\n\n  function onClose() {\n    finish(new Error(\"stream unexpectedly closed\"));\n  }\n\n  var finished = false;\n  function finish(error, json) {\n    if (! finished) {\n      finished = true;\n      inputStream.removeListener(\"data\", onData);\n      inputStream.removeListener(\"error\", finish);\n      inputStream.removeListener(\"close\", onClose);\n      callback(error, json, outputStream);\n    }\n  }\n\n  inputStream.on(\"data\", onData);\n  inputStream.on(\"error\", finish);\n  inputStream.on(\"close\", onClose);\n}\n\nfunction getInfoFile(shellDir) {\n  return path.join(shellDir, \"info.json\");\n}\n\nfunction getHistoryFile(shellDir) {\n  return path.join(shellDir, \"history\");\n}\n\nfunction getTerminalWidth() {\n  try {\n    // Inspired by https://github.com/TooTallNate/ttys/blob/master/index.js\n    var fd = fs.openSync(\"/dev/tty\", \"r\");\n    assert.ok(tty.isatty(fd));\n    var ws = new tty.WriteStream(fd);\n    ws.end();\n    return ws.columns;\n  } catch (fancyApproachWasTooFancy) {\n    return 80;\n  }\n}\n\n// Shell commands need to be executed in a Fiber in case they call into\n// code that yields. Using a Promise is an even better idea, since it runs\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.\nvar evalCommandPromise = Promise.resolve();\n\nfunction evalCommand(command, context, filename, callback) {\n  var repl = this;\n\n  function finish(error, result) {\n    if (error) {\n      if (repl._RecoverableError &&\n          isRecoverableError(error, repl)) {\n        callback(new repl._RecoverableError(error));\n      } else {\n        callback(error);\n      }\n    } else {\n      callback(null, result);\n    }\n  }\n\n  if (Package.ecmascript) {\n    var noParens = stripParens(command);\n    if (noParens !== command) {\n      var classMatch = /^\\s*class\\s+(\\w+)/.exec(noParens);\n      if (classMatch && classMatch[1] !== \"extends\") {\n        // If the command looks like a named ES2015 class, we remove the\n        // extra layer of parentheses added by the REPL so that the\n        // command will be evaluated as a class declaration rather than as\n        // a named class expression. Note that you can still type (class A\n        // {}) explicitly to evaluate a named class expression. The REPL\n        // code that calls evalCommand handles named function expressions\n        // similarly (first with and then without parentheses), but that\n        // code doesn't know about ES2015 classes, which is why we have to\n        // handle them here.\n        command = noParens;\n      }\n    }\n\n    try {\n      command = Package.ecmascript.ECMAScript.compileForShell(command);\n    } catch (error) {\n      finish(error);\n      return;\n    }\n  }\n\n  try {\n    var script = new vm.Script(command, {\n      filename: filename,\n      displayErrors: false\n    });\n  } catch (parseError) {\n    finish(parseError);\n    return;\n  }\n\n  evalCommandPromise.then(function () {\n    finish(null, script.runInThisContext());\n  }).catch(finish);\n}\n\nfunction stripParens(command) {\n  if (command.charAt(0) === \"(\" &&\n      command.charAt(command.length - 1) === \")\") {\n    return command.slice(1, command.length - 1);\n  }\n  return command;\n}\n\n// The bailOnIllegalToken and isRecoverableError functions are taken from\n// https://github.com/nodejs/node/blob/c9e670ea2a/lib/repl.js#L1227-L1253\nfunction bailOnIllegalToken(parser) {\n  return parser._literal === null &&\n    ! parser.blockComment &&\n    ! parser.regExpLiteral;\n}\n\n// If the error is that we've unexpectedly ended the input,\n// then let the user try to recover by adding more input.\nfunction isRecoverableError(e, repl) {\n  if (e && e.name === 'SyntaxError') {\n    var message = e.message;\n    if (message === 'Unterminated template literal' ||\n        message === 'Missing } in template expression') {\n      repl._inTemplateLiteral = true;\n      return true;\n    }\n\n    if (message.startsWith('Unexpected end of input') ||\n        message.startsWith('missing ) after argument list') ||\n        message.startsWith('Unexpected token')) {\n      return true;\n    }\n\n    if (message === 'Invalid or unexpected token') {\n      return ! bailOnIllegalToken(repl.lineParser);\n    }\n  }\n\n  return false;\n}\n"]}}]