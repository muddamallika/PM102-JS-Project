[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Collection2 = Package['aldeed:collection2-core'].Collection2;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar Mongo = Package.mongo.Mongo;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/aldeed_schema-index/lib/indexing.js                                      //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n// Extend the schema options allowed by SimpleSchema                                 // 1\nSimpleSchema.extendOptions({                                                         // 2\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),                       // 3\n  unique: Match.Optional(Boolean),                                                   // 4\n  sparse: Match.Optional(Boolean),                                                   // 5\n});                                                                                  // 6\n                                                                                     // 7\n// Define validation error messages (legacy)                                         // 8\nif (!SimpleSchema.version || SimpleSchema.version < 2) {                             // 9\n  SimpleSchema.messages({                                                            // 10\n    notUnique: '[label] must be unique',                                             // 11\n  });                                                                                // 12\n}                                                                                    // 13\n                                                                                     // 14\nif (Meteor.isServer) {                                                               // 15\n  Collection2.on('schema.attached', function (collection, ss) {                      // 16\n    // Define validation error messages                                              // 17\n    if (ss.version >= 2) {                                                           // 18\n      ss.messageBox.messages({                                                       // 19\n        notUnique: '{{label}} must be unique',                                       // 20\n      });                                                                            // 21\n    }                                                                                // 22\n                                                                                     // 23\n    function ensureIndex(index, indexName, unique, sparse) {                         // 24\n      Meteor.startup(function () {                                                   // 25\n        collection._collection._ensureIndex(index, {                                 // 26\n          background: true,                                                          // 27\n          name: indexName,                                                           // 28\n          unique: unique,                                                            // 29\n          sparse: sparse                                                             // 30\n        });                                                                          // 31\n      });                                                                            // 32\n    }                                                                                // 33\n                                                                                     // 34\n    function dropIndex(indexName) {                                                  // 35\n      Meteor.startup(function () {                                                   // 36\n        try {                                                                        // 37\n          collection._collection._dropIndex(indexName);                              // 38\n        } catch (err) {                                                              // 39\n          // no index with that name, which is what we want                          // 40\n        }                                                                            // 41\n      });                                                                            // 42\n    }                                                                                // 43\n                                                                                     // 44\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema';                   // 45\n                                                                                     // 46\n    // Loop over fields definitions and ensure collection indexes (server side only)\n    _.each(ss[propName](), function(definition, fieldName) {                         // 48\n      if ('index' in definition || definition.unique === true) {                     // 49\n        var index = {}, indexValue;                                                  // 50\n        // If they specified `unique: true` but not `index`,                         // 51\n        // we assume `index: 1` to set up the unique index in mongo                  // 52\n        if ('index' in definition) {                                                 // 53\n          indexValue = definition.index;                                             // 54\n          if (indexValue === true) indexValue = 1;                                   // 55\n        } else {                                                                     // 56\n          indexValue = 1;                                                            // 57\n        }                                                                            // 58\n        var indexName = 'c2_' + fieldName;                                           // 59\n        // In the index object, we want object array keys without the \".$\" piece     // 60\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");                        // 61\n        index[idxFieldName] = indexValue;                                            // 62\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;                                     // 64\n                                                                                     // 65\n        // If unique and optional, force sparse to prevent errors                    // 66\n        if (!sparse && unique && definition.optional) sparse = true;                 // 67\n                                                                                     // 68\n        if (indexValue === false) {                                                  // 69\n          dropIndex(indexName);                                                      // 70\n        } else {                                                                     // 71\n          ensureIndex(index, indexName, unique, sparse);                             // 72\n        }                                                                            // 73\n      }                                                                              // 74\n    });                                                                              // 75\n  });                                                                                // 76\n}                                                                                    // 77\n///////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:schema-index'] = {};\n\n})();\n","servePath":"/packages/aldeed_schema-index.js"}]