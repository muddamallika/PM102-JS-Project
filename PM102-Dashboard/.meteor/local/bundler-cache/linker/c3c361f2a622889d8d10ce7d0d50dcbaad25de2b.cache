[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar lodash, _;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/erasaur_meteor-lodash/lodash/lodash.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @license                                                                                                            // 2\n * lodash 4.0.0 (Custom Build) <https://lodash.com/>                                                                   // 3\n * Build: `lodash -d -o ./lodash.js`                                                                                   // 4\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>                                                // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 7\n * Available under MIT license <https://lodash.com/license>                                                            // 8\n */                                                                                                                    // 9\n;(function() {                                                                                                         // 10\n                                                                                                                       // 11\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */                                             // 12\n  var undefined;                                                                                                       // 13\n                                                                                                                       // 14\n  /** Used as the semantic version number. */                                                                          // 15\n  var VERSION = '4.0.0';                                                                                               // 16\n                                                                                                                       // 17\n  /** Used to compose bitmasks for wrapper metadata. */                                                                // 18\n  var BIND_FLAG = 1,                                                                                                   // 19\n      BIND_KEY_FLAG = 2,                                                                                               // 20\n      CURRY_BOUND_FLAG = 4,                                                                                            // 21\n      CURRY_FLAG = 8,                                                                                                  // 22\n      CURRY_RIGHT_FLAG = 16,                                                                                           // 23\n      PARTIAL_FLAG = 32,                                                                                               // 24\n      PARTIAL_RIGHT_FLAG = 64,                                                                                         // 25\n      ARY_FLAG = 128,                                                                                                  // 26\n      REARG_FLAG = 256,                                                                                                // 27\n      FLIP_FLAG = 512;                                                                                                 // 28\n                                                                                                                       // 29\n  /** Used to compose bitmasks for comparison styles. */                                                               // 30\n  var UNORDERED_COMPARE_FLAG = 1,                                                                                      // 31\n      PARTIAL_COMPARE_FLAG = 2;                                                                                        // 32\n                                                                                                                       // 33\n  /** Used as default options for `_.truncate`. */                                                                     // 34\n  var DEFAULT_TRUNC_LENGTH = 30,                                                                                       // 35\n      DEFAULT_TRUNC_OMISSION = '...';                                                                                  // 36\n                                                                                                                       // 37\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */                                // 38\n  var HOT_COUNT = 150,                                                                                                 // 39\n      HOT_SPAN = 16;                                                                                                   // 40\n                                                                                                                       // 41\n  /** Used as the size to enable large array optimizations. */                                                         // 42\n  var LARGE_ARRAY_SIZE = 200;                                                                                          // 43\n                                                                                                                       // 44\n  /** Used to indicate the type of lazy iteratees. */                                                                  // 45\n  var LAZY_FILTER_FLAG = 1,                                                                                            // 46\n      LAZY_MAP_FLAG = 2,                                                                                               // 47\n      LAZY_WHILE_FLAG = 3;                                                                                             // 48\n                                                                                                                       // 49\n  /** Used as the `TypeError` message for \"Functions\" methods. */                                                      // 50\n  var FUNC_ERROR_TEXT = 'Expected a function';                                                                         // 51\n                                                                                                                       // 52\n  /** Used to stand-in for `undefined` hash values. */                                                                 // 53\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';                                                                    // 54\n                                                                                                                       // 55\n  /** Used as references for various `Number` constants. */                                                            // 56\n  var INFINITY = 1 / 0,                                                                                                // 57\n      MAX_SAFE_INTEGER = 9007199254740991,                                                                             // 58\n      MAX_INTEGER = 1.7976931348623157e+308,                                                                           // 59\n      NAN = 0 / 0;                                                                                                     // 60\n                                                                                                                       // 61\n  /** Used as references for the maximum length and index of an array. */                                              // 62\n  var MAX_ARRAY_LENGTH = 4294967295,                                                                                   // 63\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,                                                                          // 64\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;                                                                  // 65\n                                                                                                                       // 66\n  /** Used as the internal argument placeholder. */                                                                    // 67\n  var PLACEHOLDER = '__lodash_placeholder__';                                                                          // 68\n                                                                                                                       // 69\n  /** `Object#toString` result references. */                                                                          // 70\n  var argsTag = '[object Arguments]',                                                                                  // 71\n      arrayTag = '[object Array]',                                                                                     // 72\n      boolTag = '[object Boolean]',                                                                                    // 73\n      dateTag = '[object Date]',                                                                                       // 74\n      errorTag = '[object Error]',                                                                                     // 75\n      funcTag = '[object Function]',                                                                                   // 76\n      genTag = '[object GeneratorFunction]',                                                                           // 77\n      mapTag = '[object Map]',                                                                                         // 78\n      numberTag = '[object Number]',                                                                                   // 79\n      objectTag = '[object Object]',                                                                                   // 80\n      regexpTag = '[object RegExp]',                                                                                   // 81\n      setTag = '[object Set]',                                                                                         // 82\n      stringTag = '[object String]',                                                                                   // 83\n      symbolTag = '[object Symbol]',                                                                                   // 84\n      weakMapTag = '[object WeakMap]';                                                                                 // 85\n                                                                                                                       // 86\n  var arrayBufferTag = '[object ArrayBuffer]',                                                                         // 87\n      float32Tag = '[object Float32Array]',                                                                            // 88\n      float64Tag = '[object Float64Array]',                                                                            // 89\n      int8Tag = '[object Int8Array]',                                                                                  // 90\n      int16Tag = '[object Int16Array]',                                                                                // 91\n      int32Tag = '[object Int32Array]',                                                                                // 92\n      uint8Tag = '[object Uint8Array]',                                                                                // 93\n      uint8ClampedTag = '[object Uint8ClampedArray]',                                                                  // 94\n      uint16Tag = '[object Uint16Array]',                                                                              // 95\n      uint32Tag = '[object Uint32Array]';                                                                              // 96\n                                                                                                                       // 97\n  /** Used to match empty string literals in compiled template source. */                                              // 98\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,                                                                         // 99\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,                                                                      // 100\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;                                                         // 101\n                                                                                                                       // 102\n  /** Used to match HTML entities and HTML characters. */                                                              // 103\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,                                                                 // 104\n      reUnescapedHtml = /[&<>\"'`]/g,                                                                                   // 105\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),                                                                 // 106\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);                                                             // 107\n                                                                                                                       // 108\n  /** Used to match template delimiters. */                                                                            // 109\n  var reEscape = /<%-([\\s\\S]+?)%>/g,                                                                                   // 110\n      reEvaluate = /<%([\\s\\S]+?)%>/g,                                                                                  // 111\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;                                                                              // 112\n                                                                                                                       // 113\n  /** Used to match property names within property paths. */                                                           // 114\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,                                               // 115\n      reIsPlainProp = /^\\w*$/,                                                                                         // 116\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g;                              // 117\n                                                                                                                       // 118\n  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */         // 119\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,                                                                            // 120\n      reHasRegExpChar = RegExp(reRegExpChar.source);                                                                   // 121\n                                                                                                                       // 122\n  /** Used to match leading and trailing whitespace. */                                                                // 123\n  var reTrim = /^\\s+|\\s+$/g,                                                                                           // 124\n      reTrimStart = /^\\s+/,                                                                                            // 125\n      reTrimEnd = /\\s+$/;                                                                                              // 126\n                                                                                                                       // 127\n  /** Used to match backslashes in property paths. */                                                                  // 128\n  var reEscapeChar = /\\\\(\\\\)?/g;                                                                                       // 129\n                                                                                                                       // 130\n  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;                                                                // 132\n                                                                                                                       // 133\n  /** Used to match `RegExp` flags from their coerced string values. */                                                // 134\n  var reFlags = /\\w*$/;                                                                                                // 135\n                                                                                                                       // 136\n  /** Used to detect hexadecimal string values. */                                                                     // 137\n  var reHasHexPrefix = /^0x/i;                                                                                         // 138\n                                                                                                                       // 139\n  /** Used to detect bad signed hexadecimal string values. */                                                          // 140\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;                                                                               // 141\n                                                                                                                       // 142\n  /** Used to detect binary string values. */                                                                          // 143\n  var reIsBinary = /^0b[01]+$/i;                                                                                       // 144\n                                                                                                                       // 145\n  /** Used to detect host constructors (Safari > 5). */                                                                // 146\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                    // 147\n                                                                                                                       // 148\n  /** Used to detect octal string values. */                                                                           // 149\n  var reIsOctal = /^0o[0-7]+$/i;                                                                                       // 150\n                                                                                                                       // 151\n  /** Used to detect unsigned integer values. */                                                                       // 152\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;                                                                                   // 153\n                                                                                                                       // 154\n  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */                               // 155\n  var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;                                                            // 156\n                                                                                                                       // 157\n  /** Used to ensure capturing order of template delimiters. */                                                        // 158\n  var reNoMatch = /($^)/;                                                                                              // 159\n                                                                                                                       // 160\n  /** Used to match unescaped characters in compiled string literals. */                                               // 161\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;                                                                    // 162\n                                                                                                                       // 163\n  /** Used to compose unicode character classes. */                                                                    // 164\n  var rsAstralRange = '\\\\ud800-\\\\udfff',                                                                               // 165\n      rsComboRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',                                                                 // 166\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',                                                                              // 167\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',                                                                      // 168\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',                                                                          // 169\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',                                                 // 170\n      rsQuoteRange = '\\\\u2018\\\\u2019\\\\u201c\\\\u201d',                                                                   // 171\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',                                                                      // 173\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',                                                                                   // 174\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;                                     // 175\n                                                                                                                       // 176\n  /** Used to compose unicode capture groups. */                                                                       // 177\n  var rsAstral = '[' + rsAstralRange + ']',                                                                            // 178\n      rsBreak = '[' + rsBreakRange + ']',                                                                              // 179\n      rsCombo = '[' + rsComboRange + ']',                                                                              // 180\n      rsDigits = '\\\\d+',                                                                                               // 181\n      rsDingbat = '[' + rsDingbatRange + ']',                                                                          // 182\n      rsLower = '[' + rsLowerRange + ']',                                                                              // 183\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',    // 184\n      rsModifier = '(?:\\\\ud83c[\\\\udffb-\\\\udfff])',                                                                     // 185\n      rsNonAstral = '[^' + rsAstralRange + ']',                                                                        // 186\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',                                                                  // 187\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',                                                               // 188\n      rsUpper = '[' + rsUpperRange + ']',                                                                              // 189\n      rsZWJ = '\\\\u200d';                                                                                               // 190\n                                                                                                                       // 191\n  /** Used to compose unicode regexes. */                                                                              // 192\n  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',                                                              // 193\n      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',                                                              // 194\n      reOptMod = rsModifier + '?',                                                                                     // 195\n      rsOptVar = '[' + rsVarRange + ']?',                                                                              // 196\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,                                                                         // 198\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,                                   // 199\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';     // 200\n                                                                                                                       // 201\n  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */       // 202\n  var reComboMark = RegExp(rsCombo, 'g');                                                                              // 203\n                                                                                                                       // 204\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */                            // 205\n  var reComplexSymbol = RegExp(rsSymbol + rsSeq, 'g');                                                                 // 206\n                                                                                                                       // 207\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');                      // 209\n                                                                                                                       // 210\n  /** Used to match non-compound words composed of alphanumeric characters. */                                         // 211\n  var reBasicWord = /[a-zA-Z0-9]+/g;                                                                                   // 212\n                                                                                                                       // 213\n  /** Used to match complex or compound words. */                                                                      // 214\n  var reComplexWord = RegExp([                                                                                         // 215\n    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',                                        // 216\n    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',                                      // 217\n    rsUpper + '?' + rsLowerMisc + '+',                                                                                 // 218\n    rsDigits + '(?:' + rsLowerMisc + '+)?',                                                                            // 219\n    rsEmoji                                                                                                            // 220\n  ].join('|'), 'g');                                                                                                   // 221\n                                                                                                                       // 222\n  /** Used to detect strings that need a more robust regexp to match words. */                                         // 223\n  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;                                       // 224\n                                                                                                                       // 225\n  /** Used to assign default `context` object properties. */                                                           // 226\n  var contextProps = [                                                                                                 // 227\n    'Array', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function',                                              // 228\n    'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',                                                  // 229\n    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',                                         // 230\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',                                                 // 231\n    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'                                                               // 232\n  ];                                                                                                                   // 233\n                                                                                                                       // 234\n  /** Used to make template sourceURLs easier to identify. */                                                          // 235\n  var templateCounter = -1;                                                                                            // 236\n                                                                                                                       // 237\n  /** Used to identify `toStringTag` values of typed arrays. */                                                        // 238\n  var typedArrayTags = {};                                                                                             // 239\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                            // 240\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                 // 241\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                // 242\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                        // 243\n  typedArrayTags[uint32Tag] = true;                                                                                    // 244\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                 // 245\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                           // 246\n  typedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                 // 247\n  typedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                   // 248\n  typedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                              // 249\n  typedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                 // 250\n  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                      // 251\n                                                                                                                       // 252\n  /** Used to identify `toStringTag` values supported by `_.clone`. */                                                 // 253\n  var cloneableTags = {};                                                                                              // 254\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                   // 255\n  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =                                                             // 256\n  cloneableTags[dateTag] = cloneableTags[float32Tag] =                                                                 // 257\n  cloneableTags[float64Tag] = cloneableTags[int8Tag] =                                                                 // 258\n  cloneableTags[int16Tag] = cloneableTags[int32Tag] =                                                                  // 259\n  cloneableTags[mapTag] = cloneableTags[numberTag] =                                                                   // 260\n  cloneableTags[objectTag] = cloneableTags[regexpTag] =                                                                // 261\n  cloneableTags[setTag] = cloneableTags[stringTag] =                                                                   // 262\n  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =                                                                 // 263\n  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =                                                          // 264\n  cloneableTags[uint32Tag] = true;                                                                                     // 265\n  cloneableTags[errorTag] = cloneableTags[funcTag] =                                                                   // 266\n  cloneableTags[weakMapTag] = false;                                                                                   // 267\n                                                                                                                       // 268\n  /** Used to map latin-1 supplementary letters to basic latin letters. */                                             // 269\n  var deburredLetters = {                                                                                              // 270\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',                                     // 271\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',                                     // 272\n    '\\xc7': 'C',  '\\xe7': 'c',                                                                                         // 273\n    '\\xd0': 'D',  '\\xf0': 'd',                                                                                         // 274\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',                                                               // 275\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',                                                               // 276\n    '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',                                                               // 277\n    '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',                                                               // 278\n    '\\xd1': 'N',  '\\xf1': 'n',                                                                                         // 279\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',                                     // 280\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',                                     // 281\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',                                                               // 282\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',                                                               // 283\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',                                                                            // 284\n    '\\xc6': 'Ae', '\\xe6': 'ae',                                                                                        // 285\n    '\\xde': 'Th', '\\xfe': 'th',                                                                                        // 286\n    '\\xdf': 'ss'                                                                                                       // 287\n  };                                                                                                                   // 288\n                                                                                                                       // 289\n  /** Used to map characters to HTML entities. */                                                                      // 290\n  var htmlEscapes = {                                                                                                  // 291\n    '&': '&amp;',                                                                                                      // 292\n    '<': '&lt;',                                                                                                       // 293\n    '>': '&gt;',                                                                                                       // 294\n    '\"': '&quot;',                                                                                                     // 295\n    \"'\": '&#39;',                                                                                                      // 296\n    '`': '&#96;'                                                                                                       // 297\n  };                                                                                                                   // 298\n                                                                                                                       // 299\n  /** Used to map HTML entities to characters. */                                                                      // 300\n  var htmlUnescapes = {                                                                                                // 301\n    '&amp;': '&',                                                                                                      // 302\n    '&lt;': '<',                                                                                                       // 303\n    '&gt;': '>',                                                                                                       // 304\n    '&quot;': '\"',                                                                                                     // 305\n    '&#39;': \"'\",                                                                                                      // 306\n    '&#96;': '`'                                                                                                       // 307\n  };                                                                                                                   // 308\n                                                                                                                       // 309\n  /** Used to determine if values are of the language type `Object`. */                                                // 310\n  var objectTypes = {                                                                                                  // 311\n    'function': true,                                                                                                  // 312\n    'object': true                                                                                                     // 313\n  };                                                                                                                   // 314\n                                                                                                                       // 315\n  /** Used to escape characters for inclusion in compiled string literals. */                                          // 316\n  var stringEscapes = {                                                                                                // 317\n    '\\\\': '\\\\',                                                                                                        // 318\n    \"'\": \"'\",                                                                                                          // 319\n    '\\n': 'n',                                                                                                         // 320\n    '\\r': 'r',                                                                                                         // 321\n    '\\u2028': 'u2028',                                                                                                 // 322\n    '\\u2029': 'u2029'                                                                                                  // 323\n  };                                                                                                                   // 324\n                                                                                                                       // 325\n  /** Built-in method references without a dependency on `root`. */                                                    // 326\n  var freeParseFloat = parseFloat,                                                                                     // 327\n      freeParseInt = parseInt;                                                                                         // 328\n                                                                                                                       // 329\n  /** Detect free variable `exports`. */                                                                               // 330\n  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;                    // 331\n                                                                                                                       // 332\n  /** Detect free variable `module`. */                                                                                // 333\n  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;                         // 334\n                                                                                                                       // 335\n  /** Detect free variable `global` from Node.js. */                                                                   // 336\n  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);                      // 337\n                                                                                                                       // 338\n  /** Detect free variable `self`. */                                                                                  // 339\n  var freeSelf = checkGlobal(objectTypes[typeof self] && self);                                                        // 340\n                                                                                                                       // 341\n  /** Detect free variable `window`. */                                                                                // 342\n  var freeWindow = checkGlobal(objectTypes[typeof window] && window);                                                  // 343\n                                                                                                                       // 344\n  /** Detect the popular CommonJS extension `module.exports`. */                                                       // 345\n  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;                         // 346\n                                                                                                                       // 347\n  /** Detect `this` as the global object. */                                                                           // 348\n  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);                                                      // 349\n                                                                                                                       // 350\n  /**                                                                                                                  // 351\n   * Used as a reference to the global object.                                                                         // 352\n   *                                                                                                                   // 353\n   * The `this` value is used if it's the global object to avoid Greasemonkey's                                        // 354\n   * restricted `window` object, otherwise the `window` object is used.                                                // 355\n   */                                                                                                                  // 356\n  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();\n                                                                                                                       // 358\n  /*--------------------------------------------------------------------------*/                                       // 359\n                                                                                                                       // 360\n  /**                                                                                                                  // 361\n   * Adds the key-value `pair` to `map`.                                                                               // 362\n   *                                                                                                                   // 363\n   * @private                                                                                                          // 364\n   * @param {Object} map The map to modify.                                                                            // 365\n   * @param {Array} pair The key-value pair to add.                                                                    // 366\n   * @returns {Object} Returns `map`.                                                                                  // 367\n   */                                                                                                                  // 368\n  function addMapEntry(map, pair) {                                                                                    // 369\n    map.set(pair[0], pair[1]);                                                                                         // 370\n    return map;                                                                                                        // 371\n  }                                                                                                                    // 372\n                                                                                                                       // 373\n  /**                                                                                                                  // 374\n   * Adds `value` to `set`.                                                                                            // 375\n   *                                                                                                                   // 376\n   * @private                                                                                                          // 377\n   * @param {Object} set The set to modify.                                                                            // 378\n   * @param {*} value The value to add.                                                                                // 379\n   * @returns {Object} Returns `set`.                                                                                  // 380\n   */                                                                                                                  // 381\n  function addSetEntry(set, value) {                                                                                   // 382\n    set.add(value);                                                                                                    // 383\n    return set;                                                                                                        // 384\n  }                                                                                                                    // 385\n                                                                                                                       // 386\n  /**                                                                                                                  // 387\n   * A faster alternative to `Function#apply`, this function invokes `func`                                            // 388\n   * with the `this` binding of `thisArg` and the arguments of `args`.                                                 // 389\n   *                                                                                                                   // 390\n   * @private                                                                                                          // 391\n   * @param {Function} func The function to invoke.                                                                    // 392\n   * @param {*} thisArg The `this` binding of `func`.                                                                  // 393\n   * @param {...*} [args] The arguments to invoke `func` with.                                                         // 394\n   * @returns {*} Returns the result of `func`.                                                                        // 395\n   */                                                                                                                  // 396\n  function apply(func, thisArg, args) {                                                                                // 397\n    var length = args ? args.length : 0;                                                                               // 398\n    switch (length) {                                                                                                  // 399\n      case 0: return func.call(thisArg);                                                                               // 400\n      case 1: return func.call(thisArg, args[0]);                                                                      // 401\n      case 2: return func.call(thisArg, args[0], args[1]);                                                             // 402\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);                                                    // 403\n    }                                                                                                                  // 404\n    return func.apply(thisArg, args);                                                                                  // 405\n  }                                                                                                                    // 406\n                                                                                                                       // 407\n  /**                                                                                                                  // 408\n   * Creates a new array concatenating `array` with `other`.                                                           // 409\n   *                                                                                                                   // 410\n   * @private                                                                                                          // 411\n   * @param {Array} array The first array to concatenate.                                                              // 412\n   * @param {Array} other The second array to concatenate.                                                             // 413\n   * @returns {Array} Returns the new concatenated array.                                                              // 414\n   */                                                                                                                  // 415\n  function arrayConcat(array, other) {                                                                                 // 416\n    var index = -1,                                                                                                    // 417\n        length = array.length,                                                                                         // 418\n        othIndex = -1,                                                                                                 // 419\n        othLength = other.length,                                                                                      // 420\n        result = Array(length + othLength);                                                                            // 421\n                                                                                                                       // 422\n    while (++index < length) {                                                                                         // 423\n      result[index] = array[index];                                                                                    // 424\n    }                                                                                                                  // 425\n    while (++othIndex < othLength) {                                                                                   // 426\n      result[index++] = other[othIndex];                                                                               // 427\n    }                                                                                                                  // 428\n    return result;                                                                                                     // 429\n  }                                                                                                                    // 430\n                                                                                                                       // 431\n  /**                                                                                                                  // 432\n   * A specialized version of `_.forEach` for arrays without support for                                               // 433\n   * iteratee shorthands.                                                                                              // 434\n   *                                                                                                                   // 435\n   * @private                                                                                                          // 436\n   * @param {Array} array The array to iterate over.                                                                   // 437\n   * @param {Function} iteratee The function invoked per iteration.                                                    // 438\n   * @returns {Array} Returns `array`.                                                                                 // 439\n   */                                                                                                                  // 440\n  function arrayEach(array, iteratee) {                                                                                // 441\n    var index = -1,                                                                                                    // 442\n        length = array.length;                                                                                         // 443\n                                                                                                                       // 444\n    while (++index < length) {                                                                                         // 445\n      if (iteratee(array[index], index, array) === false) {                                                            // 446\n        break;                                                                                                         // 447\n      }                                                                                                                // 448\n    }                                                                                                                  // 449\n    return array;                                                                                                      // 450\n  }                                                                                                                    // 451\n                                                                                                                       // 452\n  /**                                                                                                                  // 453\n   * A specialized version of `_.forEachRight` for arrays without support for                                          // 454\n   * iteratee shorthands.                                                                                              // 455\n   *                                                                                                                   // 456\n   * @private                                                                                                          // 457\n   * @param {Array} array The array to iterate over.                                                                   // 458\n   * @param {Function} iteratee The function invoked per iteration.                                                    // 459\n   * @returns {Array} Returns `array`.                                                                                 // 460\n   */                                                                                                                  // 461\n  function arrayEachRight(array, iteratee) {                                                                           // 462\n    var length = array.length;                                                                                         // 463\n                                                                                                                       // 464\n    while (length--) {                                                                                                 // 465\n      if (iteratee(array[length], length, array) === false) {                                                          // 466\n        break;                                                                                                         // 467\n      }                                                                                                                // 468\n    }                                                                                                                  // 469\n    return array;                                                                                                      // 470\n  }                                                                                                                    // 471\n                                                                                                                       // 472\n  /**                                                                                                                  // 473\n   * A specialized version of `_.every` for arrays without support for                                                 // 474\n   * iteratee shorthands.                                                                                              // 475\n   *                                                                                                                   // 476\n   * @private                                                                                                          // 477\n   * @param {Array} array The array to iterate over.                                                                   // 478\n   * @param {Function} predicate The function invoked per iteration.                                                   // 479\n   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.                         // 480\n   */                                                                                                                  // 481\n  function arrayEvery(array, predicate) {                                                                              // 482\n    var index = -1,                                                                                                    // 483\n        length = array.length;                                                                                         // 484\n                                                                                                                       // 485\n    while (++index < length) {                                                                                         // 486\n      if (!predicate(array[index], index, array)) {                                                                    // 487\n        return false;                                                                                                  // 488\n      }                                                                                                                // 489\n    }                                                                                                                  // 490\n    return true;                                                                                                       // 491\n  }                                                                                                                    // 492\n                                                                                                                       // 493\n  /**                                                                                                                  // 494\n   * A specialized version of `_.filter` for arrays without support for                                                // 495\n   * iteratee shorthands.                                                                                              // 496\n   *                                                                                                                   // 497\n   * @private                                                                                                          // 498\n   * @param {Array} array The array to iterate over.                                                                   // 499\n   * @param {Function} predicate The function invoked per iteration.                                                   // 500\n   * @returns {Array} Returns the new filtered array.                                                                  // 501\n   */                                                                                                                  // 502\n  function arrayFilter(array, predicate) {                                                                             // 503\n    var index = -1,                                                                                                    // 504\n        length = array.length,                                                                                         // 505\n        resIndex = -1,                                                                                                 // 506\n        result = [];                                                                                                   // 507\n                                                                                                                       // 508\n    while (++index < length) {                                                                                         // 509\n      var value = array[index];                                                                                        // 510\n      if (predicate(value, index, array)) {                                                                            // 511\n        result[++resIndex] = value;                                                                                    // 512\n      }                                                                                                                // 513\n    }                                                                                                                  // 514\n    return result;                                                                                                     // 515\n  }                                                                                                                    // 516\n                                                                                                                       // 517\n  /**                                                                                                                  // 518\n   * A specialized version of `_.includes` for arrays without support for                                              // 519\n   * specifying an index to search from.                                                                               // 520\n   *                                                                                                                   // 521\n   * @private                                                                                                          // 522\n   * @param {Array} array The array to search.                                                                         // 523\n   * @param {*} target The value to search for.                                                                        // 524\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.                                             // 525\n   */                                                                                                                  // 526\n  function arrayIncludes(array, value) {                                                                               // 527\n    return !!array.length && baseIndexOf(array, value, 0) > -1;                                                        // 528\n  }                                                                                                                    // 529\n                                                                                                                       // 530\n  /**                                                                                                                  // 531\n   * A specialized version of `_.includesWith` for arrays without support for                                          // 532\n   * specifying an index to search from.                                                                               // 533\n   *                                                                                                                   // 534\n   * @private                                                                                                          // 535\n   * @param {Array} array The array to search.                                                                         // 536\n   * @param {*} target The value to search for.                                                                        // 537\n   * @param {Function} comparator The comparator invoked per element.                                                  // 538\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.                                             // 539\n   */                                                                                                                  // 540\n  function arrayIncludesWith(array, value, comparator) {                                                               // 541\n    var index = -1,                                                                                                    // 542\n        length = array.length;                                                                                         // 543\n                                                                                                                       // 544\n    while (++index < length) {                                                                                         // 545\n      if (comparator(value, array[index])) {                                                                           // 546\n        return true;                                                                                                   // 547\n      }                                                                                                                // 548\n    }                                                                                                                  // 549\n    return false;                                                                                                      // 550\n  }                                                                                                                    // 551\n                                                                                                                       // 552\n  /**                                                                                                                  // 553\n   * A specialized version of `_.map` for arrays without support for iteratee                                          // 554\n   * shorthands.                                                                                                       // 555\n   *                                                                                                                   // 556\n   * @private                                                                                                          // 557\n   * @param {Array} array The array to iterate over.                                                                   // 558\n   * @param {Function} iteratee The function invoked per iteration.                                                    // 559\n   * @returns {Array} Returns the new mapped array.                                                                    // 560\n   */                                                                                                                  // 561\n  function arrayMap(array, iteratee) {                                                                                 // 562\n    var index = -1,                                                                                                    // 563\n        length = array.length,                                                                                         // 564\n        result = Array(length);                                                                                        // 565\n                                                                                                                       // 566\n    while (++index < length) {                                                                                         // 567\n      result[index] = iteratee(array[index], index, array);                                                            // 568\n    }                                                                                                                  // 569\n    return result;                                                                                                     // 570\n  }                                                                                                                    // 571\n                                                                                                                       // 572\n  /**                                                                                                                  // 573\n   * Appends the elements of `values` to `array`.                                                                      // 574\n   *                                                                                                                   // 575\n   * @private                                                                                                          // 576\n   * @param {Array} array The array to modify.                                                                         // 577\n   * @param {Array} values The values to append.                                                                       // 578\n   * @returns {Array} Returns `array`.                                                                                 // 579\n   */                                                                                                                  // 580\n  function arrayPush(array, values) {                                                                                  // 581\n    var index = -1,                                                                                                    // 582\n        length = values.length,                                                                                        // 583\n        offset = array.length;                                                                                         // 584\n                                                                                                                       // 585\n    while (++index < length) {                                                                                         // 586\n      array[offset + index] = values[index];                                                                           // 587\n    }                                                                                                                  // 588\n    return array;                                                                                                      // 589\n  }                                                                                                                    // 590\n                                                                                                                       // 591\n  /**                                                                                                                  // 592\n   * A specialized version of `_.reduce` for arrays without support for                                                // 593\n   * iteratee shorthands.                                                                                              // 594\n   *                                                                                                                   // 595\n   * @private                                                                                                          // 596\n   * @param {Array} array The array to iterate over.                                                                   // 597\n   * @param {Function} iteratee The function invoked per iteration.                                                    // 598\n   * @param {*} [accumulator] The initial value.                                                                       // 599\n   * @param {boolean} [initFromArray] Specify using the first element of `array` as the initial value.                 // 600\n   * @returns {*} Returns the accumulated value.                                                                       // 601\n   */                                                                                                                  // 602\n  function arrayReduce(array, iteratee, accumulator, initFromArray) {                                                  // 603\n    var index = -1,                                                                                                    // 604\n        length = array.length;                                                                                         // 605\n                                                                                                                       // 606\n    if (initFromArray && length) {                                                                                     // 607\n      accumulator = array[++index];                                                                                    // 608\n    }                                                                                                                  // 609\n    while (++index < length) {                                                                                         // 610\n      accumulator = iteratee(accumulator, array[index], index, array);                                                 // 611\n    }                                                                                                                  // 612\n    return accumulator;                                                                                                // 613\n  }                                                                                                                    // 614\n                                                                                                                       // 615\n  /**                                                                                                                  // 616\n   * A specialized version of `_.reduceRight` for arrays without support for                                           // 617\n   * iteratee shorthands.                                                                                              // 618\n   *                                                                                                                   // 619\n   * @private                                                                                                          // 620\n   * @param {Array} array The array to iterate over.                                                                   // 621\n   * @param {Function} iteratee The function invoked per iteration.                                                    // 622\n   * @param {*} [accumulator] The initial value.                                                                       // 623\n   * @param {boolean} [initFromArray] Specify using the last element of `array` as the initial value.                  // 624\n   * @returns {*} Returns the accumulated value.                                                                       // 625\n   */                                                                                                                  // 626\n  function arrayReduceRight(array, iteratee, accumulator, initFromArray) {                                             // 627\n    var length = array.length;                                                                                         // 628\n    if (initFromArray && length) {                                                                                     // 629\n      accumulator = array[--length];                                                                                   // 630\n    }                                                                                                                  // 631\n    while (length--) {                                                                                                 // 632\n      accumulator = iteratee(accumulator, array[length], length, array);                                               // 633\n    }                                                                                                                  // 634\n    return accumulator;                                                                                                // 635\n  }                                                                                                                    // 636\n                                                                                                                       // 637\n  /**                                                                                                                  // 638\n   * A specialized version of `_.some` for arrays without support for iteratee                                         // 639\n   * shorthands.                                                                                                       // 640\n   *                                                                                                                   // 641\n   * @private                                                                                                          // 642\n   * @param {Array} array The array to iterate over.                                                                   // 643\n   * @param {Function} predicate The function invoked per iteration.                                                   // 644\n   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.                        // 645\n   */                                                                                                                  // 646\n  function arraySome(array, predicate) {                                                                               // 647\n    var index = -1,                                                                                                    // 648\n        length = array.length;                                                                                         // 649\n                                                                                                                       // 650\n    while (++index < length) {                                                                                         // 651\n      if (predicate(array[index], index, array)) {                                                                     // 652\n        return true;                                                                                                   // 653\n      }                                                                                                                // 654\n    }                                                                                                                  // 655\n    return false;                                                                                                      // 656\n  }                                                                                                                    // 657\n                                                                                                                       // 658\n  /**                                                                                                                  // 659\n   * The base implementation of methods like `_.max` and `_.min` which accepts a                                       // 660\n   * `comparator` to determine the extremum value.                                                                     // 661\n   *                                                                                                                   // 662\n   * @private                                                                                                          // 663\n   * @param {Array} array The array to iterate over.                                                                   // 664\n   * @param {Function} iteratee The iteratee invoked per iteration.                                                    // 665\n   * @param {Function} comparator The comparator used to compare values.                                               // 666\n   * @returns {*} Returns the extremum value.                                                                          // 667\n   */                                                                                                                  // 668\n  function baseExtremum(array, iteratee, comparator) {                                                                 // 669\n    var index = -1,                                                                                                    // 670\n        length = array.length;                                                                                         // 671\n                                                                                                                       // 672\n    while (++index < length) {                                                                                         // 673\n      var value = array[index],                                                                                        // 674\n          current = iteratee(value);                                                                                   // 675\n                                                                                                                       // 676\n      if (current != null && (computed === undefined                                                                   // 677\n            ? current === current                                                                                      // 678\n            : comparator(current, computed)                                                                            // 679\n          )) {                                                                                                         // 680\n        var computed = current,                                                                                        // 681\n            result = value;                                                                                            // 682\n      }                                                                                                                // 683\n    }                                                                                                                  // 684\n    return result;                                                                                                     // 685\n  }                                                                                                                    // 686\n                                                                                                                       // 687\n  /**                                                                                                                  // 688\n   * The base implementation of methods like `_.find` and `_.findKey`, without                                         // 689\n   * support for iteratee shorthands, which iterates over `collection` using                                           // 690\n   * the provided `eachFunc`.                                                                                          // 691\n   *                                                                                                                   // 692\n   * @private                                                                                                          // 693\n   * @param {Array|Object} collection The collection to search.                                                        // 694\n   * @param {Function} predicate The function invoked per iteration.                                                   // 695\n   * @param {Function} eachFunc The function to iterate over `collection`.                                             // 696\n   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.           // 697\n   * @returns {*} Returns the found element or its key, else `undefined`.                                              // 698\n   */                                                                                                                  // 699\n  function baseFind(collection, predicate, eachFunc, retKey) {                                                         // 700\n    var result;                                                                                                        // 701\n    eachFunc(collection, function(value, key, collection) {                                                            // 702\n      if (predicate(value, key, collection)) {                                                                         // 703\n        result = retKey ? key : value;                                                                                 // 704\n        return false;                                                                                                  // 705\n      }                                                                                                                // 706\n    });                                                                                                                // 707\n    return result;                                                                                                     // 708\n  }                                                                                                                    // 709\n                                                                                                                       // 710\n  /**                                                                                                                  // 711\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without                                            // 712\n   * support for iteratee shorthands.                                                                                  // 713\n   *                                                                                                                   // 714\n   * @private                                                                                                          // 715\n   * @param {Array} array The array to search.                                                                         // 716\n   * @param {Function} predicate The function invoked per iteration.                                                   // 717\n   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 718\n   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 719\n   */                                                                                                                  // 720\n  function baseFindIndex(array, predicate, fromRight) {                                                                // 721\n    var length = array.length,                                                                                         // 722\n        index = fromRight ? length : -1;                                                                               // 723\n                                                                                                                       // 724\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 725\n      if (predicate(array[index], index, array)) {                                                                     // 726\n        return index;                                                                                                  // 727\n      }                                                                                                                // 728\n    }                                                                                                                  // 729\n    return -1;                                                                                                         // 730\n  }                                                                                                                    // 731\n                                                                                                                       // 732\n  /**                                                                                                                  // 733\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.                                         // 734\n   *                                                                                                                   // 735\n   * @private                                                                                                          // 736\n   * @param {Array} array The array to search.                                                                         // 737\n   * @param {*} value The value to search for.                                                                         // 738\n   * @param {number} fromIndex The index to search from.                                                               // 739\n   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 740\n   */                                                                                                                  // 741\n  function baseIndexOf(array, value, fromIndex) {                                                                      // 742\n    if (value !== value) {                                                                                             // 743\n      return indexOfNaN(array, fromIndex);                                                                             // 744\n    }                                                                                                                  // 745\n    var index = fromIndex - 1,                                                                                         // 746\n        length = array.length;                                                                                         // 747\n                                                                                                                       // 748\n    while (++index < length) {                                                                                         // 749\n      if (array[index] === value) {                                                                                    // 750\n        return index;                                                                                                  // 751\n      }                                                                                                                // 752\n    }                                                                                                                  // 753\n    return -1;                                                                                                         // 754\n  }                                                                                                                    // 755\n                                                                                                                       // 756\n  /**                                                                                                                  // 757\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support                                        // 758\n   * for iteratee shorthands, which iterates over `collection` using the provided                                      // 759\n   * `eachFunc`.                                                                                                       // 760\n   *                                                                                                                   // 761\n   * @private                                                                                                          // 762\n   * @param {Array|Object} collection The collection to iterate over.                                                  // 763\n   * @param {Function} iteratee The function invoked per iteration.                                                    // 764\n   * @param {*} accumulator The initial value.                                                                         // 765\n   * @param {boolean} initFromCollection Specify using the first or last element of `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.                                             // 767\n   * @returns {*} Returns the accumulated value.                                                                       // 768\n   */                                                                                                                  // 769\n  function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {                               // 770\n    eachFunc(collection, function(value, index, collection) {                                                          // 771\n      accumulator = initFromCollection                                                                                 // 772\n        ? (initFromCollection = false, value)                                                                          // 773\n        : iteratee(accumulator, value, index, collection);                                                             // 774\n    });                                                                                                                // 775\n    return accumulator;                                                                                                // 776\n  }                                                                                                                    // 777\n                                                                                                                       // 778\n  /**                                                                                                                  // 779\n   * The base implementation of `_.sortBy` which uses `comparer` to define                                             // 780\n   * the sort order of `array` and replaces criteria objects with their                                                // 781\n   * corresponding values.                                                                                             // 782\n   *                                                                                                                   // 783\n   * @private                                                                                                          // 784\n   * @param {Array} array The array to sort.                                                                           // 785\n   * @param {Function} comparer The function to define sort order.                                                     // 786\n   * @returns {Array} Returns `array`.                                                                                 // 787\n   */                                                                                                                  // 788\n  function baseSortBy(array, comparer) {                                                                               // 789\n    var length = array.length;                                                                                         // 790\n                                                                                                                       // 791\n    array.sort(comparer);                                                                                              // 792\n    while (length--) {                                                                                                 // 793\n      array[length] = array[length].value;                                                                             // 794\n    }                                                                                                                  // 795\n    return array;                                                                                                      // 796\n  }                                                                                                                    // 797\n                                                                                                                       // 798\n  /**                                                                                                                  // 799\n   * The base implementation of `_.sum` without support for iteratee shorthands.                                       // 800\n   *                                                                                                                   // 801\n   * @private                                                                                                          // 802\n   * @param {Array} array The array to iterate over.                                                                   // 803\n   * @param {Function} iteratee The function invoked per iteration.                                                    // 804\n   * @returns {number} Returns the sum.                                                                                // 805\n   */                                                                                                                  // 806\n  function baseSum(array, iteratee) {                                                                                  // 807\n    var result,                                                                                                        // 808\n        index = -1,                                                                                                    // 809\n        length = array.length;                                                                                         // 810\n                                                                                                                       // 811\n    while (++index < length) {                                                                                         // 812\n      var current = iteratee(array[index]);                                                                            // 813\n      if (current !== undefined) {                                                                                     // 814\n        result = result === undefined ? current : (result + current);                                                  // 815\n      }                                                                                                                // 816\n    }                                                                                                                  // 817\n    return result;                                                                                                     // 818\n  }                                                                                                                    // 819\n                                                                                                                       // 820\n  /**                                                                                                                  // 821\n   * The base implementation of `_.times` without support for iteratee shorthands                                      // 822\n   * or max array length checks.                                                                                       // 823\n   *                                                                                                                   // 824\n   * @private                                                                                                          // 825\n   * @param {number} n The number of times to invoke `iteratee`.                                                       // 826\n   * @param {Function} iteratee The function invoked per iteration.                                                    // 827\n   * @returns {Array} Returns the array of results.                                                                    // 828\n   */                                                                                                                  // 829\n  function baseTimes(n, iteratee) {                                                                                    // 830\n    var index = -1,                                                                                                    // 831\n        result = Array(n);                                                                                             // 832\n                                                                                                                       // 833\n    while (++index < n) {                                                                                              // 834\n      result[index] = iteratee(index);                                                                                 // 835\n    }                                                                                                                  // 836\n    return result;                                                                                                     // 837\n  }                                                                                                                    // 838\n                                                                                                                       // 839\n  /**                                                                                                                  // 840\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array                                   // 841\n   * of key-value pairs for `object` corresponding to the property names of `props`.                                   // 842\n   *                                                                                                                   // 843\n   * @private                                                                                                          // 844\n   * @param {Object} object The object to query.                                                                       // 845\n   * @param {Array} props The property names to get values for.                                                        // 846\n   * @returns {Object} Returns the new array of key-value pairs.                                                       // 847\n   */                                                                                                                  // 848\n  function baseToPairs(object, props) {                                                                                // 849\n    return arrayMap(props, function(key) {                                                                             // 850\n      return [key, object[key]];                                                                                       // 851\n    });                                                                                                                // 852\n  }                                                                                                                    // 853\n                                                                                                                       // 854\n  /**                                                                                                                  // 855\n   * The base implementation of `_.unary` without support for storing wrapper metadata.                                // 856\n   *                                                                                                                   // 857\n   * @private                                                                                                          // 858\n   * @param {Function} func The function to cap arguments for.                                                         // 859\n   * @returns {Function} Returns the new function.                                                                     // 860\n   */                                                                                                                  // 861\n  function baseUnary(func) {                                                                                           // 862\n    return function(value) {                                                                                           // 863\n      return func(value);                                                                                              // 864\n    };                                                                                                                 // 865\n  }                                                                                                                    // 866\n                                                                                                                       // 867\n  /**                                                                                                                  // 868\n   * The base implementation of `_.values` and `_.valuesIn` which creates an                                           // 869\n   * array of `object` property values corresponding to the property names                                             // 870\n   * of `props`.                                                                                                       // 871\n   *                                                                                                                   // 872\n   * @private                                                                                                          // 873\n   * @param {Object} object The object to query.                                                                       // 874\n   * @param {Array} props The property names to get values for.                                                        // 875\n   * @returns {Object} Returns the array of property values.                                                           // 876\n   */                                                                                                                  // 877\n  function baseValues(object, props) {                                                                                 // 878\n    return arrayMap(props, function(key) {                                                                             // 879\n      return object[key];                                                                                              // 880\n    });                                                                                                                // 881\n  }                                                                                                                    // 882\n                                                                                                                       // 883\n  /**                                                                                                                  // 884\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol                                    // 885\n   * that is not found in the character symbols.                                                                       // 886\n   *                                                                                                                   // 887\n   * @private                                                                                                          // 888\n   * @param {Array} strSymbols The string symbols to inspect.                                                          // 889\n   * @param {Array} chrSymbols The character symbols to find.                                                          // 890\n   * @returns {number} Returns the index of the first unmatched string symbol.                                         // 891\n   */                                                                                                                  // 892\n  function charsStartIndex(strSymbols, chrSymbols) {                                                                   // 893\n    var index = -1,                                                                                                    // 894\n        length = strSymbols.length;                                                                                    // 895\n                                                                                                                       // 896\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}                                  // 897\n    return index;                                                                                                      // 898\n  }                                                                                                                    // 899\n                                                                                                                       // 900\n  /**                                                                                                                  // 901\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol                                       // 902\n   * that is not found in the character symbols.                                                                       // 903\n   *                                                                                                                   // 904\n   * @private                                                                                                          // 905\n   * @param {Array} strSymbols The string symbols to inspect.                                                          // 906\n   * @param {Array} chrSymbols The character symbols to find.                                                          // 907\n   * @returns {number} Returns the index of the last unmatched string symbol.                                          // 908\n   */                                                                                                                  // 909\n  function charsEndIndex(strSymbols, chrSymbols) {                                                                     // 910\n    var index = strSymbols.length;                                                                                     // 911\n                                                                                                                       // 912\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}                                           // 913\n    return index;                                                                                                      // 914\n  }                                                                                                                    // 915\n                                                                                                                       // 916\n  /**                                                                                                                  // 917\n   * Checks if `value` is a global object.                                                                             // 918\n   *                                                                                                                   // 919\n   * @private                                                                                                          // 920\n   * @param {*} value The value to check.                                                                              // 921\n   * @returns {null|Object} Returns `value` if it's a global object, else `null`.                                      // 922\n   */                                                                                                                  // 923\n  function checkGlobal(value) {                                                                                        // 924\n    return (value && value.Object === Object) ? value : null;                                                          // 925\n  }                                                                                                                    // 926\n                                                                                                                       // 927\n  /**                                                                                                                  // 928\n   * Compares values to sort them in ascending order.                                                                  // 929\n   *                                                                                                                   // 930\n   * @private                                                                                                          // 931\n   * @param {*} value The value to compare.                                                                            // 932\n   * @param {*} other The other value to compare.                                                                      // 933\n   * @returns {number} Returns the sort order indicator for `value`.                                                   // 934\n   */                                                                                                                  // 935\n  function compareAscending(value, other) {                                                                            // 936\n    if (value !== other) {                                                                                             // 937\n      var valIsNull = value === null,                                                                                  // 938\n          valIsUndef = value === undefined,                                                                            // 939\n          valIsReflexive = value === value;                                                                            // 940\n                                                                                                                       // 941\n      var othIsNull = other === null,                                                                                  // 942\n          othIsUndef = other === undefined,                                                                            // 943\n          othIsReflexive = other === other;                                                                            // 944\n                                                                                                                       // 945\n      if ((value > other && !othIsNull) || !valIsReflexive ||                                                          // 946\n          (valIsNull && !othIsUndef && othIsReflexive) ||                                                              // 947\n          (valIsUndef && othIsReflexive)) {                                                                            // 948\n        return 1;                                                                                                      // 949\n      }                                                                                                                // 950\n      if ((value < other && !valIsNull) || !othIsReflexive ||                                                          // 951\n          (othIsNull && !valIsUndef && valIsReflexive) ||                                                              // 952\n          (othIsUndef && valIsReflexive)) {                                                                            // 953\n        return -1;                                                                                                     // 954\n      }                                                                                                                // 955\n    }                                                                                                                  // 956\n    return 0;                                                                                                          // 957\n  }                                                                                                                    // 958\n                                                                                                                       // 959\n  /**                                                                                                                  // 960\n   * Used by `_.orderBy` to compare multiple properties of a value to another                                          // 961\n   * and stable sort them.                                                                                             // 962\n   *                                                                                                                   // 963\n   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,                                  // 964\n   * specify an order of \"desc\" for descending or \"asc\" for ascending sort order                                       // 965\n   * of corresponding values.                                                                                          // 966\n   *                                                                                                                   // 967\n   * @private                                                                                                          // 968\n   * @param {Object} object The object to compare.                                                                     // 969\n   * @param {Object} other The other object to compare.                                                                // 970\n   * @param {boolean[]|string[]} orders The order to sort by for each property.                                        // 971\n   * @returns {number} Returns the sort order indicator for `object`.                                                  // 972\n   */                                                                                                                  // 973\n  function compareMultiple(object, other, orders) {                                                                    // 974\n    var index = -1,                                                                                                    // 975\n        objCriteria = object.criteria,                                                                                 // 976\n        othCriteria = other.criteria,                                                                                  // 977\n        length = objCriteria.length,                                                                                   // 978\n        ordersLength = orders.length;                                                                                  // 979\n                                                                                                                       // 980\n    while (++index < length) {                                                                                         // 981\n      var result = compareAscending(objCriteria[index], othCriteria[index]);                                           // 982\n      if (result) {                                                                                                    // 983\n        if (index >= ordersLength) {                                                                                   // 984\n          return result;                                                                                               // 985\n        }                                                                                                              // 986\n        var order = orders[index];                                                                                     // 987\n        return result * (order == 'desc' ? -1 : 1);                                                                    // 988\n      }                                                                                                                // 989\n    }                                                                                                                  // 990\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications                                       // 991\n    // that causes it, under certain circumstances, to provide the same value for                                      // 992\n    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247                                     // 993\n    // for more details.                                                                                               // 994\n    //                                                                                                                 // 995\n    // This also ensures a stable sort in V8 and other engines.                                                        // 996\n    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.                                          // 997\n    return object.index - other.index;                                                                                 // 998\n  }                                                                                                                    // 999\n                                                                                                                       // 1000\n  /**                                                                                                                  // 1001\n   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.                               // 1002\n   *                                                                                                                   // 1003\n   * @private                                                                                                          // 1004\n   * @param {string} letter The matched letter to deburr.                                                              // 1005\n   * @returns {string} Returns the deburred letter.                                                                    // 1006\n   */                                                                                                                  // 1007\n  function deburrLetter(letter) {                                                                                      // 1008\n    return deburredLetters[letter];                                                                                    // 1009\n  }                                                                                                                    // 1010\n                                                                                                                       // 1011\n  /**                                                                                                                  // 1012\n   * Used by `_.escape` to convert characters to HTML entities.                                                        // 1013\n   *                                                                                                                   // 1014\n   * @private                                                                                                          // 1015\n   * @param {string} chr The matched character to escape.                                                              // 1016\n   * @returns {string} Returns the escaped character.                                                                  // 1017\n   */                                                                                                                  // 1018\n  function escapeHtmlChar(chr) {                                                                                       // 1019\n    return htmlEscapes[chr];                                                                                           // 1020\n  }                                                                                                                    // 1021\n                                                                                                                       // 1022\n  /**                                                                                                                  // 1023\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.                              // 1024\n   *                                                                                                                   // 1025\n   * @private                                                                                                          // 1026\n   * @param {string} chr The matched character to escape.                                                              // 1027\n   * @returns {string} Returns the escaped character.                                                                  // 1028\n   */                                                                                                                  // 1029\n  function escapeStringChar(chr) {                                                                                     // 1030\n    return '\\\\' + stringEscapes[chr];                                                                                  // 1031\n  }                                                                                                                    // 1032\n                                                                                                                       // 1033\n  /**                                                                                                                  // 1034\n   * Gets the index at which the first occurrence of `NaN` is found in `array`.                                        // 1035\n   *                                                                                                                   // 1036\n   * @private                                                                                                          // 1037\n   * @param {Array} array The array to search.                                                                         // 1038\n   * @param {number} fromIndex The index to search from.                                                               // 1039\n   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 1040\n   * @returns {number} Returns the index of the matched `NaN`, else `-1`.                                              // 1041\n   */                                                                                                                  // 1042\n  function indexOfNaN(array, fromIndex, fromRight) {                                                                   // 1043\n    var length = array.length,                                                                                         // 1044\n        index = fromIndex + (fromRight ? 0 : -1);                                                                      // 1045\n                                                                                                                       // 1046\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 1047\n      var other = array[index];                                                                                        // 1048\n      if (other !== other) {                                                                                           // 1049\n        return index;                                                                                                  // 1050\n      }                                                                                                                // 1051\n    }                                                                                                                  // 1052\n    return -1;                                                                                                         // 1053\n  }                                                                                                                    // 1054\n                                                                                                                       // 1055\n  /**                                                                                                                  // 1056\n   * Checks if `value` is a host object in IE < 9.                                                                     // 1057\n   *                                                                                                                   // 1058\n   * @private                                                                                                          // 1059\n   * @param {*} value The value to check.                                                                              // 1060\n   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                      // 1061\n   */                                                                                                                  // 1062\n  function isHostObject(value) {                                                                                       // 1063\n    // Many host objects are `Object` objects that can coerce to strings                                               // 1064\n    // despite having improperly defined `toString` methods.                                                           // 1065\n    var result = false;                                                                                                // 1066\n    if (value != null && typeof value.toString != 'function') {                                                        // 1067\n      try {                                                                                                            // 1068\n        result = !!(value + '');                                                                                       // 1069\n      } catch (e) {}                                                                                                   // 1070\n    }                                                                                                                  // 1071\n    return result;                                                                                                     // 1072\n  }                                                                                                                    // 1073\n                                                                                                                       // 1074\n  /**                                                                                                                  // 1075\n   * Checks if `value` is a valid array-like index.                                                                    // 1076\n   *                                                                                                                   // 1077\n   * @private                                                                                                          // 1078\n   * @param {*} value The value to check.                                                                              // 1079\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                      // 1080\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                      // 1081\n   */                                                                                                                  // 1082\n  function isIndex(value, length) {                                                                                    // 1083\n    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;                                          // 1084\n    length = length == null ? MAX_SAFE_INTEGER : length;                                                               // 1085\n    return value > -1 && value % 1 == 0 && value < length;                                                             // 1086\n  }                                                                                                                    // 1087\n                                                                                                                       // 1088\n  /**                                                                                                                  // 1089\n   * Converts `iterator` to an array.                                                                                  // 1090\n   *                                                                                                                   // 1091\n   * @private                                                                                                          // 1092\n   * @param {Object} iterator The iterator to convert.                                                                 // 1093\n   * @returns {Array} Returns the converted array.                                                                     // 1094\n   */                                                                                                                  // 1095\n  function iteratorToArray(iterator) {                                                                                 // 1096\n    var data,                                                                                                          // 1097\n        result = [];                                                                                                   // 1098\n                                                                                                                       // 1099\n    while (!(data = iterator.next()).done) {                                                                           // 1100\n      result.push(data.value);                                                                                         // 1101\n    }                                                                                                                  // 1102\n    return result;                                                                                                     // 1103\n  }                                                                                                                    // 1104\n                                                                                                                       // 1105\n  /**                                                                                                                  // 1106\n   * Converts `map` to an array.                                                                                       // 1107\n   *                                                                                                                   // 1108\n   * @private                                                                                                          // 1109\n   * @param {Object} map The map to convert.                                                                           // 1110\n   * @returns {Array} Returns the converted array.                                                                     // 1111\n   */                                                                                                                  // 1112\n  function mapToArray(map) {                                                                                           // 1113\n    var index = -1,                                                                                                    // 1114\n        result = Array(map.size);                                                                                      // 1115\n                                                                                                                       // 1116\n    map.forEach(function(value, key) {                                                                                 // 1117\n      result[++index] = [key, value];                                                                                  // 1118\n    });                                                                                                                // 1119\n    return result;                                                                                                     // 1120\n  }                                                                                                                    // 1121\n                                                                                                                       // 1122\n  /**                                                                                                                  // 1123\n   * Replaces all `placeholder` elements in `array` with an internal placeholder                                       // 1124\n   * and returns an array of their indexes.                                                                            // 1125\n   *                                                                                                                   // 1126\n   * @private                                                                                                          // 1127\n   * @param {Array} array The array to modify.                                                                         // 1128\n   * @param {*} placeholder The placeholder to replace.                                                                // 1129\n   * @returns {Array} Returns the new array of placeholder indexes.                                                    // 1130\n   */                                                                                                                  // 1131\n  function replaceHolders(array, placeholder) {                                                                        // 1132\n    var index = -1,                                                                                                    // 1133\n        length = array.length,                                                                                         // 1134\n        resIndex = -1,                                                                                                 // 1135\n        result = [];                                                                                                   // 1136\n                                                                                                                       // 1137\n    while (++index < length) {                                                                                         // 1138\n      if (array[index] === placeholder) {                                                                              // 1139\n        array[index] = PLACEHOLDER;                                                                                    // 1140\n        result[++resIndex] = index;                                                                                    // 1141\n      }                                                                                                                // 1142\n    }                                                                                                                  // 1143\n    return result;                                                                                                     // 1144\n  }                                                                                                                    // 1145\n                                                                                                                       // 1146\n  /**                                                                                                                  // 1147\n   * Converts `set` to an array.                                                                                       // 1148\n   *                                                                                                                   // 1149\n   * @private                                                                                                          // 1150\n   * @param {Object} set The set to convert.                                                                           // 1151\n   * @returns {Array} Returns the converted array.                                                                     // 1152\n   */                                                                                                                  // 1153\n  function setToArray(set) {                                                                                           // 1154\n    var index = -1,                                                                                                    // 1155\n        result = Array(set.size);                                                                                      // 1156\n                                                                                                                       // 1157\n    set.forEach(function(value) {                                                                                      // 1158\n      result[++index] = value;                                                                                         // 1159\n    });                                                                                                                // 1160\n    return result;                                                                                                     // 1161\n  }                                                                                                                    // 1162\n                                                                                                                       // 1163\n  /**                                                                                                                  // 1164\n   * Gets the number of symbols in `string`.                                                                           // 1165\n   *                                                                                                                   // 1166\n   * @param {string} string The string to inspect.                                                                     // 1167\n   * @returns {number} Returns the string size.                                                                        // 1168\n   */                                                                                                                  // 1169\n  function stringSize(string) {                                                                                        // 1170\n    if (!(string && reHasComplexSymbol.test(string))) {                                                                // 1171\n      return string.length;                                                                                            // 1172\n    }                                                                                                                  // 1173\n    var result = reComplexSymbol.lastIndex = 0;                                                                        // 1174\n    while (reComplexSymbol.test(string)) {                                                                             // 1175\n      result++;                                                                                                        // 1176\n    }                                                                                                                  // 1177\n    return result;                                                                                                     // 1178\n  }                                                                                                                    // 1179\n                                                                                                                       // 1180\n  /**                                                                                                                  // 1181\n   * Converts `string` to an array.                                                                                    // 1182\n   *                                                                                                                   // 1183\n   * @private                                                                                                          // 1184\n   * @param {string} string The string to convert.                                                                     // 1185\n   * @returns {Array} Returns the converted array.                                                                     // 1186\n   */                                                                                                                  // 1187\n  function stringToArray(string) {                                                                                     // 1188\n    return string.match(reComplexSymbol);                                                                              // 1189\n  }                                                                                                                    // 1190\n                                                                                                                       // 1191\n  /**                                                                                                                  // 1192\n   * Used by `_.unescape` to convert HTML entities to characters.                                                      // 1193\n   *                                                                                                                   // 1194\n   * @private                                                                                                          // 1195\n   * @param {string} chr The matched character to unescape.                                                            // 1196\n   * @returns {string} Returns the unescaped character.                                                                // 1197\n   */                                                                                                                  // 1198\n  function unescapeHtmlChar(chr) {                                                                                     // 1199\n    return htmlUnescapes[chr];                                                                                         // 1200\n  }                                                                                                                    // 1201\n                                                                                                                       // 1202\n  /*--------------------------------------------------------------------------*/                                       // 1203\n                                                                                                                       // 1204\n  /**                                                                                                                  // 1205\n   * Create a new pristine `lodash` function using the `context` object.                                               // 1206\n   *                                                                                                                   // 1207\n   * @static                                                                                                           // 1208\n   * @memberOf _                                                                                                       // 1209\n   * @category Util                                                                                                    // 1210\n   * @param {Object} [context=root] The context object.                                                                // 1211\n   * @returns {Function} Returns a new `lodash` function.                                                              // 1212\n   * @example                                                                                                          // 1213\n   *                                                                                                                   // 1214\n   * _.mixin({ 'foo': _.constant('foo') });                                                                            // 1215\n   *                                                                                                                   // 1216\n   * var lodash = _.runInContext();                                                                                    // 1217\n   * lodash.mixin({ 'bar': lodash.constant('bar') });                                                                  // 1218\n   *                                                                                                                   // 1219\n   * _.isFunction(_.foo);                                                                                              // 1220\n   * // => true                                                                                                        // 1221\n   * _.isFunction(_.bar);                                                                                              // 1222\n   * // => false                                                                                                       // 1223\n   *                                                                                                                   // 1224\n   * lodash.isFunction(lodash.foo);                                                                                    // 1225\n   * // => false                                                                                                       // 1226\n   * lodash.isFunction(lodash.bar);                                                                                    // 1227\n   * // => true                                                                                                        // 1228\n   *                                                                                                                   // 1229\n   * // using `context` to mock `Date#getTime` use in `_.now`                                                          // 1230\n   * var mock = _.runInContext({                                                                                       // 1231\n   *   'Date': function() {                                                                                            // 1232\n   *     return { 'getTime': getTimeMock };                                                                            // 1233\n   *   }                                                                                                               // 1234\n   * });                                                                                                               // 1235\n   *                                                                                                                   // 1236\n   * // or creating a suped-up `defer` in Node.js                                                                      // 1237\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;                                                 // 1238\n   */                                                                                                                  // 1239\n  function runInContext(context) {                                                                                     // 1240\n    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;                                    // 1241\n                                                                                                                       // 1242\n    /** Built-in constructor references. */                                                                            // 1243\n    var Date = context.Date,                                                                                           // 1244\n        Error = context.Error,                                                                                         // 1245\n        Math = context.Math,                                                                                           // 1246\n        RegExp = context.RegExp,                                                                                       // 1247\n        TypeError = context.TypeError;                                                                                 // 1248\n                                                                                                                       // 1249\n    /** Used for built-in method references. */                                                                        // 1250\n    var arrayProto = context.Array.prototype,                                                                          // 1251\n        objectProto = context.Object.prototype;                                                                        // 1252\n                                                                                                                       // 1253\n    /** Used to resolve the decompiled source of functions. */                                                         // 1254\n    var funcToString = context.Function.prototype.toString;                                                            // 1255\n                                                                                                                       // 1256\n    /** Used to check objects for own properties. */                                                                   // 1257\n    var hasOwnProperty = objectProto.hasOwnProperty;                                                                   // 1258\n                                                                                                                       // 1259\n    /** Used to generate unique IDs. */                                                                                // 1260\n    var idCounter = 0;                                                                                                 // 1261\n                                                                                                                       // 1262\n    /** Used to infer the `Object` constructor. */                                                                     // 1263\n    var objectCtorString = funcToString.call(Object);                                                                  // 1264\n                                                                                                                       // 1265\n    /**                                                                                                                // 1266\n     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)  // 1267\n     * of values.                                                                                                      // 1268\n     */                                                                                                                // 1269\n    var objectToString = objectProto.toString;                                                                         // 1270\n                                                                                                                       // 1271\n    /** Used to restore the original `_` reference in `_.noConflict`. */                                               // 1272\n    var oldDash = root._;                                                                                              // 1273\n                                                                                                                       // 1274\n    /** Used to detect if a method is native. */                                                                       // 1275\n    var reIsNative = RegExp('^' +                                                                                      // 1276\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')                                                  // 1277\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                // 1278\n    );                                                                                                                 // 1279\n                                                                                                                       // 1280\n    /** Built-in value references. */                                                                                  // 1281\n    var _Symbol = context.Symbol,                                                                                      // 1282\n        Reflect = context.Reflect,                                                                                     // 1283\n        Uint8Array = context.Uint8Array,                                                                               // 1284\n        clearTimeout = context.clearTimeout,                                                                           // 1285\n        enumerate = Reflect ? Reflect.enumerate : undefined,                                                           // 1286\n        getPrototypeOf = Object.getPrototypeOf,                                                                        // 1287\n        getOwnPropertySymbols = Object.getOwnPropertySymbols,                                                          // 1288\n        iteratorSymbol = typeof (iteratorSymbol = _Symbol && _Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                       // 1290\n        setTimeout = context.setTimeout,                                                                               // 1291\n        splice = arrayProto.splice;                                                                                    // 1292\n                                                                                                                       // 1293\n    /* Built-in method references for those with the same name as other `lodash` methods. */                           // 1294\n    var nativeCeil = Math.ceil,                                                                                        // 1295\n        nativeFloor = Math.floor,                                                                                      // 1296\n        nativeIsFinite = context.isFinite,                                                                             // 1297\n        nativeJoin = arrayProto.join,                                                                                  // 1298\n        nativeKeys = Object.keys,                                                                                      // 1299\n        nativeMax = Math.max,                                                                                          // 1300\n        nativeMin = Math.min,                                                                                          // 1301\n        nativeParseInt = context.parseInt,                                                                             // 1302\n        nativeRandom = Math.random,                                                                                    // 1303\n        nativeReverse = arrayProto.reverse;                                                                            // 1304\n                                                                                                                       // 1305\n    /* Built-in method references that are verified to be native. */                                                   // 1306\n    var Map = getNative(context, 'Map'),                                                                               // 1307\n        Set = getNative(context, 'Set'),                                                                               // 1308\n        WeakMap = getNative(context, 'WeakMap'),                                                                       // 1309\n        nativeCreate = getNative(Object, 'create');                                                                    // 1310\n                                                                                                                       // 1311\n    /** Used to store function metadata. */                                                                            // 1312\n    var metaMap = WeakMap && new WeakMap;                                                                              // 1313\n                                                                                                                       // 1314\n    /** Used to detect maps and sets. */                                                                               // 1315\n    var mapCtorString = Map ? funcToString.call(Map) : '',                                                             // 1316\n        setCtorString = Set ? funcToString.call(Set) : '';                                                             // 1317\n                                                                                                                       // 1318\n    /** Used to convert symbols to primitives and strings. */                                                          // 1319\n    var symbolProto = _Symbol ? _Symbol.prototype : undefined,                                                         // 1320\n        symbolValueOf = _Symbol ? symbolProto.valueOf : undefined,                                                     // 1321\n        symbolToString = _Symbol ? symbolProto.toString : undefined;                                                   // 1322\n                                                                                                                       // 1323\n    /** Used to lookup unminified function names. */                                                                   // 1324\n    var realNames = {};                                                                                                // 1325\n                                                                                                                       // 1326\n    /*------------------------------------------------------------------------*/                                       // 1327\n                                                                                                                       // 1328\n    /**                                                                                                                // 1329\n     * Creates a `lodash` object which wraps `value` to enable implicit method                                         // 1330\n     * chaining. Methods that operate on and return arrays, collections, and                                           // 1331\n     * functions can be chained together. Methods that retrieve a single value or                                      // 1332\n     * may return a primitive value will automatically end the chain sequence and                                      // 1333\n     * return the unwrapped value. Otherwise, the value must be unwrapped with                                         // 1334\n     * `_#value`.                                                                                                      // 1335\n     *                                                                                                                 // 1336\n     * Explicit chaining, which must be unwrapped with `_#value` in all cases,                                         // 1337\n     * may be enabled using `_.chain`.                                                                                 // 1338\n     *                                                                                                                 // 1339\n     * The execution of chained methods is lazy, that is, it's deferred until                                          // 1340\n     * `_#value` is implicitly or explicitly called.                                                                   // 1341\n     *                                                                                                                 // 1342\n     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut                                     // 1343\n     * fusion is an optimization to merge iteratee calls; this avoids the creation                                     // 1344\n     * of intermediate arrays and can greatly reduce the number of iteratee executions.                                // 1345\n     * Sections of a chain sequence qualify for shortcut fusion if the section is                                      // 1346\n     * applied to an array of at least two hundred elements and any iteratees                                          // 1347\n     * accept only one argument. The heuristic for whether a section qualifies                                         // 1348\n     * for shortcut fusion is subject to change.                                                                       // 1349\n     *                                                                                                                 // 1350\n     * Chaining is supported in custom builds as long as the `_#value` method is                                       // 1351\n     * directly or indirectly included in the build.                                                                   // 1352\n     *                                                                                                                 // 1353\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.                                      // 1354\n     *                                                                                                                 // 1355\n     * The wrapper `Array` methods are:                                                                                // 1356\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`                                       // 1357\n     *                                                                                                                 // 1358\n     * The wrapper `String` methods are:                                                                               // 1359\n     * `replace` and `split`                                                                                           // 1360\n     *                                                                                                                 // 1361\n     * The wrapper methods that support shortcut fusion are:                                                           // 1362\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,                                            // 1363\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,                                     // 1364\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`                                       // 1365\n     *                                                                                                                 // 1366\n     * The chainable wrapper methods are:                                                                              // 1367\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`,                                             // 1368\n     * `at`, `before`, `bind`, `bindAll`, `bindKey`, `chain`, `chunk`, `commit`,                                       // 1369\n     * `compact`, `concat`, `conforms`,  `constant`, `countBy`, `create`, `curry`,                                     // 1370\n     * `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,                                         // 1371\n     * `differenceBy`, `differenceWith`,  `drop`, `dropRight`, `dropRightWhile`,                                       // 1372\n     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flip`, `flow`,                                        // 1373\n     * `flowRight`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,                                        // 1374\n     * `forOwnRight`, `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`,                                   // 1375\n     * `intersection`, `intersectionBy`, `intersectionWith`, invert`, `invokeMap`,                                     // 1376\n     * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,                                           // 1377\n     * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,                                        // 1378\n     * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,                                   // 1379\n     * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,                                         // 1380\n     * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,                                       // 1381\n     * `pullAll`, `pullAllBy`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`,                                       // 1382\n     * `reject`, `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`,                                          // 1383\n     * `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`,                                       // 1384\n     * `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`,                                          // 1385\n     * `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`,                                      // 1386\n     * `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`,                                         // 1387\n     * `unset`, `unshift`, `unzip`, `unzipWith`, `values`, `valuesIn`, `without`,                                      // 1388\n     * `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`, and `zipWith`                                            // 1389\n     *                                                                                                                 // 1390\n     * The wrapper methods that are **not** chainable by default are:                                                  // 1391\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,                                          // 1392\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,                                          // 1393\n     * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,                                              // 1394\n     * `findLast`, `findLastIndex`, `findLastKey`, `floor`, `get`, `gt`, `gte`,                                        // 1395\n     * `has`, `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`,                                           // 1396\n     * `invoke`, `isArguments`, `isArray`, `isArrayLike`, `isArrayLikeObject`,                                         // 1397\n     * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,                                        // 1398\n     * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMatch`,                                        // 1399\n     * `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,                                              // 1400\n     * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,                                       // 1401\n     * `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`, `last`,                                         // 1402\n     * `lastIndexOf`, `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`,                                          // 1403\n     * `mean`, `min`, `minBy`, `noConflict`, `noop`, `now`, `pad`, `padEnd`,                                           // 1404\n     * `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`, `repeat`,                                     // 1405\n     * `result`, `round`, `runInContext`, `sample`, `shift`, `size`, `snakeCase`,                                      // 1406\n     * `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`,                                 // 1407\n     * `startCase`, `startsWith`, `subtract`, `sum`, sumBy`, `template`, `times`,                                      // 1408\n     * `toLower`, `toInteger`, `toLength`, `toNumber`, `toSafeInteger`, toString`,                                     // 1409\n     * `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`,                                  // 1410\n     * `upperCase`, `upperFirst`, `value`, and `words`                                                                 // 1411\n     *                                                                                                                 // 1412\n     * @name _                                                                                                         // 1413\n     * @constructor                                                                                                    // 1414\n     * @category Seq                                                                                                   // 1415\n     * @param {*} value The value to wrap in a `lodash` instance.                                                      // 1416\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 1417\n     * @example                                                                                                        // 1418\n     *                                                                                                                 // 1419\n     * function square(n) {                                                                                            // 1420\n     *   return n * n;                                                                                                 // 1421\n     * }                                                                                                               // 1422\n     *                                                                                                                 // 1423\n     * var wrapped = _([1, 2, 3]);                                                                                     // 1424\n     *                                                                                                                 // 1425\n     * // returns an unwrapped value                                                                                   // 1426\n     * wrapped.reduce(_.add);                                                                                          // 1427\n     * // => 6                                                                                                         // 1428\n     *                                                                                                                 // 1429\n     * // returns a wrapped value                                                                                      // 1430\n     * var squares = wrapped.map(square);                                                                              // 1431\n     *                                                                                                                 // 1432\n     * _.isArray(squares);                                                                                             // 1433\n     * // => false                                                                                                     // 1434\n     *                                                                                                                 // 1435\n     * _.isArray(squares.value());                                                                                     // 1436\n     * // => true                                                                                                      // 1437\n     */                                                                                                                // 1438\n    function lodash(value) {                                                                                           // 1439\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {                                 // 1440\n        if (value instanceof LodashWrapper) {                                                                          // 1441\n          return value;                                                                                                // 1442\n        }                                                                                                              // 1443\n        if (hasOwnProperty.call(value, '__wrapped__')) {                                                               // 1444\n          return wrapperClone(value);                                                                                  // 1445\n        }                                                                                                              // 1446\n      }                                                                                                                // 1447\n      return new LodashWrapper(value);                                                                                 // 1448\n    }                                                                                                                  // 1449\n                                                                                                                       // 1450\n    /**                                                                                                                // 1451\n     * The function whose prototype all chaining wrappers inherit from.                                                // 1452\n     *                                                                                                                 // 1453\n     * @private                                                                                                        // 1454\n     */                                                                                                                // 1455\n    function baseLodash() {                                                                                            // 1456\n      // No operation performed.                                                                                       // 1457\n    }                                                                                                                  // 1458\n                                                                                                                       // 1459\n    /**                                                                                                                // 1460\n     * The base constructor for creating `lodash` wrapper objects.                                                     // 1461\n     *                                                                                                                 // 1462\n     * @private                                                                                                        // 1463\n     * @param {*} value The value to wrap.                                                                             // 1464\n     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.                                            // 1465\n     */                                                                                                                // 1466\n    function LodashWrapper(value, chainAll) {                                                                          // 1467\n      this.__wrapped__ = value;                                                                                        // 1468\n      this.__actions__ = [];                                                                                           // 1469\n      this.__chain__ = !!chainAll;                                                                                     // 1470\n      this.__index__ = 0;                                                                                              // 1471\n      this.__values__ = undefined;                                                                                     // 1472\n    }                                                                                                                  // 1473\n                                                                                                                       // 1474\n    /**                                                                                                                // 1475\n     * By default, the template delimiters used by lodash are like those in                                            // 1476\n     * embedded Ruby (ERB). Change the following template settings to use                                              // 1477\n     * alternative delimiters.                                                                                         // 1478\n     *                                                                                                                 // 1479\n     * @static                                                                                                         // 1480\n     * @memberOf _                                                                                                     // 1481\n     * @type Object                                                                                                    // 1482\n     */                                                                                                                // 1483\n    lodash.templateSettings = {                                                                                        // 1484\n                                                                                                                       // 1485\n      /**                                                                                                              // 1486\n       * Used to detect `data` property values to be HTML-escaped.                                                     // 1487\n       *                                                                                                               // 1488\n       * @memberOf _.templateSettings                                                                                  // 1489\n       * @type RegExp                                                                                                  // 1490\n       */                                                                                                              // 1491\n      'escape': reEscape,                                                                                              // 1492\n                                                                                                                       // 1493\n      /**                                                                                                              // 1494\n       * Used to detect code to be evaluated.                                                                          // 1495\n       *                                                                                                               // 1496\n       * @memberOf _.templateSettings                                                                                  // 1497\n       * @type RegExp                                                                                                  // 1498\n       */                                                                                                              // 1499\n      'evaluate': reEvaluate,                                                                                          // 1500\n                                                                                                                       // 1501\n      /**                                                                                                              // 1502\n       * Used to detect `data` property values to inject.                                                              // 1503\n       *                                                                                                               // 1504\n       * @memberOf _.templateSettings                                                                                  // 1505\n       * @type RegExp                                                                                                  // 1506\n       */                                                                                                              // 1507\n      'interpolate': reInterpolate,                                                                                    // 1508\n                                                                                                                       // 1509\n      /**                                                                                                              // 1510\n       * Used to reference the data object in the template text.                                                       // 1511\n       *                                                                                                               // 1512\n       * @memberOf _.templateSettings                                                                                  // 1513\n       * @type string                                                                                                  // 1514\n       */                                                                                                              // 1515\n      'variable': '',                                                                                                  // 1516\n                                                                                                                       // 1517\n      /**                                                                                                              // 1518\n       * Used to import variables into the compiled template.                                                          // 1519\n       *                                                                                                               // 1520\n       * @memberOf _.templateSettings                                                                                  // 1521\n       * @type Object                                                                                                  // 1522\n       */                                                                                                              // 1523\n      'imports': {                                                                                                     // 1524\n                                                                                                                       // 1525\n        /**                                                                                                            // 1526\n         * A reference to the `lodash` function.                                                                       // 1527\n         *                                                                                                             // 1528\n         * @memberOf _.templateSettings.imports                                                                        // 1529\n         * @type Function                                                                                              // 1530\n         */                                                                                                            // 1531\n        '_': lodash                                                                                                    // 1532\n      }                                                                                                                // 1533\n    };                                                                                                                 // 1534\n                                                                                                                       // 1535\n    /*------------------------------------------------------------------------*/                                       // 1536\n                                                                                                                       // 1537\n    /**                                                                                                                // 1538\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.                                    // 1539\n     *                                                                                                                 // 1540\n     * @private                                                                                                        // 1541\n     * @param {*} value The value to wrap.                                                                             // 1542\n     */                                                                                                                // 1543\n    function LazyWrapper(value) {                                                                                      // 1544\n      this.__wrapped__ = value;                                                                                        // 1545\n      this.__actions__ = [];                                                                                           // 1546\n      this.__dir__ = 1;                                                                                                // 1547\n      this.__filtered__ = false;                                                                                       // 1548\n      this.__iteratees__ = [];                                                                                         // 1549\n      this.__takeCount__ = MAX_ARRAY_LENGTH;                                                                           // 1550\n      this.__views__ = [];                                                                                             // 1551\n    }                                                                                                                  // 1552\n                                                                                                                       // 1553\n    /**                                                                                                                // 1554\n     * Creates a clone of the lazy wrapper object.                                                                     // 1555\n     *                                                                                                                 // 1556\n     * @private                                                                                                        // 1557\n     * @name clone                                                                                                     // 1558\n     * @memberOf LazyWrapper                                                                                           // 1559\n     * @returns {Object} Returns the cloned `LazyWrapper` object.                                                      // 1560\n     */                                                                                                                // 1561\n    function lazyClone() {                                                                                             // 1562\n      var result = new LazyWrapper(this.__wrapped__);                                                                  // 1563\n      result.__actions__ = copyArray(this.__actions__);                                                                // 1564\n      result.__dir__ = this.__dir__;                                                                                   // 1565\n      result.__filtered__ = this.__filtered__;                                                                         // 1566\n      result.__iteratees__ = copyArray(this.__iteratees__);                                                            // 1567\n      result.__takeCount__ = this.__takeCount__;                                                                       // 1568\n      result.__views__ = copyArray(this.__views__);                                                                    // 1569\n      return result;                                                                                                   // 1570\n    }                                                                                                                  // 1571\n                                                                                                                       // 1572\n    /**                                                                                                                // 1573\n     * Reverses the direction of lazy iteration.                                                                       // 1574\n     *                                                                                                                 // 1575\n     * @private                                                                                                        // 1576\n     * @name reverse                                                                                                   // 1577\n     * @memberOf LazyWrapper                                                                                           // 1578\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.                                                // 1579\n     */                                                                                                                // 1580\n    function lazyReverse() {                                                                                           // 1581\n      if (this.__filtered__) {                                                                                         // 1582\n        var result = new LazyWrapper(this);                                                                            // 1583\n        result.__dir__ = -1;                                                                                           // 1584\n        result.__filtered__ = true;                                                                                    // 1585\n      } else {                                                                                                         // 1586\n        result = this.clone();                                                                                         // 1587\n        result.__dir__ *= -1;                                                                                          // 1588\n      }                                                                                                                // 1589\n      return result;                                                                                                   // 1590\n    }                                                                                                                  // 1591\n                                                                                                                       // 1592\n    /**                                                                                                                // 1593\n     * Extracts the unwrapped value from its lazy wrapper.                                                             // 1594\n     *                                                                                                                 // 1595\n     * @private                                                                                                        // 1596\n     * @name value                                                                                                     // 1597\n     * @memberOf LazyWrapper                                                                                           // 1598\n     * @returns {*} Returns the unwrapped value.                                                                       // 1599\n     */                                                                                                                // 1600\n    function lazyValue() {                                                                                             // 1601\n      var array = this.__wrapped__.value(),                                                                            // 1602\n          dir = this.__dir__,                                                                                          // 1603\n          isArr = isArray(array),                                                                                      // 1604\n          isRight = dir < 0,                                                                                           // 1605\n          arrLength = isArr ? array.length : 0,                                                                        // 1606\n          view = getView(0, arrLength, this.__views__),                                                                // 1607\n          start = view.start,                                                                                          // 1608\n          end = view.end,                                                                                              // 1609\n          length = end - start,                                                                                        // 1610\n          index = isRight ? end : (start - 1),                                                                         // 1611\n          iteratees = this.__iteratees__,                                                                              // 1612\n          iterLength = iteratees.length,                                                                               // 1613\n          resIndex = 0,                                                                                                // 1614\n          takeCount = nativeMin(length, this.__takeCount__);                                                           // 1615\n                                                                                                                       // 1616\n      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {                    // 1617\n        return baseWrapperValue(array, this.__actions__);                                                              // 1618\n      }                                                                                                                // 1619\n      var result = [];                                                                                                 // 1620\n                                                                                                                       // 1621\n      outer:                                                                                                           // 1622\n      while (length-- && resIndex < takeCount) {                                                                       // 1623\n        index += dir;                                                                                                  // 1624\n                                                                                                                       // 1625\n        var iterIndex = -1,                                                                                            // 1626\n            value = array[index];                                                                                      // 1627\n                                                                                                                       // 1628\n        while (++iterIndex < iterLength) {                                                                             // 1629\n          var data = iteratees[iterIndex],                                                                             // 1630\n              iteratee = data.iteratee,                                                                                // 1631\n              type = data.type,                                                                                        // 1632\n              computed = iteratee(value);                                                                              // 1633\n                                                                                                                       // 1634\n          if (type == LAZY_MAP_FLAG) {                                                                                 // 1635\n            value = computed;                                                                                          // 1636\n          } else if (!computed) {                                                                                      // 1637\n            if (type == LAZY_FILTER_FLAG) {                                                                            // 1638\n              continue outer;                                                                                          // 1639\n            } else {                                                                                                   // 1640\n              break outer;                                                                                             // 1641\n            }                                                                                                          // 1642\n          }                                                                                                            // 1643\n        }                                                                                                              // 1644\n        result[resIndex++] = value;                                                                                    // 1645\n      }                                                                                                                // 1646\n      return result;                                                                                                   // 1647\n    }                                                                                                                  // 1648\n                                                                                                                       // 1649\n    /*------------------------------------------------------------------------*/                                       // 1650\n                                                                                                                       // 1651\n    /**                                                                                                                // 1652\n     * Creates an hash object.                                                                                         // 1653\n     *                                                                                                                 // 1654\n     * @private                                                                                                        // 1655\n     * @returns {Object} Returns the new hash object.                                                                  // 1656\n     */                                                                                                                // 1657\n    function Hash() {}                                                                                                 // 1658\n                                                                                                                       // 1659\n    /**                                                                                                                // 1660\n     * Removes `key` and its value from the hash.                                                                      // 1661\n     *                                                                                                                 // 1662\n     * @private                                                                                                        // 1663\n     * @param {Object} hash The hash to modify.                                                                        // 1664\n     * @param {string} key The key of the value to remove.                                                             // 1665\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                       // 1666\n     */                                                                                                                // 1667\n    function hashDelete(hash, key) {                                                                                   // 1668\n      return hashHas(hash, key) && delete hash[key];                                                                   // 1669\n    }                                                                                                                  // 1670\n                                                                                                                       // 1671\n    /**                                                                                                                // 1672\n     * Gets the hash value for `key`.                                                                                  // 1673\n     *                                                                                                                 // 1674\n     * @private                                                                                                        // 1675\n     * @param {Object} hash The hash to query.                                                                         // 1676\n     * @param {string} key The key of the value to get.                                                                // 1677\n     * @returns {*} Returns the entry value.                                                                           // 1678\n     */                                                                                                                // 1679\n    function hashGet(hash, key) {                                                                                      // 1680\n      if (nativeCreate) {                                                                                              // 1681\n        var result = hash[key];                                                                                        // 1682\n        return result === HASH_UNDEFINED ? undefined : result;                                                         // 1683\n      }                                                                                                                // 1684\n      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;                                                   // 1685\n    }                                                                                                                  // 1686\n                                                                                                                       // 1687\n    /**                                                                                                                // 1688\n     * Checks if a hash value for `key` exists.                                                                        // 1689\n     *                                                                                                                 // 1690\n     * @private                                                                                                        // 1691\n     * @param {Object} hash The hash to query.                                                                         // 1692\n     * @param {string} key The key of the entry to check.                                                              // 1693\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1694\n     */                                                                                                                // 1695\n    function hashHas(hash, key) {                                                                                      // 1696\n      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);                                  // 1697\n    }                                                                                                                  // 1698\n                                                                                                                       // 1699\n    /**                                                                                                                // 1700\n     * Sets the hash `key` to `value`.                                                                                 // 1701\n     *                                                                                                                 // 1702\n     * @private                                                                                                        // 1703\n     * @param {Object} hash The hash to modify.                                                                        // 1704\n     * @param {string} key The key of the value to set.                                                                // 1705\n     * @param {*} value The value to set.                                                                              // 1706\n     */                                                                                                                // 1707\n    function hashSet(hash, key, value) {                                                                               // 1708\n      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;                                      // 1709\n    }                                                                                                                  // 1710\n                                                                                                                       // 1711\n    /*------------------------------------------------------------------------*/                                       // 1712\n                                                                                                                       // 1713\n    /**                                                                                                                // 1714\n     * Creates a map cache object to store key-value pairs.                                                            // 1715\n     *                                                                                                                 // 1716\n     * @private                                                                                                        // 1717\n     * @param {Array} [values] The values to cache.                                                                    // 1718\n     */                                                                                                                // 1719\n    function MapCache(values) {                                                                                        // 1720\n      var index = -1,                                                                                                  // 1721\n          length = values ? values.length : 0;                                                                         // 1722\n                                                                                                                       // 1723\n      this.clear();                                                                                                    // 1724\n      while (++index < length) {                                                                                       // 1725\n        var entry = values[index];                                                                                     // 1726\n        this.set(entry[0], entry[1]);                                                                                  // 1727\n      }                                                                                                                // 1728\n    }                                                                                                                  // 1729\n                                                                                                                       // 1730\n    /**                                                                                                                // 1731\n     * Removes all key-value entries from the map.                                                                     // 1732\n     *                                                                                                                 // 1733\n     * @private                                                                                                        // 1734\n     * @name clear                                                                                                     // 1735\n     * @memberOf MapCache                                                                                              // 1736\n     */                                                                                                                // 1737\n    function mapClear() {                                                                                              // 1738\n      this.__data__ = { 'hash': new Hash, 'map': Map ? new Map : [], 'string': new Hash };                             // 1739\n    }                                                                                                                  // 1740\n                                                                                                                       // 1741\n    /**                                                                                                                // 1742\n     * Removes `key` and its value from the map.                                                                       // 1743\n     *                                                                                                                 // 1744\n     * @private                                                                                                        // 1745\n     * @name delete                                                                                                    // 1746\n     * @memberOf MapCache                                                                                              // 1747\n     * @param {string} key The key of the value to remove.                                                             // 1748\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                       // 1749\n     */                                                                                                                // 1750\n    function mapDelete(key) {                                                                                          // 1751\n      var data = this.__data__;                                                                                        // 1752\n      if (isKeyable(key)) {                                                                                            // 1753\n        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);                                      // 1754\n      }                                                                                                                // 1755\n      return Map ? data.map['delete'](key) : assocDelete(data.map, key);                                               // 1756\n    }                                                                                                                  // 1757\n                                                                                                                       // 1758\n    /**                                                                                                                // 1759\n     * Gets the map value for `key`.                                                                                   // 1760\n     *                                                                                                                 // 1761\n     * @private                                                                                                        // 1762\n     * @name get                                                                                                       // 1763\n     * @memberOf MapCache                                                                                              // 1764\n     * @param {string} key The key of the value to get.                                                                // 1765\n     * @returns {*} Returns the entry value.                                                                           // 1766\n     */                                                                                                                // 1767\n    function mapGet(key) {                                                                                             // 1768\n      var data = this.__data__;                                                                                        // 1769\n      if (isKeyable(key)) {                                                                                            // 1770\n        return hashGet(typeof key == 'string' ? data.string : data.hash, key);                                         // 1771\n      }                                                                                                                // 1772\n      return Map ? data.map.get(key) : assocGet(data.map, key);                                                        // 1773\n    }                                                                                                                  // 1774\n                                                                                                                       // 1775\n    /**                                                                                                                // 1776\n     * Checks if a map value for `key` exists.                                                                         // 1777\n     *                                                                                                                 // 1778\n     * @private                                                                                                        // 1779\n     * @name has                                                                                                       // 1780\n     * @memberOf MapCache                                                                                              // 1781\n     * @param {string} key The key of the entry to check.                                                              // 1782\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1783\n     */                                                                                                                // 1784\n    function mapHas(key) {                                                                                             // 1785\n      var data = this.__data__;                                                                                        // 1786\n      if (isKeyable(key)) {                                                                                            // 1787\n        return hashHas(typeof key == 'string' ? data.string : data.hash, key);                                         // 1788\n      }                                                                                                                // 1789\n      return Map ? data.map.has(key) : assocHas(data.map, key);                                                        // 1790\n    }                                                                                                                  // 1791\n                                                                                                                       // 1792\n    /**                                                                                                                // 1793\n     * Sets the map `key` to `value`.                                                                                  // 1794\n     *                                                                                                                 // 1795\n     * @private                                                                                                        // 1796\n     * @name set                                                                                                       // 1797\n     * @memberOf MapCache                                                                                              // 1798\n     * @param {string} key The key of the value to set.                                                                // 1799\n     * @param {*} value The value to set.                                                                              // 1800\n     * @returns {Object} Returns the map cache object.                                                                 // 1801\n     */                                                                                                                // 1802\n    function mapSet(key, value) {                                                                                      // 1803\n      var data = this.__data__;                                                                                        // 1804\n      if (isKeyable(key)) {                                                                                            // 1805\n        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);                                         // 1806\n      } else if (Map) {                                                                                                // 1807\n        data.map.set(key, value);                                                                                      // 1808\n      } else {                                                                                                         // 1809\n        assocSet(data.map, key, value);                                                                                // 1810\n      }                                                                                                                // 1811\n      return this;                                                                                                     // 1812\n    }                                                                                                                  // 1813\n                                                                                                                       // 1814\n    /*------------------------------------------------------------------------*/                                       // 1815\n                                                                                                                       // 1816\n    /**                                                                                                                // 1817\n     *                                                                                                                 // 1818\n     * Creates a set cache object to store unique values.                                                              // 1819\n     *                                                                                                                 // 1820\n     * @private                                                                                                        // 1821\n     * @param {Array} [values] The values to cache.                                                                    // 1822\n     */                                                                                                                // 1823\n    function SetCache(values) {                                                                                        // 1824\n      var index = -1,                                                                                                  // 1825\n          length = values ? values.length : 0;                                                                         // 1826\n                                                                                                                       // 1827\n      this.__data__ = new MapCache;                                                                                    // 1828\n      while (++index < length) {                                                                                       // 1829\n        this.push(values[index]);                                                                                      // 1830\n      }                                                                                                                // 1831\n    }                                                                                                                  // 1832\n                                                                                                                       // 1833\n    /**                                                                                                                // 1834\n     * Checks if `value` is in `cache`.                                                                                // 1835\n     *                                                                                                                 // 1836\n     * @private                                                                                                        // 1837\n     * @param {Object} cache The set cache to search.                                                                  // 1838\n     * @param {*} value The value to search for.                                                                       // 1839\n     * @returns {number} Returns `true` if `value` is found, else `false`.                                             // 1840\n     */                                                                                                                // 1841\n    function cacheHas(cache, value) {                                                                                  // 1842\n      var map = cache.__data__;                                                                                        // 1843\n      if (isKeyable(value)) {                                                                                          // 1844\n        var data = map.__data__,                                                                                       // 1845\n            hash = typeof value == 'string' ? data.string : data.hash;                                                 // 1846\n                                                                                                                       // 1847\n        return hash[value] === HASH_UNDEFINED;                                                                         // 1848\n      }                                                                                                                // 1849\n      return map.has(value);                                                                                           // 1850\n    }                                                                                                                  // 1851\n                                                                                                                       // 1852\n    /**                                                                                                                // 1853\n     * Adds `value` to the set cache.                                                                                  // 1854\n     *                                                                                                                 // 1855\n     * @private                                                                                                        // 1856\n     * @name push                                                                                                      // 1857\n     * @memberOf SetCache                                                                                              // 1858\n     * @param {*} value The value to cache.                                                                            // 1859\n     */                                                                                                                // 1860\n    function cachePush(value) {                                                                                        // 1861\n      var map = this.__data__;                                                                                         // 1862\n      if (isKeyable(value)) {                                                                                          // 1863\n        var data = map.__data__,                                                                                       // 1864\n            hash = typeof value == 'string' ? data.string : data.hash;                                                 // 1865\n                                                                                                                       // 1866\n        hash[value] = HASH_UNDEFINED;                                                                                  // 1867\n      }                                                                                                                // 1868\n      else {                                                                                                           // 1869\n        map.set(value, HASH_UNDEFINED);                                                                                // 1870\n      }                                                                                                                // 1871\n    }                                                                                                                  // 1872\n                                                                                                                       // 1873\n    /*------------------------------------------------------------------------*/                                       // 1874\n                                                                                                                       // 1875\n    /**                                                                                                                // 1876\n     * Creates a stack cache object to store key-value pairs.                                                          // 1877\n     *                                                                                                                 // 1878\n     * @private                                                                                                        // 1879\n     * @param {Array} [values] The values to cache.                                                                    // 1880\n     */                                                                                                                // 1881\n    function Stack(values) {                                                                                           // 1882\n      var index = -1,                                                                                                  // 1883\n          length = values ? values.length : 0;                                                                         // 1884\n                                                                                                                       // 1885\n      this.clear();                                                                                                    // 1886\n      while (++index < length) {                                                                                       // 1887\n        var entry = values[index];                                                                                     // 1888\n        this.set(entry[0], entry[1]);                                                                                  // 1889\n      }                                                                                                                // 1890\n    }                                                                                                                  // 1891\n                                                                                                                       // 1892\n    /**                                                                                                                // 1893\n     * Removes all key-value entries from the stack.                                                                   // 1894\n     *                                                                                                                 // 1895\n     * @private                                                                                                        // 1896\n     * @name clear                                                                                                     // 1897\n     * @memberOf Stack                                                                                                 // 1898\n     */                                                                                                                // 1899\n    function stackClear() {                                                                                            // 1900\n      this.__data__ = { 'array': [], 'map': null };                                                                    // 1901\n    }                                                                                                                  // 1902\n                                                                                                                       // 1903\n    /**                                                                                                                // 1904\n     * Removes `key` and its value from the stack.                                                                     // 1905\n     *                                                                                                                 // 1906\n     * @private                                                                                                        // 1907\n     * @name delete                                                                                                    // 1908\n     * @memberOf Stack                                                                                                 // 1909\n     * @param {string} key The key of the value to remove.                                                             // 1910\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                       // 1911\n     */                                                                                                                // 1912\n    function stackDelete(key) {                                                                                        // 1913\n      var data = this.__data__,                                                                                        // 1914\n          array = data.array;                                                                                          // 1915\n                                                                                                                       // 1916\n      return array ? assocDelete(array, key) : data.map['delete'](key);                                                // 1917\n    }                                                                                                                  // 1918\n                                                                                                                       // 1919\n    /**                                                                                                                // 1920\n     * Gets the stack value for `key`.                                                                                 // 1921\n     *                                                                                                                 // 1922\n     * @private                                                                                                        // 1923\n     * @name get                                                                                                       // 1924\n     * @memberOf Stack                                                                                                 // 1925\n     * @param {string} key The key of the value to get.                                                                // 1926\n     * @returns {*} Returns the entry value.                                                                           // 1927\n     */                                                                                                                // 1928\n    function stackGet(key) {                                                                                           // 1929\n      var data = this.__data__,                                                                                        // 1930\n          array = data.array;                                                                                          // 1931\n                                                                                                                       // 1932\n      return array ? assocGet(array, key) : data.map.get(key);                                                         // 1933\n    }                                                                                                                  // 1934\n                                                                                                                       // 1935\n    /**                                                                                                                // 1936\n     * Checks if a stack value for `key` exists.                                                                       // 1937\n     *                                                                                                                 // 1938\n     * @private                                                                                                        // 1939\n     * @name has                                                                                                       // 1940\n     * @memberOf Stack                                                                                                 // 1941\n     * @param {string} key The key of the entry to check.                                                              // 1942\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1943\n     */                                                                                                                // 1944\n    function stackHas(key) {                                                                                           // 1945\n      var data = this.__data__,                                                                                        // 1946\n          array = data.array;                                                                                          // 1947\n                                                                                                                       // 1948\n      return array ? assocHas(array, key) : data.map.has(key);                                                         // 1949\n    }                                                                                                                  // 1950\n                                                                                                                       // 1951\n    /**                                                                                                                // 1952\n     * Sets the stack `key` to `value`.                                                                                // 1953\n     *                                                                                                                 // 1954\n     * @private                                                                                                        // 1955\n     * @name set                                                                                                       // 1956\n     * @memberOf Stack                                                                                                 // 1957\n     * @param {string} key The key of the value to set.                                                                // 1958\n     * @param {*} value The value to set.                                                                              // 1959\n     * @returns {Object} Returns the stack cache object.                                                               // 1960\n     */                                                                                                                // 1961\n    function stackSet(key, value) {                                                                                    // 1962\n      var data = this.__data__,                                                                                        // 1963\n          array = data.array;                                                                                          // 1964\n                                                                                                                       // 1965\n      if (array) {                                                                                                     // 1966\n        if (array.length < (LARGE_ARRAY_SIZE - 1)) {                                                                   // 1967\n          assocSet(array, key, value);                                                                                 // 1968\n        } else {                                                                                                       // 1969\n          data.array = null;                                                                                           // 1970\n          data.map = new MapCache(array);                                                                              // 1971\n        }                                                                                                              // 1972\n      }                                                                                                                // 1973\n      var map = data.map;                                                                                              // 1974\n      if (map) {                                                                                                       // 1975\n        map.set(key, value);                                                                                           // 1976\n      }                                                                                                                // 1977\n      return this;                                                                                                     // 1978\n    }                                                                                                                  // 1979\n                                                                                                                       // 1980\n    /*------------------------------------------------------------------------*/                                       // 1981\n                                                                                                                       // 1982\n    /**                                                                                                                // 1983\n     * Removes `key` and its value from the associative array.                                                         // 1984\n     *                                                                                                                 // 1985\n     * @private                                                                                                        // 1986\n     * @param {Array} array The array to query.                                                                        // 1987\n     * @param {string} key The key of the value to remove.                                                             // 1988\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.                                       // 1989\n     */                                                                                                                // 1990\n    function assocDelete(array, key) {                                                                                 // 1991\n      var index = assocIndexOf(array, key);                                                                            // 1992\n      if (index < 0) {                                                                                                 // 1993\n        return false;                                                                                                  // 1994\n      }                                                                                                                // 1995\n      var lastIndex = array.length - 1;                                                                                // 1996\n      if (index == lastIndex) {                                                                                        // 1997\n        array.pop();                                                                                                   // 1998\n      } else {                                                                                                         // 1999\n        splice.call(array, index, 1);                                                                                  // 2000\n      }                                                                                                                // 2001\n      return true;                                                                                                     // 2002\n    }                                                                                                                  // 2003\n                                                                                                                       // 2004\n    /**                                                                                                                // 2005\n     * Gets the associative array value for `key`.                                                                     // 2006\n     *                                                                                                                 // 2007\n     * @private                                                                                                        // 2008\n     * @param {Array} array The array to query.                                                                        // 2009\n     * @param {string} key The key of the value to get.                                                                // 2010\n     * @returns {*} Returns the entry value.                                                                           // 2011\n     */                                                                                                                // 2012\n    function assocGet(array, key) {                                                                                    // 2013\n      var index = assocIndexOf(array, key);                                                                            // 2014\n      return index < 0 ? undefined : array[index][1];                                                                  // 2015\n    }                                                                                                                  // 2016\n                                                                                                                       // 2017\n    /**                                                                                                                // 2018\n     * Checks if an associative array value for `key` exists.                                                          // 2019\n     *                                                                                                                 // 2020\n     * @private                                                                                                        // 2021\n     * @param {Array} array The array to query.                                                                        // 2022\n     * @param {string} key The key of the entry to check.                                                              // 2023\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 2024\n     */                                                                                                                // 2025\n    function assocHas(array, key) {                                                                                    // 2026\n      return assocIndexOf(array, key) > -1;                                                                            // 2027\n    }                                                                                                                  // 2028\n                                                                                                                       // 2029\n    /**                                                                                                                // 2030\n     * Gets the index at which the first occurrence of `key` is found in `array`                                       // 2031\n     * of key-value pairs.                                                                                             // 2032\n     *                                                                                                                 // 2033\n     * @private                                                                                                        // 2034\n     * @param {Array} array The array to search.                                                                       // 2035\n     * @param {*} key The key to search for.                                                                           // 2036\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 2037\n     */                                                                                                                // 2038\n    function assocIndexOf(array, key) {                                                                                // 2039\n      var length = array.length;                                                                                       // 2040\n      while (length--) {                                                                                               // 2041\n        if (eq(array[length][0], key)) {                                                                               // 2042\n          return length;                                                                                               // 2043\n        }                                                                                                              // 2044\n      }                                                                                                                // 2045\n      return -1;                                                                                                       // 2046\n    }                                                                                                                  // 2047\n                                                                                                                       // 2048\n    /**                                                                                                                // 2049\n     * Sets the associative array `key` to `value`.                                                                    // 2050\n     *                                                                                                                 // 2051\n     * @private                                                                                                        // 2052\n     * @param {Array} array The array to modify.                                                                       // 2053\n     * @param {string} key The key of the value to set.                                                                // 2054\n     * @param {*} value The value to set.                                                                              // 2055\n     */                                                                                                                // 2056\n    function assocSet(array, key, value) {                                                                             // 2057\n      var index = assocIndexOf(array, key);                                                                            // 2058\n      if (index < 0) {                                                                                                 // 2059\n        array.push([key, value]);                                                                                      // 2060\n      } else {                                                                                                         // 2061\n        array[index][1] = value;                                                                                       // 2062\n      }                                                                                                                // 2063\n    }                                                                                                                  // 2064\n                                                                                                                       // 2065\n    /*------------------------------------------------------------------------*/                                       // 2066\n                                                                                                                       // 2067\n    /**                                                                                                                // 2068\n     * Used by `_.defaults` to customize its `_.assignIn` use.                                                         // 2069\n     *                                                                                                                 // 2070\n     * @private                                                                                                        // 2071\n     * @param {*} objValue The destination value.                                                                      // 2072\n     * @param {*} srcValue The source value.                                                                           // 2073\n     * @param {string} key The key of the property to assign.                                                          // 2074\n     * @param {Object} object The parent object of `objValue`.                                                         // 2075\n     * @returns {*} Returns the value to assign.                                                                       // 2076\n     */                                                                                                                // 2077\n    function assignInDefaults(objValue, srcValue, key, object) {                                                       // 2078\n      if (objValue === undefined ||                                                                                    // 2079\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {                                     // 2080\n        return srcValue;                                                                                               // 2081\n      }                                                                                                                // 2082\n      return objValue;                                                                                                 // 2083\n    }                                                                                                                  // 2084\n                                                                                                                       // 2085\n    /**                                                                                                                // 2086\n     * This function is like `assignValue` except that it doesn't assign `undefined` values.                           // 2087\n     *                                                                                                                 // 2088\n     * @private                                                                                                        // 2089\n     * @param {Object} object The object to modify.                                                                    // 2090\n     * @param {string} key The key of the property to assign.                                                          // 2091\n     * @param {*} value The value to assign.                                                                           // 2092\n     */                                                                                                                // 2093\n    function assignMergeValue(object, key, value) {                                                                    // 2094\n      if ((value !== undefined && !eq(object[key], value)) ||                                                          // 2095\n          (typeof key == 'number' && value === undefined && !(key in object))) {                                       // 2096\n        object[key] = value;                                                                                           // 2097\n      }                                                                                                                // 2098\n    }                                                                                                                  // 2099\n                                                                                                                       // 2100\n    /**                                                                                                                // 2101\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent                                    // 2102\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 2103\n     * for equality comparisons.                                                                                       // 2104\n     *                                                                                                                 // 2105\n     * @private                                                                                                        // 2106\n     * @param {Object} object The object to modify.                                                                    // 2107\n     * @param {string} key The key of the property to assign.                                                          // 2108\n     * @param {*} value The value to assign.                                                                           // 2109\n     */                                                                                                                // 2110\n    function assignValue(object, key, value) {                                                                         // 2111\n      var objValue = object[key];                                                                                      // 2112\n      if ((!eq(objValue, value) ||                                                                                     // 2113\n            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||                                  // 2114\n          (value === undefined && !(key in object))) {                                                                 // 2115\n        object[key] = value;                                                                                           // 2116\n      }                                                                                                                // 2117\n    }                                                                                                                  // 2118\n                                                                                                                       // 2119\n    /**                                                                                                                // 2120\n     * The base implementation of `_.assign` without support for multiple sources                                      // 2121\n     * or `customizer` functions.                                                                                      // 2122\n     *                                                                                                                 // 2123\n     * @private                                                                                                        // 2124\n     * @param {Object} object The destination object.                                                                  // 2125\n     * @param {Object} source The source object.                                                                       // 2126\n     * @returns {Object} Returns `object`.                                                                             // 2127\n     */                                                                                                                // 2128\n    function baseAssign(object, source) {                                                                              // 2129\n      return object && copyObject(source, keys(source), object);                                                       // 2130\n    }                                                                                                                  // 2131\n                                                                                                                       // 2132\n    /**                                                                                                                // 2133\n     * The base implementation of `_.at` without support for individual paths.                                         // 2134\n     *                                                                                                                 // 2135\n     * @private                                                                                                        // 2136\n     * @param {Object} object The object to iterate over.                                                              // 2137\n     * @param {string[]} paths The property paths of elements to pick.                                                 // 2138\n     * @returns {Array} Returns the new array of picked elements.                                                      // 2139\n     */                                                                                                                // 2140\n    function baseAt(object, paths) {                                                                                   // 2141\n      var index = -1,                                                                                                  // 2142\n          isNil = object == null,                                                                                      // 2143\n          length = paths.length,                                                                                       // 2144\n          result = Array(length);                                                                                      // 2145\n                                                                                                                       // 2146\n      while (++index < length) {                                                                                       // 2147\n        result[index] = isNil ? undefined : get(object, paths[index]);                                                 // 2148\n      }                                                                                                                // 2149\n      return result;                                                                                                   // 2150\n    }                                                                                                                  // 2151\n                                                                                                                       // 2152\n    /**                                                                                                                // 2153\n     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.                                 // 2154\n     *                                                                                                                 // 2155\n     * @private                                                                                                        // 2156\n     * @param {number} number The number to clamp.                                                                     // 2157\n     * @param {number} [lower] The lower bound.                                                                        // 2158\n     * @param {number} upper The upper bound.                                                                          // 2159\n     * @returns {number} Returns the clamped number.                                                                   // 2160\n     */                                                                                                                // 2161\n    function baseClamp(number, lower, upper) {                                                                         // 2162\n      if (number === number) {                                                                                         // 2163\n        if (upper !== undefined) {                                                                                     // 2164\n          number = number <= upper ? number : upper;                                                                   // 2165\n        }                                                                                                              // 2166\n        if (lower !== undefined) {                                                                                     // 2167\n          number = number >= lower ? number : lower;                                                                   // 2168\n        }                                                                                                              // 2169\n      }                                                                                                                // 2170\n      return number;                                                                                                   // 2171\n    }                                                                                                                  // 2172\n                                                                                                                       // 2173\n    /**                                                                                                                // 2174\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks                                             // 2175\n     * traversed objects.                                                                                              // 2176\n     *                                                                                                                 // 2177\n     * @private                                                                                                        // 2178\n     * @param {*} value The value to clone.                                                                            // 2179\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 2180\n     * @param {Function} [customizer] The function to customize cloning.                                               // 2181\n     * @param {string} [key] The key of `value`.                                                                       // 2182\n     * @param {Object} [object] The parent object of `value`.                                                          // 2183\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.                                  // 2184\n     * @returns {*} Returns the cloned value.                                                                          // 2185\n     */                                                                                                                // 2186\n    function baseClone(value, isDeep, customizer, key, object, stack) {                                                // 2187\n      var result;                                                                                                      // 2188\n      if (customizer) {                                                                                                // 2189\n        result = object ? customizer(value, key, object, stack) : customizer(value);                                   // 2190\n      }                                                                                                                // 2191\n      if (result !== undefined) {                                                                                      // 2192\n        return result;                                                                                                 // 2193\n      }                                                                                                                // 2194\n      if (!isObject(value)) {                                                                                          // 2195\n        return value;                                                                                                  // 2196\n      }                                                                                                                // 2197\n      var isArr = isArray(value);                                                                                      // 2198\n      if (isArr) {                                                                                                     // 2199\n        result = initCloneArray(value);                                                                                // 2200\n        if (!isDeep) {                                                                                                 // 2201\n          return copyArray(value, result);                                                                             // 2202\n        }                                                                                                              // 2203\n      } else {                                                                                                         // 2204\n        var tag = getTag(value),                                                                                       // 2205\n            isFunc = tag == funcTag || tag == genTag;                                                                  // 2206\n                                                                                                                       // 2207\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                               // 2208\n          if (isHostObject(value)) {                                                                                   // 2209\n            return object ? value : {};                                                                                // 2210\n          }                                                                                                            // 2211\n          result = initCloneObject(isFunc ? {} : value);                                                               // 2212\n          if (!isDeep) {                                                                                               // 2213\n            return copySymbols(value, baseAssign(result, value));                                                      // 2214\n          }                                                                                                            // 2215\n        } else {                                                                                                       // 2216\n          return cloneableTags[tag]                                                                                    // 2217\n            ? initCloneByTag(value, tag, isDeep)                                                                       // 2218\n            : (object ? value : {});                                                                                   // 2219\n        }                                                                                                              // 2220\n      }                                                                                                                // 2221\n      // Check for circular references and return its corresponding clone.                                             // 2222\n      stack || (stack = new Stack);                                                                                    // 2223\n      var stacked = stack.get(value);                                                                                  // 2224\n      if (stacked) {                                                                                                   // 2225\n        return stacked;                                                                                                // 2226\n      }                                                                                                                // 2227\n      stack.set(value, result);                                                                                        // 2228\n                                                                                                                       // 2229\n      // Recursively populate clone (susceptible to call stack limits).                                                // 2230\n      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {                                                // 2231\n        assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));                          // 2232\n      });                                                                                                              // 2233\n      return isArr ? result : copySymbols(value, result);                                                              // 2234\n    }                                                                                                                  // 2235\n                                                                                                                       // 2236\n    /**                                                                                                                // 2237\n     * The base implementation of `_.conforms` which doesn't clone `source`.                                           // 2238\n     *                                                                                                                 // 2239\n     * @private                                                                                                        // 2240\n     * @param {Object} source The object of property predicates to conform to.                                         // 2241\n     * @returns {Function} Returns the new function.                                                                   // 2242\n     */                                                                                                                // 2243\n    function baseConforms(source) {                                                                                    // 2244\n      var props = keys(source),                                                                                        // 2245\n          length = props.length;                                                                                       // 2246\n                                                                                                                       // 2247\n      return function(object) {                                                                                        // 2248\n        if (object == null) {                                                                                          // 2249\n          return !length;                                                                                              // 2250\n        }                                                                                                              // 2251\n        var index = length;                                                                                            // 2252\n        while (index--) {                                                                                              // 2253\n          var key = props[index],                                                                                      // 2254\n              predicate = source[key],                                                                                 // 2255\n              value = object[key];                                                                                     // 2256\n                                                                                                                       // 2257\n          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {                                // 2258\n            return false;                                                                                              // 2259\n          }                                                                                                            // 2260\n        }                                                                                                              // 2261\n        return true;                                                                                                   // 2262\n      };                                                                                                               // 2263\n    }                                                                                                                  // 2264\n                                                                                                                       // 2265\n    /**                                                                                                                // 2266\n     * The base implementation of `_.create` without support for assigning                                             // 2267\n     * properties to the created object.                                                                               // 2268\n     *                                                                                                                 // 2269\n     * @private                                                                                                        // 2270\n     * @param {Object} prototype The object to inherit from.                                                           // 2271\n     * @returns {Object} Returns the new object.                                                                       // 2272\n     */                                                                                                                // 2273\n    var baseCreate = (function() {                                                                                     // 2274\n      function object() {}                                                                                             // 2275\n      return function(prototype) {                                                                                     // 2276\n        if (isObject(prototype)) {                                                                                     // 2277\n          object.prototype = prototype;                                                                                // 2278\n          var result = new object;                                                                                     // 2279\n          object.prototype = undefined;                                                                                // 2280\n        }                                                                                                              // 2281\n        return result || {};                                                                                           // 2282\n      };                                                                                                               // 2283\n    }());                                                                                                              // 2284\n                                                                                                                       // 2285\n    /**                                                                                                                // 2286\n     * The base implementation of `_.delay` and `_.defer` which accepts an array                                       // 2287\n     * of `func` arguments.                                                                                            // 2288\n     *                                                                                                                 // 2289\n     * @private                                                                                                        // 2290\n     * @param {Function} func The function to delay.                                                                   // 2291\n     * @param {number} wait The number of milliseconds to delay invocation.                                            // 2292\n     * @param {Object} args The arguments provide to `func`.                                                           // 2293\n     * @returns {number} Returns the timer id.                                                                         // 2294\n     */                                                                                                                // 2295\n    function baseDelay(func, wait, args) {                                                                             // 2296\n      if (typeof func != 'function') {                                                                                 // 2297\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 2298\n      }                                                                                                                // 2299\n      return setTimeout(function() { func.apply(undefined, args); }, wait);                                            // 2300\n    }                                                                                                                  // 2301\n                                                                                                                       // 2302\n    /**                                                                                                                // 2303\n     * The base implementation of methods like `_.difference` without support for                                      // 2304\n     * excluding multiple arrays or iteratee shorthands.                                                               // 2305\n     *                                                                                                                 // 2306\n     * @private                                                                                                        // 2307\n     * @param {Array} array The array to inspect.                                                                      // 2308\n     * @param {Array} values The values to exclude.                                                                    // 2309\n     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 2310\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 2311\n     * @returns {Array} Returns the new array of filtered values.                                                      // 2312\n     */                                                                                                                // 2313\n    function baseDifference(array, values, iteratee, comparator) {                                                     // 2314\n      var index = -1,                                                                                                  // 2315\n          includes = arrayIncludes,                                                                                    // 2316\n          isCommon = true,                                                                                             // 2317\n          length = array.length,                                                                                       // 2318\n          result = [],                                                                                                 // 2319\n          valuesLength = values.length;                                                                                // 2320\n                                                                                                                       // 2321\n      if (!length) {                                                                                                   // 2322\n        return result;                                                                                                 // 2323\n      }                                                                                                                // 2324\n      if (iteratee) {                                                                                                  // 2325\n        values = arrayMap(values, baseUnary(iteratee));                                                                // 2326\n      }                                                                                                                // 2327\n      if (comparator) {                                                                                                // 2328\n        includes = arrayIncludesWith;                                                                                  // 2329\n        isCommon = false;                                                                                              // 2330\n      }                                                                                                                // 2331\n      else if (values.length >= LARGE_ARRAY_SIZE) {                                                                    // 2332\n        includes = cacheHas;                                                                                           // 2333\n        isCommon = false;                                                                                              // 2334\n        values = new SetCache(values);                                                                                 // 2335\n      }                                                                                                                // 2336\n      outer:                                                                                                           // 2337\n      while (++index < length) {                                                                                       // 2338\n        var value = array[index],                                                                                      // 2339\n            computed = iteratee ? iteratee(value) : value;                                                             // 2340\n                                                                                                                       // 2341\n        if (isCommon && computed === computed) {                                                                       // 2342\n          var valuesIndex = valuesLength;                                                                              // 2343\n          while (valuesIndex--) {                                                                                      // 2344\n            if (values[valuesIndex] === computed) {                                                                    // 2345\n              continue outer;                                                                                          // 2346\n            }                                                                                                          // 2347\n          }                                                                                                            // 2348\n          result.push(value);                                                                                          // 2349\n        }                                                                                                              // 2350\n        else if (!includes(values, computed, comparator)) {                                                            // 2351\n          result.push(value);                                                                                          // 2352\n        }                                                                                                              // 2353\n      }                                                                                                                // 2354\n      return result;                                                                                                   // 2355\n    }                                                                                                                  // 2356\n                                                                                                                       // 2357\n    /**                                                                                                                // 2358\n     * The base implementation of `_.forEach` without support for iteratee shorthands.                                 // 2359\n     *                                                                                                                 // 2360\n     * @private                                                                                                        // 2361\n     * @param {Array|Object} collection The collection to iterate over.                                                // 2362\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2363\n     * @returns {Array|Object} Returns `collection`.                                                                   // 2364\n     */                                                                                                                // 2365\n    var baseEach = createBaseEach(baseForOwn);                                                                         // 2366\n                                                                                                                       // 2367\n    /**                                                                                                                // 2368\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.                            // 2369\n     *                                                                                                                 // 2370\n     * @private                                                                                                        // 2371\n     * @param {Array|Object} collection The collection to iterate over.                                                // 2372\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2373\n     * @returns {Array|Object} Returns `collection`.                                                                   // 2374\n     */                                                                                                                // 2375\n    var baseEachRight = createBaseEach(baseForOwnRight, true);                                                         // 2376\n                                                                                                                       // 2377\n    /**                                                                                                                // 2378\n     * The base implementation of `_.every` without support for iteratee shorthands.                                   // 2379\n     *                                                                                                                 // 2380\n     * @private                                                                                                        // 2381\n     * @param {Array|Object} collection The collection to iterate over.                                                // 2382\n     * @param {Function} predicate The function invoked per iteration.                                                 // 2383\n     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`                        // 2384\n     */                                                                                                                // 2385\n    function baseEvery(collection, predicate) {                                                                        // 2386\n      var result = true;                                                                                               // 2387\n      baseEach(collection, function(value, index, collection) {                                                        // 2388\n        result = !!predicate(value, index, collection);                                                                // 2389\n        return result;                                                                                                 // 2390\n      });                                                                                                              // 2391\n      return result;                                                                                                   // 2392\n    }                                                                                                                  // 2393\n                                                                                                                       // 2394\n    /**                                                                                                                // 2395\n     * The base implementation of `_.fill` without an iteratee call guard.                                             // 2396\n     *                                                                                                                 // 2397\n     * @private                                                                                                        // 2398\n     * @param {Array} array The array to fill.                                                                         // 2399\n     * @param {*} value The value to fill `array` with.                                                                // 2400\n     * @param {number} [start=0] The start position.                                                                   // 2401\n     * @param {number} [end=array.length] The end position.                                                            // 2402\n     * @returns {Array} Returns `array`.                                                                               // 2403\n     */                                                                                                                // 2404\n    function baseFill(array, value, start, end) {                                                                      // 2405\n      var length = array.length;                                                                                       // 2406\n                                                                                                                       // 2407\n      start = toInteger(start);                                                                                        // 2408\n      if (start < 0) {                                                                                                 // 2409\n        start = -start > length ? 0 : (length + start);                                                                // 2410\n      }                                                                                                                // 2411\n      end = (end === undefined || end > length) ? length : toInteger(end);                                             // 2412\n      if (end < 0) {                                                                                                   // 2413\n        end += length;                                                                                                 // 2414\n      }                                                                                                                // 2415\n      end = start > end ? 0 : toLength(end);                                                                           // 2416\n      while (start < end) {                                                                                            // 2417\n        array[start++] = value;                                                                                        // 2418\n      }                                                                                                                // 2419\n      return array;                                                                                                    // 2420\n    }                                                                                                                  // 2421\n                                                                                                                       // 2422\n    /**                                                                                                                // 2423\n     * The base implementation of `_.filter` without support for iteratee shorthands.                                  // 2424\n     *                                                                                                                 // 2425\n     * @private                                                                                                        // 2426\n     * @param {Array|Object} collection The collection to iterate over.                                                // 2427\n     * @param {Function} predicate The function invoked per iteration.                                                 // 2428\n     * @returns {Array} Returns the new filtered array.                                                                // 2429\n     */                                                                                                                // 2430\n    function baseFilter(collection, predicate) {                                                                       // 2431\n      var result = [];                                                                                                 // 2432\n      baseEach(collection, function(value, index, collection) {                                                        // 2433\n        if (predicate(value, index, collection)) {                                                                     // 2434\n          result.push(value);                                                                                          // 2435\n        }                                                                                                              // 2436\n      });                                                                                                              // 2437\n      return result;                                                                                                   // 2438\n    }                                                                                                                  // 2439\n                                                                                                                       // 2440\n    /**                                                                                                                // 2441\n     * The base implementation of `_.flatten` with support for restricting flattening.                                 // 2442\n     *                                                                                                                 // 2443\n     * @private                                                                                                        // 2444\n     * @param {Array} array The array to flatten.                                                                      // 2445\n     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 2446\n     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.                                         // 2447\n     * @param {Array} [result=[]] The initial result value.                                                            // 2448\n     * @returns {Array} Returns the new flattened array.                                                               // 2449\n     */                                                                                                                // 2450\n    function baseFlatten(array, isDeep, isStrict, result) {                                                            // 2451\n      result || (result = []);                                                                                         // 2452\n                                                                                                                       // 2453\n      var index = -1,                                                                                                  // 2454\n          length = array.length;                                                                                       // 2455\n                                                                                                                       // 2456\n      while (++index < length) {                                                                                       // 2457\n        var value = array[index];                                                                                      // 2458\n        if (isArrayLikeObject(value) &&                                                                                // 2459\n            (isStrict || isArray(value) || isArguments(value))) {                                                      // 2460\n          if (isDeep) {                                                                                                // 2461\n            // Recursively flatten arrays (susceptible to call stack limits).                                          // 2462\n            baseFlatten(value, isDeep, isStrict, result);                                                              // 2463\n          } else {                                                                                                     // 2464\n            arrayPush(result, value);                                                                                  // 2465\n          }                                                                                                            // 2466\n        } else if (!isStrict) {                                                                                        // 2467\n          result[result.length] = value;                                                                               // 2468\n        }                                                                                                              // 2469\n      }                                                                                                                // 2470\n      return result;                                                                                                   // 2471\n    }                                                                                                                  // 2472\n                                                                                                                       // 2473\n    /**                                                                                                                // 2474\n     * The base implementation of `baseForIn` and `baseForOwn` which iterates                                          // 2475\n     * over `object` properties returned by `keysFunc` invoking `iteratee` for                                         // 2476\n     * each property. Iteratee functions may exit iteration early by explicitly                                        // 2477\n     * returning `false`.                                                                                              // 2478\n     *                                                                                                                 // 2479\n     * @private                                                                                                        // 2480\n     * @param {Object} object The object to iterate over.                                                              // 2481\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2482\n     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2483\n     * @returns {Object} Returns `object`.                                                                             // 2484\n     */                                                                                                                // 2485\n    var baseFor = createBaseFor();                                                                                     // 2486\n                                                                                                                       // 2487\n    /**                                                                                                                // 2488\n     * This function is like `baseFor` except that it iterates over properties                                         // 2489\n     * in the opposite order.                                                                                          // 2490\n     *                                                                                                                 // 2491\n     * @private                                                                                                        // 2492\n     * @param {Object} object The object to iterate over.                                                              // 2493\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2494\n     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2495\n     * @returns {Object} Returns `object`.                                                                             // 2496\n     */                                                                                                                // 2497\n    var baseForRight = createBaseFor(true);                                                                            // 2498\n                                                                                                                       // 2499\n    /**                                                                                                                // 2500\n     * The base implementation of `_.forIn` without support for iteratee shorthands.                                   // 2501\n     *                                                                                                                 // 2502\n     * @private                                                                                                        // 2503\n     * @param {Object} object The object to iterate over.                                                              // 2504\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2505\n     * @returns {Object} Returns `object`.                                                                             // 2506\n     */                                                                                                                // 2507\n    function baseForIn(object, iteratee) {                                                                             // 2508\n      return object == null ? object : baseFor(object, iteratee, keysIn);                                              // 2509\n    }                                                                                                                  // 2510\n                                                                                                                       // 2511\n    /**                                                                                                                // 2512\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.                                  // 2513\n     *                                                                                                                 // 2514\n     * @private                                                                                                        // 2515\n     * @param {Object} object The object to iterate over.                                                              // 2516\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2517\n     * @returns {Object} Returns `object`.                                                                             // 2518\n     */                                                                                                                // 2519\n    function baseForOwn(object, iteratee) {                                                                            // 2520\n      return object && baseFor(object, iteratee, keys);                                                                // 2521\n    }                                                                                                                  // 2522\n                                                                                                                       // 2523\n    /**                                                                                                                // 2524\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.                             // 2525\n     *                                                                                                                 // 2526\n     * @private                                                                                                        // 2527\n     * @param {Object} object The object to iterate over.                                                              // 2528\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2529\n     * @returns {Object} Returns `object`.                                                                             // 2530\n     */                                                                                                                // 2531\n    function baseForOwnRight(object, iteratee) {                                                                       // 2532\n      return object && baseForRight(object, iteratee, keys);                                                           // 2533\n    }                                                                                                                  // 2534\n                                                                                                                       // 2535\n    /**                                                                                                                // 2536\n     * The base implementation of `_.functions` which creates an array of                                              // 2537\n     * `object` function property names filtered from those provided.                                                  // 2538\n     *                                                                                                                 // 2539\n     * @private                                                                                                        // 2540\n     * @param {Object} object The object to inspect.                                                                   // 2541\n     * @param {Array} props The property names to filter.                                                              // 2542\n     * @returns {Array} Returns the new array of filtered property names.                                              // 2543\n     */                                                                                                                // 2544\n    function baseFunctions(object, props) {                                                                            // 2545\n      return arrayFilter(props, function(key) {                                                                        // 2546\n        return isFunction(object[key]);                                                                                // 2547\n      });                                                                                                              // 2548\n    }                                                                                                                  // 2549\n                                                                                                                       // 2550\n    /**                                                                                                                // 2551\n     * The base implementation of `_.get` without support for default values.                                          // 2552\n     *                                                                                                                 // 2553\n     * @private                                                                                                        // 2554\n     * @param {Object} object The object to query.                                                                     // 2555\n     * @param {Array|string} path The path of the property to get.                                                     // 2556\n     * @returns {*} Returns the resolved value.                                                                        // 2557\n     */                                                                                                                // 2558\n    function baseGet(object, path) {                                                                                   // 2559\n      path = isKey(path, object) ? [path + ''] : baseToPath(path);                                                     // 2560\n                                                                                                                       // 2561\n      var index = 0,                                                                                                   // 2562\n          length = path.length;                                                                                        // 2563\n                                                                                                                       // 2564\n      while (object != null && index < length) {                                                                       // 2565\n        object = object[path[index++]];                                                                                // 2566\n      }                                                                                                                // 2567\n      return (index && index == length) ? object : undefined;                                                          // 2568\n    }                                                                                                                  // 2569\n                                                                                                                       // 2570\n    /**                                                                                                                // 2571\n     * The base implementation of `_.has` without support for deep paths.                                              // 2572\n     *                                                                                                                 // 2573\n     * @private                                                                                                        // 2574\n     * @param {Object} object The object to query.                                                                     // 2575\n     * @param {Array|string} key The key to check.                                                                     // 2576\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.                                                // 2577\n     */                                                                                                                // 2578\n    function baseHas(object, key) {                                                                                    // 2579\n      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,                                         // 2580\n      // that are composed entirely of index properties, return `false` for                                            // 2581\n      // `hasOwnProperty` checks of them.                                                                              // 2582\n      return hasOwnProperty.call(object, key) ||                                                                       // 2583\n        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);                               // 2584\n    }                                                                                                                  // 2585\n                                                                                                                       // 2586\n    /**                                                                                                                // 2587\n     * The base implementation of `_.hasIn` without support for deep paths.                                            // 2588\n     *                                                                                                                 // 2589\n     * @private                                                                                                        // 2590\n     * @param {Object} object The object to query.                                                                     // 2591\n     * @param {Array|string} key The key to check.                                                                     // 2592\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.                                                // 2593\n     */                                                                                                                // 2594\n    function baseHasIn(object, key) {                                                                                  // 2595\n      return key in Object(object);                                                                                    // 2596\n    }                                                                                                                  // 2597\n                                                                                                                       // 2598\n    /**                                                                                                                // 2599\n     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.                               // 2600\n     *                                                                                                                 // 2601\n     * @private                                                                                                        // 2602\n     * @param {number} number The number to check.                                                                     // 2603\n     * @param {number} start The start of the range.                                                                   // 2604\n     * @param {number} end The end of the range.                                                                       // 2605\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.                                    // 2606\n     */                                                                                                                // 2607\n    function baseInRange(number, start, end) {                                                                         // 2608\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);                                        // 2609\n    }                                                                                                                  // 2610\n                                                                                                                       // 2611\n    /**                                                                                                                // 2612\n     * The base implementation of methods like `_.intersection`, without support                                       // 2613\n     * for iteratee shorthands, that accepts an array of arrays to inspect.                                            // 2614\n     *                                                                                                                 // 2615\n     * @private                                                                                                        // 2616\n     * @param {Array} arrays The arrays to inspect.                                                                    // 2617\n     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 2618\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 2619\n     * @returns {Array} Returns the new array of shared values.                                                        // 2620\n     */                                                                                                                // 2621\n    function baseIntersection(arrays, iteratee, comparator) {                                                          // 2622\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,                                                   // 2623\n          othLength = arrays.length,                                                                                   // 2624\n          othIndex = othLength,                                                                                        // 2625\n          caches = Array(othLength),                                                                                   // 2626\n          result = [];                                                                                                 // 2627\n                                                                                                                       // 2628\n      while (othIndex--) {                                                                                             // 2629\n        var array = arrays[othIndex];                                                                                  // 2630\n        if (othIndex && iteratee) {                                                                                    // 2631\n          array = arrayMap(array, baseUnary(iteratee));                                                                // 2632\n        }                                                                                                              // 2633\n        caches[othIndex] = !comparator && (iteratee || array.length >= 120)                                            // 2634\n          ? new SetCache(othIndex && array)                                                                            // 2635\n          : undefined;                                                                                                 // 2636\n      }                                                                                                                // 2637\n      array = arrays[0];                                                                                               // 2638\n                                                                                                                       // 2639\n      var index = -1,                                                                                                  // 2640\n          length = array.length,                                                                                       // 2641\n          seen = caches[0];                                                                                            // 2642\n                                                                                                                       // 2643\n      outer:                                                                                                           // 2644\n      while (++index < length) {                                                                                       // 2645\n        var value = array[index],                                                                                      // 2646\n            computed = iteratee ? iteratee(value) : value;                                                             // 2647\n                                                                                                                       // 2648\n        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {                             // 2649\n          var othIndex = othLength;                                                                                    // 2650\n          while (--othIndex) {                                                                                         // 2651\n            var cache = caches[othIndex];                                                                              // 2652\n            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {             // 2653\n              continue outer;                                                                                          // 2654\n            }                                                                                                          // 2655\n          }                                                                                                            // 2656\n          if (seen) {                                                                                                  // 2657\n            seen.push(computed);                                                                                       // 2658\n          }                                                                                                            // 2659\n          result.push(value);                                                                                          // 2660\n        }                                                                                                              // 2661\n      }                                                                                                                // 2662\n      return result;                                                                                                   // 2663\n    }                                                                                                                  // 2664\n                                                                                                                       // 2665\n    /**                                                                                                                // 2666\n     * The base implementation of `_.invoke` without support for individual                                            // 2667\n     * method arguments.                                                                                               // 2668\n     *                                                                                                                 // 2669\n     *                                                                                                                 // 2670\n     * @private                                                                                                        // 2671\n     * @param {Object} object The object to query.                                                                     // 2672\n     * @param {Array|string} path The path of the method to invoke.                                                    // 2673\n     * @param {Array} args The arguments to invoke the method with.                                                    // 2674\n     * @returns {*} Returns the result of the invoked method.                                                          // 2675\n     */                                                                                                                // 2676\n    function baseInvoke(object, path, args) {                                                                          // 2677\n      if (!isKey(path, object)) {                                                                                      // 2678\n        path = baseToPath(path);                                                                                       // 2679\n        object = parent(object, path);                                                                                 // 2680\n        path = last(path);                                                                                             // 2681\n      }                                                                                                                // 2682\n      var func = object == null ? object : object[path];                                                               // 2683\n      return func == null ? undefined : apply(func, object, args);                                                     // 2684\n    }                                                                                                                  // 2685\n                                                                                                                       // 2686\n    /**                                                                                                                // 2687\n     * The base implementation of `_.isEqual` which supports partial comparisons                                       // 2688\n     * and tracks traversed objects.                                                                                   // 2689\n     *                                                                                                                 // 2690\n     * @private                                                                                                        // 2691\n     * @param {*} value The value to compare.                                                                          // 2692\n     * @param {*} other The other value to compare.                                                                    // 2693\n     * @param {Function} [customizer] The function to customize comparisons.                                           // 2694\n     * @param {boolean} [bitmask] The bitmask of comparison flags.                                                     // 2695\n     *  The bitmask may be composed of the following flags:                                                            // 2696\n     *     1 - Unordered comparison                                                                                    // 2697\n     *     2 - Partial comparison                                                                                      // 2698\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.                                           // 2699\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 2700\n     */                                                                                                                // 2701\n    function baseIsEqual(value, other, customizer, bitmask, stack) {                                                   // 2702\n      if (value === other) {                                                                                           // 2703\n        return true;                                                                                                   // 2704\n      }                                                                                                                // 2705\n      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                              // 2706\n        return value !== value && other !== other;                                                                     // 2707\n      }                                                                                                                // 2708\n      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);                                   // 2709\n    }                                                                                                                  // 2710\n                                                                                                                       // 2711\n    /**                                                                                                                // 2712\n     * A specialized version of `baseIsEqual` for arrays and objects which performs                                    // 2713\n     * deep comparisons and tracks traversed objects enabling objects with circular                                    // 2714\n     * references to be compared.                                                                                      // 2715\n     *                                                                                                                 // 2716\n     * @private                                                                                                        // 2717\n     * @param {Object} object The object to compare.                                                                   // 2718\n     * @param {Object} other The other object to compare.                                                              // 2719\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 2720\n     * @param {Function} [customizer] The function to customize comparisons.                                           // 2721\n     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.                  // 2722\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.                                          // 2723\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2724\n     */                                                                                                                // 2725\n    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {                                   // 2726\n      var objIsArr = isArray(object),                                                                                  // 2727\n          othIsArr = isArray(other),                                                                                   // 2728\n          objTag = arrayTag,                                                                                           // 2729\n          othTag = arrayTag;                                                                                           // 2730\n                                                                                                                       // 2731\n      if (!objIsArr) {                                                                                                 // 2732\n        objTag = getTag(object);                                                                                       // 2733\n        if (objTag == argsTag) {                                                                                       // 2734\n          objTag = objectTag;                                                                                          // 2735\n        } else if (objTag != objectTag) {                                                                              // 2736\n          objIsArr = isTypedArray(object);                                                                             // 2737\n        }                                                                                                              // 2738\n      }                                                                                                                // 2739\n      if (!othIsArr) {                                                                                                 // 2740\n        othTag = getTag(other);                                                                                        // 2741\n        if (othTag == argsTag) {                                                                                       // 2742\n          othTag = objectTag;                                                                                          // 2743\n        } else if (othTag != objectTag) {                                                                              // 2744\n          othIsArr = isTypedArray(other);                                                                              // 2745\n        }                                                                                                              // 2746\n      }                                                                                                                // 2747\n      var objIsObj = objTag == objectTag && !isHostObject(object),                                                     // 2748\n          othIsObj = othTag == objectTag && !isHostObject(other),                                                      // 2749\n          isSameTag = objTag == othTag;                                                                                // 2750\n                                                                                                                       // 2751\n      if (isSameTag && !(objIsArr || objIsObj)) {                                                                      // 2752\n        return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);                                      // 2753\n      }                                                                                                                // 2754\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;                                                                  // 2755\n      if (!isPartial) {                                                                                                // 2756\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                     // 2757\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                      // 2758\n                                                                                                                       // 2759\n        if (objIsWrapped || othIsWrapped) {                                                                            // 2760\n          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);\n        }                                                                                                              // 2762\n      }                                                                                                                // 2763\n      if (!isSameTag) {                                                                                                // 2764\n        return false;                                                                                                  // 2765\n      }                                                                                                                // 2766\n      stack || (stack = new Stack);                                                                                    // 2767\n      return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);            // 2768\n    }                                                                                                                  // 2769\n                                                                                                                       // 2770\n    /**                                                                                                                // 2771\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.                                 // 2772\n     *                                                                                                                 // 2773\n     * @private                                                                                                        // 2774\n     * @param {Object} object The object to inspect.                                                                   // 2775\n     * @param {Object} source The object of property values to match.                                                  // 2776\n     * @param {Array} matchData The property names, values, and compare flags to match.                                // 2777\n     * @param {Function} [customizer] The function to customize comparisons.                                           // 2778\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 2779\n     */                                                                                                                // 2780\n    function baseIsMatch(object, source, matchData, customizer) {                                                      // 2781\n      var index = matchData.length,                                                                                    // 2782\n          length = index,                                                                                              // 2783\n          noCustomizer = !customizer;                                                                                  // 2784\n                                                                                                                       // 2785\n      if (object == null) {                                                                                            // 2786\n        return !length;                                                                                                // 2787\n      }                                                                                                                // 2788\n      object = Object(object);                                                                                         // 2789\n      while (index--) {                                                                                                // 2790\n        var data = matchData[index];                                                                                   // 2791\n        if ((noCustomizer && data[2])                                                                                  // 2792\n              ? data[1] !== object[data[0]]                                                                            // 2793\n              : !(data[0] in object)                                                                                   // 2794\n            ) {                                                                                                        // 2795\n          return false;                                                                                                // 2796\n        }                                                                                                              // 2797\n      }                                                                                                                // 2798\n      while (++index < length) {                                                                                       // 2799\n        data = matchData[index];                                                                                       // 2800\n        var key = data[0],                                                                                             // 2801\n            objValue = object[key],                                                                                    // 2802\n            srcValue = data[1];                                                                                        // 2803\n                                                                                                                       // 2804\n        if (noCustomizer && data[2]) {                                                                                 // 2805\n          if (objValue === undefined && !(key in object)) {                                                            // 2806\n            return false;                                                                                              // 2807\n          }                                                                                                            // 2808\n        } else {                                                                                                       // 2809\n          var stack = new Stack,                                                                                       // 2810\n              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;            // 2811\n                                                                                                                       // 2812\n          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {\n            return false;                                                                                              // 2814\n          }                                                                                                            // 2815\n        }                                                                                                              // 2816\n      }                                                                                                                // 2817\n      return true;                                                                                                     // 2818\n    }                                                                                                                  // 2819\n                                                                                                                       // 2820\n    /**                                                                                                                // 2821\n     * The base implementation of `_.iteratee`.                                                                        // 2822\n     *                                                                                                                 // 2823\n     * @private                                                                                                        // 2824\n     * @param {*} [value=_.identity] The value to convert to an iteratee.                                              // 2825\n     * @returns {Function} Returns the iteratee.                                                                       // 2826\n     */                                                                                                                // 2827\n    function baseIteratee(value) {                                                                                     // 2828\n      var type = typeof value;                                                                                         // 2829\n      if (type == 'function') {                                                                                        // 2830\n        return value;                                                                                                  // 2831\n      }                                                                                                                // 2832\n      if (value == null) {                                                                                             // 2833\n        return identity;                                                                                               // 2834\n      }                                                                                                                // 2835\n      if (type == 'object') {                                                                                          // 2836\n        return isArray(value)                                                                                          // 2837\n          ? baseMatchesProperty(value[0], value[1])                                                                    // 2838\n          : baseMatches(value);                                                                                        // 2839\n      }                                                                                                                // 2840\n      return property(value);                                                                                          // 2841\n    }                                                                                                                  // 2842\n                                                                                                                       // 2843\n    /**                                                                                                                // 2844\n     * The base implementation of `_.keys` which doesn't skip the constructor                                          // 2845\n     * property of prototypes or treat sparse arrays as dense.                                                         // 2846\n     *                                                                                                                 // 2847\n     * @private                                                                                                        // 2848\n     * @type Function                                                                                                  // 2849\n     * @param {Object} object The object to query.                                                                     // 2850\n     * @returns {Array} Returns the array of property names.                                                           // 2851\n     */                                                                                                                // 2852\n    function baseKeys(object) {                                                                                        // 2853\n      return nativeKeys(Object(object));                                                                               // 2854\n    }                                                                                                                  // 2855\n                                                                                                                       // 2856\n    /**                                                                                                                // 2857\n     * The base implementation of `_.keysIn` which doesn't skip the constructor                                        // 2858\n     * property of prototypes or treat sparse arrays as dense.                                                         // 2859\n     *                                                                                                                 // 2860\n     * @private                                                                                                        // 2861\n     * @param {Object} object The object to query.                                                                     // 2862\n     * @returns {Array} Returns the array of property names.                                                           // 2863\n     */                                                                                                                // 2864\n    function baseKeysIn(object) {                                                                                      // 2865\n      object = object == null ? object : Object(object);                                                               // 2866\n                                                                                                                       // 2867\n      var result = [];                                                                                                 // 2868\n      for (var key in object) {                                                                                        // 2869\n        result.push(key);                                                                                              // 2870\n      }                                                                                                                // 2871\n      return result;                                                                                                   // 2872\n    }                                                                                                                  // 2873\n                                                                                                                       // 2874\n    // Fallback for IE < 9 with es6-shim.                                                                              // 2875\n    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {                                        // 2876\n      baseKeysIn = function(object) {                                                                                  // 2877\n        return iteratorToArray(enumerate(object));                                                                     // 2878\n      };                                                                                                               // 2879\n    }                                                                                                                  // 2880\n                                                                                                                       // 2881\n    /**                                                                                                                // 2882\n     * The base implementation of `_.map` without support for iteratee shorthands.                                     // 2883\n     *                                                                                                                 // 2884\n     * @private                                                                                                        // 2885\n     * @param {Array|Object} collection The collection to iterate over.                                                // 2886\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2887\n     * @returns {Array} Returns the new mapped array.                                                                  // 2888\n     */                                                                                                                // 2889\n    function baseMap(collection, iteratee) {                                                                           // 2890\n      var index = -1,                                                                                                  // 2891\n          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 2892\n                                                                                                                       // 2893\n      baseEach(collection, function(value, key, collection) {                                                          // 2894\n        result[++index] = iteratee(value, key, collection);                                                            // 2895\n      });                                                                                                              // 2896\n      return result;                                                                                                   // 2897\n    }                                                                                                                  // 2898\n                                                                                                                       // 2899\n    /**                                                                                                                // 2900\n     * The base implementation of `_.matches` which doesn't clone `source`.                                            // 2901\n     *                                                                                                                 // 2902\n     * @private                                                                                                        // 2903\n     * @param {Object} source The object of property values to match.                                                  // 2904\n     * @returns {Function} Returns the new function.                                                                   // 2905\n     */                                                                                                                // 2906\n    function baseMatches(source) {                                                                                     // 2907\n      var matchData = getMatchData(source);                                                                            // 2908\n      if (matchData.length == 1 && matchData[0][2]) {                                                                  // 2909\n        var key = matchData[0][0],                                                                                     // 2910\n            value = matchData[0][1];                                                                                   // 2911\n                                                                                                                       // 2912\n        return function(object) {                                                                                      // 2913\n          if (object == null) {                                                                                        // 2914\n            return false;                                                                                              // 2915\n          }                                                                                                            // 2916\n          return object[key] === value &&                                                                              // 2917\n            (value !== undefined || (key in Object(object)));                                                          // 2918\n        };                                                                                                             // 2919\n      }                                                                                                                // 2920\n      return function(object) {                                                                                        // 2921\n        return object === source || baseIsMatch(object, source, matchData);                                            // 2922\n      };                                                                                                               // 2923\n    }                                                                                                                  // 2924\n                                                                                                                       // 2925\n    /**                                                                                                                // 2926\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.                                  // 2927\n     *                                                                                                                 // 2928\n     * @private                                                                                                        // 2929\n     * @param {string} path The path of the property to get.                                                           // 2930\n     * @param {*} srcValue The value to match.                                                                         // 2931\n     * @returns {Function} Returns the new function.                                                                   // 2932\n     */                                                                                                                // 2933\n    function baseMatchesProperty(path, srcValue) {                                                                     // 2934\n      return function(object) {                                                                                        // 2935\n        var objValue = get(object, path);                                                                              // 2936\n        return (objValue === undefined && objValue === srcValue)                                                       // 2937\n          ? hasIn(object, path)                                                                                        // 2938\n          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);                 // 2939\n      };                                                                                                               // 2940\n    }                                                                                                                  // 2941\n                                                                                                                       // 2942\n    /**                                                                                                                // 2943\n     * The base implementation of `_.merge` without support for multiple sources.                                      // 2944\n     *                                                                                                                 // 2945\n     * @private                                                                                                        // 2946\n     * @param {Object} object The destination object.                                                                  // 2947\n     * @param {Object} source The source object.                                                                       // 2948\n     * @param {Function} [customizer] The function to customize merged values.                                         // 2949\n     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.                           // 2950\n     */                                                                                                                // 2951\n    function baseMerge(object, source, customizer, stack) {                                                            // 2952\n      if (object === source) {                                                                                         // 2953\n        return;                                                                                                        // 2954\n      }                                                                                                                // 2955\n      var props = (isArray(source) || isTypedArray(source)) ? undefined : keysIn(source);                              // 2956\n      arrayEach(props || source, function(srcValue, key) {                                                             // 2957\n        if (props) {                                                                                                   // 2958\n          key = srcValue;                                                                                              // 2959\n          srcValue = source[key];                                                                                      // 2960\n        }                                                                                                              // 2961\n        if (isObject(srcValue)) {                                                                                      // 2962\n          stack || (stack = new Stack);                                                                                // 2963\n          baseMergeDeep(object, source, key, baseMerge, customizer, stack);                                            // 2964\n        }                                                                                                              // 2965\n        else {                                                                                                         // 2966\n          var newValue = customizer ? customizer(object[key], srcValue, (key + ''), object, source, stack) : undefined;\n          if (newValue === undefined) {                                                                                // 2968\n            newValue = srcValue;                                                                                       // 2969\n          }                                                                                                            // 2970\n          assignMergeValue(object, key, newValue);                                                                     // 2971\n        }                                                                                                              // 2972\n      });                                                                                                              // 2973\n    }                                                                                                                  // 2974\n                                                                                                                       // 2975\n    /**                                                                                                                // 2976\n     * A specialized version of `baseMerge` for arrays and objects which performs                                      // 2977\n     * deep merges and tracks traversed objects enabling objects with circular                                         // 2978\n     * references to be merged.                                                                                        // 2979\n     *                                                                                                                 // 2980\n     * @private                                                                                                        // 2981\n     * @param {Object} object The destination object.                                                                  // 2982\n     * @param {Object} source The source object.                                                                       // 2983\n     * @param {string} key The key of the value to merge.                                                              // 2984\n     * @param {Function} mergeFunc The function to merge values.                                                       // 2985\n     * @param {Function} [customizer] The function to customize assigned values.                                       // 2986\n     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.                           // 2987\n     */                                                                                                                // 2988\n    function baseMergeDeep(object, source, key, mergeFunc, customizer, stack) {                                        // 2989\n      var objValue = object[key],                                                                                      // 2990\n          srcValue = source[key],                                                                                      // 2991\n          stacked = stack.get(srcValue) || stack.get(objValue);                                                        // 2992\n                                                                                                                       // 2993\n      if (stacked) {                                                                                                   // 2994\n        assignMergeValue(object, key, stacked);                                                                        // 2995\n        return;                                                                                                        // 2996\n      }                                                                                                                // 2997\n      var newValue = customizer ? customizer(objValue, srcValue, (key + ''), object, source, stack) : undefined,       // 2998\n          isCommon = newValue === undefined;                                                                           // 2999\n                                                                                                                       // 3000\n      if (isCommon) {                                                                                                  // 3001\n        newValue = srcValue;                                                                                           // 3002\n        if (isArray(srcValue) || isTypedArray(srcValue)) {                                                             // 3003\n          newValue = isArray(objValue)                                                                                 // 3004\n            ? objValue                                                                                                 // 3005\n            : ((isArrayLikeObject(objValue)) ? copyArray(objValue) : baseClone(srcValue));                             // 3006\n        }                                                                                                              // 3007\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {                                                   // 3008\n          newValue = isArguments(objValue)                                                                             // 3009\n            ? toPlainObject(objValue)                                                                                  // 3010\n            : (isObject(objValue) ? objValue : baseClone(srcValue));                                                   // 3011\n        }                                                                                                              // 3012\n        else {                                                                                                         // 3013\n          isCommon = isFunction(srcValue);                                                                             // 3014\n        }                                                                                                              // 3015\n      }                                                                                                                // 3016\n      stack.set(srcValue, newValue);                                                                                   // 3017\n                                                                                                                       // 3018\n      if (isCommon) {                                                                                                  // 3019\n        // Recursively merge objects and arrays (susceptible to call stack limits).                                    // 3020\n        mergeFunc(newValue, srcValue, customizer, stack);                                                              // 3021\n      }                                                                                                                // 3022\n      assignMergeValue(object, key, newValue);                                                                         // 3023\n    }                                                                                                                  // 3024\n                                                                                                                       // 3025\n    /**                                                                                                                // 3026\n     * The base implementation of `_.orderBy` without param guards.                                                    // 3027\n     *                                                                                                                 // 3028\n     * @private                                                                                                        // 3029\n     * @param {Array|Object} collection The collection to iterate over.                                                // 3030\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 3031\n     * @param {string[]} orders The sort orders of `iteratees`.                                                        // 3032\n     * @returns {Array} Returns the new sorted array.                                                                  // 3033\n     */                                                                                                                // 3034\n    function baseOrderBy(collection, iteratees, orders) {                                                              // 3035\n      var index = -1,                                                                                                  // 3036\n          toIteratee = getIteratee();                                                                                  // 3037\n                                                                                                                       // 3038\n      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {                               // 3039\n        return toIteratee(iteratee);                                                                                   // 3040\n      });                                                                                                              // 3041\n                                                                                                                       // 3042\n      var result = baseMap(collection, function(value, key, collection) {                                              // 3043\n        var criteria = arrayMap(iteratees, function(iteratee) {                                                        // 3044\n          return iteratee(value);                                                                                      // 3045\n        });                                                                                                            // 3046\n        return { 'criteria': criteria, 'index': ++index, 'value': value };                                             // 3047\n      });                                                                                                              // 3048\n                                                                                                                       // 3049\n      return baseSortBy(result, function(object, other) {                                                              // 3050\n        return compareMultiple(object, other, orders);                                                                 // 3051\n      });                                                                                                              // 3052\n    }                                                                                                                  // 3053\n                                                                                                                       // 3054\n    /**                                                                                                                // 3055\n     * The base implementation of `_.pick` without support for individual                                              // 3056\n     * property names.                                                                                                 // 3057\n     *                                                                                                                 // 3058\n     * @private                                                                                                        // 3059\n     * @param {Object} object The source object.                                                                       // 3060\n     * @param {string[]} props The property names to pick.                                                             // 3061\n     * @returns {Object} Returns the new object.                                                                       // 3062\n     */                                                                                                                // 3063\n    function basePick(object, props) {                                                                                 // 3064\n      object = Object(object);                                                                                         // 3065\n      return arrayReduce(props, function(result, key) {                                                                // 3066\n        if (key in object) {                                                                                           // 3067\n          result[key] = object[key];                                                                                   // 3068\n        }                                                                                                              // 3069\n        return result;                                                                                                 // 3070\n      }, {});                                                                                                          // 3071\n    }                                                                                                                  // 3072\n                                                                                                                       // 3073\n    /**                                                                                                                // 3074\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.                                 // 3075\n     *                                                                                                                 // 3076\n     * @private                                                                                                        // 3077\n     * @param {Object} object The source object.                                                                       // 3078\n     * @param {Function} predicate The function invoked per property.                                                  // 3079\n     * @returns {Object} Returns the new object.                                                                       // 3080\n     */                                                                                                                // 3081\n    function basePickBy(object, predicate) {                                                                           // 3082\n      var result = {};                                                                                                 // 3083\n      baseForIn(object, function(value, key) {                                                                         // 3084\n        if (predicate(value)) {                                                                                        // 3085\n          result[key] = value;                                                                                         // 3086\n        }                                                                                                              // 3087\n      });                                                                                                              // 3088\n      return result;                                                                                                   // 3089\n    }                                                                                                                  // 3090\n                                                                                                                       // 3091\n    /**                                                                                                                // 3092\n     * The base implementation of `_.property` without support for deep paths.                                         // 3093\n     *                                                                                                                 // 3094\n     * @private                                                                                                        // 3095\n     * @param {string} key The key of the property to get.                                                             // 3096\n     * @returns {Function} Returns the new function.                                                                   // 3097\n     */                                                                                                                // 3098\n    function baseProperty(key) {                                                                                       // 3099\n      return function(object) {                                                                                        // 3100\n        return object == null ? undefined : object[key];                                                               // 3101\n      };                                                                                                               // 3102\n    }                                                                                                                  // 3103\n                                                                                                                       // 3104\n    /**                                                                                                                // 3105\n     * A specialized version of `baseProperty` which supports deep paths.                                              // 3106\n     *                                                                                                                 // 3107\n     * @private                                                                                                        // 3108\n     * @param {Array|string} path The path of the property to get.                                                     // 3109\n     * @returns {Function} Returns the new function.                                                                   // 3110\n     */                                                                                                                // 3111\n    function basePropertyDeep(path) {                                                                                  // 3112\n      return function(object) {                                                                                        // 3113\n        return baseGet(object, path);                                                                                  // 3114\n      };                                                                                                               // 3115\n    }                                                                                                                  // 3116\n                                                                                                                       // 3117\n    /**                                                                                                                // 3118\n     * The base implementation of `_.pullAll`.                                                                         // 3119\n     *                                                                                                                 // 3120\n     * @private                                                                                                        // 3121\n     * @param {Array} array The array to modify.                                                                       // 3122\n     * @param {Array} values The values to remove.                                                                     // 3123\n     * @returns {Array} Returns `array`.                                                                               // 3124\n     */                                                                                                                // 3125\n    function basePullAll(array, values) {                                                                              // 3126\n      return basePullAllBy(array, values);                                                                             // 3127\n    }                                                                                                                  // 3128\n                                                                                                                       // 3129\n    /**                                                                                                                // 3130\n     * The base implementation of `_.pullAllBy` without support for iteratee                                           // 3131\n     * shorthands.                                                                                                     // 3132\n     *                                                                                                                 // 3133\n     * @private                                                                                                        // 3134\n     * @param {Array} array The array to modify.                                                                       // 3135\n     * @param {Array} values The values to remove.                                                                     // 3136\n     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 3137\n     * @returns {Array} Returns `array`.                                                                               // 3138\n     */                                                                                                                // 3139\n    function basePullAllBy(array, values, iteratee) {                                                                  // 3140\n      var index = -1,                                                                                                  // 3141\n          length = values.length,                                                                                      // 3142\n          seen = array;                                                                                                // 3143\n                                                                                                                       // 3144\n      if (iteratee) {                                                                                                  // 3145\n        seen = arrayMap(array, function(value) { return iteratee(value); });                                           // 3146\n      }                                                                                                                // 3147\n      while (++index < length) {                                                                                       // 3148\n        var fromIndex = 0,                                                                                             // 3149\n            value = values[index],                                                                                     // 3150\n            computed = iteratee ? iteratee(value) : value;                                                             // 3151\n                                                                                                                       // 3152\n        while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {                                            // 3153\n          if (seen !== array) {                                                                                        // 3154\n            splice.call(seen, fromIndex, 1);                                                                           // 3155\n          }                                                                                                            // 3156\n          splice.call(array, fromIndex, 1);                                                                            // 3157\n        }                                                                                                              // 3158\n      }                                                                                                                // 3159\n      return array;                                                                                                    // 3160\n    }                                                                                                                  // 3161\n                                                                                                                       // 3162\n    /**                                                                                                                // 3163\n     * The base implementation of `_.pullAt` without support for individual                                            // 3164\n     * indexes or capturing the removed elements.                                                                      // 3165\n     *                                                                                                                 // 3166\n     * @private                                                                                                        // 3167\n     * @param {Array} array The array to modify.                                                                       // 3168\n     * @param {number[]} indexes The indexes of elements to remove.                                                    // 3169\n     * @returns {Array} Returns `array`.                                                                               // 3170\n     */                                                                                                                // 3171\n    function basePullAt(array, indexes) {                                                                              // 3172\n      var length = array ? indexes.length : 0,                                                                         // 3173\n          lastIndex = length - 1;                                                                                      // 3174\n                                                                                                                       // 3175\n      while (length--) {                                                                                               // 3176\n        var index = indexes[length];                                                                                   // 3177\n        if (lastIndex == length || index != previous) {                                                                // 3178\n          var previous = index;                                                                                        // 3179\n          if (isIndex(index)) {                                                                                        // 3180\n            splice.call(array, index, 1);                                                                              // 3181\n          }                                                                                                            // 3182\n          else if (!isKey(index, array)) {                                                                             // 3183\n            var path = baseToPath(index),                                                                              // 3184\n                object = parent(array, path);                                                                          // 3185\n                                                                                                                       // 3186\n            if (object != null) {                                                                                      // 3187\n              delete object[last(path)];                                                                               // 3188\n            }                                                                                                          // 3189\n          }                                                                                                            // 3190\n          else {                                                                                                       // 3191\n            delete array[index];                                                                                       // 3192\n          }                                                                                                            // 3193\n        }                                                                                                              // 3194\n      }                                                                                                                // 3195\n      return array;                                                                                                    // 3196\n    }                                                                                                                  // 3197\n                                                                                                                       // 3198\n    /**                                                                                                                // 3199\n     * The base implementation of `_.random` without support for returning                                             // 3200\n     * floating-point numbers.                                                                                         // 3201\n     *                                                                                                                 // 3202\n     * @private                                                                                                        // 3203\n     * @param {number} lower The lower bound.                                                                          // 3204\n     * @param {number} upper The upper bound.                                                                          // 3205\n     * @returns {number} Returns the random number.                                                                    // 3206\n     */                                                                                                                // 3207\n    function baseRandom(lower, upper) {                                                                                // 3208\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));                                                // 3209\n    }                                                                                                                  // 3210\n                                                                                                                       // 3211\n    /**                                                                                                                // 3212\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't                                           // 3213\n     * coerce arguments to numbers.                                                                                    // 3214\n     *                                                                                                                 // 3215\n     * @private                                                                                                        // 3216\n     * @param {number} start The start of the range.                                                                   // 3217\n     * @param {number} end The end of the range.                                                                       // 3218\n     * @param {number} step The value to increment or decrement by.                                                    // 3219\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3220\n     * @returns {Array} Returns the new array of numbers.                                                              // 3221\n     */                                                                                                                // 3222\n    function baseRange(start, end, step, fromRight) {                                                                  // 3223\n      var index = -1,                                                                                                  // 3224\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),                                              // 3225\n          result = Array(length);                                                                                      // 3226\n                                                                                                                       // 3227\n      while (length--) {                                                                                               // 3228\n        result[fromRight ? length : ++index] = start;                                                                  // 3229\n        start += step;                                                                                                 // 3230\n      }                                                                                                                // 3231\n      return result;                                                                                                   // 3232\n    }                                                                                                                  // 3233\n                                                                                                                       // 3234\n    /**                                                                                                                // 3235\n     * The base implementation of `_.set`.                                                                             // 3236\n     *                                                                                                                 // 3237\n     * @private                                                                                                        // 3238\n     * @param {Object} object The object to query.                                                                     // 3239\n     * @param {Array|string} path The path of the property to set.                                                     // 3240\n     * @param {*} value The value to set.                                                                              // 3241\n     * @param {Function} [customizer] The function to customize path creation.                                         // 3242\n     * @returns {Object} Returns `object`.                                                                             // 3243\n     */                                                                                                                // 3244\n    function baseSet(object, path, value, customizer) {                                                                // 3245\n      path = isKey(path, object) ? [path + ''] : baseToPath(path);                                                     // 3246\n                                                                                                                       // 3247\n      var index = -1,                                                                                                  // 3248\n          length = path.length,                                                                                        // 3249\n          lastIndex = length - 1,                                                                                      // 3250\n          nested = object;                                                                                             // 3251\n                                                                                                                       // 3252\n      while (nested != null && ++index < length) {                                                                     // 3253\n        var key = path[index];                                                                                         // 3254\n        if (isObject(nested)) {                                                                                        // 3255\n          var newValue = value;                                                                                        // 3256\n          if (index != lastIndex) {                                                                                    // 3257\n            var objValue = nested[key];                                                                                // 3258\n            newValue = customizer ? customizer(objValue, key, nested) : undefined;                                     // 3259\n            if (newValue === undefined) {                                                                              // 3260\n              newValue = objValue == null ? (isIndex(path[index + 1]) ? [] : {}) : objValue;                           // 3261\n            }                                                                                                          // 3262\n          }                                                                                                            // 3263\n          assignValue(nested, key, newValue);                                                                          // 3264\n        }                                                                                                              // 3265\n        nested = nested[key];                                                                                          // 3266\n      }                                                                                                                // 3267\n      return object;                                                                                                   // 3268\n    }                                                                                                                  // 3269\n                                                                                                                       // 3270\n    /**                                                                                                                // 3271\n     * The base implementation of `setData` without support for hot loop detection.                                    // 3272\n     *                                                                                                                 // 3273\n     * @private                                                                                                        // 3274\n     * @param {Function} func The function to associate metadata with.                                                 // 3275\n     * @param {*} data The metadata.                                                                                   // 3276\n     * @returns {Function} Returns `func`.                                                                             // 3277\n     */                                                                                                                // 3278\n    var baseSetData = !metaMap ? identity : function(func, data) {                                                     // 3279\n      metaMap.set(func, data);                                                                                         // 3280\n      return func;                                                                                                     // 3281\n    };                                                                                                                 // 3282\n                                                                                                                       // 3283\n    /**                                                                                                                // 3284\n     * The base implementation of `_.slice` without an iteratee call guard.                                            // 3285\n     *                                                                                                                 // 3286\n     * @private                                                                                                        // 3287\n     * @param {Array} array The array to slice.                                                                        // 3288\n     * @param {number} [start=0] The start position.                                                                   // 3289\n     * @param {number} [end=array.length] The end position.                                                            // 3290\n     * @returns {Array} Returns the slice of `array`.                                                                  // 3291\n     */                                                                                                                // 3292\n    function baseSlice(array, start, end) {                                                                            // 3293\n      var index = -1,                                                                                                  // 3294\n          length = array.length;                                                                                       // 3295\n                                                                                                                       // 3296\n      if (start < 0) {                                                                                                 // 3297\n        start = -start > length ? 0 : (length + start);                                                                // 3298\n      }                                                                                                                // 3299\n      end = end > length ? length : end;                                                                               // 3300\n      if (end < 0) {                                                                                                   // 3301\n        end += length;                                                                                                 // 3302\n      }                                                                                                                // 3303\n      length = start > end ? 0 : ((end - start) >>> 0);                                                                // 3304\n      start >>>= 0;                                                                                                    // 3305\n                                                                                                                       // 3306\n      var result = Array(length);                                                                                      // 3307\n      while (++index < length) {                                                                                       // 3308\n        result[index] = array[index + start];                                                                          // 3309\n      }                                                                                                                // 3310\n      return result;                                                                                                   // 3311\n    }                                                                                                                  // 3312\n                                                                                                                       // 3313\n    /**                                                                                                                // 3314\n     * The base implementation of `_.some` without support for iteratee shorthands.                                    // 3315\n     *                                                                                                                 // 3316\n     * @private                                                                                                        // 3317\n     * @param {Array|Object} collection The collection to iterate over.                                                // 3318\n     * @param {Function} predicate The function invoked per iteration.                                                 // 3319\n     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.                      // 3320\n     */                                                                                                                // 3321\n    function baseSome(collection, predicate) {                                                                         // 3322\n      var result;                                                                                                      // 3323\n                                                                                                                       // 3324\n      baseEach(collection, function(value, index, collection) {                                                        // 3325\n        result = predicate(value, index, collection);                                                                  // 3326\n        return !result;                                                                                                // 3327\n      });                                                                                                              // 3328\n      return !!result;                                                                                                 // 3329\n    }                                                                                                                  // 3330\n                                                                                                                       // 3331\n    /**                                                                                                                // 3332\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which                                        // 3333\n     * performs a binary search of `array` to determine the index at which `value`                                     // 3334\n     * should be inserted into `array` in order to maintain its sort order.                                            // 3335\n     *                                                                                                                 // 3336\n     * @private                                                                                                        // 3337\n     * @param {Array} array The sorted array to inspect.                                                               // 3338\n     * @param {*} value The value to evaluate.                                                                         // 3339\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 3340\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 3341\n     *  into `array`.                                                                                                  // 3342\n     */                                                                                                                // 3343\n    function baseSortedIndex(array, value, retHighest) {                                                               // 3344\n      var low = 0,                                                                                                     // 3345\n          high = array ? array.length : low;                                                                           // 3346\n                                                                                                                       // 3347\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {                              // 3348\n        while (low < high) {                                                                                           // 3349\n          var mid = (low + high) >>> 1,                                                                                // 3350\n              computed = array[mid];                                                                                   // 3351\n                                                                                                                       // 3352\n          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {                          // 3353\n            low = mid + 1;                                                                                             // 3354\n          } else {                                                                                                     // 3355\n            high = mid;                                                                                                // 3356\n          }                                                                                                            // 3357\n        }                                                                                                              // 3358\n        return high;                                                                                                   // 3359\n      }                                                                                                                // 3360\n      return baseSortedIndexBy(array, value, identity, retHighest);                                                    // 3361\n    }                                                                                                                  // 3362\n                                                                                                                       // 3363\n    /**                                                                                                                // 3364\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`                                          // 3365\n     * which invokes `iteratee` for `value` and each element of `array` to compute                                     // 3366\n     * their sort ranking. The iteratee is invoked with one argument; (value).                                         // 3367\n     *                                                                                                                 // 3368\n     * @private                                                                                                        // 3369\n     * @param {Array} array The sorted array to inspect.                                                               // 3370\n     * @param {*} value The value to evaluate.                                                                         // 3371\n     * @param {Function} iteratee The iteratee invoked per element.                                                    // 3372\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 3373\n     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 3374\n     */                                                                                                                // 3375\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {                                                   // 3376\n      value = iteratee(value);                                                                                         // 3377\n                                                                                                                       // 3378\n      var low = 0,                                                                                                     // 3379\n          high = array ? array.length : 0,                                                                             // 3380\n          valIsNaN = value !== value,                                                                                  // 3381\n          valIsNull = value === null,                                                                                  // 3382\n          valIsUndef = value === undefined;                                                                            // 3383\n                                                                                                                       // 3384\n      while (low < high) {                                                                                             // 3385\n        var mid = nativeFloor((low + high) / 2),                                                                       // 3386\n            computed = iteratee(array[mid]),                                                                           // 3387\n            isDef = computed !== undefined,                                                                            // 3388\n            isReflexive = computed === computed;                                                                       // 3389\n                                                                                                                       // 3390\n        if (valIsNaN) {                                                                                                // 3391\n          var setLow = isReflexive || retHighest;                                                                      // 3392\n        } else if (valIsNull) {                                                                                        // 3393\n          setLow = isReflexive && isDef && (retHighest || computed != null);                                           // 3394\n        } else if (valIsUndef) {                                                                                       // 3395\n          setLow = isReflexive && (retHighest || isDef);                                                               // 3396\n        } else if (computed == null) {                                                                                 // 3397\n          setLow = false;                                                                                              // 3398\n        } else {                                                                                                       // 3399\n          setLow = retHighest ? (computed <= value) : (computed < value);                                              // 3400\n        }                                                                                                              // 3401\n        if (setLow) {                                                                                                  // 3402\n          low = mid + 1;                                                                                               // 3403\n        } else {                                                                                                       // 3404\n          high = mid;                                                                                                  // 3405\n        }                                                                                                              // 3406\n      }                                                                                                                // 3407\n      return nativeMin(high, MAX_ARRAY_INDEX);                                                                         // 3408\n    }                                                                                                                  // 3409\n                                                                                                                       // 3410\n    /**                                                                                                                // 3411\n     * The base implementation of `_.sortedUniq`.                                                                      // 3412\n     *                                                                                                                 // 3413\n     * @private                                                                                                        // 3414\n     * @param {Array} array The array to inspect.                                                                      // 3415\n     * @returns {Array} Returns the new duplicate free array.                                                          // 3416\n     */                                                                                                                // 3417\n    function baseSortedUniq(array) {                                                                                   // 3418\n      return baseSortedUniqBy(array);                                                                                  // 3419\n    }                                                                                                                  // 3420\n                                                                                                                       // 3421\n    /**                                                                                                                // 3422\n     * The base implementation of `_.sortedUniqBy` without support for iteratee                                        // 3423\n     * shorthands.                                                                                                     // 3424\n     *                                                                                                                 // 3425\n     * @private                                                                                                        // 3426\n     * @param {Array} array The array to inspect.                                                                      // 3427\n     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 3428\n     * @returns {Array} Returns the new duplicate free array.                                                          // 3429\n     */                                                                                                                // 3430\n    function baseSortedUniqBy(array, iteratee) {                                                                       // 3431\n      var index = 0,                                                                                                   // 3432\n          length = array.length,                                                                                       // 3433\n          value = array[0],                                                                                            // 3434\n          computed = iteratee ? iteratee(value) : value,                                                               // 3435\n          seen = computed,                                                                                             // 3436\n          resIndex = 0,                                                                                                // 3437\n          result = [value];                                                                                            // 3438\n                                                                                                                       // 3439\n      while (++index < length) {                                                                                       // 3440\n        value = array[index],                                                                                          // 3441\n        computed = iteratee ? iteratee(value) : value;                                                                 // 3442\n                                                                                                                       // 3443\n        if (!eq(computed, seen)) {                                                                                     // 3444\n          seen = computed;                                                                                             // 3445\n          result[++resIndex] = value;                                                                                  // 3446\n        }                                                                                                              // 3447\n      }                                                                                                                // 3448\n      return result;                                                                                                   // 3449\n    }                                                                                                                  // 3450\n                                                                                                                       // 3451\n    /**                                                                                                                // 3452\n     * The base implementation of `_.toPath` which only converts `value` to a                                          // 3453\n     * path if it's not one.                                                                                           // 3454\n     *                                                                                                                 // 3455\n     * @private                                                                                                        // 3456\n     * @param {*} value The value to process.                                                                          // 3457\n     * @returns {Array} Returns the property path array.                                                               // 3458\n     */                                                                                                                // 3459\n    function baseToPath(value) {                                                                                       // 3460\n      return isArray(value) ? value : stringToPath(value);                                                             // 3461\n    }                                                                                                                  // 3462\n                                                                                                                       // 3463\n    /**                                                                                                                // 3464\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.                                  // 3465\n     *                                                                                                                 // 3466\n     * @private                                                                                                        // 3467\n     * @param {Array} array The array to inspect.                                                                      // 3468\n     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 3469\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 3470\n     * @returns {Array} Returns the new duplicate free array.                                                          // 3471\n     */                                                                                                                // 3472\n    function baseUniq(array, iteratee, comparator) {                                                                   // 3473\n      var index = -1,                                                                                                  // 3474\n          includes = arrayIncludes,                                                                                    // 3475\n          length = array.length,                                                                                       // 3476\n          isCommon = true,                                                                                             // 3477\n          result = [],                                                                                                 // 3478\n          seen = result;                                                                                               // 3479\n                                                                                                                       // 3480\n      if (comparator) {                                                                                                // 3481\n        isCommon = false;                                                                                              // 3482\n        includes = arrayIncludesWith;                                                                                  // 3483\n      }                                                                                                                // 3484\n      else if (length >= LARGE_ARRAY_SIZE) {                                                                           // 3485\n        var set = iteratee ? null : createSet(array);                                                                  // 3486\n        if (set) {                                                                                                     // 3487\n          return setToArray(set);                                                                                      // 3488\n        }                                                                                                              // 3489\n        isCommon = false;                                                                                              // 3490\n        includes = cacheHas;                                                                                           // 3491\n        seen = new SetCache;                                                                                           // 3492\n      }                                                                                                                // 3493\n      else {                                                                                                           // 3494\n        seen = iteratee ? [] : result;                                                                                 // 3495\n      }                                                                                                                // 3496\n      outer:                                                                                                           // 3497\n      while (++index < length) {                                                                                       // 3498\n        var value = array[index],                                                                                      // 3499\n            computed = iteratee ? iteratee(value) : value;                                                             // 3500\n                                                                                                                       // 3501\n        if (isCommon && computed === computed) {                                                                       // 3502\n          var seenIndex = seen.length;                                                                                 // 3503\n          while (seenIndex--) {                                                                                        // 3504\n            if (seen[seenIndex] === computed) {                                                                        // 3505\n              continue outer;                                                                                          // 3506\n            }                                                                                                          // 3507\n          }                                                                                                            // 3508\n          if (iteratee) {                                                                                              // 3509\n            seen.push(computed);                                                                                       // 3510\n          }                                                                                                            // 3511\n          result.push(value);                                                                                          // 3512\n        }                                                                                                              // 3513\n        else if (!includes(seen, computed, comparator)) {                                                              // 3514\n          if (seen !== result) {                                                                                       // 3515\n            seen.push(computed);                                                                                       // 3516\n          }                                                                                                            // 3517\n          result.push(value);                                                                                          // 3518\n        }                                                                                                              // 3519\n      }                                                                                                                // 3520\n      return result;                                                                                                   // 3521\n    }                                                                                                                  // 3522\n                                                                                                                       // 3523\n    /**                                                                                                                // 3524\n     * The base implementation of `_.unset`.                                                                           // 3525\n     *                                                                                                                 // 3526\n     * @private                                                                                                        // 3527\n     * @param {Object} object The object to modify.                                                                    // 3528\n     * @param {Array|string} path The path of the property to unset.                                                   // 3529\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.                                     // 3530\n     */                                                                                                                // 3531\n    function baseUnset(object, path) {                                                                                 // 3532\n      path = isKey(path, object) ? [path + ''] : baseToPath(path);                                                     // 3533\n      object = parent(object, path);                                                                                   // 3534\n      var key = last(path);                                                                                            // 3535\n      return (object != null && has(object, key)) ? delete object[key] : true;                                         // 3536\n    }                                                                                                                  // 3537\n                                                                                                                       // 3538\n    /**                                                                                                                // 3539\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`                                         // 3540\n     * without support for iteratee shorthands.                                                                        // 3541\n     *                                                                                                                 // 3542\n     * @private                                                                                                        // 3543\n     * @param {Array} array The array to query.                                                                        // 3544\n     * @param {Function} predicate The function invoked per iteration.                                                 // 3545\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.                                     // 3546\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3547\n     * @returns {Array} Returns the slice of `array`.                                                                  // 3548\n     */                                                                                                                // 3549\n    function baseWhile(array, predicate, isDrop, fromRight) {                                                          // 3550\n      var length = array.length,                                                                                       // 3551\n          index = fromRight ? length : -1;                                                                             // 3552\n                                                                                                                       // 3553\n      while ((fromRight ? index-- : ++index < length) &&                                                               // 3554\n        predicate(array[index], index, array)) {}                                                                      // 3555\n                                                                                                                       // 3556\n      return isDrop                                                                                                    // 3557\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))                                  // 3558\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));                                 // 3559\n    }                                                                                                                  // 3560\n                                                                                                                       // 3561\n    /**                                                                                                                // 3562\n     * The base implementation of `wrapperValue` which returns the result of                                           // 3563\n     * performing a sequence of actions on the unwrapped `value`, where each                                           // 3564\n     * successive action is supplied the return value of the previous.                                                 // 3565\n     *                                                                                                                 // 3566\n     * @private                                                                                                        // 3567\n     * @param {*} value The unwrapped value.                                                                           // 3568\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.                                       // 3569\n     * @returns {*} Returns the resolved value.                                                                        // 3570\n     */                                                                                                                // 3571\n    function baseWrapperValue(value, actions) {                                                                        // 3572\n      var result = value;                                                                                              // 3573\n      if (result instanceof LazyWrapper) {                                                                             // 3574\n        result = result.value();                                                                                       // 3575\n      }                                                                                                                // 3576\n      return arrayReduce(actions, function(result, action) {                                                           // 3577\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));                                    // 3578\n      }, result);                                                                                                      // 3579\n    }                                                                                                                  // 3580\n                                                                                                                       // 3581\n    /**                                                                                                                // 3582\n     * The base implementation of methods like `_.xor`, without support for                                            // 3583\n     * iteratee shorthands, that accepts an array of arrays to inspect.                                                // 3584\n     *                                                                                                                 // 3585\n     * @private                                                                                                        // 3586\n     * @param {Array} arrays The arrays to inspect.                                                                    // 3587\n     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 3588\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 3589\n     * @returns {Array} Returns the new array of values.                                                               // 3590\n     */                                                                                                                // 3591\n    function baseXor(arrays, iteratee, comparator) {                                                                   // 3592\n      var index = -1,                                                                                                  // 3593\n          length = arrays.length;                                                                                      // 3594\n                                                                                                                       // 3595\n      while (++index < length) {                                                                                       // 3596\n        var result = result                                                                                            // 3597\n          ? arrayPush(                                                                                                 // 3598\n              baseDifference(result, arrays[index], iteratee, comparator),                                             // 3599\n              baseDifference(arrays[index], result, iteratee, comparator)                                              // 3600\n            )                                                                                                          // 3601\n          : arrays[index];                                                                                             // 3602\n      }                                                                                                                // 3603\n      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];                                  // 3604\n    }                                                                                                                  // 3605\n                                                                                                                       // 3606\n    /**                                                                                                                // 3607\n     * Creates a clone of `buffer`.                                                                                    // 3608\n     *                                                                                                                 // 3609\n     * @private                                                                                                        // 3610\n     * @param {ArrayBuffer} buffer The array buffer to clone.                                                          // 3611\n     * @returns {ArrayBuffer} Returns the cloned array buffer.                                                         // 3612\n     */                                                                                                                // 3613\n    function cloneBuffer(buffer) {                                                                                     // 3614\n      var Ctor = buffer.constructor,                                                                                   // 3615\n          result = new Ctor(buffer.byteLength),                                                                        // 3616\n          view = new Uint8Array(result);                                                                               // 3617\n                                                                                                                       // 3618\n      view.set(new Uint8Array(buffer));                                                                                // 3619\n      return result;                                                                                                   // 3620\n    }                                                                                                                  // 3621\n                                                                                                                       // 3622\n    /**                                                                                                                // 3623\n     * Creates a clone of `map`.                                                                                       // 3624\n     *                                                                                                                 // 3625\n     * @private                                                                                                        // 3626\n     * @param {Object} map The map to clone.                                                                           // 3627\n     * @returns {Object} Returns the cloned map.                                                                       // 3628\n     */                                                                                                                // 3629\n    function cloneMap(map) {                                                                                           // 3630\n      var Ctor = map.constructor;                                                                                      // 3631\n      return arrayReduce(mapToArray(map), addMapEntry, new Ctor);                                                      // 3632\n    }                                                                                                                  // 3633\n                                                                                                                       // 3634\n    /**                                                                                                                // 3635\n     * Creates a clone of `regexp`.                                                                                    // 3636\n     *                                                                                                                 // 3637\n     * @private                                                                                                        // 3638\n     * @param {Object} regexp The regexp to clone.                                                                     // 3639\n     * @returns {Object} Returns the cloned regexp.                                                                    // 3640\n     */                                                                                                                // 3641\n    function cloneRegExp(regexp) {                                                                                     // 3642\n      var Ctor = regexp.constructor,                                                                                   // 3643\n          result = new Ctor(regexp.source, reFlags.exec(regexp));                                                      // 3644\n                                                                                                                       // 3645\n      result.lastIndex = regexp.lastIndex;                                                                             // 3646\n      return result;                                                                                                   // 3647\n    }                                                                                                                  // 3648\n                                                                                                                       // 3649\n    /**                                                                                                                // 3650\n     * Creates a clone of `set`.                                                                                       // 3651\n     *                                                                                                                 // 3652\n     * @private                                                                                                        // 3653\n     * @param {Object} set The set to clone.                                                                           // 3654\n     * @returns {Object} Returns the cloned set.                                                                       // 3655\n     */                                                                                                                // 3656\n    function cloneSet(set) {                                                                                           // 3657\n      var Ctor = set.constructor;                                                                                      // 3658\n      return arrayReduce(setToArray(set), addSetEntry, new Ctor);                                                      // 3659\n    }                                                                                                                  // 3660\n                                                                                                                       // 3661\n    /**                                                                                                                // 3662\n     * Creates a clone of the `symbol` object.                                                                         // 3663\n     *                                                                                                                 // 3664\n     * @private                                                                                                        // 3665\n     * @param {Object} symbol The symbol object to clone.                                                              // 3666\n     * @returns {Object} Returns the cloned symbol object.                                                             // 3667\n     */                                                                                                                // 3668\n    function cloneSymbol(symbol) {                                                                                     // 3669\n      return _Symbol ? Object(symbolValueOf.call(symbol)) : {};                                                        // 3670\n    }                                                                                                                  // 3671\n                                                                                                                       // 3672\n    /**                                                                                                                // 3673\n     * Creates a clone of `typedArray`.                                                                                // 3674\n     *                                                                                                                 // 3675\n     * @private                                                                                                        // 3676\n     * @param {Object} typedArray The typed array to clone.                                                            // 3677\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 3678\n     * @returns {Object} Returns the cloned typed array.                                                               // 3679\n     */                                                                                                                // 3680\n    function cloneTypedArray(typedArray, isDeep) {                                                                     // 3681\n      var buffer = typedArray.buffer,                                                                                  // 3682\n          Ctor = typedArray.constructor;                                                                               // 3683\n                                                                                                                       // 3684\n      return new Ctor(isDeep ? cloneBuffer(buffer) : buffer, typedArray.byteOffset, typedArray.length);                // 3685\n    }                                                                                                                  // 3686\n                                                                                                                       // 3687\n    /**                                                                                                                // 3688\n     * Creates an array that is the composition of partially applied arguments,                                        // 3689\n     * placeholders, and provided arguments into a single array of arguments.                                          // 3690\n     *                                                                                                                 // 3691\n     * @private                                                                                                        // 3692\n     * @param {Array|Object} args The provided arguments.                                                              // 3693\n     * @param {Array} partials The arguments to prepend to those provided.                                             // 3694\n     * @param {Array} holders The `partials` placeholder indexes.                                                      // 3695\n     * @returns {Array} Returns the new array of composed arguments.                                                   // 3696\n     */                                                                                                                // 3697\n    function composeArgs(args, partials, holders) {                                                                    // 3698\n      var holdersLength = holders.length,                                                                              // 3699\n          argsIndex = -1,                                                                                              // 3700\n          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 3701\n          leftIndex = -1,                                                                                              // 3702\n          leftLength = partials.length,                                                                                // 3703\n          result = Array(leftLength + argsLength);                                                                     // 3704\n                                                                                                                       // 3705\n      while (++leftIndex < leftLength) {                                                                               // 3706\n        result[leftIndex] = partials[leftIndex];                                                                       // 3707\n      }                                                                                                                // 3708\n      while (++argsIndex < holdersLength) {                                                                            // 3709\n        result[holders[argsIndex]] = args[argsIndex];                                                                  // 3710\n      }                                                                                                                // 3711\n      while (argsLength--) {                                                                                           // 3712\n        result[leftIndex++] = args[argsIndex++];                                                                       // 3713\n      }                                                                                                                // 3714\n      return result;                                                                                                   // 3715\n    }                                                                                                                  // 3716\n                                                                                                                       // 3717\n    /**                                                                                                                // 3718\n     * This function is like `composeArgs` except that the arguments composition                                       // 3719\n     * is tailored for `_.partialRight`.                                                                               // 3720\n     *                                                                                                                 // 3721\n     * @private                                                                                                        // 3722\n     * @param {Array|Object} args The provided arguments.                                                              // 3723\n     * @param {Array} partials The arguments to append to those provided.                                              // 3724\n     * @param {Array} holders The `partials` placeholder indexes.                                                      // 3725\n     * @returns {Array} Returns the new array of composed arguments.                                                   // 3726\n     */                                                                                                                // 3727\n    function composeArgsRight(args, partials, holders) {                                                               // 3728\n      var holdersIndex = -1,                                                                                           // 3729\n          holdersLength = holders.length,                                                                              // 3730\n          argsIndex = -1,                                                                                              // 3731\n          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 3732\n          rightIndex = -1,                                                                                             // 3733\n          rightLength = partials.length,                                                                               // 3734\n          result = Array(argsLength + rightLength);                                                                    // 3735\n                                                                                                                       // 3736\n      while (++argsIndex < argsLength) {                                                                               // 3737\n        result[argsIndex] = args[argsIndex];                                                                           // 3738\n      }                                                                                                                // 3739\n      var offset = argsIndex;                                                                                          // 3740\n      while (++rightIndex < rightLength) {                                                                             // 3741\n        result[offset + rightIndex] = partials[rightIndex];                                                            // 3742\n      }                                                                                                                // 3743\n      while (++holdersIndex < holdersLength) {                                                                         // 3744\n        result[offset + holders[holdersIndex]] = args[argsIndex++];                                                    // 3745\n      }                                                                                                                // 3746\n      return result;                                                                                                   // 3747\n    }                                                                                                                  // 3748\n                                                                                                                       // 3749\n    /**                                                                                                                // 3750\n     * Copies the values of `source` to `array`.                                                                       // 3751\n     *                                                                                                                 // 3752\n     * @private                                                                                                        // 3753\n     * @param {Array} source The array to copy values from.                                                            // 3754\n     * @param {Array} [array=[]] The array to copy values to.                                                          // 3755\n     * @returns {Array} Returns `array`.                                                                               // 3756\n     */                                                                                                                // 3757\n    function copyArray(source, array) {                                                                                // 3758\n      var index = -1,                                                                                                  // 3759\n          length = source.length;                                                                                      // 3760\n                                                                                                                       // 3761\n      array || (array = Array(length));                                                                                // 3762\n      while (++index < length) {                                                                                       // 3763\n        array[index] = source[index];                                                                                  // 3764\n      }                                                                                                                // 3765\n      return array;                                                                                                    // 3766\n    }                                                                                                                  // 3767\n                                                                                                                       // 3768\n    /**                                                                                                                // 3769\n     * Copies properties of `source` to `object`.                                                                      // 3770\n     *                                                                                                                 // 3771\n     * @private                                                                                                        // 3772\n     * @param {Object} source The object to copy properties from.                                                      // 3773\n     * @param {Array} props The property names to copy.                                                                // 3774\n     * @param {Object} [object={}] The object to copy properties to.                                                   // 3775\n     * @returns {Object} Returns `object`.                                                                             // 3776\n     */                                                                                                                // 3777\n    function copyObject(source, props, object) {                                                                       // 3778\n      return copyObjectWith(source, props, object);                                                                    // 3779\n    }                                                                                                                  // 3780\n                                                                                                                       // 3781\n    /**                                                                                                                // 3782\n     * This function is like `copyObject` except that it accepts a function to                                         // 3783\n     * customize copied values.                                                                                        // 3784\n     *                                                                                                                 // 3785\n     * @private                                                                                                        // 3786\n     * @param {Object} source The object to copy properties from.                                                      // 3787\n     * @param {Array} props The property names to copy.                                                                // 3788\n     * @param {Object} [object={}] The object to copy properties to.                                                   // 3789\n     * @param {Function} [customizer] The function to customize copied values.                                         // 3790\n     * @returns {Object} Returns `object`.                                                                             // 3791\n     */                                                                                                                // 3792\n    function copyObjectWith(source, props, object, customizer) {                                                       // 3793\n      object || (object = {});                                                                                         // 3794\n                                                                                                                       // 3795\n      var index = -1,                                                                                                  // 3796\n          length = props.length;                                                                                       // 3797\n                                                                                                                       // 3798\n      while (++index < length) {                                                                                       // 3799\n        var key = props[index],                                                                                        // 3800\n            newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];           // 3801\n                                                                                                                       // 3802\n        assignValue(object, key, newValue);                                                                            // 3803\n      }                                                                                                                // 3804\n      return object;                                                                                                   // 3805\n    }                                                                                                                  // 3806\n                                                                                                                       // 3807\n    /**                                                                                                                // 3808\n     * Copies own symbol properties of `source` to `object`.                                                           // 3809\n     *                                                                                                                 // 3810\n     * @private                                                                                                        // 3811\n     * @param {Object} source The object to copy symbols from.                                                         // 3812\n     * @param {Object} [object={}] The object to copy symbols to.                                                      // 3813\n     * @returns {Object} Returns `object`.                                                                             // 3814\n     */                                                                                                                // 3815\n    function copySymbols(source, object) {                                                                             // 3816\n      return copyObject(source, getSymbols(source), object);                                                           // 3817\n    }                                                                                                                  // 3818\n                                                                                                                       // 3819\n    /**                                                                                                                // 3820\n     * Creates a function like `_.groupBy`.                                                                            // 3821\n     *                                                                                                                 // 3822\n     * @private                                                                                                        // 3823\n     * @param {Function} setter The function to set keys and values of the accumulator object.                         // 3824\n     * @param {Function} [initializer] The function to initialize the accumulator object.                              // 3825\n     * @returns {Function} Returns the new aggregator function.                                                        // 3826\n     */                                                                                                                // 3827\n    function createAggregator(setter, initializer) {                                                                   // 3828\n      return function(collection, iteratee) {                                                                          // 3829\n        var result = initializer ? initializer() : {};                                                                 // 3830\n        iteratee = getIteratee(iteratee);                                                                              // 3831\n                                                                                                                       // 3832\n        if (isArray(collection)) {                                                                                     // 3833\n          var index = -1,                                                                                              // 3834\n              length = collection.length;                                                                              // 3835\n                                                                                                                       // 3836\n          while (++index < length) {                                                                                   // 3837\n            var value = collection[index];                                                                             // 3838\n            setter(result, value, iteratee(value), collection);                                                        // 3839\n          }                                                                                                            // 3840\n        } else {                                                                                                       // 3841\n          baseEach(collection, function(value, key, collection) {                                                      // 3842\n            setter(result, value, iteratee(value), collection);                                                        // 3843\n          });                                                                                                          // 3844\n        }                                                                                                              // 3845\n        return result;                                                                                                 // 3846\n      };                                                                                                               // 3847\n    }                                                                                                                  // 3848\n                                                                                                                       // 3849\n    /**                                                                                                                // 3850\n     * Creates a function like `_.assign`.                                                                             // 3851\n     *                                                                                                                 // 3852\n     * @private                                                                                                        // 3853\n     * @param {Function} assigner The function to assign values.                                                       // 3854\n     * @returns {Function} Returns the new assigner function.                                                          // 3855\n     */                                                                                                                // 3856\n    function createAssigner(assigner) {                                                                                // 3857\n      return rest(function(object, sources) {                                                                          // 3858\n        var index = -1,                                                                                                // 3859\n            length = sources.length,                                                                                   // 3860\n            customizer = length > 1 ? sources[length - 1] : undefined,                                                 // 3861\n            guard = length > 2 ? sources[2] : undefined;                                                               // 3862\n                                                                                                                       // 3863\n        customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;                             // 3864\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                  // 3865\n          customizer = length < 3 ? undefined : customizer;                                                            // 3866\n          length = 1;                                                                                                  // 3867\n        }                                                                                                              // 3868\n        object = Object(object);                                                                                       // 3869\n        while (++index < length) {                                                                                     // 3870\n          var source = sources[index];                                                                                 // 3871\n          if (source) {                                                                                                // 3872\n            assigner(object, source, customizer);                                                                      // 3873\n          }                                                                                                            // 3874\n        }                                                                                                              // 3875\n        return object;                                                                                                 // 3876\n      });                                                                                                              // 3877\n    }                                                                                                                  // 3878\n                                                                                                                       // 3879\n    /**                                                                                                                // 3880\n     * Creates a `baseEach` or `baseEachRight` function.                                                               // 3881\n     *                                                                                                                 // 3882\n     * @private                                                                                                        // 3883\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3884\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3885\n     * @returns {Function} Returns the new base function.                                                              // 3886\n     */                                                                                                                // 3887\n    function createBaseEach(eachFunc, fromRight) {                                                                     // 3888\n      return function(collection, iteratee) {                                                                          // 3889\n        if (collection == null) {                                                                                      // 3890\n          return collection;                                                                                           // 3891\n        }                                                                                                              // 3892\n        if (!isArrayLike(collection)) {                                                                                // 3893\n          return eachFunc(collection, iteratee);                                                                       // 3894\n        }                                                                                                              // 3895\n        var length = collection.length,                                                                                // 3896\n            index = fromRight ? length : -1,                                                                           // 3897\n            iterable = Object(collection);                                                                             // 3898\n                                                                                                                       // 3899\n        while ((fromRight ? index-- : ++index < length)) {                                                             // 3900\n          if (iteratee(iterable[index], index, iterable) === false) {                                                  // 3901\n            break;                                                                                                     // 3902\n          }                                                                                                            // 3903\n        }                                                                                                              // 3904\n        return collection;                                                                                             // 3905\n      };                                                                                                               // 3906\n    }                                                                                                                  // 3907\n                                                                                                                       // 3908\n    /**                                                                                                                // 3909\n     * Creates a base function for methods like `_.forIn`.                                                             // 3910\n     *                                                                                                                 // 3911\n     * @private                                                                                                        // 3912\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3913\n     * @returns {Function} Returns the new base function.                                                              // 3914\n     */                                                                                                                // 3915\n    function createBaseFor(fromRight) {                                                                                // 3916\n      return function(object, iteratee, keysFunc) {                                                                    // 3917\n        var index = -1,                                                                                                // 3918\n            iterable = Object(object),                                                                                 // 3919\n            props = keysFunc(object),                                                                                  // 3920\n            length = props.length;                                                                                     // 3921\n                                                                                                                       // 3922\n        while (length--) {                                                                                             // 3923\n          var key = props[fromRight ? length : ++index];                                                               // 3924\n          if (iteratee(iterable[key], key, iterable) === false) {                                                      // 3925\n            break;                                                                                                     // 3926\n          }                                                                                                            // 3927\n        }                                                                                                              // 3928\n        return object;                                                                                                 // 3929\n      };                                                                                                               // 3930\n    }                                                                                                                  // 3931\n                                                                                                                       // 3932\n    /**                                                                                                                // 3933\n     * Creates a function that wraps `func` to invoke it with the optional `this`                                      // 3934\n     * binding of `thisArg`.                                                                                           // 3935\n     *                                                                                                                 // 3936\n     * @private                                                                                                        // 3937\n     * @param {Function} func The function to wrap.                                                                    // 3938\n     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 3939\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3940\n     * @returns {Function} Returns the new wrapped function.                                                           // 3941\n     */                                                                                                                // 3942\n    function createBaseWrapper(func, bitmask, thisArg) {                                                               // 3943\n      var isBind = bitmask & BIND_FLAG,                                                                                // 3944\n          Ctor = createCtorWrapper(func);                                                                              // 3945\n                                                                                                                       // 3946\n      function wrapper() {                                                                                             // 3947\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3948\n        return fn.apply(isBind ? thisArg : this, arguments);                                                           // 3949\n      }                                                                                                                // 3950\n      return wrapper;                                                                                                  // 3951\n    }                                                                                                                  // 3952\n                                                                                                                       // 3953\n    /**                                                                                                                // 3954\n     * Creates a function like `_.lowerFirst`.                                                                         // 3955\n     *                                                                                                                 // 3956\n     * @private                                                                                                        // 3957\n     * @param {string} methodName The name of the `String` case method to use.                                         // 3958\n     * @returns {Function} Returns the new function.                                                                   // 3959\n     */                                                                                                                // 3960\n    function createCaseFirst(methodName) {                                                                             // 3961\n      return function(string) {                                                                                        // 3962\n        string = toString(string);                                                                                     // 3963\n                                                                                                                       // 3964\n        var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined,                          // 3965\n            chr = strSymbols ? strSymbols[0] : string.charAt(0),                                                       // 3966\n            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);                                    // 3967\n                                                                                                                       // 3968\n        return chr[methodName]() + trailing;                                                                           // 3969\n      };                                                                                                               // 3970\n    }                                                                                                                  // 3971\n                                                                                                                       // 3972\n    /**                                                                                                                // 3973\n     * Creates a function like `_.camelCase`.                                                                          // 3974\n     *                                                                                                                 // 3975\n     * @private                                                                                                        // 3976\n     * @param {Function} callback The function to combine each word.                                                   // 3977\n     * @returns {Function} Returns the new compounder function.                                                        // 3978\n     */                                                                                                                // 3979\n    function createCompounder(callback) {                                                                              // 3980\n      return function(string) {                                                                                        // 3981\n        return arrayReduce(words(deburr(string)), callback, '');                                                       // 3982\n      };                                                                                                               // 3983\n    }                                                                                                                  // 3984\n                                                                                                                       // 3985\n    /**                                                                                                                // 3986\n     * Creates a function that produces an instance of `Ctor` regardless of                                            // 3987\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.                                   // 3988\n     *                                                                                                                 // 3989\n     * @private                                                                                                        // 3990\n     * @param {Function} Ctor The constructor to wrap.                                                                 // 3991\n     * @returns {Function} Returns the new wrapped function.                                                           // 3992\n     */                                                                                                                // 3993\n    function createCtorWrapper(Ctor) {                                                                                 // 3994\n      return function() {                                                                                              // 3995\n        // Use a `switch` statement to work with class constructors.                                                   // 3996\n        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.                                                                                           // 3998\n        var args = arguments;                                                                                          // 3999\n        switch (args.length) {                                                                                         // 4000\n          case 0: return new Ctor;                                                                                     // 4001\n          case 1: return new Ctor(args[0]);                                                                            // 4002\n          case 2: return new Ctor(args[0], args[1]);                                                                   // 4003\n          case 3: return new Ctor(args[0], args[1], args[2]);                                                          // 4004\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);                                                 // 4005\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);                                        // 4006\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);                               // 4007\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);                      // 4008\n        }                                                                                                              // 4009\n        var thisBinding = baseCreate(Ctor.prototype),                                                                  // 4010\n            result = Ctor.apply(thisBinding, args);                                                                    // 4011\n                                                                                                                       // 4012\n        // Mimic the constructor's `return` behavior.                                                                  // 4013\n        // See https://es5.github.io/#x13.2.2 for more details.                                                        // 4014\n        return isObject(result) ? result : thisBinding;                                                                // 4015\n      };                                                                                                               // 4016\n    }                                                                                                                  // 4017\n                                                                                                                       // 4018\n    /**                                                                                                                // 4019\n     * Creates a function that wraps `func` to enable currying.                                                        // 4020\n     *                                                                                                                 // 4021\n     * @private                                                                                                        // 4022\n     * @param {Function} func The function to wrap.                                                                    // 4023\n     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 4024\n     * @param {number} arity The arity of `func`.                                                                      // 4025\n     * @returns {Function} Returns the new wrapped function.                                                           // 4026\n     */                                                                                                                // 4027\n    function createCurryWrapper(func, bitmask, arity) {                                                                // 4028\n      var Ctor = createCtorWrapper(func);                                                                              // 4029\n                                                                                                                       // 4030\n      function wrapper() {                                                                                             // 4031\n        var length = arguments.length,                                                                                 // 4032\n            index = length,                                                                                            // 4033\n            args = Array(length),                                                                                      // 4034\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,                                     // 4035\n            placeholder = wrapper.placeholder;                                                                         // 4036\n                                                                                                                       // 4037\n        while (index--) {                                                                                              // 4038\n          args[index] = arguments[index];                                                                              // 4039\n        }                                                                                                              // 4040\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)                      // 4041\n          ? []                                                                                                         // 4042\n          : replaceHolders(args, placeholder);                                                                         // 4043\n                                                                                                                       // 4044\n        length -= holders.length;                                                                                      // 4045\n        return length < arity                                                                                          // 4046\n          ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)\n          : apply(fn, this, args);                                                                                     // 4048\n      }                                                                                                                // 4049\n      return wrapper;                                                                                                  // 4050\n    }                                                                                                                  // 4051\n                                                                                                                       // 4052\n    /**                                                                                                                // 4053\n     * Creates a `_.flow` or `_.flowRight` function.                                                                   // 4054\n     *                                                                                                                 // 4055\n     * @private                                                                                                        // 4056\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 4057\n     * @returns {Function} Returns the new flow function.                                                              // 4058\n     */                                                                                                                // 4059\n    function createFlow(fromRight) {                                                                                   // 4060\n      return rest(function(funcs) {                                                                                    // 4061\n        funcs = baseFlatten(funcs);                                                                                    // 4062\n                                                                                                                       // 4063\n        var length = funcs.length,                                                                                     // 4064\n            index = length,                                                                                            // 4065\n            prereq = LodashWrapper.prototype.thru;                                                                     // 4066\n                                                                                                                       // 4067\n        if (fromRight) {                                                                                               // 4068\n          funcs.reverse();                                                                                             // 4069\n        }                                                                                                              // 4070\n        while (index--) {                                                                                              // 4071\n          var func = funcs[index];                                                                                     // 4072\n          if (typeof func != 'function') {                                                                             // 4073\n            throw new TypeError(FUNC_ERROR_TEXT);                                                                      // 4074\n          }                                                                                                            // 4075\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {                                                  // 4076\n            var wrapper = new LodashWrapper([], true);                                                                 // 4077\n          }                                                                                                            // 4078\n        }                                                                                                              // 4079\n        index = wrapper ? index : length;                                                                              // 4080\n        while (++index < length) {                                                                                     // 4081\n          func = funcs[index];                                                                                         // 4082\n                                                                                                                       // 4083\n          var funcName = getFuncName(func),                                                                            // 4084\n              data = funcName == 'wrapper' ? getData(func) : undefined;                                                // 4085\n                                                                                                                       // 4086\n          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);                                           // 4088\n          } else {                                                                                                     // 4089\n            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);               // 4090\n          }                                                                                                            // 4091\n        }                                                                                                              // 4092\n        return function() {                                                                                            // 4093\n          var args = arguments,                                                                                        // 4094\n              value = args[0];                                                                                         // 4095\n                                                                                                                       // 4096\n          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {                     // 4097\n            return wrapper.plant(value).value();                                                                       // 4098\n          }                                                                                                            // 4099\n          var index = 0,                                                                                               // 4100\n              result = length ? funcs[index].apply(this, args) : value;                                                // 4101\n                                                                                                                       // 4102\n          while (++index < length) {                                                                                   // 4103\n            result = funcs[index].call(this, result);                                                                  // 4104\n          }                                                                                                            // 4105\n          return result;                                                                                               // 4106\n        };                                                                                                             // 4107\n      });                                                                                                              // 4108\n    }                                                                                                                  // 4109\n                                                                                                                       // 4110\n    /**                                                                                                                // 4111\n     * Creates a function that wraps `func` to invoke it with optional `this`                                          // 4112\n     * binding of `thisArg`, partial application, and currying.                                                        // 4113\n     *                                                                                                                 // 4114\n     * @private                                                                                                        // 4115\n     * @param {Function|string} func The function or method name to wrap.                                              // 4116\n     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 4117\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 4118\n     * @param {Array} [partials] The arguments to prepend to those provided to the new function.                       // 4119\n     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 4120\n     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.                   // 4121\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.                                          // 4122\n     * @param {Array} [argPos] The argument positions of the new function.                                             // 4123\n     * @param {number} [ary] The arity cap of `func`.                                                                  // 4124\n     * @param {number} [arity] The arity of `func`.                                                                    // 4125\n     * @returns {Function} Returns the new wrapped function.                                                           // 4126\n     */                                                                                                                // 4127\n    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & ARY_FLAG,                                                                                  // 4129\n          isBind = bitmask & BIND_FLAG,                                                                                // 4130\n          isBindKey = bitmask & BIND_KEY_FLAG,                                                                         // 4131\n          isCurry = bitmask & CURRY_FLAG,                                                                              // 4132\n          isCurryRight = bitmask & CURRY_RIGHT_FLAG,                                                                   // 4133\n          isFlip = bitmask & FLIP_FLAG,                                                                                // 4134\n          Ctor = isBindKey ? undefined : createCtorWrapper(func);                                                      // 4135\n                                                                                                                       // 4136\n      function wrapper() {                                                                                             // 4137\n        var length = arguments.length,                                                                                 // 4138\n            index = length,                                                                                            // 4139\n            args = Array(length);                                                                                      // 4140\n                                                                                                                       // 4141\n        while (index--) {                                                                                              // 4142\n          args[index] = arguments[index];                                                                              // 4143\n        }                                                                                                              // 4144\n        if (partials) {                                                                                                // 4145\n          args = composeArgs(args, partials, holders);                                                                 // 4146\n        }                                                                                                              // 4147\n        if (partialsRight) {                                                                                           // 4148\n          args = composeArgsRight(args, partialsRight, holdersRight);                                                  // 4149\n        }                                                                                                              // 4150\n        if (isCurry || isCurryRight) {                                                                                 // 4151\n          var placeholder = wrapper.placeholder,                                                                       // 4152\n              argsHolders = replaceHolders(args, placeholder);                                                         // 4153\n                                                                                                                       // 4154\n          length -= argsHolders.length;                                                                                // 4155\n          if (length < arity) {                                                                                        // 4156\n            return createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, thisArg, args, argsHolders, argPos, ary, arity - length);\n          }                                                                                                            // 4158\n        }                                                                                                              // 4159\n        var thisBinding = isBind ? thisArg : this,                                                                     // 4160\n            fn = isBindKey ? thisBinding[func] : func;                                                                 // 4161\n                                                                                                                       // 4162\n        if (argPos) {                                                                                                  // 4163\n          args = reorder(args, argPos);                                                                                // 4164\n        } else if (isFlip && args.length > 1) {                                                                        // 4165\n          args.reverse();                                                                                              // 4166\n        }                                                                                                              // 4167\n        if (isAry && ary < args.length) {                                                                              // 4168\n          args.length = ary;                                                                                           // 4169\n        }                                                                                                              // 4170\n        if (this && this !== root && this instanceof wrapper) {                                                        // 4171\n          fn = Ctor || createCtorWrapper(fn);                                                                          // 4172\n        }                                                                                                              // 4173\n        return fn.apply(thisBinding, args);                                                                            // 4174\n      }                                                                                                                // 4175\n      return wrapper;                                                                                                  // 4176\n    }                                                                                                                  // 4177\n                                                                                                                       // 4178\n    /**                                                                                                                // 4179\n     * Creates a function like `_.over`.                                                                               // 4180\n     *                                                                                                                 // 4181\n     * @private                                                                                                        // 4182\n     * @param {Function} arrayFunc The function to iterate over iteratees.                                             // 4183\n     * @returns {Function} Returns the new invoker function.                                                           // 4184\n     */                                                                                                                // 4185\n    function createOver(arrayFunc) {                                                                                   // 4186\n      return rest(function(iteratees) {                                                                                // 4187\n        iteratees = arrayMap(baseFlatten(iteratees), getIteratee());                                                   // 4188\n        return rest(function(args) {                                                                                   // 4189\n          var thisArg = this;                                                                                          // 4190\n          return arrayFunc(iteratees, function(iteratee) {                                                             // 4191\n            return apply(iteratee, thisArg, args);                                                                     // 4192\n          });                                                                                                          // 4193\n        });                                                                                                            // 4194\n      });                                                                                                              // 4195\n    }                                                                                                                  // 4196\n                                                                                                                       // 4197\n    /**                                                                                                                // 4198\n     * Creates the padding for `string` based on `length`. The `chars` string                                          // 4199\n     * is truncated if the number of characters exceeds `length`.                                                      // 4200\n     *                                                                                                                 // 4201\n     * @private                                                                                                        // 4202\n     * @param {string} string The string to create padding for.                                                        // 4203\n     * @param {number} [length=0] The padding length.                                                                  // 4204\n     * @param {string} [chars=' '] The string used as padding.                                                         // 4205\n     * @returns {string} Returns the padding for `string`.                                                             // 4206\n     */                                                                                                                // 4207\n    function createPadding(string, length, chars) {                                                                    // 4208\n      length = toInteger(length);                                                                                      // 4209\n                                                                                                                       // 4210\n      var strLength = stringSize(string);                                                                              // 4211\n      if (!length || strLength >= length) {                                                                            // 4212\n        return '';                                                                                                     // 4213\n      }                                                                                                                // 4214\n      var padLength = length - strLength;                                                                              // 4215\n      chars = chars === undefined ? ' ' : (chars + '');                                                                // 4216\n                                                                                                                       // 4217\n      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));                                           // 4218\n      return reHasComplexSymbol.test(chars)                                                                            // 4219\n        ? stringToArray(result).slice(0, padLength).join('')                                                           // 4220\n        : result.slice(0, padLength);                                                                                  // 4221\n    }                                                                                                                  // 4222\n                                                                                                                       // 4223\n    /**                                                                                                                // 4224\n     * Creates a function that wraps `func` to invoke it with the optional `this`                                      // 4225\n     * binding of `thisArg` and the `partials` prepended to those provided to                                          // 4226\n     * the wrapper.                                                                                                    // 4227\n     *                                                                                                                 // 4228\n     * @private                                                                                                        // 4229\n     * @param {Function} func The function to wrap.                                                                    // 4230\n     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 4231\n     * @param {*} thisArg The `this` binding of `func`.                                                                // 4232\n     * @param {Array} partials The arguments to prepend to those provided to the new function.                         // 4233\n     * @returns {Function} Returns the new wrapped function.                                                           // 4234\n     */                                                                                                                // 4235\n    function createPartialWrapper(func, bitmask, thisArg, partials) {                                                  // 4236\n      var isBind = bitmask & BIND_FLAG,                                                                                // 4237\n          Ctor = createCtorWrapper(func);                                                                              // 4238\n                                                                                                                       // 4239\n      function wrapper() {                                                                                             // 4240\n        var argsIndex = -1,                                                                                            // 4241\n            argsLength = arguments.length,                                                                             // 4242\n            leftIndex = -1,                                                                                            // 4243\n            leftLength = partials.length,                                                                              // 4244\n            args = Array(leftLength + argsLength),                                                                     // 4245\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 4246\n                                                                                                                       // 4247\n        while (++leftIndex < leftLength) {                                                                             // 4248\n          args[leftIndex] = partials[leftIndex];                                                                       // 4249\n        }                                                                                                              // 4250\n        while (argsLength--) {                                                                                         // 4251\n          args[leftIndex++] = arguments[++argsIndex];                                                                  // 4252\n        }                                                                                                              // 4253\n        return apply(fn, isBind ? thisArg : this, args);                                                               // 4254\n      }                                                                                                                // 4255\n      return wrapper;                                                                                                  // 4256\n    }                                                                                                                  // 4257\n                                                                                                                       // 4258\n    /**                                                                                                                // 4259\n     * Creates a `_.range` or `_.rangeRight` function.                                                                 // 4260\n     *                                                                                                                 // 4261\n     * @private                                                                                                        // 4262\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 4263\n     * @returns {Function} Returns the new range function.                                                             // 4264\n     */                                                                                                                // 4265\n    function createRange(fromRight) {                                                                                  // 4266\n      return function(start, end, step) {                                                                              // 4267\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {                                     // 4268\n          end = step = undefined;                                                                                      // 4269\n        }                                                                                                              // 4270\n        // Ensure the sign of `-0` is preserved.                                                                       // 4271\n        start = toNumber(start);                                                                                       // 4272\n        start = start === start ? start : 0;                                                                           // 4273\n        if (end === undefined) {                                                                                       // 4274\n          end = start;                                                                                                 // 4275\n          start = 0;                                                                                                   // 4276\n        } else {                                                                                                       // 4277\n          end = toNumber(end) || 0;                                                                                    // 4278\n        }                                                                                                              // 4279\n        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);                                    // 4280\n        return baseRange(start, end, step, fromRight);                                                                 // 4281\n      };                                                                                                               // 4282\n    }                                                                                                                  // 4283\n                                                                                                                       // 4284\n    /**                                                                                                                // 4285\n     * Creates a function that wraps `func` to continue currying.                                                      // 4286\n     *                                                                                                                 // 4287\n     * @private                                                                                                        // 4288\n     * @param {Function} func The function to wrap.                                                                    // 4289\n     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.                     // 4290\n     * @param {Function} wrapFunc The function to create the `func` wrapper.                                           // 4291\n     * @param {*} placeholder The placeholder to replace.                                                              // 4292\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 4293\n     * @param {Array} [partials] The arguments to prepend to those provided to the new function.                       // 4294\n     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 4295\n     * @param {Array} [argPos] The argument positions of the new function.                                             // 4296\n     * @param {number} [ary] The arity cap of `func`.                                                                  // 4297\n     * @param {number} [arity] The arity of `func`.                                                                    // 4298\n     * @returns {Function} Returns the new wrapped function.                                                           // 4299\n     */                                                                                                                // 4300\n    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & CURRY_FLAG,                                                                              // 4302\n          newArgPos = argPos ? copyArray(argPos) : undefined,                                                          // 4303\n          newsHolders = isCurry ? holders : undefined,                                                                 // 4304\n          newHoldersRight = isCurry ? undefined : holders,                                                             // 4305\n          newPartials = isCurry ? partials : undefined,                                                                // 4306\n          newPartialsRight = isCurry ? undefined : partials;                                                           // 4307\n                                                                                                                       // 4308\n      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);                                                        // 4309\n      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);                                                       // 4310\n                                                                                                                       // 4311\n      if (!(bitmask & CURRY_BOUND_FLAG)) {                                                                             // 4312\n        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);                                                                       // 4313\n      }                                                                                                                // 4314\n      var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, arity],\n          result = wrapFunc.apply(undefined, newData);                                                                 // 4316\n                                                                                                                       // 4317\n      if (isLaziable(func)) {                                                                                          // 4318\n        setData(result, newData);                                                                                      // 4319\n      }                                                                                                                // 4320\n      result.placeholder = placeholder;                                                                                // 4321\n      return result;                                                                                                   // 4322\n    }                                                                                                                  // 4323\n                                                                                                                       // 4324\n    /**                                                                                                                // 4325\n     * Creates a function like `_.round`.                                                                              // 4326\n     *                                                                                                                 // 4327\n     * @private                                                                                                        // 4328\n     * @param {string} methodName The name of the `Math` method to use when rounding.                                  // 4329\n     * @returns {Function} Returns the new round function.                                                             // 4330\n     */                                                                                                                // 4331\n    function createRound(methodName) {                                                                                 // 4332\n      var func = Math[methodName];                                                                                     // 4333\n      return function(number, precision) {                                                                             // 4334\n        number = toNumber(number);                                                                                     // 4335\n        precision = toInteger(precision);                                                                              // 4336\n        if (precision) {                                                                                               // 4337\n          // Shift with exponential notation to avoid floating-point issues.                                           // 4338\n          // See [MDN](https://mdn.io/round#Examples) for more details.                                                // 4339\n          var pair = (toString(number) + 'e').split('e'),                                                              // 4340\n              value = func(pair[0] + 'e' + (+pair[1] + precision));                                                    // 4341\n                                                                                                                       // 4342\n          pair = (toString(value) + 'e').split('e');                                                                   // 4343\n          return +(pair[0] + 'e' + (+pair[1] - precision));                                                            // 4344\n        }                                                                                                              // 4345\n        return func(number);                                                                                           // 4346\n      };                                                                                                               // 4347\n    }                                                                                                                  // 4348\n                                                                                                                       // 4349\n    /**                                                                                                                // 4350\n     * Creates a set of `values`.                                                                                      // 4351\n     *                                                                                                                 // 4352\n     * @private                                                                                                        // 4353\n     * @param {Array} values The values to add to the set.                                                             // 4354\n     * @returns {Object} Returns the new set.                                                                          // 4355\n     */                                                                                                                // 4356\n    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {                                   // 4357\n      return new Set(values);                                                                                          // 4358\n    };                                                                                                                 // 4359\n                                                                                                                       // 4360\n    /**                                                                                                                // 4361\n     * Creates a function that either curries or invokes `func` with optional                                          // 4362\n     * `this` binding and partially applied arguments.                                                                 // 4363\n     *                                                                                                                 // 4364\n     * @private                                                                                                        // 4365\n     * @param {Function|string} func The function or method name to wrap.                                              // 4366\n     * @param {number} bitmask The bitmask of wrapper flags.                                                           // 4367\n     *  The bitmask may be composed of the following flags:                                                            // 4368\n     *     1 - `_.bind`                                                                                                // 4369\n     *     2 - `_.bindKey`                                                                                             // 4370\n     *     4 - `_.curry` or `_.curryRight` of a bound function                                                         // 4371\n     *     8 - `_.curry`                                                                                               // 4372\n     *    16 - `_.curryRight`                                                                                          // 4373\n     *    32 - `_.partial`                                                                                             // 4374\n     *    64 - `_.partialRight`                                                                                        // 4375\n     *   128 - `_.rearg`                                                                                               // 4376\n     *   256 - `_.ary`                                                                                                 // 4377\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 4378\n     * @param {Array} [partials] The arguments to be partially applied.                                                // 4379\n     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 4380\n     * @param {Array} [argPos] The argument positions of the new function.                                             // 4381\n     * @param {number} [ary] The arity cap of `func`.                                                                  // 4382\n     * @param {number} [arity] The arity of `func`.                                                                    // 4383\n     * @returns {Function} Returns the new wrapped function.                                                           // 4384\n     */                                                                                                                // 4385\n    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {                            // 4386\n      var isBindKey = bitmask & BIND_KEY_FLAG;                                                                         // 4387\n      if (!isBindKey && typeof func != 'function') {                                                                   // 4388\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 4389\n      }                                                                                                                // 4390\n      var length = partials ? partials.length : 0;                                                                     // 4391\n      if (!length) {                                                                                                   // 4392\n        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);                                                               // 4393\n        partials = holders = undefined;                                                                                // 4394\n      }                                                                                                                // 4395\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);                                                    // 4396\n      arity = arity === undefined ? arity : toInteger(arity);                                                          // 4397\n      length -= holders ? holders.length : 0;                                                                          // 4398\n                                                                                                                       // 4399\n      if (bitmask & PARTIAL_RIGHT_FLAG) {                                                                              // 4400\n        var partialsRight = partials,                                                                                  // 4401\n            holdersRight = holders;                                                                                    // 4402\n                                                                                                                       // 4403\n        partials = holders = undefined;                                                                                // 4404\n      }                                                                                                                // 4405\n      var data = isBindKey ? undefined : getData(func),                                                                // 4406\n          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];      // 4407\n                                                                                                                       // 4408\n      if (data) {                                                                                                      // 4409\n        mergeData(newData, data);                                                                                      // 4410\n      }                                                                                                                // 4411\n      func = newData[0];                                                                                               // 4412\n      bitmask = newData[1];                                                                                            // 4413\n      thisArg = newData[2];                                                                                            // 4414\n      partials = newData[3];                                                                                           // 4415\n      holders = newData[4];                                                                                            // 4416\n      arity = newData[9] = newData[9] == null                                                                          // 4417\n        ? (isBindKey ? 0 : func.length)                                                                                // 4418\n        : nativeMax(newData[9] - length, 0);                                                                           // 4419\n                                                                                                                       // 4420\n      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {                                                       // 4421\n        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);                                                                   // 4422\n      }                                                                                                                // 4423\n      if (!bitmask || bitmask == BIND_FLAG) {                                                                          // 4424\n        var result = createBaseWrapper(func, bitmask, thisArg);                                                        // 4425\n      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {                                               // 4426\n        result = createCurryWrapper(func, bitmask, arity);                                                             // 4427\n      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {              // 4428\n        result = createPartialWrapper(func, bitmask, thisArg, partials);                                               // 4429\n      } else {                                                                                                         // 4430\n        result = createHybridWrapper.apply(undefined, newData);                                                        // 4431\n      }                                                                                                                // 4432\n      var setter = data ? baseSetData : setData;                                                                       // 4433\n      return setter(result, newData);                                                                                  // 4434\n    }                                                                                                                  // 4435\n                                                                                                                       // 4436\n    /**                                                                                                                // 4437\n     * A specialized version of `baseIsEqualDeep` for arrays with support for                                          // 4438\n     * partial deep comparisons.                                                                                       // 4439\n     *                                                                                                                 // 4440\n     * @private                                                                                                        // 4441\n     * @param {Array} array The array to compare.                                                                      // 4442\n     * @param {Array} other The other array to compare.                                                                // 4443\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 4444\n     * @param {Function} [customizer] The function to customize comparisons.                                           // 4445\n     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.                  // 4446\n     * @param {Object} [stack] Tracks traversed `array` and `other` objects.                                           // 4447\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                   // 4448\n     */                                                                                                                // 4449\n    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {                                        // 4450\n      var index = -1,                                                                                                  // 4451\n          isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                  // 4452\n          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,                                                              // 4453\n          arrLength = array.length,                                                                                    // 4454\n          othLength = other.length;                                                                                    // 4455\n                                                                                                                       // 4456\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {                                           // 4457\n        return false;                                                                                                  // 4458\n      }                                                                                                                // 4459\n      // Assume cyclic values are equal.                                                                               // 4460\n      var stacked = stack.get(array);                                                                                  // 4461\n      if (stacked) {                                                                                                   // 4462\n        return stacked == other;                                                                                       // 4463\n      }                                                                                                                // 4464\n      var result = true;                                                                                               // 4465\n      stack.set(array, other);                                                                                         // 4466\n                                                                                                                       // 4467\n      // Ignore non-index properties.                                                                                  // 4468\n      while (++index < arrLength) {                                                                                    // 4469\n        var arrValue = array[index],                                                                                   // 4470\n            othValue = other[index];                                                                                   // 4471\n                                                                                                                       // 4472\n        if (customizer) {                                                                                              // 4473\n          var compared = isPartial                                                                                     // 4474\n            ? customizer(othValue, arrValue, index, other, array, stack)                                               // 4475\n            : customizer(arrValue, othValue, index, array, other, stack);                                              // 4476\n        }                                                                                                              // 4477\n        if (compared !== undefined) {                                                                                  // 4478\n          if (compared) {                                                                                              // 4479\n            continue;                                                                                                  // 4480\n          }                                                                                                            // 4481\n          result = false;                                                                                              // 4482\n          break;                                                                                                       // 4483\n        }                                                                                                              // 4484\n        // Recursively compare arrays (susceptible to call stack limits).                                              // 4485\n        if (isUnordered) {                                                                                             // 4486\n          if (!arraySome(other, function(othValue) {                                                                   // 4487\n                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);             // 4488\n              })) {                                                                                                    // 4489\n            result = false;                                                                                            // 4490\n            break;                                                                                                     // 4491\n          }                                                                                                            // 4492\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {            // 4493\n          result = false;                                                                                              // 4494\n          break;                                                                                                       // 4495\n        }                                                                                                              // 4496\n      }                                                                                                                // 4497\n      stack['delete'](array);                                                                                          // 4498\n      return result;                                                                                                   // 4499\n    }                                                                                                                  // 4500\n                                                                                                                       // 4501\n    /**                                                                                                                // 4502\n     * A specialized version of `baseIsEqualDeep` for comparing objects of                                             // 4503\n     * the same `toStringTag`.                                                                                         // 4504\n     *                                                                                                                 // 4505\n     * **Note:** This function only supports comparing values with tags of                                             // 4506\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 4507\n     *                                                                                                                 // 4508\n     * @private                                                                                                        // 4509\n     * @param {Object} object The object to compare.                                                                   // 4510\n     * @param {Object} other The other object to compare.                                                              // 4511\n     * @param {string} tag The `toStringTag` of the objects to compare.                                                // 4512\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 4513\n     * @param {Function} [customizer] The function to customize comparisons.                                           // 4514\n     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.                  // 4515\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 4516\n     */                                                                                                                // 4517\n    function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {                                          // 4518\n      switch (tag) {                                                                                                   // 4519\n        case arrayBufferTag:                                                                                           // 4520\n          if ((object.byteLength != other.byteLength) ||                                                               // 4521\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {                                             // 4522\n            return false;                                                                                              // 4523\n          }                                                                                                            // 4524\n          return true;                                                                                                 // 4525\n                                                                                                                       // 4526\n        case boolTag:                                                                                                  // 4527\n        case dateTag:                                                                                                  // 4528\n          // Coerce dates and booleans to numbers, dates to milliseconds and booleans                                  // 4529\n          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.                                       // 4530\n          return +object == +other;                                                                                    // 4531\n                                                                                                                       // 4532\n        case errorTag:                                                                                                 // 4533\n          return object.name == other.name && object.message == other.message;                                         // 4534\n                                                                                                                       // 4535\n        case numberTag:                                                                                                // 4536\n          // Treat `NaN` vs. `NaN` as equal.                                                                           // 4537\n          return (object != +object) ? other != +other : object == +other;                                             // 4538\n                                                                                                                       // 4539\n        case regexpTag:                                                                                                // 4540\n        case stringTag:                                                                                                // 4541\n          // Coerce regexes to strings and treat strings primitives and string                                         // 4542\n          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.                                 // 4543\n          return object == (other + '');                                                                               // 4544\n                                                                                                                       // 4545\n        case mapTag:                                                                                                   // 4546\n          var convert = mapToArray;                                                                                    // 4547\n                                                                                                                       // 4548\n        case setTag:                                                                                                   // 4549\n          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;                                                              // 4550\n          convert || (convert = setToArray);                                                                           // 4551\n                                                                                                                       // 4552\n          // Recursively compare objects (susceptible to call stack limits).                                           // 4553\n          return (isPartial || object.size == other.size) &&                                                           // 4554\n            equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);                  // 4555\n                                                                                                                       // 4556\n        case symbolTag:                                                                                                // 4557\n          return !!_Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));                               // 4558\n      }                                                                                                                // 4559\n      return false;                                                                                                    // 4560\n    }                                                                                                                  // 4561\n                                                                                                                       // 4562\n    /**                                                                                                                // 4563\n     * A specialized version of `baseIsEqualDeep` for objects with support for                                         // 4564\n     * partial deep comparisons.                                                                                       // 4565\n     *                                                                                                                 // 4566\n     * @private                                                                                                        // 4567\n     * @param {Object} object The object to compare.                                                                   // 4568\n     * @param {Object} other The other object to compare.                                                              // 4569\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 4570\n     * @param {Function} [customizer] The function to customize comparisons.                                           // 4571\n     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.                  // 4572\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.                                          // 4573\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 4574\n     */                                                                                                                // 4575\n    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {                                      // 4576\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,                                                                  // 4577\n          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,                                                              // 4578\n          objProps = keys(object),                                                                                     // 4579\n          objLength = objProps.length,                                                                                 // 4580\n          othProps = keys(other),                                                                                      // 4581\n          othLength = othProps.length;                                                                                 // 4582\n                                                                                                                       // 4583\n      if (objLength != othLength && !isPartial) {                                                                      // 4584\n        return false;                                                                                                  // 4585\n      }                                                                                                                // 4586\n      var index = objLength;                                                                                           // 4587\n      while (index--) {                                                                                                // 4588\n        var key = objProps[index];                                                                                     // 4589\n        if (!(isPartial ? key in other : baseHas(other, key)) ||                                                       // 4590\n            !(isUnordered || key == othProps[index])) {                                                                // 4591\n          return false;                                                                                                // 4592\n        }                                                                                                              // 4593\n      }                                                                                                                // 4594\n      // Assume cyclic values are equal.                                                                               // 4595\n      var stacked = stack.get(object);                                                                                 // 4596\n      if (stacked) {                                                                                                   // 4597\n        return stacked == other;                                                                                       // 4598\n      }                                                                                                                // 4599\n      var result = true;                                                                                               // 4600\n      stack.set(object, other);                                                                                        // 4601\n                                                                                                                       // 4602\n      var skipCtor = isPartial;                                                                                        // 4603\n      while (++index < objLength) {                                                                                    // 4604\n        key = objProps[index];                                                                                         // 4605\n        var objValue = object[key],                                                                                    // 4606\n            othValue = other[key];                                                                                     // 4607\n                                                                                                                       // 4608\n        if (customizer) {                                                                                              // 4609\n          var compared = isPartial                                                                                     // 4610\n            ? customizer(othValue, objValue, key, other, object, stack)                                                // 4611\n            : customizer(objValue, othValue, key, object, other, stack);                                               // 4612\n        }                                                                                                              // 4613\n        // Recursively compare objects (susceptible to call stack limits).                                             // 4614\n        if (!(compared === undefined                                                                                   // 4615\n              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))                   // 4616\n              : compared                                                                                               // 4617\n            )) {                                                                                                       // 4618\n          result = false;                                                                                              // 4619\n          break;                                                                                                       // 4620\n        }                                                                                                              // 4621\n        skipCtor || (skipCtor = key == 'constructor');                                                                 // 4622\n      }                                                                                                                // 4623\n      if (result && !skipCtor) {                                                                                       // 4624\n        var objCtor = object.constructor,                                                                              // 4625\n            othCtor = other.constructor;                                                                               // 4626\n                                                                                                                       // 4627\n        // Non `Object` object instances with different constructors are not equal.                                    // 4628\n        if (objCtor != othCtor &&                                                                                      // 4629\n            ('constructor' in object && 'constructor' in other) &&                                                     // 4630\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                            // 4631\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                           // 4632\n          result = false;                                                                                              // 4633\n        }                                                                                                              // 4634\n      }                                                                                                                // 4635\n      stack['delete'](object);                                                                                         // 4636\n      return result;                                                                                                   // 4637\n    }                                                                                                                  // 4638\n                                                                                                                       // 4639\n    /**                                                                                                                // 4640\n     * Gets metadata for `func`.                                                                                       // 4641\n     *                                                                                                                 // 4642\n     * @private                                                                                                        // 4643\n     * @param {Function} func The function to query.                                                                   // 4644\n     * @returns {*} Returns the metadata for `func`.                                                                   // 4645\n     */                                                                                                                // 4646\n    var getData = !metaMap ? noop : function(func) {                                                                   // 4647\n      return metaMap.get(func);                                                                                        // 4648\n    };                                                                                                                 // 4649\n                                                                                                                       // 4650\n    /**                                                                                                                // 4651\n     * Gets the name of `func`.                                                                                        // 4652\n     *                                                                                                                 // 4653\n     * @private                                                                                                        // 4654\n     * @param {Function} func The function to query.                                                                   // 4655\n     * @returns {string} Returns the function name.                                                                    // 4656\n     */                                                                                                                // 4657\n    function getFuncName(func) {                                                                                       // 4658\n      var result = (func.name + ''),                                                                                   // 4659\n          array = realNames[result],                                                                                   // 4660\n          length = array ? array.length : 0;                                                                           // 4661\n                                                                                                                       // 4662\n      while (length--) {                                                                                               // 4663\n        var data = array[length],                                                                                      // 4664\n            otherFunc = data.func;                                                                                     // 4665\n        if (otherFunc == null || otherFunc == func) {                                                                  // 4666\n          return data.name;                                                                                            // 4667\n        }                                                                                                              // 4668\n      }                                                                                                                // 4669\n      return result;                                                                                                   // 4670\n    }                                                                                                                  // 4671\n                                                                                                                       // 4672\n    /**                                                                                                                // 4673\n     * Gets the appropriate \"iteratee\" function. If the `_.iteratee` method is                                         // 4674\n     * customized this function returns the custom method, otherwise it returns                                        // 4675\n     * `baseIteratee`. If arguments are provided the chosen function is invoked                                        // 4676\n     * with them and its result is returned.                                                                           // 4677\n     *                                                                                                                 // 4678\n     * @private                                                                                                        // 4679\n     * @param {*} [value] The value to convert to an iteratee.                                                         // 4680\n     * @param {number} [arity] The arity of the created iteratee.                                                      // 4681\n     * @returns {Function} Returns the chosen function or its result.                                                  // 4682\n     */                                                                                                                // 4683\n    function getIteratee() {                                                                                           // 4684\n      var result = lodash.iteratee || iteratee;                                                                        // 4685\n      result = result === iteratee ? baseIteratee : result;                                                            // 4686\n      return arguments.length ? result(arguments[0], arguments[1]) : result;                                           // 4687\n    }                                                                                                                  // 4688\n                                                                                                                       // 4689\n    /**                                                                                                                // 4690\n     * Gets the \"length\" property value of `object`.                                                                   // 4691\n     *                                                                                                                 // 4692\n     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)            // 4693\n     * that affects Safari on at least iOS 8.1-8.3 ARM64.                                                              // 4694\n     *                                                                                                                 // 4695\n     * @private                                                                                                        // 4696\n     * @param {Object} object The object to query.                                                                     // 4697\n     * @returns {*} Returns the \"length\" value.                                                                        // 4698\n     */                                                                                                                // 4699\n    var getLength = baseProperty('length');                                                                            // 4700\n                                                                                                                       // 4701\n    /**                                                                                                                // 4702\n     * Gets the property names, values, and compare flags of `object`.                                                 // 4703\n     *                                                                                                                 // 4704\n     * @private                                                                                                        // 4705\n     * @param {Object} object The object to query.                                                                     // 4706\n     * @returns {Array} Returns the match data of `object`.                                                            // 4707\n     */                                                                                                                // 4708\n    function getMatchData(object) {                                                                                    // 4709\n      var result = toPairs(object),                                                                                    // 4710\n          length = result.length;                                                                                      // 4711\n                                                                                                                       // 4712\n      while (length--) {                                                                                               // 4713\n        result[length][2] = isStrictComparable(result[length][1]);                                                     // 4714\n      }                                                                                                                // 4715\n      return result;                                                                                                   // 4716\n    }                                                                                                                  // 4717\n                                                                                                                       // 4718\n    /**                                                                                                                // 4719\n     * Gets the native function at `key` of `object`.                                                                  // 4720\n     *                                                                                                                 // 4721\n     * @private                                                                                                        // 4722\n     * @param {Object} object The object to query.                                                                     // 4723\n     * @param {string} key The key of the method to get.                                                               // 4724\n     * @returns {*} Returns the function if it's native, else `undefined`.                                             // 4725\n     */                                                                                                                // 4726\n    function getNative(object, key) {                                                                                  // 4727\n      var value = object == null ? undefined : object[key];                                                            // 4728\n      return isNative(value) ? value : undefined;                                                                      // 4729\n    }                                                                                                                  // 4730\n                                                                                                                       // 4731\n    /**                                                                                                                // 4732\n     * Creates an array of the own symbol properties of `object`.                                                      // 4733\n     *                                                                                                                 // 4734\n     * @private                                                                                                        // 4735\n     * @param {Object} object The object to query.                                                                     // 4736\n     * @returns {Array} Returns the array of symbols.                                                                  // 4737\n     */                                                                                                                // 4738\n    var getSymbols = getOwnPropertySymbols || function() {                                                             // 4739\n      return [];                                                                                                       // 4740\n    };                                                                                                                 // 4741\n                                                                                                                       // 4742\n    /**                                                                                                                // 4743\n     * Gets the `toStringTag` of `value`.                                                                              // 4744\n     *                                                                                                                 // 4745\n     * @private                                                                                                        // 4746\n     * @param {*} value The value to query.                                                                            // 4747\n     * @returns {string} Returns the `toStringTag`.                                                                    // 4748\n     */                                                                                                                // 4749\n    function getTag(value) {                                                                                           // 4750\n      return objectToString.call(value);                                                                               // 4751\n    }                                                                                                                  // 4752\n                                                                                                                       // 4753\n    // Fallback for IE 11 providing `toStringTag` values for maps and sets.                                            // 4754\n    if ((Map && getTag(new Map) != mapTag) || (Set && getTag(new Set) != setTag)) {                                    // 4755\n      getTag = function(value) {                                                                                       // 4756\n        var result = objectToString.call(value),                                                                       // 4757\n            Ctor = result == objectTag ? value.constructor : null,                                                     // 4758\n            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';                                     // 4759\n                                                                                                                       // 4760\n        if (ctorString) {                                                                                              // 4761\n          if (ctorString == mapCtorString) {                                                                           // 4762\n            return mapTag;                                                                                             // 4763\n          }                                                                                                            // 4764\n          if (ctorString == setCtorString) {                                                                           // 4765\n            return setTag;                                                                                             // 4766\n          }                                                                                                            // 4767\n        }                                                                                                              // 4768\n        return result;                                                                                                 // 4769\n      };                                                                                                               // 4770\n    }                                                                                                                  // 4771\n                                                                                                                       // 4772\n    /**                                                                                                                // 4773\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.                                    // 4774\n     *                                                                                                                 // 4775\n     * @private                                                                                                        // 4776\n     * @param {number} start The start of the view.                                                                    // 4777\n     * @param {number} end The end of the view.                                                                        // 4778\n     * @param {Array} transforms The transformations to apply to the view.                                             // 4779\n     * @returns {Object} Returns an object containing the `start` and `end`                                            // 4780\n     *  positions of the view.                                                                                         // 4781\n     */                                                                                                                // 4782\n    function getView(start, end, transforms) {                                                                         // 4783\n      var index = -1,                                                                                                  // 4784\n          length = transforms.length;                                                                                  // 4785\n                                                                                                                       // 4786\n      while (++index < length) {                                                                                       // 4787\n        var data = transforms[index],                                                                                  // 4788\n            size = data.size;                                                                                          // 4789\n                                                                                                                       // 4790\n        switch (data.type) {                                                                                           // 4791\n          case 'drop':      start += size; break;                                                                      // 4792\n          case 'dropRight': end -= size; break;                                                                        // 4793\n          case 'take':      end = nativeMin(end, start + size); break;                                                 // 4794\n          case 'takeRight': start = nativeMax(start, end - size); break;                                               // 4795\n        }                                                                                                              // 4796\n      }                                                                                                                // 4797\n      return { 'start': start, 'end': end };                                                                           // 4798\n    }                                                                                                                  // 4799\n                                                                                                                       // 4800\n    /**                                                                                                                // 4801\n     * Checks if `path` exists on `object`.                                                                            // 4802\n     *                                                                                                                 // 4803\n     * @private                                                                                                        // 4804\n     * @param {Object} object The object to query.                                                                     // 4805\n     * @param {Array|string} path The path to check.                                                                   // 4806\n     * @param {Function} hasFunc The function to check properties.                                                     // 4807\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.                                               // 4808\n     */                                                                                                                // 4809\n    function hasPath(object, path, hasFunc) {                                                                          // 4810\n      if (object == null) {                                                                                            // 4811\n        return false;                                                                                                  // 4812\n      }                                                                                                                // 4813\n      var result = hasFunc(object, path);                                                                              // 4814\n      if (!result && !isKey(path)) {                                                                                   // 4815\n        path = baseToPath(path);                                                                                       // 4816\n        object = parent(object, path);                                                                                 // 4817\n        if (object != null) {                                                                                          // 4818\n          path = last(path);                                                                                           // 4819\n          result = hasFunc(object, path);                                                                              // 4820\n        }                                                                                                              // 4821\n      }                                                                                                                // 4822\n      return result || (isLength(object && object.length) && isIndex(path, object.length) &&                           // 4823\n        (isArray(object) || isString(object) || isArguments(object)));                                                 // 4824\n    }                                                                                                                  // 4825\n                                                                                                                       // 4826\n    /**                                                                                                                // 4827\n     * Initializes an array clone.                                                                                     // 4828\n     *                                                                                                                 // 4829\n     * @private                                                                                                        // 4830\n     * @param {Array} array The array to clone.                                                                        // 4831\n     * @returns {Array} Returns the initialized clone.                                                                 // 4832\n     */                                                                                                                // 4833\n    function initCloneArray(array) {                                                                                   // 4834\n      var length = array.length,                                                                                       // 4835\n          result = array.constructor(length);                                                                          // 4836\n                                                                                                                       // 4837\n      // Add properties assigned by `RegExp#exec`.                                                                     // 4838\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                              // 4839\n        result.index = array.index;                                                                                    // 4840\n        result.input = array.input;                                                                                    // 4841\n      }                                                                                                                // 4842\n      return result;                                                                                                   // 4843\n    }                                                                                                                  // 4844\n                                                                                                                       // 4845\n    /**                                                                                                                // 4846\n     * Initializes an object clone.                                                                                    // 4847\n     *                                                                                                                 // 4848\n     * @private                                                                                                        // 4849\n     * @param {Object} object The object to clone.                                                                     // 4850\n     * @returns {Object} Returns the initialized clone.                                                                // 4851\n     */                                                                                                                // 4852\n    function initCloneObject(object) {                                                                                 // 4853\n      var Ctor = object.constructor;                                                                                   // 4854\n      return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);                                                // 4855\n    }                                                                                                                  // 4856\n                                                                                                                       // 4857\n    /**                                                                                                                // 4858\n     * Initializes an object clone based on its `toStringTag`.                                                         // 4859\n     *                                                                                                                 // 4860\n     * **Note:** This function only supports cloning values with tags of                                               // 4861\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 4862\n     *                                                                                                                 // 4863\n     * @private                                                                                                        // 4864\n     * @param {Object} object The object to clone.                                                                     // 4865\n     * @param {string} tag The `toStringTag` of the object to clone.                                                   // 4866\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 4867\n     * @returns {Object} Returns the initialized clone.                                                                // 4868\n     */                                                                                                                // 4869\n    function initCloneByTag(object, tag, isDeep) {                                                                     // 4870\n      var Ctor = object.constructor;                                                                                   // 4871\n      switch (tag) {                                                                                                   // 4872\n        case arrayBufferTag:                                                                                           // 4873\n          return cloneBuffer(object);                                                                                  // 4874\n                                                                                                                       // 4875\n        case boolTag:                                                                                                  // 4876\n        case dateTag:                                                                                                  // 4877\n          return new Ctor(+object);                                                                                    // 4878\n                                                                                                                       // 4879\n        case float32Tag: case float64Tag:                                                                              // 4880\n        case int8Tag: case int16Tag: case int32Tag:                                                                    // 4881\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                           // 4882\n          return cloneTypedArray(object, isDeep);                                                                      // 4883\n                                                                                                                       // 4884\n        case mapTag:                                                                                                   // 4885\n          return cloneMap(object);                                                                                     // 4886\n                                                                                                                       // 4887\n        case numberTag:                                                                                                // 4888\n        case stringTag:                                                                                                // 4889\n          return new Ctor(object);                                                                                     // 4890\n                                                                                                                       // 4891\n        case regexpTag:                                                                                                // 4892\n          return cloneRegExp(object);                                                                                  // 4893\n                                                                                                                       // 4894\n        case setTag:                                                                                                   // 4895\n          return cloneSet(object);                                                                                     // 4896\n                                                                                                                       // 4897\n        case symbolTag:                                                                                                // 4898\n          return cloneSymbol(object);                                                                                  // 4899\n      }                                                                                                                // 4900\n    }                                                                                                                  // 4901\n                                                                                                                       // 4902\n    /**                                                                                                                // 4903\n     * Creates an array of index keys for `object` values of arrays,                                                   // 4904\n     * `arguments` objects, and strings, otherwise `null` is returned.                                                 // 4905\n     *                                                                                                                 // 4906\n     * @private                                                                                                        // 4907\n     * @param {Object} object The object to query.                                                                     // 4908\n     * @returns {Array|null} Returns index keys, else `null`.                                                          // 4909\n     */                                                                                                                // 4910\n    function indexKeys(object) {                                                                                       // 4911\n      var length = object ? object.length : undefined;                                                                 // 4912\n      return (isLength(length) && (isArray(object) || isString(object) || isArguments(object)))                        // 4913\n        ? baseTimes(length, String)                                                                                    // 4914\n        : null;                                                                                                        // 4915\n    }                                                                                                                  // 4916\n                                                                                                                       // 4917\n    /**                                                                                                                // 4918\n     * Checks if the provided arguments are from an iteratee call.                                                     // 4919\n     *                                                                                                                 // 4920\n     * @private                                                                                                        // 4921\n     * @param {*} value The potential iteratee value argument.                                                         // 4922\n     * @param {*} index The potential iteratee index or key argument.                                                  // 4923\n     * @param {*} object The potential iteratee object argument.                                                       // 4924\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.                     // 4925\n     */                                                                                                                // 4926\n    function isIterateeCall(value, index, object) {                                                                    // 4927\n      if (!isObject(object)) {                                                                                         // 4928\n        return false;                                                                                                  // 4929\n      }                                                                                                                // 4930\n      var type = typeof index;                                                                                         // 4931\n      if (type == 'number'                                                                                             // 4932\n          ? (isArrayLike(object) && isIndex(index, object.length))                                                     // 4933\n          : (type == 'string' && index in object)) {                                                                   // 4934\n        return eq(object[index], value);                                                                               // 4935\n      }                                                                                                                // 4936\n      return false;                                                                                                    // 4937\n    }                                                                                                                  // 4938\n                                                                                                                       // 4939\n    /**                                                                                                                // 4940\n     * Checks if `value` is a property name and not a property path.                                                   // 4941\n     *                                                                                                                 // 4942\n     * @private                                                                                                        // 4943\n     * @param {*} value The value to check.                                                                            // 4944\n     * @param {Object} [object] The object to query keys on.                                                           // 4945\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                  // 4946\n     */                                                                                                                // 4947\n    function isKey(value, object) {                                                                                    // 4948\n      if (typeof value == 'number') {                                                                                  // 4949\n        return true;                                                                                                   // 4950\n      }                                                                                                                // 4951\n      return !isArray(value) &&                                                                                        // 4952\n        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||                                                     // 4953\n          (object != null && value in Object(object)));                                                                // 4954\n    }                                                                                                                  // 4955\n                                                                                                                       // 4956\n    /**                                                                                                                // 4957\n     * Checks if `value` is suitable for use as unique object key.                                                     // 4958\n     *                                                                                                                 // 4959\n     * @private                                                                                                        // 4960\n     * @param {*} value The value to check.                                                                            // 4961\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.                                         // 4962\n     */                                                                                                                // 4963\n    function isKeyable(value) {                                                                                        // 4964\n      var type = typeof value;                                                                                         // 4965\n      return type == 'number' || type == 'boolean' ||                                                                  // 4966\n        (type == 'string' && value !== '__proto__') || value == null;                                                  // 4967\n    }                                                                                                                  // 4968\n                                                                                                                       // 4969\n    /**                                                                                                                // 4970\n     * Checks if `func` has a lazy counterpart.                                                                        // 4971\n     *                                                                                                                 // 4972\n     * @private                                                                                                        // 4973\n     * @param {Function} func The function to check.                                                                   // 4974\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.                               // 4975\n     */                                                                                                                // 4976\n    function isLaziable(func) {                                                                                        // 4977\n      var funcName = getFuncName(func),                                                                                // 4978\n          other = lodash[funcName];                                                                                    // 4979\n                                                                                                                       // 4980\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {                                        // 4981\n        return false;                                                                                                  // 4982\n      }                                                                                                                // 4983\n      if (func === other) {                                                                                            // 4984\n        return true;                                                                                                   // 4985\n      }                                                                                                                // 4986\n      var data = getData(other);                                                                                       // 4987\n      return !!data && func === data[0];                                                                               // 4988\n    }                                                                                                                  // 4989\n                                                                                                                       // 4990\n    /**                                                                                                                // 4991\n     * Checks if `value` is likely a prototype object.                                                                 // 4992\n     *                                                                                                                 // 4993\n     * @private                                                                                                        // 4994\n     * @param {*} value The value to check.                                                                            // 4995\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.                                      // 4996\n     */                                                                                                                // 4997\n    function isPrototype(value) {                                                                                      // 4998\n      var Ctor = value && value.constructor,                                                                           // 4999\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;                                        // 5000\n                                                                                                                       // 5001\n      return value === proto;                                                                                          // 5002\n    }                                                                                                                  // 5003\n                                                                                                                       // 5004\n    /**                                                                                                                // 5005\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.                                      // 5006\n     *                                                                                                                 // 5007\n     * @private                                                                                                        // 5008\n     * @param {*} value The value to check.                                                                            // 5009\n     * @returns {boolean} Returns `true` if `value` if suitable for strict                                             // 5010\n     *  equality comparisons, else `false`.                                                                            // 5011\n     */                                                                                                                // 5012\n    function isStrictComparable(value) {                                                                               // 5013\n      return value === value && !isObject(value);                                                                      // 5014\n    }                                                                                                                  // 5015\n                                                                                                                       // 5016\n    /**                                                                                                                // 5017\n     * Merges the function metadata of `source` into `data`.                                                           // 5018\n     *                                                                                                                 // 5019\n     * Merging metadata reduces the number of wrappers used to invoke a function.                                      // 5020\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`                                      // 5021\n     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`                                // 5022\n     * modify function arguments, making the order in which they are executed important,                               // 5023\n     * preventing the merging of metadata. However, we make an exception for a safe                                    // 5024\n     * combined case where curried functions have `_.ary` and or `_.rearg` applied.                                    // 5025\n     *                                                                                                                 // 5026\n     * @private                                                                                                        // 5027\n     * @param {Array} data The destination metadata.                                                                   // 5028\n     * @param {Array} source The source metadata.                                                                      // 5029\n     * @returns {Array} Returns `data`.                                                                                // 5030\n     */                                                                                                                // 5031\n    function mergeData(data, source) {                                                                                 // 5032\n      var bitmask = data[1],                                                                                           // 5033\n          srcBitmask = source[1],                                                                                      // 5034\n          newBitmask = bitmask | srcBitmask,                                                                           // 5035\n          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);                                              // 5036\n                                                                                                                       // 5037\n      var isCombo =                                                                                                    // 5038\n        (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||                                                         // 5039\n        (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||                        // 5040\n        (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));         // 5041\n                                                                                                                       // 5042\n      // Exit early if metadata can't be merged.                                                                       // 5043\n      if (!(isCommon || isCombo)) {                                                                                    // 5044\n        return data;                                                                                                   // 5045\n      }                                                                                                                // 5046\n      // Use source `thisArg` if available.                                                                            // 5047\n      if (srcBitmask & BIND_FLAG) {                                                                                    // 5048\n        data[2] = source[2];                                                                                           // 5049\n        // Set when currying a bound function.                                                                         // 5050\n        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;                                                    // 5051\n      }                                                                                                                // 5052\n      // Compose partial arguments.                                                                                    // 5053\n      var value = source[3];                                                                                           // 5054\n      if (value) {                                                                                                     // 5055\n        var partials = data[3];                                                                                        // 5056\n        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);                               // 5057\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);                              // 5058\n      }                                                                                                                // 5059\n      // Compose partial right arguments.                                                                              // 5060\n      value = source[5];                                                                                               // 5061\n      if (value) {                                                                                                     // 5062\n        partials = data[5];                                                                                            // 5063\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);                          // 5064\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);                              // 5065\n      }                                                                                                                // 5066\n      // Use source `argPos` if available.                                                                             // 5067\n      value = source[7];                                                                                               // 5068\n      if (value) {                                                                                                     // 5069\n        data[7] = copyArray(value);                                                                                    // 5070\n      }                                                                                                                // 5071\n      // Use source `ary` if it's smaller.                                                                             // 5072\n      if (srcBitmask & ARY_FLAG) {                                                                                     // 5073\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);                                         // 5074\n      }                                                                                                                // 5075\n      // Use source `arity` if one is not provided.                                                                    // 5076\n      if (data[9] == null) {                                                                                           // 5077\n        data[9] = source[9];                                                                                           // 5078\n      }                                                                                                                // 5079\n      // Use source `func` and merge bitmasks.                                                                         // 5080\n      data[0] = source[0];                                                                                             // 5081\n      data[1] = newBitmask;                                                                                            // 5082\n                                                                                                                       // 5083\n      return data;                                                                                                     // 5084\n    }                                                                                                                  // 5085\n                                                                                                                       // 5086\n    /**                                                                                                                // 5087\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.                                                        // 5088\n     *                                                                                                                 // 5089\n     * @private                                                                                                        // 5090\n     * @param {*} objValue The destination value.                                                                      // 5091\n     * @param {*} srcValue The source value.                                                                           // 5092\n     * @param {string} key The key of the property to merge.                                                           // 5093\n     * @param {Object} object The parent object of `objValue`.                                                         // 5094\n     * @param {Object} source The parent object of `srcValue`.                                                         // 5095\n     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.                           // 5096\n     * @returns {*} Returns the value to assign.                                                                       // 5097\n     */                                                                                                                // 5098\n    function mergeDefaults(objValue, srcValue, key, object, source, stack) {                                           // 5099\n      if (isObject(objValue) && isObject(srcValue)) {                                                                  // 5100\n        stack.set(srcValue, objValue);                                                                                 // 5101\n        baseMerge(objValue, srcValue, mergeDefaults, stack);                                                           // 5102\n      }                                                                                                                // 5103\n      return objValue === undefined ? baseClone(srcValue) : objValue;                                                  // 5104\n    }                                                                                                                  // 5105\n                                                                                                                       // 5106\n    /**                                                                                                                // 5107\n     * Gets the parent value at `path` of `object`.                                                                    // 5108\n     *                                                                                                                 // 5109\n     * @private                                                                                                        // 5110\n     * @param {Object} object The object to query.                                                                     // 5111\n     * @param {Array} path The path to get the parent value of.                                                        // 5112\n     * @returns {*} Returns the parent value.                                                                          // 5113\n     */                                                                                                                // 5114\n    function parent(object, path) {                                                                                    // 5115\n      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));                                          // 5116\n    }                                                                                                                  // 5117\n                                                                                                                       // 5118\n    /**                                                                                                                // 5119\n     * Reorder `array` according to the specified indexes where the element at                                         // 5120\n     * the first index is assigned as the first element, the element at                                                // 5121\n     * the second index is assigned as the second element, and so on.                                                  // 5122\n     *                                                                                                                 // 5123\n     * @private                                                                                                        // 5124\n     * @param {Array} array The array to reorder.                                                                      // 5125\n     * @param {Array} indexes The arranged array indexes.                                                              // 5126\n     * @returns {Array} Returns `array`.                                                                               // 5127\n     */                                                                                                                // 5128\n    function reorder(array, indexes) {                                                                                 // 5129\n      var arrLength = array.length,                                                                                    // 5130\n          length = nativeMin(indexes.length, arrLength),                                                               // 5131\n          oldArray = copyArray(array);                                                                                 // 5132\n                                                                                                                       // 5133\n      while (length--) {                                                                                               // 5134\n        var index = indexes[length];                                                                                   // 5135\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;                                       // 5136\n      }                                                                                                                // 5137\n      return array;                                                                                                    // 5138\n    }                                                                                                                  // 5139\n                                                                                                                       // 5140\n    /**                                                                                                                // 5141\n     * Sets metadata for `func`.                                                                                       // 5142\n     *                                                                                                                 // 5143\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short                                        // 5144\n     * period of time, it will trip its breaker and transition to an identity function                                 // 5145\n     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n     * for more details.                                                                                               // 5147\n     *                                                                                                                 // 5148\n     * @private                                                                                                        // 5149\n     * @param {Function} func The function to associate metadata with.                                                 // 5150\n     * @param {*} data The metadata.                                                                                   // 5151\n     * @returns {Function} Returns `func`.                                                                             // 5152\n     */                                                                                                                // 5153\n    var setData = (function() {                                                                                        // 5154\n      var count = 0,                                                                                                   // 5155\n          lastCalled = 0;                                                                                              // 5156\n                                                                                                                       // 5157\n      return function(key, value) {                                                                                    // 5158\n        var stamp = now(),                                                                                             // 5159\n            remaining = HOT_SPAN - (stamp - lastCalled);                                                               // 5160\n                                                                                                                       // 5161\n        lastCalled = stamp;                                                                                            // 5162\n        if (remaining > 0) {                                                                                           // 5163\n          if (++count >= HOT_COUNT) {                                                                                  // 5164\n            return key;                                                                                                // 5165\n          }                                                                                                            // 5166\n        } else {                                                                                                       // 5167\n          count = 0;                                                                                                   // 5168\n        }                                                                                                              // 5169\n        return baseSetData(key, value);                                                                                // 5170\n      };                                                                                                               // 5171\n    }());                                                                                                              // 5172\n                                                                                                                       // 5173\n    /**                                                                                                                // 5174\n     * Converts `string` to a property path array.                                                                     // 5175\n     *                                                                                                                 // 5176\n     * @private                                                                                                        // 5177\n     * @param {string} string The string to convert.                                                                   // 5178\n     * @returns {Array} Returns the property path array.                                                               // 5179\n     */                                                                                                                // 5180\n    function stringToPath(string) {                                                                                    // 5181\n      var result = [];                                                                                                 // 5182\n      toString(string).replace(rePropName, function(match, number, quote, string) {                                    // 5183\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                   // 5184\n      });                                                                                                              // 5185\n      return result;                                                                                                   // 5186\n    }                                                                                                                  // 5187\n                                                                                                                       // 5188\n    /**                                                                                                                // 5189\n     * Converts `value` to an array-like object if it's not one.                                                       // 5190\n     *                                                                                                                 // 5191\n     * @private                                                                                                        // 5192\n     * @param {*} value The value to process.                                                                          // 5193\n     * @returns {Array} Returns the array-like object.                                                                 // 5194\n     */                                                                                                                // 5195\n    function toArrayLikeObject(value) {                                                                                // 5196\n      return isArrayLikeObject(value) ? value : [];                                                                    // 5197\n    }                                                                                                                  // 5198\n                                                                                                                       // 5199\n    /**                                                                                                                // 5200\n     * Converts `value` to a function if it's not one.                                                                 // 5201\n     *                                                                                                                 // 5202\n     * @private                                                                                                        // 5203\n     * @param {*} value The value to process.                                                                          // 5204\n     * @returns {Function} Returns the function.                                                                       // 5205\n     */                                                                                                                // 5206\n    function toFunction(value) {                                                                                       // 5207\n      return typeof value == 'function' ? value : identity;                                                            // 5208\n    }                                                                                                                  // 5209\n                                                                                                                       // 5210\n    /**                                                                                                                // 5211\n     * Creates a clone of `wrapper`.                                                                                   // 5212\n     *                                                                                                                 // 5213\n     * @private                                                                                                        // 5214\n     * @param {Object} wrapper The wrapper to clone.                                                                   // 5215\n     * @returns {Object} Returns the cloned wrapper.                                                                   // 5216\n     */                                                                                                                // 5217\n    function wrapperClone(wrapper) {                                                                                   // 5218\n      if (wrapper instanceof LazyWrapper) {                                                                            // 5219\n        return wrapper.clone();                                                                                        // 5220\n      }                                                                                                                // 5221\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);                                          // 5222\n      result.__actions__ = copyArray(wrapper.__actions__);                                                             // 5223\n      result.__index__  = wrapper.__index__;                                                                           // 5224\n      result.__values__ = wrapper.__values__;                                                                          // 5225\n      return result;                                                                                                   // 5226\n    }                                                                                                                  // 5227\n                                                                                                                       // 5228\n    /*------------------------------------------------------------------------*/                                       // 5229\n                                                                                                                       // 5230\n    /**                                                                                                                // 5231\n     * Creates an array of elements split into groups the length of `size`.                                            // 5232\n     * If `array` can't be split evenly, the final chunk will be the remaining                                         // 5233\n     * elements.                                                                                                       // 5234\n     *                                                                                                                 // 5235\n     * @static                                                                                                         // 5236\n     * @memberOf _                                                                                                     // 5237\n     * @category Array                                                                                                 // 5238\n     * @param {Array} array The array to process.                                                                      // 5239\n     * @param {number} [size=0] The length of each chunk.                                                              // 5240\n     * @returns {Array} Returns the new array containing chunks.                                                       // 5241\n     * @example                                                                                                        // 5242\n     *                                                                                                                 // 5243\n     * _.chunk(['a', 'b', 'c', 'd'], 2);                                                                               // 5244\n     * // => [['a', 'b'], ['c', 'd']]                                                                                  // 5245\n     *                                                                                                                 // 5246\n     * _.chunk(['a', 'b', 'c', 'd'], 3);                                                                               // 5247\n     * // => [['a', 'b', 'c'], ['d']]                                                                                  // 5248\n     */                                                                                                                // 5249\n    function chunk(array, size) {                                                                                      // 5250\n      size = nativeMax(toInteger(size), 0);                                                                            // 5251\n                                                                                                                       // 5252\n      var length = array ? array.length : 0;                                                                           // 5253\n      if (!length || size < 1) {                                                                                       // 5254\n        return [];                                                                                                     // 5255\n      }                                                                                                                // 5256\n      var index = 0,                                                                                                   // 5257\n          resIndex = -1,                                                                                               // 5258\n          result = Array(nativeCeil(length / size));                                                                   // 5259\n                                                                                                                       // 5260\n      while (index < length) {                                                                                         // 5261\n        result[++resIndex] = baseSlice(array, index, (index += size));                                                 // 5262\n      }                                                                                                                // 5263\n      return result;                                                                                                   // 5264\n    }                                                                                                                  // 5265\n                                                                                                                       // 5266\n    /**                                                                                                                // 5267\n     * Creates an array with all falsey values removed. The values `false`, `null`,                                    // 5268\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.                                                                   // 5269\n     *                                                                                                                 // 5270\n     * @static                                                                                                         // 5271\n     * @memberOf _                                                                                                     // 5272\n     * @category Array                                                                                                 // 5273\n     * @param {Array} array The array to compact.                                                                      // 5274\n     * @returns {Array} Returns the new array of filtered values.                                                      // 5275\n     * @example                                                                                                        // 5276\n     *                                                                                                                 // 5277\n     * _.compact([0, 1, false, 2, '', 3]);                                                                             // 5278\n     * // => [1, 2, 3]                                                                                                 // 5279\n     */                                                                                                                // 5280\n    function compact(array) {                                                                                          // 5281\n      var index = -1,                                                                                                  // 5282\n          length = array ? array.length : 0,                                                                           // 5283\n          resIndex = -1,                                                                                               // 5284\n          result = [];                                                                                                 // 5285\n                                                                                                                       // 5286\n      while (++index < length) {                                                                                       // 5287\n        var value = array[index];                                                                                      // 5288\n        if (value) {                                                                                                   // 5289\n          result[++resIndex] = value;                                                                                  // 5290\n        }                                                                                                              // 5291\n      }                                                                                                                // 5292\n      return result;                                                                                                   // 5293\n    }                                                                                                                  // 5294\n                                                                                                                       // 5295\n    /**                                                                                                                // 5296\n     * Creates a new array concatenating `array` with any additional arrays                                            // 5297\n     * and/or values.                                                                                                  // 5298\n     *                                                                                                                 // 5299\n     * @static                                                                                                         // 5300\n     * @memberOf _                                                                                                     // 5301\n     * @category Array                                                                                                 // 5302\n     * @param {Array} array The array to concatenate.                                                                  // 5303\n     * @param {...*} [values] The values to concatenate.                                                               // 5304\n     * @returns {Array} Returns the new concatenated array.                                                            // 5305\n     * @example                                                                                                        // 5306\n     *                                                                                                                 // 5307\n     * var array = [1];                                                                                                // 5308\n     * var other = _.concat(array, 2, [3], [[4]]);                                                                     // 5309\n     *                                                                                                                 // 5310\n     * console.log(other);                                                                                             // 5311\n     * // => [1, 2, 3, [4]]                                                                                            // 5312\n     *                                                                                                                 // 5313\n     * console.log(array);                                                                                             // 5314\n     * // => [1]                                                                                                       // 5315\n     */                                                                                                                // 5316\n    var concat = rest(function(array, values) {                                                                        // 5317\n      values = baseFlatten(values);                                                                                    // 5318\n      return arrayConcat(isArray(array) ? array : [Object(array)], values);                                            // 5319\n    });                                                                                                                // 5320\n                                                                                                                       // 5321\n    /**                                                                                                                // 5322\n     * Creates an array of unique `array` values not included in the other                                             // 5323\n     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)          // 5324\n     * for equality comparisons.                                                                                       // 5325\n     *                                                                                                                 // 5326\n     * @static                                                                                                         // 5327\n     * @memberOf _                                                                                                     // 5328\n     * @category Array                                                                                                 // 5329\n     * @param {Array} array The array to inspect.                                                                      // 5330\n     * @param {...Array} [values] The values to exclude.                                                               // 5331\n     * @returns {Array} Returns the new array of filtered values.                                                      // 5332\n     * @example                                                                                                        // 5333\n     *                                                                                                                 // 5334\n     * _.difference([3, 2, 1], [4, 2]);                                                                                // 5335\n     * // => [3, 1]                                                                                                    // 5336\n     */                                                                                                                // 5337\n    var difference = rest(function(array, values) {                                                                    // 5338\n      return isArrayLikeObject(array)                                                                                  // 5339\n        ? baseDifference(array, baseFlatten(values, false, true))                                                      // 5340\n        : [];                                                                                                          // 5341\n    });                                                                                                                // 5342\n                                                                                                                       // 5343\n    /**                                                                                                                // 5344\n     * This method is like `_.difference` except that it accepts `iteratee` which                                      // 5345\n     * is invoked for each element of `array` and `values` to generate the criterion                                   // 5346\n     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).                            // 5347\n     *                                                                                                                 // 5348\n     * @static                                                                                                         // 5349\n     * @memberOf _                                                                                                     // 5350\n     * @category Array                                                                                                 // 5351\n     * @param {Array} array The array to inspect.                                                                      // 5352\n     * @param {...Array} [values] The values to exclude.                                                               // 5353\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 5354\n     * @returns {Array} Returns the new array of filtered values.                                                      // 5355\n     * @example                                                                                                        // 5356\n     *                                                                                                                 // 5357\n     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);                                                        // 5358\n     * // => [3.1, 1.3]                                                                                                // 5359\n     *                                                                                                                 // 5360\n     * // using the `_.property` iteratee shorthand                                                                    // 5361\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');                                                    // 5362\n     * // => [{ 'x': 2 }]                                                                                              // 5363\n     */                                                                                                                // 5364\n    var differenceBy = rest(function(array, values) {                                                                  // 5365\n      var iteratee = last(values);                                                                                     // 5366\n      if (isArrayLikeObject(iteratee)) {                                                                               // 5367\n        iteratee = undefined;                                                                                          // 5368\n      }                                                                                                                // 5369\n      return isArrayLikeObject(array)                                                                                  // 5370\n        ? baseDifference(array, baseFlatten(values, false, true), getIteratee(iteratee))                               // 5371\n        : [];                                                                                                          // 5372\n    });                                                                                                                // 5373\n                                                                                                                       // 5374\n    /**                                                                                                                // 5375\n     * This method is like `_.difference` except that it accepts `comparator`                                          // 5376\n     * which is invoked to compare elements of `array` to `values`. The comparator                                     // 5377\n     * is invoked with two arguments: (arrVal, othVal).                                                                // 5378\n     *                                                                                                                 // 5379\n     * @static                                                                                                         // 5380\n     * @memberOf _                                                                                                     // 5381\n     * @category Array                                                                                                 // 5382\n     * @param {Array} array The array to inspect.                                                                      // 5383\n     * @param {...Array} [values] The values to exclude.                                                               // 5384\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 5385\n     * @returns {Array} Returns the new array of filtered values.                                                      // 5386\n     * @example                                                                                                        // 5387\n     *                                                                                                                 // 5388\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];                                                         // 5389\n     *                                                                                                                 // 5390\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);                                                     // 5391\n     * // => [{ 'x': 2, 'y': 1 }]                                                                                      // 5392\n     */                                                                                                                // 5393\n    var differenceWith = rest(function(array, values) {                                                                // 5394\n      var comparator = last(values);                                                                                   // 5395\n      if (isArrayLikeObject(comparator)) {                                                                             // 5396\n        comparator = undefined;                                                                                        // 5397\n      }                                                                                                                // 5398\n      return isArrayLikeObject(array)                                                                                  // 5399\n        ? baseDifference(array, baseFlatten(values, false, true), undefined, comparator)                               // 5400\n        : [];                                                                                                          // 5401\n    });                                                                                                                // 5402\n                                                                                                                       // 5403\n    /**                                                                                                                // 5404\n     * Creates a slice of `array` with `n` elements dropped from the beginning.                                        // 5405\n     *                                                                                                                 // 5406\n     * @static                                                                                                         // 5407\n     * @memberOf _                                                                                                     // 5408\n     * @category Array                                                                                                 // 5409\n     * @param {Array} array The array to query.                                                                        // 5410\n     * @param {number} [n=1] The number of elements to drop.                                                           // 5411\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 5412\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5413\n     * @example                                                                                                        // 5414\n     *                                                                                                                 // 5415\n     * _.drop([1, 2, 3]);                                                                                              // 5416\n     * // => [2, 3]                                                                                                    // 5417\n     *                                                                                                                 // 5418\n     * _.drop([1, 2, 3], 2);                                                                                           // 5419\n     * // => [3]                                                                                                       // 5420\n     *                                                                                                                 // 5421\n     * _.drop([1, 2, 3], 5);                                                                                           // 5422\n     * // => []                                                                                                        // 5423\n     *                                                                                                                 // 5424\n     * _.drop([1, 2, 3], 0);                                                                                           // 5425\n     * // => [1, 2, 3]                                                                                                 // 5426\n     */                                                                                                                // 5427\n    function drop(array, n, guard) {                                                                                   // 5428\n      var length = array ? array.length : 0;                                                                           // 5429\n      if (!length) {                                                                                                   // 5430\n        return [];                                                                                                     // 5431\n      }                                                                                                                // 5432\n      n = (guard || n === undefined) ? 1 : toInteger(n);                                                               // 5433\n      return baseSlice(array, n < 0 ? 0 : n, length);                                                                  // 5434\n    }                                                                                                                  // 5435\n                                                                                                                       // 5436\n    /**                                                                                                                // 5437\n     * Creates a slice of `array` with `n` elements dropped from the end.                                              // 5438\n     *                                                                                                                 // 5439\n     * @static                                                                                                         // 5440\n     * @memberOf _                                                                                                     // 5441\n     * @category Array                                                                                                 // 5442\n     * @param {Array} array The array to query.                                                                        // 5443\n     * @param {number} [n=1] The number of elements to drop.                                                           // 5444\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 5445\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5446\n     * @example                                                                                                        // 5447\n     *                                                                                                                 // 5448\n     * _.dropRight([1, 2, 3]);                                                                                         // 5449\n     * // => [1, 2]                                                                                                    // 5450\n     *                                                                                                                 // 5451\n     * _.dropRight([1, 2, 3], 2);                                                                                      // 5452\n     * // => [1]                                                                                                       // 5453\n     *                                                                                                                 // 5454\n     * _.dropRight([1, 2, 3], 5);                                                                                      // 5455\n     * // => []                                                                                                        // 5456\n     *                                                                                                                 // 5457\n     * _.dropRight([1, 2, 3], 0);                                                                                      // 5458\n     * // => [1, 2, 3]                                                                                                 // 5459\n     */                                                                                                                // 5460\n    function dropRight(array, n, guard) {                                                                              // 5461\n      var length = array ? array.length : 0;                                                                           // 5462\n      if (!length) {                                                                                                   // 5463\n        return [];                                                                                                     // 5464\n      }                                                                                                                // 5465\n      n = (guard || n === undefined) ? 1 : toInteger(n);                                                               // 5466\n      n = length - n;                                                                                                  // 5467\n      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 5468\n    }                                                                                                                  // 5469\n                                                                                                                       // 5470\n    /**                                                                                                                // 5471\n     * Creates a slice of `array` excluding elements dropped from the end.                                             // 5472\n     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 5473\n     * invoked with three arguments: (value, index, array).                                                            // 5474\n     *                                                                                                                 // 5475\n     * @static                                                                                                         // 5476\n     * @memberOf _                                                                                                     // 5477\n     * @category Array                                                                                                 // 5478\n     * @param {Array} array The array to query.                                                                        // 5479\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 5480\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5481\n     * @example                                                                                                        // 5482\n     *                                                                                                                 // 5483\n     * var users = [                                                                                                   // 5484\n     *   { 'user': 'barney',  'active': true },                                                                        // 5485\n     *   { 'user': 'fred',    'active': false },                                                                       // 5486\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 5487\n     * ];                                                                                                              // 5488\n     *                                                                                                                 // 5489\n     * _.dropRightWhile(users, function(o) { return !o.active; });                                                     // 5490\n     * // => objects for ['barney']                                                                                    // 5491\n     *                                                                                                                 // 5492\n     * // using the `_.matches` iteratee shorthand                                                                     // 5493\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });                                                // 5494\n     * // => objects for ['barney', 'fred']                                                                            // 5495\n     *                                                                                                                 // 5496\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 5497\n     * _.dropRightWhile(users, ['active', false]);                                                                     // 5498\n     * // => objects for ['barney']                                                                                    // 5499\n     *                                                                                                                 // 5500\n     * // using the `_.property` iteratee shorthand                                                                    // 5501\n     * _.dropRightWhile(users, 'active');                                                                              // 5502\n     * // => objects for ['barney', 'fred', 'pebbles']                                                                 // 5503\n     */                                                                                                                // 5504\n    function dropRightWhile(array, predicate) {                                                                        // 5505\n      return (array && array.length)                                                                                   // 5506\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)                                                      // 5507\n        : [];                                                                                                          // 5508\n    }                                                                                                                  // 5509\n                                                                                                                       // 5510\n    /**                                                                                                                // 5511\n     * Creates a slice of `array` excluding elements dropped from the beginning.                                       // 5512\n     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 5513\n     * invoked with three arguments: (value, index, array).                                                            // 5514\n     *                                                                                                                 // 5515\n     * @static                                                                                                         // 5516\n     * @memberOf _                                                                                                     // 5517\n     * @category Array                                                                                                 // 5518\n     * @param {Array} array The array to query.                                                                        // 5519\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 5520\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5521\n     * @example                                                                                                        // 5522\n     *                                                                                                                 // 5523\n     * var users = [                                                                                                   // 5524\n     *   { 'user': 'barney',  'active': false },                                                                       // 5525\n     *   { 'user': 'fred',    'active': false },                                                                       // 5526\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 5527\n     * ];                                                                                                              // 5528\n     *                                                                                                                 // 5529\n     * _.dropWhile(users, function(o) { return !o.active; });                                                          // 5530\n     * // => objects for ['pebbles']                                                                                   // 5531\n     *                                                                                                                 // 5532\n     * // using the `_.matches` iteratee shorthand                                                                     // 5533\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });                                                      // 5534\n     * // => objects for ['fred', 'pebbles']                                                                           // 5535\n     *                                                                                                                 // 5536\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 5537\n     * _.dropWhile(users, ['active', false]);                                                                          // 5538\n     * // => objects for ['pebbles']                                                                                   // 5539\n     *                                                                                                                 // 5540\n     * // using the `_.property` iteratee shorthand                                                                    // 5541\n     * _.dropWhile(users, 'active');                                                                                   // 5542\n     * // => objects for ['barney', 'fred', 'pebbles']                                                                 // 5543\n     */                                                                                                                // 5544\n    function dropWhile(array, predicate) {                                                                             // 5545\n      return (array && array.length)                                                                                   // 5546\n        ? baseWhile(array, getIteratee(predicate, 3), true)                                                            // 5547\n        : [];                                                                                                          // 5548\n    }                                                                                                                  // 5549\n                                                                                                                       // 5550\n    /**                                                                                                                // 5551\n     * Fills elements of `array` with `value` from `start` up to, but not                                              // 5552\n     * including, `end`.                                                                                               // 5553\n     *                                                                                                                 // 5554\n     * **Note:** This method mutates `array`.                                                                          // 5555\n     *                                                                                                                 // 5556\n     * @static                                                                                                         // 5557\n     * @memberOf _                                                                                                     // 5558\n     * @category Array                                                                                                 // 5559\n     * @param {Array} array The array to fill.                                                                         // 5560\n     * @param {*} value The value to fill `array` with.                                                                // 5561\n     * @param {number} [start=0] The start position.                                                                   // 5562\n     * @param {number} [end=array.length] The end position.                                                            // 5563\n     * @returns {Array} Returns `array`.                                                                               // 5564\n     * @example                                                                                                        // 5565\n     *                                                                                                                 // 5566\n     * var array = [1, 2, 3];                                                                                          // 5567\n     *                                                                                                                 // 5568\n     * _.fill(array, 'a');                                                                                             // 5569\n     * console.log(array);                                                                                             // 5570\n     * // => ['a', 'a', 'a']                                                                                           // 5571\n     *                                                                                                                 // 5572\n     * _.fill(Array(3), 2);                                                                                            // 5573\n     * // => [2, 2, 2]                                                                                                 // 5574\n     *                                                                                                                 // 5575\n     * _.fill([4, 6, 8, 10], '*', 1, 3);                                                                               // 5576\n     * // => [4, '*', '*', 10]                                                                                         // 5577\n     */                                                                                                                // 5578\n    function fill(array, value, start, end) {                                                                          // 5579\n      var length = array ? array.length : 0;                                                                           // 5580\n      if (!length) {                                                                                                   // 5581\n        return [];                                                                                                     // 5582\n      }                                                                                                                // 5583\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {                                  // 5584\n        start = 0;                                                                                                     // 5585\n        end = length;                                                                                                  // 5586\n      }                                                                                                                // 5587\n      return baseFill(array, value, start, end);                                                                       // 5588\n    }                                                                                                                  // 5589\n                                                                                                                       // 5590\n    /**                                                                                                                // 5591\n     * This method is like `_.find` except that it returns the index of the first                                      // 5592\n     * element `predicate` returns truthy for instead of the element itself.                                           // 5593\n     *                                                                                                                 // 5594\n     * @static                                                                                                         // 5595\n     * @memberOf _                                                                                                     // 5596\n     * @category Array                                                                                                 // 5597\n     * @param {Array} array The array to search.                                                                       // 5598\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 5599\n     * @returns {number} Returns the index of the found element, else `-1`.                                            // 5600\n     * @example                                                                                                        // 5601\n     *                                                                                                                 // 5602\n     * var users = [                                                                                                   // 5603\n     *   { 'user': 'barney',  'active': false },                                                                       // 5604\n     *   { 'user': 'fred',    'active': false },                                                                       // 5605\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 5606\n     * ];                                                                                                              // 5607\n     *                                                                                                                 // 5608\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });                                                 // 5609\n     * // => 0                                                                                                         // 5610\n     *                                                                                                                 // 5611\n     * // using the `_.matches` iteratee shorthand                                                                     // 5612\n     * _.findIndex(users, { 'user': 'fred', 'active': false });                                                        // 5613\n     * // => 1                                                                                                         // 5614\n     *                                                                                                                 // 5615\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 5616\n     * _.findIndex(users, ['active', false]);                                                                          // 5617\n     * // => 0                                                                                                         // 5618\n     *                                                                                                                 // 5619\n     * // using the `_.property` iteratee shorthand                                                                    // 5620\n     * _.findIndex(users, 'active');                                                                                   // 5621\n     * // => 2                                                                                                         // 5622\n     */                                                                                                                // 5623\n    function findIndex(array, predicate) {                                                                             // 5624\n      return (array && array.length)                                                                                   // 5625\n        ? baseFindIndex(array, getIteratee(predicate, 3))                                                              // 5626\n        : -1;                                                                                                          // 5627\n    }                                                                                                                  // 5628\n                                                                                                                       // 5629\n    /**                                                                                                                // 5630\n     * This method is like `_.findIndex` except that it iterates over elements                                         // 5631\n     * of `collection` from right to left.                                                                             // 5632\n     *                                                                                                                 // 5633\n     * @static                                                                                                         // 5634\n     * @memberOf _                                                                                                     // 5635\n     * @category Array                                                                                                 // 5636\n     * @param {Array} array The array to search.                                                                       // 5637\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 5638\n     * @returns {number} Returns the index of the found element, else `-1`.                                            // 5639\n     * @example                                                                                                        // 5640\n     *                                                                                                                 // 5641\n     * var users = [                                                                                                   // 5642\n     *   { 'user': 'barney',  'active': true },                                                                        // 5643\n     *   { 'user': 'fred',    'active': false },                                                                       // 5644\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 5645\n     * ];                                                                                                              // 5646\n     *                                                                                                                 // 5647\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });                                            // 5648\n     * // => 2                                                                                                         // 5649\n     *                                                                                                                 // 5650\n     * // using the `_.matches` iteratee shorthand                                                                     // 5651\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });                                                   // 5652\n     * // => 0                                                                                                         // 5653\n     *                                                                                                                 // 5654\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 5655\n     * _.findLastIndex(users, ['active', false]);                                                                      // 5656\n     * // => 2                                                                                                         // 5657\n     *                                                                                                                 // 5658\n     * // using the `_.property` iteratee shorthand                                                                    // 5659\n     * _.findLastIndex(users, 'active');                                                                               // 5660\n     * // => 0                                                                                                         // 5661\n     */                                                                                                                // 5662\n    function findLastIndex(array, predicate) {                                                                         // 5663\n      return (array && array.length)                                                                                   // 5664\n        ? baseFindIndex(array, getIteratee(predicate, 3), true)                                                        // 5665\n        : -1;                                                                                                          // 5666\n    }                                                                                                                  // 5667\n                                                                                                                       // 5668\n    /**                                                                                                                // 5669\n     * Creates an array of flattened values by running each element in `array`                                         // 5670\n     * through `iteratee` and concating its result to the other mapped values.                                         // 5671\n     * The iteratee is invoked with three arguments: (value, index|key, array).                                        // 5672\n     *                                                                                                                 // 5673\n     * @static                                                                                                         // 5674\n     * @memberOf _                                                                                                     // 5675\n     * @category Array                                                                                                 // 5676\n     * @param {Array} array The array to iterate over.                                                                 // 5677\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 5678\n     * @returns {Array} Returns the new array.                                                                         // 5679\n     * @example                                                                                                        // 5680\n     *                                                                                                                 // 5681\n     * function duplicate(n) {                                                                                         // 5682\n     *   return [n, n];                                                                                                // 5683\n     * }                                                                                                               // 5684\n     *                                                                                                                 // 5685\n     * _.flatMap([1, 2], duplicate);                                                                                   // 5686\n     * // => [1, 1, 2, 2]                                                                                              // 5687\n     */                                                                                                                // 5688\n    function flatMap(array, iteratee) {                                                                                // 5689\n      var length = array ? array.length : 0;                                                                           // 5690\n      return length ? baseFlatten(arrayMap(array, getIteratee(iteratee, 3))) : [];                                     // 5691\n    }                                                                                                                  // 5692\n                                                                                                                       // 5693\n    /**                                                                                                                // 5694\n     * Flattens `array` a single level.                                                                                // 5695\n     *                                                                                                                 // 5696\n     * @static                                                                                                         // 5697\n     * @memberOf _                                                                                                     // 5698\n     * @category Array                                                                                                 // 5699\n     * @param {Array} array The array to flatten.                                                                      // 5700\n     * @returns {Array} Returns the new flattened array.                                                               // 5701\n     * @example                                                                                                        // 5702\n     *                                                                                                                 // 5703\n     * _.flatten([1, [2, 3, [4]]]);                                                                                    // 5704\n     * // => [1, 2, 3, [4]]                                                                                            // 5705\n     */                                                                                                                // 5706\n    function flatten(array) {                                                                                          // 5707\n      var length = array ? array.length : 0;                                                                           // 5708\n      return length ? baseFlatten(array) : [];                                                                         // 5709\n    }                                                                                                                  // 5710\n                                                                                                                       // 5711\n    /**                                                                                                                // 5712\n     * This method is like `_.flatten` except that it recursively flattens `array`.                                    // 5713\n     *                                                                                                                 // 5714\n     * @static                                                                                                         // 5715\n     * @memberOf _                                                                                                     // 5716\n     * @category Array                                                                                                 // 5717\n     * @param {Array} array The array to recursively flatten.                                                          // 5718\n     * @returns {Array} Returns the new flattened array.                                                               // 5719\n     * @example                                                                                                        // 5720\n     *                                                                                                                 // 5721\n     * _.flattenDeep([1, [2, 3, [4]]]);                                                                                // 5722\n     * // => [1, 2, 3, 4]                                                                                              // 5723\n     */                                                                                                                // 5724\n    function flattenDeep(array) {                                                                                      // 5725\n      var length = array ? array.length : 0;                                                                           // 5726\n      return length ? baseFlatten(array, true) : [];                                                                   // 5727\n    }                                                                                                                  // 5728\n                                                                                                                       // 5729\n    /**                                                                                                                // 5730\n     * The inverse of `_.toPairs`; this method returns an object composed                                              // 5731\n     * from key-value `pairs`.                                                                                         // 5732\n     *                                                                                                                 // 5733\n     * @static                                                                                                         // 5734\n     * @memberOf _                                                                                                     // 5735\n     * @category Array                                                                                                 // 5736\n     * @param {Array} pairs The key-value pairs.                                                                       // 5737\n     * @returns {Object} Returns the new object.                                                                       // 5738\n     * @example                                                                                                        // 5739\n     *                                                                                                                 // 5740\n     * _.fromPairs([['fred', 30], ['barney', 40]]);                                                                    // 5741\n     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5742\n     */                                                                                                                // 5743\n    function fromPairs(pairs) {                                                                                        // 5744\n      var index = -1,                                                                                                  // 5745\n          length = pairs ? pairs.length : 0,                                                                           // 5746\n          result = {};                                                                                                 // 5747\n                                                                                                                       // 5748\n      while (++index < length) {                                                                                       // 5749\n        var pair = pairs[index];                                                                                       // 5750\n        baseSet(result, pair[0], pair[1]);                                                                             // 5751\n      }                                                                                                                // 5752\n      return result;                                                                                                   // 5753\n    }                                                                                                                  // 5754\n                                                                                                                       // 5755\n    /**                                                                                                                // 5756\n     * Gets the first element of `array`.                                                                              // 5757\n     *                                                                                                                 // 5758\n     * @static                                                                                                         // 5759\n     * @memberOf _                                                                                                     // 5760\n     * @alias first                                                                                                    // 5761\n     * @category Array                                                                                                 // 5762\n     * @param {Array} array The array to query.                                                                        // 5763\n     * @returns {*} Returns the first element of `array`.                                                              // 5764\n     * @example                                                                                                        // 5765\n     *                                                                                                                 // 5766\n     * _.head([1, 2, 3]);                                                                                              // 5767\n     * // => 1                                                                                                         // 5768\n     *                                                                                                                 // 5769\n     * _.head([]);                                                                                                     // 5770\n     * // => undefined                                                                                                 // 5771\n     */                                                                                                                // 5772\n    function head(array) {                                                                                             // 5773\n      return array ? array[0] : undefined;                                                                             // 5774\n    }                                                                                                                  // 5775\n                                                                                                                       // 5776\n    /**                                                                                                                // 5777\n     * Gets the index at which the first occurrence of `value` is found in `array`                                     // 5778\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 5779\n     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 5780\n     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`                                  // 5781\n     * performs a faster binary search.                                                                                // 5782\n     *                                                                                                                 // 5783\n     * @static                                                                                                         // 5784\n     * @memberOf _                                                                                                     // 5785\n     * @category Array                                                                                                 // 5786\n     * @param {Array} array The array to search.                                                                       // 5787\n     * @param {*} value The value to search for.                                                                       // 5788\n     * @param {number} [fromIndex=0] The index to search from.                                                         // 5789\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5790\n     * @example                                                                                                        // 5791\n     *                                                                                                                 // 5792\n     * _.indexOf([1, 2, 1, 2], 2);                                                                                     // 5793\n     * // => 1                                                                                                         // 5794\n     *                                                                                                                 // 5795\n     * // using `fromIndex`                                                                                            // 5796\n     * _.indexOf([1, 2, 1, 2], 2, 2);                                                                                  // 5797\n     * // => 3                                                                                                         // 5798\n     */                                                                                                                // 5799\n    function indexOf(array, value, fromIndex) {                                                                        // 5800\n      var length = array ? array.length : 0;                                                                           // 5801\n      if (!length) {                                                                                                   // 5802\n        return -1;                                                                                                     // 5803\n      }                                                                                                                // 5804\n      fromIndex = toInteger(fromIndex);                                                                                // 5805\n      if (fromIndex < 0) {                                                                                             // 5806\n        fromIndex = nativeMax(length + fromIndex, 0);                                                                  // 5807\n      }                                                                                                                // 5808\n      return baseIndexOf(array, value, fromIndex);                                                                     // 5809\n    }                                                                                                                  // 5810\n                                                                                                                       // 5811\n    /**                                                                                                                // 5812\n     * Gets all but the last element of `array`.                                                                       // 5813\n     *                                                                                                                 // 5814\n     * @static                                                                                                         // 5815\n     * @memberOf _                                                                                                     // 5816\n     * @category Array                                                                                                 // 5817\n     * @param {Array} array The array to query.                                                                        // 5818\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5819\n     * @example                                                                                                        // 5820\n     *                                                                                                                 // 5821\n     * _.initial([1, 2, 3]);                                                                                           // 5822\n     * // => [1, 2]                                                                                                    // 5823\n     */                                                                                                                // 5824\n    function initial(array) {                                                                                          // 5825\n      return dropRight(array, 1);                                                                                      // 5826\n    }                                                                                                                  // 5827\n                                                                                                                       // 5828\n    /**                                                                                                                // 5829\n     * Creates an array of unique values that are included in all of the provided                                      // 5830\n     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                   // 5831\n     * for equality comparisons.                                                                                       // 5832\n     *                                                                                                                 // 5833\n     * @static                                                                                                         // 5834\n     * @memberOf _                                                                                                     // 5835\n     * @category Array                                                                                                 // 5836\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5837\n     * @returns {Array} Returns the new array of shared values.                                                        // 5838\n     * @example                                                                                                        // 5839\n     * _.intersection([2, 1], [4, 2], [1, 2]);                                                                         // 5840\n     * // => [2]                                                                                                       // 5841\n     */                                                                                                                // 5842\n    var intersection = rest(function(arrays) {                                                                         // 5843\n      var mapped = arrayMap(arrays, toArrayLikeObject);                                                                // 5844\n      return (mapped.length && mapped[0] === arrays[0])                                                                // 5845\n        ? baseIntersection(mapped)                                                                                     // 5846\n        : [];                                                                                                          // 5847\n    });                                                                                                                // 5848\n                                                                                                                       // 5849\n    /**                                                                                                                // 5850\n     * This method is like `_.intersection` except that it accepts `iteratee`                                          // 5851\n     * which is invoked for each element of each `arrays` to generate the criterion                                    // 5852\n     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).                            // 5853\n     *                                                                                                                 // 5854\n     * @static                                                                                                         // 5855\n     * @memberOf _                                                                                                     // 5856\n     * @category Array                                                                                                 // 5857\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5858\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 5859\n     * @returns {Array} Returns the new array of shared values.                                                        // 5860\n     * @example                                                                                                        // 5861\n     *                                                                                                                 // 5862\n     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);                                                           // 5863\n     * // => [2.1]                                                                                                     // 5864\n     *                                                                                                                 // 5865\n     * // using the `_.property` iteratee shorthand                                                                    // 5866\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');                                                  // 5867\n     * // => [{ 'x': 1 }]                                                                                              // 5868\n     */                                                                                                                // 5869\n    var intersectionBy = rest(function(arrays) {                                                                       // 5870\n      var iteratee = last(arrays),                                                                                     // 5871\n          mapped = arrayMap(arrays, toArrayLikeObject);                                                                // 5872\n                                                                                                                       // 5873\n      if (iteratee === last(mapped)) {                                                                                 // 5874\n        iteratee = undefined;                                                                                          // 5875\n      } else {                                                                                                         // 5876\n        mapped.pop();                                                                                                  // 5877\n      }                                                                                                                // 5878\n      return (mapped.length && mapped[0] === arrays[0])                                                                // 5879\n        ? baseIntersection(mapped, getIteratee(iteratee))                                                              // 5880\n        : [];                                                                                                          // 5881\n    });                                                                                                                // 5882\n                                                                                                                       // 5883\n    /**                                                                                                                // 5884\n     * This method is like `_.intersection` except that it accepts `comparator`                                        // 5885\n     * which is invoked to compare elements of `arrays`. The comparator is invoked                                     // 5886\n     * with two arguments: (arrVal, othVal).                                                                           // 5887\n     *                                                                                                                 // 5888\n     * @static                                                                                                         // 5889\n     * @memberOf _                                                                                                     // 5890\n     * @category Array                                                                                                 // 5891\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5892\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 5893\n     * @returns {Array} Returns the new array of shared values.                                                        // 5894\n     * @example                                                                                                        // 5895\n     *                                                                                                                 // 5896\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];                                                         // 5897\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];                                                          // 5898\n     *                                                                                                                 // 5899\n     * _.intersectionWith(objects, others, _.isEqual);                                                                 // 5900\n     * // => [{ 'x': 1, 'y': 2 }]                                                                                      // 5901\n     */                                                                                                                // 5902\n    var intersectionWith = rest(function(arrays) {                                                                     // 5903\n      var comparator = last(arrays),                                                                                   // 5904\n          mapped = arrayMap(arrays, toArrayLikeObject);                                                                // 5905\n                                                                                                                       // 5906\n      if (comparator === last(mapped)) {                                                                               // 5907\n        comparator = undefined;                                                                                        // 5908\n      } else {                                                                                                         // 5909\n        mapped.pop();                                                                                                  // 5910\n      }                                                                                                                // 5911\n      return (mapped.length && mapped[0] === arrays[0])                                                                // 5912\n        ? baseIntersection(mapped, undefined, comparator)                                                              // 5913\n        : [];                                                                                                          // 5914\n    });                                                                                                                // 5915\n                                                                                                                       // 5916\n    /**                                                                                                                // 5917\n     * Converts all elements in `array` into a string separated by `separator`.                                        // 5918\n     *                                                                                                                 // 5919\n     * @static                                                                                                         // 5920\n     * @memberOf _                                                                                                     // 5921\n     * @category Array                                                                                                 // 5922\n     * @param {Array} array The array to convert.                                                                      // 5923\n     * @param {string} [separator=','] The element separator.                                                          // 5924\n     * @returns {string} Returns the joined string.                                                                    // 5925\n     * @example                                                                                                        // 5926\n     *                                                                                                                 // 5927\n     * _.join(['a', 'b', 'c'], '~');                                                                                   // 5928\n     * // => 'a~b~c'                                                                                                   // 5929\n     */                                                                                                                // 5930\n    function join(array, separator) {                                                                                  // 5931\n      return array ? nativeJoin.call(array, separator) : '';                                                           // 5932\n    }                                                                                                                  // 5933\n                                                                                                                       // 5934\n    /**                                                                                                                // 5935\n     * Gets the last element of `array`.                                                                               // 5936\n     *                                                                                                                 // 5937\n     * @static                                                                                                         // 5938\n     * @memberOf _                                                                                                     // 5939\n     * @category Array                                                                                                 // 5940\n     * @param {Array} array The array to query.                                                                        // 5941\n     * @returns {*} Returns the last element of `array`.                                                               // 5942\n     * @example                                                                                                        // 5943\n     *                                                                                                                 // 5944\n     * _.last([1, 2, 3]);                                                                                              // 5945\n     * // => 3                                                                                                         // 5946\n     */                                                                                                                // 5947\n    function last(array) {                                                                                             // 5948\n      var length = array ? array.length : 0;                                                                           // 5949\n      return length ? array[length - 1] : undefined;                                                                   // 5950\n    }                                                                                                                  // 5951\n                                                                                                                       // 5952\n    /**                                                                                                                // 5953\n     * This method is like `_.indexOf` except that it iterates over elements of                                        // 5954\n     * `array` from right to left.                                                                                     // 5955\n     *                                                                                                                 // 5956\n     * @static                                                                                                         // 5957\n     * @memberOf _                                                                                                     // 5958\n     * @category Array                                                                                                 // 5959\n     * @param {Array} array The array to search.                                                                       // 5960\n     * @param {*} value The value to search for.                                                                       // 5961\n     * @param {number} [fromIndex=array.length-1] The index to search from.                                            // 5962\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5963\n     * @example                                                                                                        // 5964\n     *                                                                                                                 // 5965\n     * _.lastIndexOf([1, 2, 1, 2], 2);                                                                                 // 5966\n     * // => 3                                                                                                         // 5967\n     *                                                                                                                 // 5968\n     * // using `fromIndex`                                                                                            // 5969\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);                                                                              // 5970\n     * // => 1                                                                                                         // 5971\n     */                                                                                                                // 5972\n    function lastIndexOf(array, value, fromIndex) {                                                                    // 5973\n      var length = array ? array.length : 0;                                                                           // 5974\n      if (!length) {                                                                                                   // 5975\n        return -1;                                                                                                     // 5976\n      }                                                                                                                // 5977\n      var index = length;                                                                                              // 5978\n      if (fromIndex !== undefined) {                                                                                   // 5979\n        index = toInteger(fromIndex);                                                                                  // 5980\n        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;                         // 5981\n      }                                                                                                                // 5982\n      if (value !== value) {                                                                                           // 5983\n        return indexOfNaN(array, index, true);                                                                         // 5984\n      }                                                                                                                // 5985\n      while (index--) {                                                                                                // 5986\n        if (array[index] === value) {                                                                                  // 5987\n          return index;                                                                                                // 5988\n        }                                                                                                              // 5989\n      }                                                                                                                // 5990\n      return -1;                                                                                                       // 5991\n    }                                                                                                                  // 5992\n                                                                                                                       // 5993\n    /**                                                                                                                // 5994\n     * Removes all provided values from `array` using                                                                  // 5995\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5996\n     * for equality comparisons.                                                                                       // 5997\n     *                                                                                                                 // 5998\n     * **Note:** Unlike `_.without`, this method mutates `array`.                                                      // 5999\n     *                                                                                                                 // 6000\n     * @static                                                                                                         // 6001\n     * @memberOf _                                                                                                     // 6002\n     * @category Array                                                                                                 // 6003\n     * @param {Array} array The array to modify.                                                                       // 6004\n     * @param {...*} [values] The values to remove.                                                                    // 6005\n     * @returns {Array} Returns `array`.                                                                               // 6006\n     * @example                                                                                                        // 6007\n     *                                                                                                                 // 6008\n     * var array = [1, 2, 3, 1, 2, 3];                                                                                 // 6009\n     *                                                                                                                 // 6010\n     * _.pull(array, 2, 3);                                                                                            // 6011\n     * console.log(array);                                                                                             // 6012\n     * // => [1, 1]                                                                                                    // 6013\n     */                                                                                                                // 6014\n    var pull = rest(pullAll);                                                                                          // 6015\n                                                                                                                       // 6016\n    /**                                                                                                                // 6017\n     * This method is like `_.pull` except that it accepts an array of values to remove.                               // 6018\n     *                                                                                                                 // 6019\n     * **Note:** Unlike `_.difference`, this method mutates `array`.                                                   // 6020\n     *                                                                                                                 // 6021\n     * @static                                                                                                         // 6022\n     * @memberOf _                                                                                                     // 6023\n     * @category Array                                                                                                 // 6024\n     * @param {Array} array The array to modify.                                                                       // 6025\n     * @param {Array} values The values to remove.                                                                     // 6026\n     * @returns {Array} Returns `array`.                                                                               // 6027\n     * @example                                                                                                        // 6028\n     *                                                                                                                 // 6029\n     * var array = [1, 2, 3, 1, 2, 3];                                                                                 // 6030\n     *                                                                                                                 // 6031\n     * _.pull(array, [2, 3]);                                                                                          // 6032\n     * console.log(array);                                                                                             // 6033\n     * // => [1, 1]                                                                                                    // 6034\n     */                                                                                                                // 6035\n    function pullAll(array, values) {                                                                                  // 6036\n      return (array && array.length && values && values.length)                                                        // 6037\n        ? basePullAll(array, values)                                                                                   // 6038\n        : array;                                                                                                       // 6039\n    }                                                                                                                  // 6040\n                                                                                                                       // 6041\n    /**                                                                                                                // 6042\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is                                      // 6043\n     * invoked for each element of `array` and `values` to to generate the criterion                                   // 6044\n     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).                            // 6045\n     *                                                                                                                 // 6046\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.                                                 // 6047\n     *                                                                                                                 // 6048\n     * @static                                                                                                         // 6049\n     * @memberOf _                                                                                                     // 6050\n     * @category Array                                                                                                 // 6051\n     * @param {Array} array The array to modify.                                                                       // 6052\n     * @param {Array} values The values to remove.                                                                     // 6053\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6054\n     * @returns {Array} Returns `array`.                                                                               // 6055\n     * @example                                                                                                        // 6056\n     *                                                                                                                 // 6057\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];                                                   // 6058\n     *                                                                                                                 // 6059\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');                                                              // 6060\n     * console.log(array);                                                                                             // 6061\n     * // => [{ 'x': 2 }]                                                                                              // 6062\n     */                                                                                                                // 6063\n    function pullAllBy(array, values, iteratee) {                                                                      // 6064\n      return (array && array.length && values && values.length)                                                        // 6065\n        ? basePullAllBy(array, values, getIteratee(iteratee))                                                          // 6066\n        : array;                                                                                                       // 6067\n    }                                                                                                                  // 6068\n                                                                                                                       // 6069\n    /**                                                                                                                // 6070\n     * Removes elements from `array` corresponding to `indexes` and returns an                                         // 6071\n     * array of removed elements.                                                                                      // 6072\n     *                                                                                                                 // 6073\n     * **Note:** Unlike `_.at`, this method mutates `array`.                                                           // 6074\n     *                                                                                                                 // 6075\n     * @static                                                                                                         // 6076\n     * @memberOf _                                                                                                     // 6077\n     * @category Array                                                                                                 // 6078\n     * @param {Array} array The array to modify.                                                                       // 6079\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove,                                      // 6080\n     *  specified individually or in arrays.                                                                           // 6081\n     * @returns {Array} Returns the new array of removed elements.                                                     // 6082\n     * @example                                                                                                        // 6083\n     *                                                                                                                 // 6084\n     * var array = [5, 10, 15, 20];                                                                                    // 6085\n     * var evens = _.pullAt(array, 1, 3);                                                                              // 6086\n     *                                                                                                                 // 6087\n     * console.log(array);                                                                                             // 6088\n     * // => [5, 15]                                                                                                   // 6089\n     *                                                                                                                 // 6090\n     * console.log(evens);                                                                                             // 6091\n     * // => [10, 20]                                                                                                  // 6092\n     */                                                                                                                // 6093\n    var pullAt = rest(function(array, indexes) {                                                                       // 6094\n      indexes = arrayMap(baseFlatten(indexes), String);                                                                // 6095\n                                                                                                                       // 6096\n      var result = baseAt(array, indexes);                                                                             // 6097\n      basePullAt(array, indexes.sort(compareAscending));                                                               // 6098\n      return result;                                                                                                   // 6099\n    });                                                                                                                // 6100\n                                                                                                                       // 6101\n    /**                                                                                                                // 6102\n     * Removes all elements from `array` that `predicate` returns truthy for                                           // 6103\n     * and returns an array of the removed elements. The predicate is invoked with                                     // 6104\n     * three arguments: (value, index, array).                                                                         // 6105\n     *                                                                                                                 // 6106\n     * **Note:** Unlike `_.filter`, this method mutates `array`.                                                       // 6107\n     *                                                                                                                 // 6108\n     * @static                                                                                                         // 6109\n     * @memberOf _                                                                                                     // 6110\n     * @category Array                                                                                                 // 6111\n     * @param {Array} array The array to modify.                                                                       // 6112\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 6113\n     * @returns {Array} Returns the new array of removed elements.                                                     // 6114\n     * @example                                                                                                        // 6115\n     *                                                                                                                 // 6116\n     * var array = [1, 2, 3, 4];                                                                                       // 6117\n     * var evens = _.remove(array, function(n) {                                                                       // 6118\n     *   return n % 2 == 0;                                                                                            // 6119\n     * });                                                                                                             // 6120\n     *                                                                                                                 // 6121\n     * console.log(array);                                                                                             // 6122\n     * // => [1, 3]                                                                                                    // 6123\n     *                                                                                                                 // 6124\n     * console.log(evens);                                                                                             // 6125\n     * // => [2, 4]                                                                                                    // 6126\n     */                                                                                                                // 6127\n    function remove(array, predicate) {                                                                                // 6128\n      var result = [];                                                                                                 // 6129\n      if (!(array && array.length)) {                                                                                  // 6130\n        return result;                                                                                                 // 6131\n      }                                                                                                                // 6132\n      var index = -1,                                                                                                  // 6133\n          indexes = [],                                                                                                // 6134\n          length = array.length;                                                                                       // 6135\n                                                                                                                       // 6136\n      predicate = getIteratee(predicate, 3);                                                                           // 6137\n      while (++index < length) {                                                                                       // 6138\n        var value = array[index];                                                                                      // 6139\n        if (predicate(value, index, array)) {                                                                          // 6140\n          result.push(value);                                                                                          // 6141\n          indexes.push(index);                                                                                         // 6142\n        }                                                                                                              // 6143\n      }                                                                                                                // 6144\n      basePullAt(array, indexes);                                                                                      // 6145\n      return result;                                                                                                   // 6146\n    }                                                                                                                  // 6147\n                                                                                                                       // 6148\n    /**                                                                                                                // 6149\n     * Reverses `array` so that the first element becomes the last, the second                                         // 6150\n     * element becomes the second to last, and so on.                                                                  // 6151\n     *                                                                                                                 // 6152\n     * **Note:** This method mutates `array` and is based on                                                           // 6153\n     * [`Array#reverse`](https://mdn.io/Array/reverse).                                                                // 6154\n     *                                                                                                                 // 6155\n     * @memberOf _                                                                                                     // 6156\n     * @category Array                                                                                                 // 6157\n     * @returns {Array} Returns `array`.                                                                               // 6158\n     * @example                                                                                                        // 6159\n     *                                                                                                                 // 6160\n     * var array = [1, 2, 3];                                                                                          // 6161\n     *                                                                                                                 // 6162\n     * _.reverse(array);                                                                                               // 6163\n     * // => [3, 2, 1]                                                                                                 // 6164\n     *                                                                                                                 // 6165\n     * console.log(array);                                                                                             // 6166\n     * // => [3, 2, 1]                                                                                                 // 6167\n     */                                                                                                                // 6168\n    function reverse(array) {                                                                                          // 6169\n      return array ? nativeReverse.call(array) : array;                                                                // 6170\n    }                                                                                                                  // 6171\n                                                                                                                       // 6172\n    /**                                                                                                                // 6173\n     * Creates a slice of `array` from `start` up to, but not including, `end`.                                        // 6174\n     *                                                                                                                 // 6175\n     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)                            // 6176\n     * to ensure dense arrays are returned.                                                                            // 6177\n     *                                                                                                                 // 6178\n     * @static                                                                                                         // 6179\n     * @memberOf _                                                                                                     // 6180\n     * @category Array                                                                                                 // 6181\n     * @param {Array} array The array to slice.                                                                        // 6182\n     * @param {number} [start=0] The start position.                                                                   // 6183\n     * @param {number} [end=array.length] The end position.                                                            // 6184\n     * @returns {Array} Returns the slice of `array`.                                                                  // 6185\n     */                                                                                                                // 6186\n    function slice(array, start, end) {                                                                                // 6187\n      var length = array ? array.length : 0;                                                                           // 6188\n      if (!length) {                                                                                                   // 6189\n        return [];                                                                                                     // 6190\n      }                                                                                                                // 6191\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {                                        // 6192\n        start = 0;                                                                                                     // 6193\n        end = length;                                                                                                  // 6194\n      }                                                                                                                // 6195\n      else {                                                                                                           // 6196\n        start = start == null ? 0 : toInteger(start);                                                                  // 6197\n        end = end === undefined ? length : toInteger(end);                                                             // 6198\n      }                                                                                                                // 6199\n      return baseSlice(array, start, end);                                                                             // 6200\n    }                                                                                                                  // 6201\n                                                                                                                       // 6202\n    /**                                                                                                                // 6203\n     * Uses a binary search to determine the lowest index at which `value` should                                      // 6204\n     * be inserted into `array` in order to maintain its sort order.                                                   // 6205\n     *                                                                                                                 // 6206\n     * @static                                                                                                         // 6207\n     * @memberOf _                                                                                                     // 6208\n     * @category Array                                                                                                 // 6209\n     * @param {Array} array The sorted array to inspect.                                                               // 6210\n     * @param {*} value The value to evaluate.                                                                         // 6211\n     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 6212\n     * @example                                                                                                        // 6213\n     *                                                                                                                 // 6214\n     * _.sortedIndex([30, 50], 40);                                                                                    // 6215\n     * // => 1                                                                                                         // 6216\n     *                                                                                                                 // 6217\n     * _.sortedIndex([4, 5], 4);                                                                                       // 6218\n     * // => 0                                                                                                         // 6219\n     */                                                                                                                // 6220\n    function sortedIndex(array, value) {                                                                               // 6221\n      return baseSortedIndex(array, value);                                                                            // 6222\n    }                                                                                                                  // 6223\n                                                                                                                       // 6224\n    /**                                                                                                                // 6225\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`                                           // 6226\n     * which is invoked for `value` and each element of `array` to compute their                                       // 6227\n     * sort ranking. The iteratee is invoked with one argument: (value).                                               // 6228\n     *                                                                                                                 // 6229\n     * @static                                                                                                         // 6230\n     * @memberOf _                                                                                                     // 6231\n     * @category Array                                                                                                 // 6232\n     * @param {Array} array The sorted array to inspect.                                                               // 6233\n     * @param {*} value The value to evaluate.                                                                         // 6234\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6235\n     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 6236\n     * @example                                                                                                        // 6237\n     *                                                                                                                 // 6238\n     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };                                                          // 6239\n     *                                                                                                                 // 6240\n     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));                                              // 6241\n     * // => 1                                                                                                         // 6242\n     *                                                                                                                 // 6243\n     * // using the `_.property` iteratee shorthand                                                                    // 6244\n     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');                                                     // 6245\n     * // => 0                                                                                                         // 6246\n     */                                                                                                                // 6247\n    function sortedIndexBy(array, value, iteratee) {                                                                   // 6248\n      return baseSortedIndexBy(array, value, getIteratee(iteratee));                                                   // 6249\n    }                                                                                                                  // 6250\n                                                                                                                       // 6251\n    /**                                                                                                                // 6252\n     * This method is like `_.indexOf` except that it performs a binary                                                // 6253\n     * search on a sorted `array`.                                                                                     // 6254\n     *                                                                                                                 // 6255\n     * @static                                                                                                         // 6256\n     * @memberOf _                                                                                                     // 6257\n     * @category Array                                                                                                 // 6258\n     * @param {Array} array The array to search.                                                                       // 6259\n     * @param {*} value The value to search for.                                                                       // 6260\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 6261\n     * @example                                                                                                        // 6262\n     *                                                                                                                 // 6263\n     * _.sortedIndexOf([1, 1, 2, 2], 2);                                                                               // 6264\n     * // => 2                                                                                                         // 6265\n     */                                                                                                                // 6266\n    function sortedIndexOf(array, value) {                                                                             // 6267\n      var length = array ? array.length : 0;                                                                           // 6268\n      if (length) {                                                                                                    // 6269\n        var index = baseSortedIndex(array, value);                                                                     // 6270\n        if (index < length && eq(array[index], value)) {                                                               // 6271\n          return index;                                                                                                // 6272\n        }                                                                                                              // 6273\n      }                                                                                                                // 6274\n      return -1;                                                                                                       // 6275\n    }                                                                                                                  // 6276\n                                                                                                                       // 6277\n    /**                                                                                                                // 6278\n     * This method is like `_.sortedIndex` except that it returns the highest                                          // 6279\n     * index at which `value` should be inserted into `array` in order to                                              // 6280\n     * maintain its sort order.                                                                                        // 6281\n     *                                                                                                                 // 6282\n     * @static                                                                                                         // 6283\n     * @memberOf _                                                                                                     // 6284\n     * @category Array                                                                                                 // 6285\n     * @param {Array} array The sorted array to inspect.                                                               // 6286\n     * @param {*} value The value to evaluate.                                                                         // 6287\n     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 6288\n     * @example                                                                                                        // 6289\n     *                                                                                                                 // 6290\n     * _.sortedLastIndex([4, 5], 4);                                                                                   // 6291\n     * // => 1                                                                                                         // 6292\n     */                                                                                                                // 6293\n    function sortedLastIndex(array, value) {                                                                           // 6294\n      return baseSortedIndex(array, value, true);                                                                      // 6295\n    }                                                                                                                  // 6296\n                                                                                                                       // 6297\n    /**                                                                                                                // 6298\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`                                       // 6299\n     * which is invoked for `value` and each element of `array` to compute their                                       // 6300\n     * sort ranking. The iteratee is invoked with one argument: (value).                                               // 6301\n     *                                                                                                                 // 6302\n     * @static                                                                                                         // 6303\n     * @memberOf _                                                                                                     // 6304\n     * @category Array                                                                                                 // 6305\n     * @param {Array} array The sorted array to inspect.                                                               // 6306\n     * @param {*} value The value to evaluate.                                                                         // 6307\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6308\n     * @returns {number} Returns the index at which `value` should be inserted into `array`.                           // 6309\n     * @example                                                                                                        // 6310\n     *                                                                                                                 // 6311\n     * // using the `_.property` iteratee shorthand                                                                    // 6312\n     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');                                                 // 6313\n     * // => 1                                                                                                         // 6314\n     */                                                                                                                // 6315\n    function sortedLastIndexBy(array, value, iteratee) {                                                               // 6316\n      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);                                             // 6317\n    }                                                                                                                  // 6318\n                                                                                                                       // 6319\n    /**                                                                                                                // 6320\n     * This method is like `_.lastIndexOf` except that it performs a binary                                            // 6321\n     * search on a sorted `array`.                                                                                     // 6322\n     *                                                                                                                 // 6323\n     * @static                                                                                                         // 6324\n     * @memberOf _                                                                                                     // 6325\n     * @category Array                                                                                                 // 6326\n     * @param {Array} array The array to search.                                                                       // 6327\n     * @param {*} value The value to search for.                                                                       // 6328\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 6329\n     * @example                                                                                                        // 6330\n     *                                                                                                                 // 6331\n     * _.sortedLastIndexOf([1, 1, 2, 2], 2);                                                                           // 6332\n     * // => 3                                                                                                         // 6333\n     */                                                                                                                // 6334\n    function sortedLastIndexOf(array, value) {                                                                         // 6335\n      var length = array ? array.length : 0;                                                                           // 6336\n      if (length) {                                                                                                    // 6337\n        var index = baseSortedIndex(array, value, true) - 1;                                                           // 6338\n        if (eq(array[index], value)) {                                                                                 // 6339\n          return index;                                                                                                // 6340\n        }                                                                                                              // 6341\n      }                                                                                                                // 6342\n      return -1;                                                                                                       // 6343\n    }                                                                                                                  // 6344\n                                                                                                                       // 6345\n    /**                                                                                                                // 6346\n     * This method is like `_.uniq` except that it's designed and optimized                                            // 6347\n     * for sorted arrays.                                                                                              // 6348\n     *                                                                                                                 // 6349\n     * @static                                                                                                         // 6350\n     * @memberOf _                                                                                                     // 6351\n     * @category Array                                                                                                 // 6352\n     * @param {Array} array The array to inspect.                                                                      // 6353\n     * @returns {Array} Returns the new duplicate free array.                                                          // 6354\n     * @example                                                                                                        // 6355\n     *                                                                                                                 // 6356\n     * _.sortedUniq([1, 1, 2]);                                                                                        // 6357\n     * // => [1, 2]                                                                                                    // 6358\n     */                                                                                                                // 6359\n    function sortedUniq(array) {                                                                                       // 6360\n      return (array && array.length)                                                                                   // 6361\n        ? baseSortedUniq(array)                                                                                        // 6362\n        : [];                                                                                                          // 6363\n    }                                                                                                                  // 6364\n                                                                                                                       // 6365\n    /**                                                                                                                // 6366\n     * This method is like `_.uniqBy` except that it's designed and optimized                                          // 6367\n     * for sorted arrays.                                                                                              // 6368\n     *                                                                                                                 // 6369\n     * @static                                                                                                         // 6370\n     * @memberOf _                                                                                                     // 6371\n     * @category Array                                                                                                 // 6372\n     * @param {Array} array The array to inspect.                                                                      // 6373\n     * @param {Function} [iteratee] The iteratee invoked per element.                                                  // 6374\n     * @returns {Array} Returns the new duplicate free array.                                                          // 6375\n     * @example                                                                                                        // 6376\n     *                                                                                                                 // 6377\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);                                                               // 6378\n     * // => [1.1, 2.2]                                                                                                // 6379\n     */                                                                                                                // 6380\n    function sortedUniqBy(array, iteratee) {                                                                           // 6381\n      return (array && array.length)                                                                                   // 6382\n        ? baseSortedUniqBy(array, getIteratee(iteratee))                                                               // 6383\n        : [];                                                                                                          // 6384\n    }                                                                                                                  // 6385\n                                                                                                                       // 6386\n    /**                                                                                                                // 6387\n     * Gets all but the first element of `array`.                                                                      // 6388\n     *                                                                                                                 // 6389\n     * @static                                                                                                         // 6390\n     * @memberOf _                                                                                                     // 6391\n     * @category Array                                                                                                 // 6392\n     * @param {Array} array The array to query.                                                                        // 6393\n     * @returns {Array} Returns the slice of `array`.                                                                  // 6394\n     * @example                                                                                                        // 6395\n     *                                                                                                                 // 6396\n     * _.tail([1, 2, 3]);                                                                                              // 6397\n     * // => [2, 3]                                                                                                    // 6398\n     */                                                                                                                // 6399\n    function tail(array) {                                                                                             // 6400\n      return drop(array, 1);                                                                                           // 6401\n    }                                                                                                                  // 6402\n                                                                                                                       // 6403\n    /**                                                                                                                // 6404\n     * Creates a slice of `array` with `n` elements taken from the beginning.                                          // 6405\n     *                                                                                                                 // 6406\n     * @static                                                                                                         // 6407\n     * @memberOf _                                                                                                     // 6408\n     * @category Array                                                                                                 // 6409\n     * @param {Array} array The array to query.                                                                        // 6410\n     * @param {number} [n=1] The number of elements to take.                                                           // 6411\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 6412\n     * @returns {Array} Returns the slice of `array`.                                                                  // 6413\n     * @example                                                                                                        // 6414\n     *                                                                                                                 // 6415\n     * _.take([1, 2, 3]);                                                                                              // 6416\n     * // => [1]                                                                                                       // 6417\n     *                                                                                                                 // 6418\n     * _.take([1, 2, 3], 2);                                                                                           // 6419\n     * // => [1, 2]                                                                                                    // 6420\n     *                                                                                                                 // 6421\n     * _.take([1, 2, 3], 5);                                                                                           // 6422\n     * // => [1, 2, 3]                                                                                                 // 6423\n     *                                                                                                                 // 6424\n     * _.take([1, 2, 3], 0);                                                                                           // 6425\n     * // => []                                                                                                        // 6426\n     */                                                                                                                // 6427\n    function take(array, n, guard) {                                                                                   // 6428\n      if (!(array && array.length)) {                                                                                  // 6429\n        return [];                                                                                                     // 6430\n      }                                                                                                                // 6431\n      n = (guard || n === undefined) ? 1 : toInteger(n);                                                               // 6432\n      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 6433\n    }                                                                                                                  // 6434\n                                                                                                                       // 6435\n    /**                                                                                                                // 6436\n     * Creates a slice of `array` with `n` elements taken from the end.                                                // 6437\n     *                                                                                                                 // 6438\n     * @static                                                                                                         // 6439\n     * @memberOf _                                                                                                     // 6440\n     * @category Array                                                                                                 // 6441\n     * @param {Array} array The array to query.                                                                        // 6442\n     * @param {number} [n=1] The number of elements to take.                                                           // 6443\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 6444\n     * @returns {Array} Returns the slice of `array`.                                                                  // 6445\n     * @example                                                                                                        // 6446\n     *                                                                                                                 // 6447\n     * _.takeRight([1, 2, 3]);                                                                                         // 6448\n     * // => [3]                                                                                                       // 6449\n     *                                                                                                                 // 6450\n     * _.takeRight([1, 2, 3], 2);                                                                                      // 6451\n     * // => [2, 3]                                                                                                    // 6452\n     *                                                                                                                 // 6453\n     * _.takeRight([1, 2, 3], 5);                                                                                      // 6454\n     * // => [1, 2, 3]                                                                                                 // 6455\n     *                                                                                                                 // 6456\n     * _.takeRight([1, 2, 3], 0);                                                                                      // 6457\n     * // => []                                                                                                        // 6458\n     */                                                                                                                // 6459\n    function takeRight(array, n, guard) {                                                                              // 6460\n      var length = array ? array.length : 0;                                                                           // 6461\n      if (!length) {                                                                                                   // 6462\n        return [];                                                                                                     // 6463\n      }                                                                                                                // 6464\n      n = (guard || n === undefined) ? 1 : toInteger(n);                                                               // 6465\n      n = length - n;                                                                                                  // 6466\n      return baseSlice(array, n < 0 ? 0 : n, length);                                                                  // 6467\n    }                                                                                                                  // 6468\n                                                                                                                       // 6469\n    /**                                                                                                                // 6470\n     * Creates a slice of `array` with elements taken from the end. Elements are                                       // 6471\n     * taken until `predicate` returns falsey. The predicate is invoked with three                                     // 6472\n     * arguments: (value, index, array).                                                                               // 6473\n     *                                                                                                                 // 6474\n     * @static                                                                                                         // 6475\n     * @memberOf _                                                                                                     // 6476\n     * @category Array                                                                                                 // 6477\n     * @param {Array} array The array to query.                                                                        // 6478\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 6479\n     * @returns {Array} Returns the slice of `array`.                                                                  // 6480\n     * @example                                                                                                        // 6481\n     *                                                                                                                 // 6482\n     * var users = [                                                                                                   // 6483\n     *   { 'user': 'barney',  'active': true },                                                                        // 6484\n     *   { 'user': 'fred',    'active': false },                                                                       // 6485\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 6486\n     * ];                                                                                                              // 6487\n     *                                                                                                                 // 6488\n     * _.takeRightWhile(users, function(o) { return !o.active; });                                                     // 6489\n     * // => objects for ['fred', 'pebbles']                                                                           // 6490\n     *                                                                                                                 // 6491\n     * // using the `_.matches` iteratee shorthand                                                                     // 6492\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });                                                // 6493\n     * // => objects for ['pebbles']                                                                                   // 6494\n     *                                                                                                                 // 6495\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 6496\n     * _.takeRightWhile(users, ['active', false]);                                                                     // 6497\n     * // => objects for ['fred', 'pebbles']                                                                           // 6498\n     *                                                                                                                 // 6499\n     * // using the `_.property` iteratee shorthand                                                                    // 6500\n     * _.takeRightWhile(users, 'active');                                                                              // 6501\n     * // => []                                                                                                        // 6502\n     */                                                                                                                // 6503\n    function takeRightWhile(array, predicate) {                                                                        // 6504\n      return (array && array.length)                                                                                   // 6505\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)                                                     // 6506\n        : [];                                                                                                          // 6507\n    }                                                                                                                  // 6508\n                                                                                                                       // 6509\n    /**                                                                                                                // 6510\n     * Creates a slice of `array` with elements taken from the beginning. Elements                                     // 6511\n     * are taken until `predicate` returns falsey. The predicate is invoked with                                       // 6512\n     * three arguments: (value, index, array).                                                                         // 6513\n     *                                                                                                                 // 6514\n     * @static                                                                                                         // 6515\n     * @memberOf _                                                                                                     // 6516\n     * @category Array                                                                                                 // 6517\n     * @param {Array} array The array to query.                                                                        // 6518\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 6519\n     * @returns {Array} Returns the slice of `array`.                                                                  // 6520\n     * @example                                                                                                        // 6521\n     *                                                                                                                 // 6522\n     * var users = [                                                                                                   // 6523\n     *   { 'user': 'barney',  'active': false },                                                                       // 6524\n     *   { 'user': 'fred',    'active': false},                                                                        // 6525\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 6526\n     * ];                                                                                                              // 6527\n     *                                                                                                                 // 6528\n     * _.takeWhile(users, function(o) { return !o.active; });                                                          // 6529\n     * // => objects for ['barney', 'fred']                                                                            // 6530\n     *                                                                                                                 // 6531\n     * // using the `_.matches` iteratee shorthand                                                                     // 6532\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });                                                      // 6533\n     * // => objects for ['barney']                                                                                    // 6534\n     *                                                                                                                 // 6535\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 6536\n     * _.takeWhile(users, ['active', false]);                                                                          // 6537\n     * // => objects for ['barney', 'fred']                                                                            // 6538\n     *                                                                                                                 // 6539\n     * // using the `_.property` iteratee shorthand                                                                    // 6540\n     * _.takeWhile(users, 'active');                                                                                   // 6541\n     * // => []                                                                                                        // 6542\n     */                                                                                                                // 6543\n    function takeWhile(array, predicate) {                                                                             // 6544\n      return (array && array.length)                                                                                   // 6545\n        ? baseWhile(array, getIteratee(predicate, 3))                                                                  // 6546\n        : [];                                                                                                          // 6547\n    }                                                                                                                  // 6548\n                                                                                                                       // 6549\n    /**                                                                                                                // 6550\n     * Creates an array of unique values, in order, from all of the provided arrays                                    // 6551\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 6552\n     * for equality comparisons.                                                                                       // 6553\n     *                                                                                                                 // 6554\n     * @static                                                                                                         // 6555\n     * @memberOf _                                                                                                     // 6556\n     * @category Array                                                                                                 // 6557\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6558\n     * @returns {Array} Returns the new array of combined values.                                                      // 6559\n     * @example                                                                                                        // 6560\n     *                                                                                                                 // 6561\n     * _.union([2, 1], [4, 2], [1, 2]);                                                                                // 6562\n     * // => [2, 1, 4]                                                                                                 // 6563\n     */                                                                                                                // 6564\n    var union = rest(function(arrays) {                                                                                // 6565\n      return baseUniq(baseFlatten(arrays, false, true));                                                               // 6566\n    });                                                                                                                // 6567\n                                                                                                                       // 6568\n    /**                                                                                                                // 6569\n     * This method is like `_.union` except that it accepts `iteratee` which is                                        // 6570\n     * invoked for each element of each `arrays` to generate the criterion by which                                    // 6571\n     * uniqueness is computed. The iteratee is invoked with one argument: (value).                                     // 6572\n     *                                                                                                                 // 6573\n     * @static                                                                                                         // 6574\n     * @memberOf _                                                                                                     // 6575\n     * @category Array                                                                                                 // 6576\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6577\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6578\n     * @returns {Array} Returns the new array of combined values.                                                      // 6579\n     * @example                                                                                                        // 6580\n     *                                                                                                                 // 6581\n     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);                                                                  // 6582\n     * // => [2.1, 1.2, 4.3]                                                                                           // 6583\n     *                                                                                                                 // 6584\n     * // using the `_.property` iteratee shorthand                                                                    // 6585\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');                                                         // 6586\n     * // => [{ 'x': 1 }, { 'x': 2 }]                                                                                  // 6587\n     */                                                                                                                // 6588\n    var unionBy = rest(function(arrays) {                                                                              // 6589\n      var iteratee = last(arrays);                                                                                     // 6590\n      if (isArrayLikeObject(iteratee)) {                                                                               // 6591\n        iteratee = undefined;                                                                                          // 6592\n      }                                                                                                                // 6593\n      return baseUniq(baseFlatten(arrays, false, true), getIteratee(iteratee));                                        // 6594\n    });                                                                                                                // 6595\n                                                                                                                       // 6596\n    /**                                                                                                                // 6597\n     * This method is like `_.union` except that it accepts `comparator` which                                         // 6598\n     * is invoked to compare elements of `arrays`. The comparator is invoked                                           // 6599\n     * with two arguments: (arrVal, othVal).                                                                           // 6600\n     *                                                                                                                 // 6601\n     * @static                                                                                                         // 6602\n     * @memberOf _                                                                                                     // 6603\n     * @category Array                                                                                                 // 6604\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6605\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 6606\n     * @returns {Array} Returns the new array of combined values.                                                      // 6607\n     * @example                                                                                                        // 6608\n     *                                                                                                                 // 6609\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];                                                         // 6610\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];                                                          // 6611\n     *                                                                                                                 // 6612\n     * _.unionWith(objects, others, _.isEqual);                                                                        // 6613\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]                                              // 6614\n     */                                                                                                                // 6615\n    var unionWith = rest(function(arrays) {                                                                            // 6616\n      var comparator = last(arrays);                                                                                   // 6617\n      if (isArrayLikeObject(comparator)) {                                                                             // 6618\n        comparator = undefined;                                                                                        // 6619\n      }                                                                                                                // 6620\n      return baseUniq(baseFlatten(arrays, false, true), undefined, comparator);                                        // 6621\n    });                                                                                                                // 6622\n                                                                                                                       // 6623\n    /**                                                                                                                // 6624\n     * Creates a duplicate-free version of an array, using                                                             // 6625\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 6626\n     * for equality comparisons, in which only the first occurrence of each element                                    // 6627\n     * is kept.                                                                                                        // 6628\n     *                                                                                                                 // 6629\n     * @static                                                                                                         // 6630\n     * @memberOf _                                                                                                     // 6631\n     * @category Array                                                                                                 // 6632\n     * @param {Array} array The array to inspect.                                                                      // 6633\n     * @returns {Array} Returns the new duplicate free array.                                                          // 6634\n     * @example                                                                                                        // 6635\n     *                                                                                                                 // 6636\n     * _.uniq([2, 1, 2]);                                                                                              // 6637\n     * // => [2, 1]                                                                                                    // 6638\n     */                                                                                                                // 6639\n    function uniq(array) {                                                                                             // 6640\n      return (array && array.length)                                                                                   // 6641\n        ? baseUniq(array)                                                                                              // 6642\n        : [];                                                                                                          // 6643\n    }                                                                                                                  // 6644\n                                                                                                                       // 6645\n    /**                                                                                                                // 6646\n     * This method is like `_.uniq` except that it accepts `iteratee` which is                                         // 6647\n     * invoked for each element in `array` to generate the criterion by which                                          // 6648\n     * uniqueness is computed. The iteratee is invoked with one argument: (value).                                     // 6649\n     *                                                                                                                 // 6650\n     * @static                                                                                                         // 6651\n     * @memberOf _                                                                                                     // 6652\n     * @category Array                                                                                                 // 6653\n     * @param {Array} array The array to inspect.                                                                      // 6654\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6655\n     * @returns {Array} Returns the new duplicate free array.                                                          // 6656\n     * @example                                                                                                        // 6657\n     *                                                                                                                 // 6658\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);                                                                          // 6659\n     * // => [2.1, 1.2]                                                                                                // 6660\n     *                                                                                                                 // 6661\n     * // using the `_.property` iteratee shorthand                                                                    // 6662\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');                                                            // 6663\n     * // => [{ 'x': 1 }, { 'x': 2 }]                                                                                  // 6664\n     */                                                                                                                // 6665\n    function uniqBy(array, iteratee) {                                                                                 // 6666\n      return (array && array.length)                                                                                   // 6667\n        ? baseUniq(array, getIteratee(iteratee))                                                                       // 6668\n        : [];                                                                                                          // 6669\n    }                                                                                                                  // 6670\n                                                                                                                       // 6671\n    /**                                                                                                                // 6672\n     * This method is like `_.uniq` except that it accepts `comparator` which                                          // 6673\n     * is invoked to compare elements of `array`. The comparator is invoked with                                       // 6674\n     * two arguments: (arrVal, othVal).                                                                                // 6675\n     *                                                                                                                 // 6676\n     * @static                                                                                                         // 6677\n     * @memberOf _                                                                                                     // 6678\n     * @category Array                                                                                                 // 6679\n     * @param {Array} array The array to inspect.                                                                      // 6680\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 6681\n     * @returns {Array} Returns the new duplicate free array.                                                          // 6682\n     * @example                                                                                                        // 6683\n     *                                                                                                                 // 6684\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];                                    // 6685\n     *                                                                                                                 // 6686\n     * _.uniqWith(objects, _.isEqual);                                                                                 // 6687\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]                                                                  // 6688\n     */                                                                                                                // 6689\n    function uniqWith(array, comparator) {                                                                             // 6690\n      return (array && array.length)                                                                                   // 6691\n        ? baseUniq(array, undefined, comparator)                                                                       // 6692\n        : [];                                                                                                          // 6693\n    }                                                                                                                  // 6694\n                                                                                                                       // 6695\n    /**                                                                                                                // 6696\n     * This method is like `_.zip` except that it accepts an array of grouped                                          // 6697\n     * elements and creates an array regrouping the elements to their pre-zip                                          // 6698\n     * configuration.                                                                                                  // 6699\n     *                                                                                                                 // 6700\n     * @static                                                                                                         // 6701\n     * @memberOf _                                                                                                     // 6702\n     * @category Array                                                                                                 // 6703\n     * @param {Array} array The array of grouped elements to process.                                                  // 6704\n     * @returns {Array} Returns the new array of regrouped elements.                                                   // 6705\n     * @example                                                                                                        // 6706\n     *                                                                                                                 // 6707\n     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                // 6708\n     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 6709\n     *                                                                                                                 // 6710\n     * _.unzip(zipped);                                                                                                // 6711\n     * // => [['fred', 'barney'], [30, 40], [true, false]]                                                             // 6712\n     */                                                                                                                // 6713\n    function unzip(array) {                                                                                            // 6714\n      if (!(array && array.length)) {                                                                                  // 6715\n        return [];                                                                                                     // 6716\n      }                                                                                                                // 6717\n      var length = 0;                                                                                                  // 6718\n      array = arrayFilter(array, function(group) {                                                                     // 6719\n        if (isArrayLikeObject(group)) {                                                                                // 6720\n          length = nativeMax(group.length, length);                                                                    // 6721\n          return true;                                                                                                 // 6722\n        }                                                                                                              // 6723\n      });                                                                                                              // 6724\n      return baseTimes(length, function(index) {                                                                       // 6725\n        return arrayMap(array, baseProperty(index));                                                                   // 6726\n      });                                                                                                              // 6727\n    }                                                                                                                  // 6728\n                                                                                                                       // 6729\n    /**                                                                                                                // 6730\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify                                      // 6731\n     * how regrouped values should be combined. The iteratee is invoked with the                                       // 6732\n     * elements of each group: (...group).                                                                             // 6733\n     *                                                                                                                 // 6734\n     * @static                                                                                                         // 6735\n     * @memberOf _                                                                                                     // 6736\n     * @category Array                                                                                                 // 6737\n     * @param {Array} array The array of grouped elements to process.                                                  // 6738\n     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.                               // 6739\n     * @returns {Array} Returns the new array of regrouped elements.                                                   // 6740\n     * @example                                                                                                        // 6741\n     *                                                                                                                 // 6742\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);                                                               // 6743\n     * // => [[1, 10, 100], [2, 20, 200]]                                                                              // 6744\n     *                                                                                                                 // 6745\n     * _.unzipWith(zipped, _.add);                                                                                     // 6746\n     * // => [3, 30, 300]                                                                                              // 6747\n     */                                                                                                                // 6748\n    function unzipWith(array, iteratee) {                                                                              // 6749\n      if (!(array && array.length)) {                                                                                  // 6750\n        return [];                                                                                                     // 6751\n      }                                                                                                                // 6752\n      var result = unzip(array);                                                                                       // 6753\n      if (iteratee == null) {                                                                                          // 6754\n        return result;                                                                                                 // 6755\n      }                                                                                                                // 6756\n      return arrayMap(result, function(group) {                                                                        // 6757\n        return apply(iteratee, undefined, group);                                                                      // 6758\n      });                                                                                                              // 6759\n    }                                                                                                                  // 6760\n                                                                                                                       // 6761\n    /**                                                                                                                // 6762\n     * Creates an array excluding all provided values using                                                            // 6763\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 6764\n     * for equality comparisons.                                                                                       // 6765\n     *                                                                                                                 // 6766\n     * @static                                                                                                         // 6767\n     * @memberOf _                                                                                                     // 6768\n     * @category Array                                                                                                 // 6769\n     * @param {Array} array The array to filter.                                                                       // 6770\n     * @param {...*} [values] The values to exclude.                                                                   // 6771\n     * @returns {Array} Returns the new array of filtered values.                                                      // 6772\n     * @example                                                                                                        // 6773\n     *                                                                                                                 // 6774\n     * _.without([1, 2, 1, 3], 1, 2);                                                                                  // 6775\n     * // => [3]                                                                                                       // 6776\n     */                                                                                                                // 6777\n    var without = rest(function(array, values) {                                                                       // 6778\n      return isArrayLikeObject(array)                                                                                  // 6779\n        ? baseDifference(array, values)                                                                                // 6780\n        : [];                                                                                                          // 6781\n    });                                                                                                                // 6782\n                                                                                                                       // 6783\n    /**                                                                                                                // 6784\n     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the provided arrays.                                                                                         // 6786\n     *                                                                                                                 // 6787\n     * @static                                                                                                         // 6788\n     * @memberOf _                                                                                                     // 6789\n     * @category Array                                                                                                 // 6790\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6791\n     * @returns {Array} Returns the new array of values.                                                               // 6792\n     * @example                                                                                                        // 6793\n     *                                                                                                                 // 6794\n     * _.xor([2, 1], [4, 2]);                                                                                          // 6795\n     * // => [1, 4]                                                                                                    // 6796\n     */                                                                                                                // 6797\n    var xor = rest(function(arrays) {                                                                                  // 6798\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));                                                          // 6799\n    });                                                                                                                // 6800\n                                                                                                                       // 6801\n    /**                                                                                                                // 6802\n     * This method is like `_.xor` except that it accepts `iteratee` which is                                          // 6803\n     * invoked for each element of each `arrays` to generate the criterion by which                                    // 6804\n     * uniqueness is computed. The iteratee is invoked with one argument: (value).                                     // 6805\n     *                                                                                                                 // 6806\n     * @static                                                                                                         // 6807\n     * @memberOf _                                                                                                     // 6808\n     * @category Array                                                                                                 // 6809\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6810\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 6811\n     * @returns {Array} Returns the new array of values.                                                               // 6812\n     * @example                                                                                                        // 6813\n     *                                                                                                                 // 6814\n     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);                                                                    // 6815\n     * // => [1.2, 4.3]                                                                                                // 6816\n     *                                                                                                                 // 6817\n     * // using the `_.property` iteratee shorthand                                                                    // 6818\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');                                                           // 6819\n     * // => [{ 'x': 2 }]                                                                                              // 6820\n     */                                                                                                                // 6821\n    var xorBy = rest(function(arrays) {                                                                                // 6822\n      var iteratee = last(arrays);                                                                                     // 6823\n      if (isArrayLikeObject(iteratee)) {                                                                               // 6824\n        iteratee = undefined;                                                                                          // 6825\n      }                                                                                                                // 6826\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));                                   // 6827\n    });                                                                                                                // 6828\n                                                                                                                       // 6829\n    /**                                                                                                                // 6830\n     * This method is like `_.xor` except that it accepts `comparator` which is                                        // 6831\n     * invoked to compare elements of `arrays`. The comparator is invoked with                                         // 6832\n     * two arguments: (arrVal, othVal).                                                                                // 6833\n     *                                                                                                                 // 6834\n     * @static                                                                                                         // 6835\n     * @memberOf _                                                                                                     // 6836\n     * @category Array                                                                                                 // 6837\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 6838\n     * @param {Function} [comparator] The comparator invoked per element.                                              // 6839\n     * @returns {Array} Returns the new array of values.                                                               // 6840\n     * @example                                                                                                        // 6841\n     *                                                                                                                 // 6842\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];                                                         // 6843\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];                                                          // 6844\n     *                                                                                                                 // 6845\n     * _.xorWith(objects, others, _.isEqual);                                                                          // 6846\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]                                                                  // 6847\n     */                                                                                                                // 6848\n    var xorWith = rest(function(arrays) {                                                                              // 6849\n      var comparator = last(arrays);                                                                                   // 6850\n      if (isArrayLikeObject(comparator)) {                                                                             // 6851\n        comparator = undefined;                                                                                        // 6852\n      }                                                                                                                // 6853\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);                                   // 6854\n    });                                                                                                                // 6855\n                                                                                                                       // 6856\n    /**                                                                                                                // 6857\n     * Creates an array of grouped elements, the first of which contains the first                                     // 6858\n     * elements of the given arrays, the second of which contains the second elements                                  // 6859\n     * of the given arrays, and so on.                                                                                 // 6860\n     *                                                                                                                 // 6861\n     * @static                                                                                                         // 6862\n     * @memberOf _                                                                                                     // 6863\n     * @category Array                                                                                                 // 6864\n     * @param {...Array} [arrays] The arrays to process.                                                               // 6865\n     * @returns {Array} Returns the new array of grouped elements.                                                     // 6866\n     * @example                                                                                                        // 6867\n     *                                                                                                                 // 6868\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                             // 6869\n     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 6870\n     */                                                                                                                // 6871\n    var zip = rest(unzip);                                                                                             // 6872\n                                                                                                                       // 6873\n    /**                                                                                                                // 6874\n     * This method is like `_.fromPairs` except that it accepts two arrays,                                            // 6875\n     * one of property names and one of corresponding values.                                                          // 6876\n     *                                                                                                                 // 6877\n     * @static                                                                                                         // 6878\n     * @memberOf _                                                                                                     // 6879\n     * @category Array                                                                                                 // 6880\n     * @param {Array} [props=[]] The property names.                                                                   // 6881\n     * @param {Array} [values=[]] The property values.                                                                 // 6882\n     * @returns {Object} Returns the new object.                                                                       // 6883\n     * @example                                                                                                        // 6884\n     *                                                                                                                 // 6885\n     * _.zipObject(['fred', 'barney'], [30, 40]);                                                                      // 6886\n     * // => { 'fred': 30, 'barney': 40 }                                                                              // 6887\n     */                                                                                                                // 6888\n    function zipObject(props, values) {                                                                                // 6889\n      var index = -1,                                                                                                  // 6890\n          length = props ? props.length : 0,                                                                           // 6891\n          valsLength = values ? values.length : 0,                                                                     // 6892\n          result = {};                                                                                                 // 6893\n                                                                                                                       // 6894\n      while (++index < length) {                                                                                       // 6895\n        baseSet(result, props[index], index < valsLength ? values[index] : undefined);                                 // 6896\n      }                                                                                                                // 6897\n      return result;                                                                                                   // 6898\n    }                                                                                                                  // 6899\n                                                                                                                       // 6900\n    /**                                                                                                                // 6901\n     * This method is like `_.zip` except that it accepts `iteratee` to specify                                        // 6902\n     * how grouped values should be combined. The iteratee is invoked with the                                         // 6903\n     * elements of each group: (...group).                                                                             // 6904\n     *                                                                                                                 // 6905\n     * @static                                                                                                         // 6906\n     * @memberOf _                                                                                                     // 6907\n     * @category Array                                                                                                 // 6908\n     * @param {...Array} [arrays] The arrays to process.                                                               // 6909\n     * @param {Function} [iteratee=_.identity] The function to combine grouped values.                                 // 6910\n     * @returns {Array} Returns the new array of grouped elements.                                                     // 6911\n     * @example                                                                                                        // 6912\n     *                                                                                                                 // 6913\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {                                                     // 6914\n     *   return a + b + c;                                                                                             // 6915\n     * });                                                                                                             // 6916\n     * // => [111, 222]                                                                                                // 6917\n     */                                                                                                                // 6918\n    var zipWith = rest(function(arrays) {                                                                              // 6919\n      var length = arrays.length,                                                                                      // 6920\n          iteratee = length > 1 ? arrays[length - 1] : undefined;                                                      // 6921\n                                                                                                                       // 6922\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;                                 // 6923\n      return unzipWith(arrays, iteratee);                                                                              // 6924\n    });                                                                                                                // 6925\n                                                                                                                       // 6926\n    /*------------------------------------------------------------------------*/                                       // 6927\n                                                                                                                       // 6928\n    /**                                                                                                                // 6929\n     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.                             // 6930\n     * The result of such method chaining must be unwrapped with `_#value`.                                            // 6931\n     *                                                                                                                 // 6932\n     * @static                                                                                                         // 6933\n     * @memberOf _                                                                                                     // 6934\n     * @category Seq                                                                                                   // 6935\n     * @param {*} value The value to wrap.                                                                             // 6936\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6937\n     * @example                                                                                                        // 6938\n     *                                                                                                                 // 6939\n     * var users = [                                                                                                   // 6940\n     *   { 'user': 'barney',  'age': 36 },                                                                             // 6941\n     *   { 'user': 'fred',    'age': 40 },                                                                             // 6942\n     *   { 'user': 'pebbles', 'age': 1 }                                                                               // 6943\n     * ];                                                                                                              // 6944\n     *                                                                                                                 // 6945\n     * var youngest = _                                                                                                // 6946\n     *   .chain(users)                                                                                                 // 6947\n     *   .sortBy('age')                                                                                                // 6948\n     *   .map(function(o) {                                                                                            // 6949\n     *     return o.user + ' is ' + o.age;                                                                             // 6950\n     *   })                                                                                                            // 6951\n     *   .head()                                                                                                       // 6952\n     *   .value();                                                                                                     // 6953\n     * // => 'pebbles is 1'                                                                                            // 6954\n     */                                                                                                                // 6955\n    function chain(value) {                                                                                            // 6956\n      var result = lodash(value);                                                                                      // 6957\n      result.__chain__ = true;                                                                                         // 6958\n      return result;                                                                                                   // 6959\n    }                                                                                                                  // 6960\n                                                                                                                       // 6961\n    /**                                                                                                                // 6962\n     * This method invokes `interceptor` and returns `value`. The interceptor is                                       // 6963\n     * invoked with one argument; (value). The purpose of this method is to \"tap into\"                                 // 6964\n     * a method chain in order to perform operations on intermediate results within                                    // 6965\n     * the chain.                                                                                                      // 6966\n     *                                                                                                                 // 6967\n     * @static                                                                                                         // 6968\n     * @memberOf _                                                                                                     // 6969\n     * @category Seq                                                                                                   // 6970\n     * @param {*} value The value to provide to `interceptor`.                                                         // 6971\n     * @param {Function} interceptor The function to invoke.                                                           // 6972\n     * @returns {*} Returns `value`.                                                                                   // 6973\n     * @example                                                                                                        // 6974\n     *                                                                                                                 // 6975\n     * _([1, 2, 3])                                                                                                    // 6976\n     *  .tap(function(array) {                                                                                         // 6977\n     *    array.pop();                                                                                                 // 6978\n     *  })                                                                                                             // 6979\n     *  .reverse()                                                                                                     // 6980\n     *  .value();                                                                                                      // 6981\n     * // => [2, 1]                                                                                                    // 6982\n     */                                                                                                                // 6983\n    function tap(value, interceptor) {                                                                                 // 6984\n      interceptor(value);                                                                                              // 6985\n      return value;                                                                                                    // 6986\n    }                                                                                                                  // 6987\n                                                                                                                       // 6988\n    /**                                                                                                                // 6989\n     * This method is like `_.tap` except that it returns the result of `interceptor`.                                 // 6990\n     *                                                                                                                 // 6991\n     * @static                                                                                                         // 6992\n     * @memberOf _                                                                                                     // 6993\n     * @category Seq                                                                                                   // 6994\n     * @param {*} value The value to provide to `interceptor`.                                                         // 6995\n     * @param {Function} interceptor The function to invoke.                                                           // 6996\n     * @returns {*} Returns the result of `interceptor`.                                                               // 6997\n     * @example                                                                                                        // 6998\n     *                                                                                                                 // 6999\n     * _('  abc  ')                                                                                                    // 7000\n     *  .chain()                                                                                                       // 7001\n     *  .trim()                                                                                                        // 7002\n     *  .thru(function(value) {                                                                                        // 7003\n     *    return [value];                                                                                              // 7004\n     *  })                                                                                                             // 7005\n     *  .value();                                                                                                      // 7006\n     * // => ['abc']                                                                                                   // 7007\n     */                                                                                                                // 7008\n    function thru(value, interceptor) {                                                                                // 7009\n      return interceptor(value);                                                                                       // 7010\n    }                                                                                                                  // 7011\n                                                                                                                       // 7012\n    /**                                                                                                                // 7013\n     * This method is the wrapper version of `_.at`.                                                                   // 7014\n     *                                                                                                                 // 7015\n     * @name at                                                                                                        // 7016\n     * @memberOf _                                                                                                     // 7017\n     * @category Seq                                                                                                   // 7018\n     * @param {...(string|string[])} [paths] The property paths of elements to pick,                                   // 7019\n     *  specified individually or in arrays.                                                                           // 7020\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7021\n     * @example                                                                                                        // 7022\n     *                                                                                                                 // 7023\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };                                                                 // 7024\n     *                                                                                                                 // 7025\n     * _(object).at(['a[0].b.c', 'a[1]']).value();                                                                     // 7026\n     * // => [3, 4]                                                                                                    // 7027\n     *                                                                                                                 // 7028\n     * _(['a', 'b', 'c']).at(0, 2).value();                                                                            // 7029\n     * // => ['a', 'c']                                                                                                // 7030\n     */                                                                                                                // 7031\n    var wrapperAt = rest(function(paths) {                                                                             // 7032\n      paths = baseFlatten(paths);                                                                                      // 7033\n      var length = paths.length,                                                                                       // 7034\n          start = length ? paths[0] : 0,                                                                               // 7035\n          value = this.__wrapped__,                                                                                    // 7036\n          interceptor = function(object) { return baseAt(object, paths); };                                            // 7037\n                                                                                                                       // 7038\n      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {               // 7039\n        return this.thru(interceptor);                                                                                 // 7040\n      }                                                                                                                // 7041\n      value = value.slice(start, +start + (length ? 1 : 0));                                                           // 7042\n      value.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });                           // 7043\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {                                           // 7044\n        if (length && !array.length) {                                                                                 // 7045\n          array.push(undefined);                                                                                       // 7046\n        }                                                                                                              // 7047\n        return array;                                                                                                  // 7048\n      });                                                                                                              // 7049\n    });                                                                                                                // 7050\n                                                                                                                       // 7051\n    /**                                                                                                                // 7052\n     * Enables explicit method chaining on the wrapper object.                                                         // 7053\n     *                                                                                                                 // 7054\n     * @name chain                                                                                                     // 7055\n     * @memberOf _                                                                                                     // 7056\n     * @category Seq                                                                                                   // 7057\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7058\n     * @example                                                                                                        // 7059\n     *                                                                                                                 // 7060\n     * var users = [                                                                                                   // 7061\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 7062\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 7063\n     * ];                                                                                                              // 7064\n     *                                                                                                                 // 7065\n     * // without explicit chaining                                                                                    // 7066\n     * _(users).head();                                                                                                // 7067\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 7068\n     *                                                                                                                 // 7069\n     * // with explicit chaining                                                                                       // 7070\n     * _(users)                                                                                                        // 7071\n     *   .chain()                                                                                                      // 7072\n     *   .head()                                                                                                       // 7073\n     *   .pick('user')                                                                                                 // 7074\n     *   .value();                                                                                                     // 7075\n     * // => { 'user': 'barney' }                                                                                      // 7076\n     */                                                                                                                // 7077\n    function wrapperChain() {                                                                                          // 7078\n      return chain(this);                                                                                              // 7079\n    }                                                                                                                  // 7080\n                                                                                                                       // 7081\n    /**                                                                                                                // 7082\n     * Executes the chained sequence and returns the wrapped result.                                                   // 7083\n     *                                                                                                                 // 7084\n     * @name commit                                                                                                    // 7085\n     * @memberOf _                                                                                                     // 7086\n     * @category Seq                                                                                                   // 7087\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7088\n     * @example                                                                                                        // 7089\n     *                                                                                                                 // 7090\n     * var array = [1, 2];                                                                                             // 7091\n     * var wrapped = _(array).push(3);                                                                                 // 7092\n     *                                                                                                                 // 7093\n     * console.log(array);                                                                                             // 7094\n     * // => [1, 2]                                                                                                    // 7095\n     *                                                                                                                 // 7096\n     * wrapped = wrapped.commit();                                                                                     // 7097\n     * console.log(array);                                                                                             // 7098\n     * // => [1, 2, 3]                                                                                                 // 7099\n     *                                                                                                                 // 7100\n     * wrapped.last();                                                                                                 // 7101\n     * // => 3                                                                                                         // 7102\n     *                                                                                                                 // 7103\n     * console.log(array);                                                                                             // 7104\n     * // => [1, 2, 3]                                                                                                 // 7105\n     */                                                                                                                // 7106\n    function wrapperCommit() {                                                                                         // 7107\n      return new LodashWrapper(this.value(), this.__chain__);                                                          // 7108\n    }                                                                                                                  // 7109\n                                                                                                                       // 7110\n    /**                                                                                                                // 7111\n     * This method is the wrapper version of `_.flatMap`.                                                              // 7112\n     *                                                                                                                 // 7113\n     * @static                                                                                                         // 7114\n     * @memberOf _                                                                                                     // 7115\n     * @category Seq                                                                                                   // 7116\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 7117\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7118\n     * @example                                                                                                        // 7119\n     *                                                                                                                 // 7120\n     * function duplicate(n) {                                                                                         // 7121\n     *   return [n, n];                                                                                                // 7122\n     * }                                                                                                               // 7123\n     *                                                                                                                 // 7124\n     * _([1, 2]).flatMap(duplicate).value();                                                                           // 7125\n     * // => [1, 1, 2, 2]                                                                                              // 7126\n     */                                                                                                                // 7127\n    function wrapperFlatMap(iteratee) {                                                                                // 7128\n      return this.map(iteratee).flatten();                                                                             // 7129\n    }                                                                                                                  // 7130\n                                                                                                                       // 7131\n    /**                                                                                                                // 7132\n     * Gets the next value on a wrapped object following the                                                           // 7133\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).                                               // 7134\n     *                                                                                                                 // 7135\n     * @name next                                                                                                      // 7136\n     * @memberOf _                                                                                                     // 7137\n     * @category Seq                                                                                                   // 7138\n     * @returns {Object} Returns the next iterator value.                                                              // 7139\n     * @example                                                                                                        // 7140\n     *                                                                                                                 // 7141\n     * var wrapped = _([1, 2]);                                                                                        // 7142\n     *                                                                                                                 // 7143\n     * wrapped.next();                                                                                                 // 7144\n     * // => { 'done': false, 'value': 1 }                                                                             // 7145\n     *                                                                                                                 // 7146\n     * wrapped.next();                                                                                                 // 7147\n     * // => { 'done': false, 'value': 2 }                                                                             // 7148\n     *                                                                                                                 // 7149\n     * wrapped.next();                                                                                                 // 7150\n     * // => { 'done': true, 'value': undefined }                                                                      // 7151\n     */                                                                                                                // 7152\n    function wrapperNext() {                                                                                           // 7153\n      if (this.__values__ === undefined) {                                                                             // 7154\n        this.__values__ = toArray(this.value());                                                                       // 7155\n      }                                                                                                                // 7156\n      var done = this.__index__ >= this.__values__.length,                                                             // 7157\n          value = done ? undefined : this.__values__[this.__index__++];                                                // 7158\n                                                                                                                       // 7159\n      return { 'done': done, 'value': value };                                                                         // 7160\n    }                                                                                                                  // 7161\n                                                                                                                       // 7162\n    /**                                                                                                                // 7163\n     * Enables the wrapper to be iterable.                                                                             // 7164\n     *                                                                                                                 // 7165\n     * @name Symbol.iterator                                                                                           // 7166\n     * @memberOf _                                                                                                     // 7167\n     * @category Seq                                                                                                   // 7168\n     * @returns {Object} Returns the wrapper object.                                                                   // 7169\n     * @example                                                                                                        // 7170\n     *                                                                                                                 // 7171\n     * var wrapped = _([1, 2]);                                                                                        // 7172\n     *                                                                                                                 // 7173\n     * wrapped[Symbol.iterator]() === wrapped;                                                                         // 7174\n     * // => true                                                                                                      // 7175\n     *                                                                                                                 // 7176\n     * Array.from(wrapped);                                                                                            // 7177\n     * // => [1, 2]                                                                                                    // 7178\n     */                                                                                                                // 7179\n    function wrapperToIterator() {                                                                                     // 7180\n      return this;                                                                                                     // 7181\n    }                                                                                                                  // 7182\n                                                                                                                       // 7183\n    /**                                                                                                                // 7184\n     * Creates a clone of the chained sequence planting `value` as the wrapped value.                                  // 7185\n     *                                                                                                                 // 7186\n     * @name plant                                                                                                     // 7187\n     * @memberOf _                                                                                                     // 7188\n     * @category Seq                                                                                                   // 7189\n     * @param {*} value The value to plant.                                                                            // 7190\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7191\n     * @example                                                                                                        // 7192\n     *                                                                                                                 // 7193\n     * function square(n) {                                                                                            // 7194\n     *   return n * n;                                                                                                 // 7195\n     * }                                                                                                               // 7196\n     *                                                                                                                 // 7197\n     * var wrapped = _([1, 2]).map(square);                                                                            // 7198\n     * var other = wrapped.plant([3, 4]);                                                                              // 7199\n     *                                                                                                                 // 7200\n     * other.value();                                                                                                  // 7201\n     * // => [9, 16]                                                                                                   // 7202\n     *                                                                                                                 // 7203\n     * wrapped.value();                                                                                                // 7204\n     * // => [1, 4]                                                                                                    // 7205\n     */                                                                                                                // 7206\n    function wrapperPlant(value) {                                                                                     // 7207\n      var result,                                                                                                      // 7208\n          parent = this;                                                                                               // 7209\n                                                                                                                       // 7210\n      while (parent instanceof baseLodash) {                                                                           // 7211\n        var clone = wrapperClone(parent);                                                                              // 7212\n        clone.__index__ = 0;                                                                                           // 7213\n        clone.__values__ = undefined;                                                                                  // 7214\n        if (result) {                                                                                                  // 7215\n          previous.__wrapped__ = clone;                                                                                // 7216\n        } else {                                                                                                       // 7217\n          result = clone;                                                                                              // 7218\n        }                                                                                                              // 7219\n        var previous = clone;                                                                                          // 7220\n        parent = parent.__wrapped__;                                                                                   // 7221\n      }                                                                                                                // 7222\n      previous.__wrapped__ = value;                                                                                    // 7223\n      return result;                                                                                                   // 7224\n    }                                                                                                                  // 7225\n                                                                                                                       // 7226\n    /**                                                                                                                // 7227\n     * This method is the wrapper version of `_.reverse`.                                                              // 7228\n     *                                                                                                                 // 7229\n     * **Note:** This method mutates the wrapped array.                                                                // 7230\n     *                                                                                                                 // 7231\n     * @name reverse                                                                                                   // 7232\n     * @memberOf _                                                                                                     // 7233\n     * @category Seq                                                                                                   // 7234\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 7235\n     * @example                                                                                                        // 7236\n     *                                                                                                                 // 7237\n     * var array = [1, 2, 3];                                                                                          // 7238\n     *                                                                                                                 // 7239\n     * _(array).reverse().value()                                                                                      // 7240\n     * // => [3, 2, 1]                                                                                                 // 7241\n     *                                                                                                                 // 7242\n     * console.log(array);                                                                                             // 7243\n     * // => [3, 2, 1]                                                                                                 // 7244\n     */                                                                                                                // 7245\n    function wrapperReverse() {                                                                                        // 7246\n      var value = this.__wrapped__;                                                                                    // 7247\n      if (value instanceof LazyWrapper) {                                                                              // 7248\n        var wrapped = value;                                                                                           // 7249\n        if (this.__actions__.length) {                                                                                 // 7250\n          wrapped = new LazyWrapper(this);                                                                             // 7251\n        }                                                                                                              // 7252\n        wrapped = wrapped.reverse();                                                                                   // 7253\n        wrapped.__actions__.push({ 'func': thru, 'args': [reverse], 'thisArg': undefined });                           // 7254\n        return new LodashWrapper(wrapped, this.__chain__);                                                             // 7255\n      }                                                                                                                // 7256\n      return this.thru(reverse);                                                                                       // 7257\n    }                                                                                                                  // 7258\n                                                                                                                       // 7259\n    /**                                                                                                                // 7260\n     * Executes the chained sequence to extract the unwrapped value.                                                   // 7261\n     *                                                                                                                 // 7262\n     * @name value                                                                                                     // 7263\n     * @memberOf _                                                                                                     // 7264\n     * @alias run, toJSON, valueOf                                                                                     // 7265\n     * @category Seq                                                                                                   // 7266\n     * @returns {*} Returns the resolved unwrapped value.                                                              // 7267\n     * @example                                                                                                        // 7268\n     *                                                                                                                 // 7269\n     * _([1, 2, 3]).value();                                                                                           // 7270\n     * // => [1, 2, 3]                                                                                                 // 7271\n     */                                                                                                                // 7272\n    function wrapperValue() {                                                                                          // 7273\n      return baseWrapperValue(this.__wrapped__, this.__actions__);                                                     // 7274\n    }                                                                                                                  // 7275\n                                                                                                                       // 7276\n    /*------------------------------------------------------------------------*/                                       // 7277\n                                                                                                                       // 7278\n    /**                                                                                                                // 7279\n     * Creates an object composed of keys generated from the results of running                                        // 7280\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 7281\n     * of each key is the number of times the key was returned by `iteratee`.                                          // 7282\n     * The iteratee is invoked with one argument: (value).                                                             // 7283\n     *                                                                                                                 // 7284\n     * @static                                                                                                         // 7285\n     * @memberOf _                                                                                                     // 7286\n     * @category Collection                                                                                            // 7287\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7288\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 7289\n     * @returns {Object} Returns the composed aggregate object.                                                        // 7290\n     * @example                                                                                                        // 7291\n     *                                                                                                                 // 7292\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);                                                                         // 7293\n     * // => { '4': 1, '6': 2 }                                                                                        // 7294\n     *                                                                                                                 // 7295\n     * _.countBy(['one', 'two', 'three'], 'length');                                                                   // 7296\n     * // => { '3': 2, '5': 1 }                                                                                        // 7297\n     */                                                                                                                // 7298\n    var countBy = createAggregator(function(result, value, key) {                                                      // 7299\n      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);                                            // 7300\n    });                                                                                                                // 7301\n                                                                                                                       // 7302\n    /**                                                                                                                // 7303\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.                                      // 7304\n     * Iteration is stopped once `predicate` returns falsey. The predicate is                                          // 7305\n     * invoked with three arguments: (value, index|key, collection).                                                   // 7306\n     *                                                                                                                 // 7307\n     * @static                                                                                                         // 7308\n     * @memberOf _                                                                                                     // 7309\n     * @category Collection                                                                                            // 7310\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7311\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7312\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 7313\n     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.                       // 7314\n     * @example                                                                                                        // 7315\n     *                                                                                                                 // 7316\n     * _.every([true, 1, null, 'yes'], Boolean);                                                                       // 7317\n     * // => false                                                                                                     // 7318\n     *                                                                                                                 // 7319\n     * var users = [                                                                                                   // 7320\n     *   { 'user': 'barney', 'active': false },                                                                        // 7321\n     *   { 'user': 'fred',   'active': false }                                                                         // 7322\n     * ];                                                                                                              // 7323\n     *                                                                                                                 // 7324\n     * // using the `_.matches` iteratee shorthand                                                                     // 7325\n     * _.every(users, { 'user': 'barney', 'active': false });                                                          // 7326\n     * // => false                                                                                                     // 7327\n     *                                                                                                                 // 7328\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7329\n     * _.every(users, ['active', false]);                                                                              // 7330\n     * // => true                                                                                                      // 7331\n     *                                                                                                                 // 7332\n     * // using the `_.property` iteratee shorthand                                                                    // 7333\n     * _.every(users, 'active');                                                                                       // 7334\n     * // => false                                                                                                     // 7335\n     */                                                                                                                // 7336\n    function every(collection, predicate, guard) {                                                                     // 7337\n      var func = isArray(collection) ? arrayEvery : baseEvery;                                                         // 7338\n      if (guard && isIterateeCall(collection, predicate, guard)) {                                                     // 7339\n        predicate = undefined;                                                                                         // 7340\n      }                                                                                                                // 7341\n      return func(collection, getIteratee(predicate, 3));                                                              // 7342\n    }                                                                                                                  // 7343\n                                                                                                                       // 7344\n    /**                                                                                                                // 7345\n     * Iterates over elements of `collection`, returning an array of all elements                                      // 7346\n     * `predicate` returns truthy for. The predicate is invoked with three arguments:                                  // 7347\n     * (value, index|key, collection).                                                                                 // 7348\n     *                                                                                                                 // 7349\n     * @static                                                                                                         // 7350\n     * @memberOf _                                                                                                     // 7351\n     * @category Collection                                                                                            // 7352\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7353\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7354\n     * @returns {Array} Returns the new filtered array.                                                                // 7355\n     * @example                                                                                                        // 7356\n     *                                                                                                                 // 7357\n     * var users = [                                                                                                   // 7358\n     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 7359\n     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 7360\n     * ];                                                                                                              // 7361\n     *                                                                                                                 // 7362\n     * _.filter(users, function(o) { return !o.active; });                                                             // 7363\n     * // => objects for ['fred']                                                                                      // 7364\n     *                                                                                                                 // 7365\n     * // using the `_.matches` iteratee shorthand                                                                     // 7366\n     * _.filter(users, { 'age': 36, 'active': true });                                                                 // 7367\n     * // => objects for ['barney']                                                                                    // 7368\n     *                                                                                                                 // 7369\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7370\n     * _.filter(users, ['active', false]);                                                                             // 7371\n     * // => objects for ['fred']                                                                                      // 7372\n     *                                                                                                                 // 7373\n     * // using the `_.property` iteratee shorthand                                                                    // 7374\n     * _.filter(users, 'active');                                                                                      // 7375\n     * // => objects for ['barney']                                                                                    // 7376\n     */                                                                                                                // 7377\n    function filter(collection, predicate) {                                                                           // 7378\n      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 7379\n      return func(collection, getIteratee(predicate, 3));                                                              // 7380\n    }                                                                                                                  // 7381\n                                                                                                                       // 7382\n    /**                                                                                                                // 7383\n     * Iterates over elements of `collection`, returning the first element                                             // 7384\n     * `predicate` returns truthy for. The predicate is invoked with three arguments:                                  // 7385\n     * (value, index|key, collection).                                                                                 // 7386\n     *                                                                                                                 // 7387\n     * @static                                                                                                         // 7388\n     * @memberOf _                                                                                                     // 7389\n     * @category Collection                                                                                            // 7390\n     * @param {Array|Object} collection The collection to search.                                                      // 7391\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7392\n     * @returns {*} Returns the matched element, else `undefined`.                                                     // 7393\n     * @example                                                                                                        // 7394\n     *                                                                                                                 // 7395\n     * var users = [                                                                                                   // 7396\n     *   { 'user': 'barney',  'age': 36, 'active': true },                                                             // 7397\n     *   { 'user': 'fred',    'age': 40, 'active': false },                                                            // 7398\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }                                                              // 7399\n     * ];                                                                                                              // 7400\n     *                                                                                                                 // 7401\n     * _.find(users, function(o) { return o.age < 40; });                                                              // 7402\n     * // => object for 'barney'                                                                                       // 7403\n     *                                                                                                                 // 7404\n     * // using the `_.matches` iteratee shorthand                                                                     // 7405\n     * _.find(users, { 'age': 1, 'active': true });                                                                    // 7406\n     * // => object for 'pebbles'                                                                                      // 7407\n     *                                                                                                                 // 7408\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7409\n     * _.find(users, ['active', false]);                                                                               // 7410\n     * // => object for 'fred'                                                                                         // 7411\n     *                                                                                                                 // 7412\n     * // using the `_.property` iteratee shorthand                                                                    // 7413\n     * _.find(users, 'active');                                                                                        // 7414\n     * // => object for 'barney'                                                                                       // 7415\n     */                                                                                                                // 7416\n    function find(collection, predicate) {                                                                             // 7417\n      predicate = getIteratee(predicate, 3);                                                                           // 7418\n      if (isArray(collection)) {                                                                                       // 7419\n        var index = baseFindIndex(collection, predicate);                                                              // 7420\n        return index > -1 ? collection[index] : undefined;                                                             // 7421\n      }                                                                                                                // 7422\n      return baseFind(collection, predicate, baseEach);                                                                // 7423\n    }                                                                                                                  // 7424\n                                                                                                                       // 7425\n    /**                                                                                                                // 7426\n     * This method is like `_.find` except that it iterates over elements of                                           // 7427\n     * `collection` from right to left.                                                                                // 7428\n     *                                                                                                                 // 7429\n     * @static                                                                                                         // 7430\n     * @memberOf _                                                                                                     // 7431\n     * @category Collection                                                                                            // 7432\n     * @param {Array|Object} collection The collection to search.                                                      // 7433\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7434\n     * @returns {*} Returns the matched element, else `undefined`.                                                     // 7435\n     * @example                                                                                                        // 7436\n     *                                                                                                                 // 7437\n     * _.findLast([1, 2, 3, 4], function(n) {                                                                          // 7438\n     *   return n % 2 == 1;                                                                                            // 7439\n     * });                                                                                                             // 7440\n     * // => 3                                                                                                         // 7441\n     */                                                                                                                // 7442\n    function findLast(collection, predicate) {                                                                         // 7443\n      predicate = getIteratee(predicate, 3);                                                                           // 7444\n      if (isArray(collection)) {                                                                                       // 7445\n        var index = baseFindIndex(collection, predicate, true);                                                        // 7446\n        return index > -1 ? collection[index] : undefined;                                                             // 7447\n      }                                                                                                                // 7448\n      return baseFind(collection, predicate, baseEachRight);                                                           // 7449\n    }                                                                                                                  // 7450\n                                                                                                                       // 7451\n    /**                                                                                                                // 7452\n     * Iterates over elements of `collection` invoking `iteratee` for each element.                                    // 7453\n     * The iteratee is invoked with three arguments: (value, index|key, collection).                                   // 7454\n     * Iteratee functions may exit iteration early by explicitly returning `false`.                                    // 7455\n     *                                                                                                                 // 7456\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\" property                                 // 7457\n     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`                                    // 7458\n     * for object iteration.                                                                                           // 7459\n     *                                                                                                                 // 7460\n     * @static                                                                                                         // 7461\n     * @memberOf _                                                                                                     // 7462\n     * @alias each                                                                                                     // 7463\n     * @category Collection                                                                                            // 7464\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7465\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7466\n     * @returns {Array|Object} Returns `collection`.                                                                   // 7467\n     * @example                                                                                                        // 7468\n     *                                                                                                                 // 7469\n     * _([1, 2]).forEach(function(value) {                                                                             // 7470\n     *   console.log(value);                                                                                           // 7471\n     * });                                                                                                             // 7472\n     * // => logs `1` then `2`                                                                                         // 7473\n     *                                                                                                                 // 7474\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {                                                            // 7475\n     *   console.log(key);                                                                                             // 7476\n     * });                                                                                                             // 7477\n     * // => logs 'a' then 'b' (iteration order is not guaranteed)                                                     // 7478\n     */                                                                                                                // 7479\n    function forEach(collection, iteratee) {                                                                           // 7480\n      return (typeof iteratee == 'function' && isArray(collection))                                                    // 7481\n        ? arrayEach(collection, iteratee)                                                                              // 7482\n        : baseEach(collection, toFunction(iteratee));                                                                  // 7483\n    }                                                                                                                  // 7484\n                                                                                                                       // 7485\n    /**                                                                                                                // 7486\n     * This method is like `_.forEach` except that it iterates over elements of                                        // 7487\n     * `collection` from right to left.                                                                                // 7488\n     *                                                                                                                 // 7489\n     * @static                                                                                                         // 7490\n     * @memberOf _                                                                                                     // 7491\n     * @alias eachRight                                                                                                // 7492\n     * @category Collection                                                                                            // 7493\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7494\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7495\n     * @returns {Array|Object} Returns `collection`.                                                                   // 7496\n     * @example                                                                                                        // 7497\n     *                                                                                                                 // 7498\n     * _.forEachRight([1, 2], function(value) {                                                                        // 7499\n     *   console.log(value);                                                                                           // 7500\n     * });                                                                                                             // 7501\n     * // => logs `2` then `1`                                                                                         // 7502\n     */                                                                                                                // 7503\n    function forEachRight(collection, iteratee) {                                                                      // 7504\n      return (typeof iteratee == 'function' && isArray(collection))                                                    // 7505\n        ? arrayEachRight(collection, iteratee)                                                                         // 7506\n        : baseEachRight(collection, toFunction(iteratee));                                                             // 7507\n    }                                                                                                                  // 7508\n                                                                                                                       // 7509\n    /**                                                                                                                // 7510\n     * Creates an object composed of keys generated from the results of running                                        // 7511\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 7512\n     * of each key is an array of the elements responsible for generating the key.                                     // 7513\n     * The iteratee is invoked with one argument: (value).                                                             // 7514\n     *                                                                                                                 // 7515\n     * @static                                                                                                         // 7516\n     * @memberOf _                                                                                                     // 7517\n     * @category Collection                                                                                            // 7518\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7519\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 7520\n     * @returns {Object} Returns the composed aggregate object.                                                        // 7521\n     * @example                                                                                                        // 7522\n     *                                                                                                                 // 7523\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);                                                                         // 7524\n     * // => { '4': [4.2], '6': [6.1, 6.3] }                                                                           // 7525\n     *                                                                                                                 // 7526\n     * // using the `_.property` iteratee shorthand                                                                    // 7527\n     * _.groupBy(['one', 'two', 'three'], 'length');                                                                   // 7528\n     * // => { '3': ['one', 'two'], '5': ['three'] }                                                                   // 7529\n     */                                                                                                                // 7530\n    var groupBy = createAggregator(function(result, value, key) {                                                      // 7531\n      if (hasOwnProperty.call(result, key)) {                                                                          // 7532\n        result[key].push(value);                                                                                       // 7533\n      } else {                                                                                                         // 7534\n        result[key] = [value];                                                                                         // 7535\n      }                                                                                                                // 7536\n    });                                                                                                                // 7537\n                                                                                                                       // 7538\n    /**                                                                                                                // 7539\n     * Checks if `value` is in `collection`. If `collection` is a string it's checked                                  // 7540\n     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as                                      // 7542\n     * the offset from the end of `collection`.                                                                        // 7543\n     *                                                                                                                 // 7544\n     * @static                                                                                                         // 7545\n     * @memberOf _                                                                                                     // 7546\n     * @category Collection                                                                                            // 7547\n     * @param {Array|Object|string} collection The collection to search.                                               // 7548\n     * @param {*} value The value to search for.                                                                       // 7549\n     * @param {number} [fromIndex=0] The index to search from.                                                         // 7550\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.                              // 7551\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.                                            // 7552\n     * @example                                                                                                        // 7553\n     *                                                                                                                 // 7554\n     * _.includes([1, 2, 3], 1);                                                                                       // 7555\n     * // => true                                                                                                      // 7556\n     *                                                                                                                 // 7557\n     * _.includes([1, 2, 3], 1, 2);                                                                                    // 7558\n     * // => false                                                                                                     // 7559\n     *                                                                                                                 // 7560\n     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');                                                              // 7561\n     * // => true                                                                                                      // 7562\n     *                                                                                                                 // 7563\n     * _.includes('pebbles', 'eb');                                                                                    // 7564\n     * // => true                                                                                                      // 7565\n     */                                                                                                                // 7566\n    function includes(collection, value, fromIndex, guard) {                                                           // 7567\n      collection = isArrayLike(collection) ? collection : values(collection);                                          // 7568\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;                                                    // 7569\n                                                                                                                       // 7570\n      var length = collection.length;                                                                                  // 7571\n      if (fromIndex < 0) {                                                                                             // 7572\n        fromIndex = nativeMax(length + fromIndex, 0);                                                                  // 7573\n      }                                                                                                                // 7574\n      return isString(collection)                                                                                      // 7575\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)                                           // 7576\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);                                                // 7577\n    }                                                                                                                  // 7578\n                                                                                                                       // 7579\n    /**                                                                                                                // 7580\n     * Invokes the method at `path` of each element in `collection`, returning                                         // 7581\n     * an array of the results of each invoked method. Any additional arguments                                        // 7582\n     * are provided to each invoked method. If `methodName` is a function it's                                         // 7583\n     * invoked for, and `this` bound to, each element in `collection`.                                                 // 7584\n     *                                                                                                                 // 7585\n     * @static                                                                                                         // 7586\n     * @memberOf _                                                                                                     // 7587\n     * @category Collection                                                                                            // 7588\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7589\n     * @param {Array|Function|string} path The path of the method to invoke or                                         // 7590\n     *  the function invoked per iteration.                                                                            // 7591\n     * @param {...*} [args] The arguments to invoke each method with.                                                  // 7592\n     * @returns {Array} Returns the array of results.                                                                  // 7593\n     * @example                                                                                                        // 7594\n     *                                                                                                                 // 7595\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');                                                                    // 7596\n     * // => [[1, 5, 7], [1, 2, 3]]                                                                                    // 7597\n     *                                                                                                                 // 7598\n     * _.invokeMap([123, 456], String.prototype.split, '');                                                            // 7599\n     * // => [['1', '2', '3'], ['4', '5', '6']]                                                                        // 7600\n     */                                                                                                                // 7601\n    var invokeMap = rest(function(collection, path, args) {                                                            // 7602\n      var index = -1,                                                                                                  // 7603\n          isFunc = typeof path == 'function',                                                                          // 7604\n          isProp = isKey(path),                                                                                        // 7605\n          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 7606\n                                                                                                                       // 7607\n      baseEach(collection, function(value) {                                                                           // 7608\n        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);                              // 7609\n        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);                             // 7610\n      });                                                                                                              // 7611\n      return result;                                                                                                   // 7612\n    });                                                                                                                // 7613\n                                                                                                                       // 7614\n    /**                                                                                                                // 7615\n     * Creates an object composed of keys generated from the results of running                                        // 7616\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 7617\n     * of each key is the last element responsible for generating the key. The                                         // 7618\n     * iteratee is invoked with one argument: (value).                                                                 // 7619\n     *                                                                                                                 // 7620\n     * @static                                                                                                         // 7621\n     * @memberOf _                                                                                                     // 7622\n     * @category Collection                                                                                            // 7623\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7624\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 7625\n     * @returns {Object} Returns the composed aggregate object.                                                        // 7626\n     * @example                                                                                                        // 7627\n     *                                                                                                                 // 7628\n     * var keyData = [                                                                                                 // 7629\n     *   { 'dir': 'left', 'code': 97 },                                                                                // 7630\n     *   { 'dir': 'right', 'code': 100 }                                                                               // 7631\n     * ];                                                                                                              // 7632\n     *                                                                                                                 // 7633\n     * _.keyBy(keyData, 'dir');                                                                                        // 7634\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }                       // 7635\n     *                                                                                                                 // 7636\n     * _.keyBy(keyData, function(o) {                                                                                  // 7637\n     *   return String.fromCharCode(o.code);                                                                           // 7638\n     * });                                                                                                             // 7639\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 7640\n     */                                                                                                                // 7641\n    var keyBy = createAggregator(function(result, value, key) {                                                        // 7642\n      result[key] = value;                                                                                             // 7643\n    });                                                                                                                // 7644\n                                                                                                                       // 7645\n    /**                                                                                                                // 7646\n     * Creates an array of values by running each element in `collection` through                                      // 7647\n     * `iteratee`. The iteratee is invoked with three arguments:                                                       // 7648\n     * (value, index|key, collection).                                                                                 // 7649\n     *                                                                                                                 // 7650\n     * Many lodash methods are guarded to work as iteratees for methods like                                           // 7651\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.                                        // 7652\n     *                                                                                                                 // 7653\n     * The guarded methods are:                                                                                        // 7654\n     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,                                             // 7655\n     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,                                         // 7656\n     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,                                      // 7657\n     * and `words`                                                                                                     // 7658\n     *                                                                                                                 // 7659\n     * @static                                                                                                         // 7660\n     * @memberOf _                                                                                                     // 7661\n     * @category Collection                                                                                            // 7662\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7663\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 7664\n     * @returns {Array} Returns the new mapped array.                                                                  // 7665\n     * @example                                                                                                        // 7666\n     *                                                                                                                 // 7667\n     * function square(n) {                                                                                            // 7668\n     *   return n * n;                                                                                                 // 7669\n     * }                                                                                                               // 7670\n     *                                                                                                                 // 7671\n     * _.map([1, 2], square);                                                                                          // 7672\n     * // => [3, 6]                                                                                                    // 7673\n     *                                                                                                                 // 7674\n     * _.map({ 'a': 1, 'b': 2 }, square);                                                                              // 7675\n     * // => [3, 6] (iteration order is not guaranteed)                                                                // 7676\n     *                                                                                                                 // 7677\n     * var users = [                                                                                                   // 7678\n     *   { 'user': 'barney' },                                                                                         // 7679\n     *   { 'user': 'fred' }                                                                                            // 7680\n     * ];                                                                                                              // 7681\n     *                                                                                                                 // 7682\n     * // using the `_.property` iteratee shorthand                                                                    // 7683\n     * _.map(users, 'user');                                                                                           // 7684\n     * // => ['barney', 'fred']                                                                                        // 7685\n     */                                                                                                                // 7686\n    function map(collection, iteratee) {                                                                               // 7687\n      var func = isArray(collection) ? arrayMap : baseMap;                                                             // 7688\n      return func(collection, getIteratee(iteratee, 3));                                                               // 7689\n    }                                                                                                                  // 7690\n                                                                                                                       // 7691\n    /**                                                                                                                // 7692\n     * This method is like `_.sortBy` except that it allows specifying the sort                                        // 7693\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values                                      // 7694\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for                                        // 7695\n     * descending or \"asc\" for ascending sort order of corresponding values.                                           // 7696\n     *                                                                                                                 // 7697\n     * @static                                                                                                         // 7698\n     * @memberOf _                                                                                                     // 7699\n     * @category Collection                                                                                            // 7700\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7701\n     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.                        // 7702\n     * @param {string[]} [orders] The sort orders of `iteratees`.                                                      // 7703\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.                              // 7704\n     * @returns {Array} Returns the new sorted array.                                                                  // 7705\n     * @example                                                                                                        // 7706\n     *                                                                                                                 // 7707\n     * var users = [                                                                                                   // 7708\n     *   { 'user': 'fred',   'age': 48 },                                                                              // 7709\n     *   { 'user': 'barney', 'age': 34 },                                                                              // 7710\n     *   { 'user': 'fred',   'age': 42 },                                                                              // 7711\n     *   { 'user': 'barney', 'age': 36 }                                                                               // 7712\n     * ];                                                                                                              // 7713\n     *                                                                                                                 // 7714\n     * // sort by `user` in ascending order and by `age` in descending order                                           // 7715\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);                                                             // 7716\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                  // 7717\n     */                                                                                                                // 7718\n    function orderBy(collection, iteratees, orders, guard) {                                                           // 7719\n      if (collection == null) {                                                                                        // 7720\n        return [];                                                                                                     // 7721\n      }                                                                                                                // 7722\n      if (!isArray(iteratees)) {                                                                                       // 7723\n        iteratees = iteratees == null ? [] : [iteratees];                                                              // 7724\n      }                                                                                                                // 7725\n      orders = guard ? undefined : orders;                                                                             // 7726\n      if (!isArray(orders)) {                                                                                          // 7727\n        orders = orders == null ? [] : [orders];                                                                       // 7728\n      }                                                                                                                // 7729\n      return baseOrderBy(collection, iteratees, orders);                                                               // 7730\n    }                                                                                                                  // 7731\n                                                                                                                       // 7732\n    /**                                                                                                                // 7733\n     * Creates an array of elements split into two groups, the first of which                                          // 7734\n     * contains elements `predicate` returns truthy for, while the second of which                                     // 7735\n     * contains elements `predicate` returns falsey for. The predicate is invoked                                      // 7736\n     * with three arguments: (value, index|key, collection).                                                           // 7737\n     *                                                                                                                 // 7738\n     * @static                                                                                                         // 7739\n     * @memberOf _                                                                                                     // 7740\n     * @category Collection                                                                                            // 7741\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7742\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7743\n     * @returns {Array} Returns the array of grouped elements.                                                         // 7744\n     * @example                                                                                                        // 7745\n     *                                                                                                                 // 7746\n     * var users = [                                                                                                   // 7747\n     *   { 'user': 'barney',  'age': 36, 'active': false },                                                            // 7748\n     *   { 'user': 'fred',    'age': 40, 'active': true },                                                             // 7749\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }                                                             // 7750\n     * ];                                                                                                              // 7751\n     *                                                                                                                 // 7752\n     * _.partition(users, function(o) { return o.active; });                                                           // 7753\n     * // => objects for [['fred'], ['barney', 'pebbles']]                                                             // 7754\n     *                                                                                                                 // 7755\n     * // using the `_.matches` iteratee shorthand                                                                     // 7756\n     * _.partition(users, { 'age': 1, 'active': false });                                                              // 7757\n     * // => objects for [['pebbles'], ['barney', 'fred']]                                                             // 7758\n     *                                                                                                                 // 7759\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7760\n     * _.partition(users, ['active', false]);                                                                          // 7761\n     * // => objects for [['barney', 'pebbles'], ['fred']]                                                             // 7762\n     *                                                                                                                 // 7763\n     * // using the `_.property` iteratee shorthand                                                                    // 7764\n     * _.partition(users, 'active');                                                                                   // 7765\n     * // => objects for [['fred'], ['barney', 'pebbles']]                                                             // 7766\n     */                                                                                                                // 7767\n    var partition = createAggregator(function(result, value, key) {                                                    // 7768\n      result[key ? 0 : 1].push(value);                                                                                 // 7769\n    }, function() { return [[], []]; });                                                                               // 7770\n                                                                                                                       // 7771\n    /**                                                                                                                // 7772\n     * Reduces `collection` to a value which is the accumulated result of running                                      // 7773\n     * each element in `collection` through `iteratee`, where each successive                                          // 7774\n     * invocation is supplied the return value of the previous. If `accumulator`                                       // 7775\n     * is not provided the first element of `collection` is used as the initial                                        // 7776\n     * value. The iteratee is invoked with four arguments:                                                             // 7777\n     * (accumulator, value, index|key, collection).                                                                    // 7778\n     *                                                                                                                 // 7779\n     * Many lodash methods are guarded to work as iteratees for methods like                                           // 7780\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.                                                                 // 7781\n     *                                                                                                                 // 7782\n     * The guarded methods are:                                                                                        // 7783\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,                                           // 7784\n     * and `sortBy`                                                                                                    // 7785\n     *                                                                                                                 // 7786\n     * @static                                                                                                         // 7787\n     * @memberOf _                                                                                                     // 7788\n     * @category Collection                                                                                            // 7789\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7790\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7791\n     * @param {*} [accumulator] The initial value.                                                                     // 7792\n     * @returns {*} Returns the accumulated value.                                                                     // 7793\n     * @example                                                                                                        // 7794\n     *                                                                                                                 // 7795\n     * _.reduce([1, 2], function(sum, n) {                                                                             // 7796\n     *   return sum + n;                                                                                               // 7797\n     * });                                                                                                             // 7798\n     * // => 3                                                                                                         // 7799\n     *                                                                                                                 // 7800\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {                                             // 7801\n     *   (result[value] || (result[value] = [])).push(key);                                                            // 7802\n     *   return result;                                                                                                // 7803\n     * }, {});                                                                                                         // 7804\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)                                       // 7805\n     */                                                                                                                // 7806\n    function reduce(collection, iteratee, accumulator) {                                                               // 7807\n      var func = isArray(collection) ? arrayReduce : baseReduce,                                                       // 7808\n          initFromCollection = arguments.length < 3;                                                                   // 7809\n                                                                                                                       // 7810\n      return func(collection, getIteratee(iteratee, 4), accumulator, initFromCollection, baseEach);                    // 7811\n    }                                                                                                                  // 7812\n                                                                                                                       // 7813\n    /**                                                                                                                // 7814\n     * This method is like `_.reduce` except that it iterates over elements of                                         // 7815\n     * `collection` from right to left.                                                                                // 7816\n     *                                                                                                                 // 7817\n     * @static                                                                                                         // 7818\n     * @memberOf _                                                                                                     // 7819\n     * @category Collection                                                                                            // 7820\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7821\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7822\n     * @param {*} [accumulator] The initial value.                                                                     // 7823\n     * @returns {*} Returns the accumulated value.                                                                     // 7824\n     * @example                                                                                                        // 7825\n     *                                                                                                                 // 7826\n     * var array = [[0, 1], [2, 3], [4, 5]];                                                                           // 7827\n     *                                                                                                                 // 7828\n     * _.reduceRight(array, function(flattened, other) {                                                               // 7829\n     *   return flattened.concat(other);                                                                               // 7830\n     * }, []);                                                                                                         // 7831\n     * // => [4, 5, 2, 3, 0, 1]                                                                                        // 7832\n     */                                                                                                                // 7833\n    function reduceRight(collection, iteratee, accumulator) {                                                          // 7834\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,                                                  // 7835\n          initFromCollection = arguments.length < 3;                                                                   // 7836\n                                                                                                                       // 7837\n      return func(collection, getIteratee(iteratee, 4), accumulator, initFromCollection, baseEachRight);               // 7838\n    }                                                                                                                  // 7839\n                                                                                                                       // 7840\n    /**                                                                                                                // 7841\n     * The opposite of `_.filter`; this method returns the elements of `collection`                                    // 7842\n     * that `predicate` does **not** return truthy for.                                                                // 7843\n     *                                                                                                                 // 7844\n     * @static                                                                                                         // 7845\n     * @memberOf _                                                                                                     // 7846\n     * @category Collection                                                                                            // 7847\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7848\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7849\n     * @returns {Array} Returns the new filtered array.                                                                // 7850\n     * @example                                                                                                        // 7851\n     *                                                                                                                 // 7852\n     * var users = [                                                                                                   // 7853\n     *   { 'user': 'barney', 'age': 36, 'active': false },                                                             // 7854\n     *   { 'user': 'fred',   'age': 40, 'active': true }                                                               // 7855\n     * ];                                                                                                              // 7856\n     *                                                                                                                 // 7857\n     * _.reject(users, function(o) { return !o.active; });                                                             // 7858\n     * // => objects for ['fred']                                                                                      // 7859\n     *                                                                                                                 // 7860\n     * // using the `_.matches` iteratee shorthand                                                                     // 7861\n     * _.reject(users, { 'age': 40, 'active': true });                                                                 // 7862\n     * // => objects for ['barney']                                                                                    // 7863\n     *                                                                                                                 // 7864\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 7865\n     * _.reject(users, ['active', false]);                                                                             // 7866\n     * // => objects for ['fred']                                                                                      // 7867\n     *                                                                                                                 // 7868\n     * // using the `_.property` iteratee shorthand                                                                    // 7869\n     * _.reject(users, 'active');                                                                                      // 7870\n     * // => objects for ['barney']                                                                                    // 7871\n     */                                                                                                                // 7872\n    function reject(collection, predicate) {                                                                           // 7873\n      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 7874\n      predicate = getIteratee(predicate, 3);                                                                           // 7875\n      return func(collection, function(value, index, collection) {                                                     // 7876\n        return !predicate(value, index, collection);                                                                   // 7877\n      });                                                                                                              // 7878\n    }                                                                                                                  // 7879\n                                                                                                                       // 7880\n    /**                                                                                                                // 7881\n     * Gets a random element from `collection`.                                                                        // 7882\n     *                                                                                                                 // 7883\n     * @static                                                                                                         // 7884\n     * @memberOf _                                                                                                     // 7885\n     * @category Collection                                                                                            // 7886\n     * @param {Array|Object} collection The collection to sample.                                                      // 7887\n     * @returns {*} Returns the random element.                                                                        // 7888\n     * @example                                                                                                        // 7889\n     *                                                                                                                 // 7890\n     * _.sample([1, 2, 3, 4]);                                                                                         // 7891\n     * // => 2                                                                                                         // 7892\n     */                                                                                                                // 7893\n    function sample(collection) {                                                                                      // 7894\n      var array = isArrayLike(collection) ? collection : values(collection),                                           // 7895\n          length = array.length;                                                                                       // 7896\n                                                                                                                       // 7897\n      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;                                                // 7898\n    }                                                                                                                  // 7899\n                                                                                                                       // 7900\n    /**                                                                                                                // 7901\n     * Gets `n` random elements from `collection`.                                                                     // 7902\n     *                                                                                                                 // 7903\n     * @static                                                                                                         // 7904\n     * @memberOf _                                                                                                     // 7905\n     * @category Collection                                                                                            // 7906\n     * @param {Array|Object} collection The collection to sample.                                                      // 7907\n     * @param {number} [n=0] The number of elements to sample.                                                         // 7908\n     * @returns {Array} Returns the random elements.                                                                   // 7909\n     * @example                                                                                                        // 7910\n     *                                                                                                                 // 7911\n     * _.sampleSize([1, 2, 3, 4], 2);                                                                                  // 7912\n     * // => [3, 1]                                                                                                    // 7913\n     */                                                                                                                // 7914\n    function sampleSize(collection, n) {                                                                               // 7915\n      var index = -1,                                                                                                  // 7916\n          result = toArray(collection),                                                                                // 7917\n          length = result.length,                                                                                      // 7918\n          lastIndex = length - 1;                                                                                      // 7919\n                                                                                                                       // 7920\n      n = baseClamp(toInteger(n), 0, length);                                                                          // 7921\n      while (++index < n) {                                                                                            // 7922\n        var rand = baseRandom(index, lastIndex),                                                                       // 7923\n            value = result[rand];                                                                                      // 7924\n                                                                                                                       // 7925\n        result[rand] = result[index];                                                                                  // 7926\n        result[index] = value;                                                                                         // 7927\n      }                                                                                                                // 7928\n      result.length = n;                                                                                               // 7929\n      return result;                                                                                                   // 7930\n    }                                                                                                                  // 7931\n                                                                                                                       // 7932\n    /**                                                                                                                // 7933\n     * Creates an array of shuffled values, using a version of the                                                     // 7934\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).                                     // 7935\n     *                                                                                                                 // 7936\n     * @static                                                                                                         // 7937\n     * @memberOf _                                                                                                     // 7938\n     * @category Collection                                                                                            // 7939\n     * @param {Array|Object} collection The collection to shuffle.                                                     // 7940\n     * @returns {Array} Returns the new shuffled array.                                                                // 7941\n     * @example                                                                                                        // 7942\n     *                                                                                                                 // 7943\n     * _.shuffle([1, 2, 3, 4]);                                                                                        // 7944\n     * // => [4, 1, 3, 2]                                                                                              // 7945\n     */                                                                                                                // 7946\n    function shuffle(collection) {                                                                                     // 7947\n      return sampleSize(collection, MAX_ARRAY_LENGTH);                                                                 // 7948\n    }                                                                                                                  // 7949\n                                                                                                                       // 7950\n    /**                                                                                                                // 7951\n     * Gets the size of `collection` by returning its length for array-like                                            // 7952\n     * values or the number of own enumerable properties for objects.                                                  // 7953\n     *                                                                                                                 // 7954\n     * @static                                                                                                         // 7955\n     * @memberOf _                                                                                                     // 7956\n     * @category Collection                                                                                            // 7957\n     * @param {Array|Object} collection The collection to inspect.                                                     // 7958\n     * @returns {number} Returns the collection size.                                                                  // 7959\n     * @example                                                                                                        // 7960\n     *                                                                                                                 // 7961\n     * _.size([1, 2, 3]);                                                                                              // 7962\n     * // => 3                                                                                                         // 7963\n     *                                                                                                                 // 7964\n     * _.size({ 'a': 1, 'b': 2 });                                                                                     // 7965\n     * // => 2                                                                                                         // 7966\n     *                                                                                                                 // 7967\n     * _.size('pebbles');                                                                                              // 7968\n     * // => 7                                                                                                         // 7969\n     */                                                                                                                // 7970\n    function size(collection) {                                                                                        // 7971\n      if (collection == null) {                                                                                        // 7972\n        return 0;                                                                                                      // 7973\n      }                                                                                                                // 7974\n      if (isArrayLike(collection)) {                                                                                   // 7975\n        var result = collection.length;                                                                                // 7976\n        return (result && isString(collection)) ? stringSize(collection) : result;                                     // 7977\n      }                                                                                                                // 7978\n      return keys(collection).length;                                                                                  // 7979\n    }                                                                                                                  // 7980\n                                                                                                                       // 7981\n    /**                                                                                                                // 7982\n     * Checks if `predicate` returns truthy for **any** element of `collection`.                                       // 7983\n     * Iteration is stopped once `predicate` returns truthy. The predicate is                                          // 7984\n     * invoked with three arguments: (value, index|key, collection).                                                   // 7985\n     *                                                                                                                 // 7986\n     * @static                                                                                                         // 7987\n     * @memberOf _                                                                                                     // 7988\n     * @category Collection                                                                                            // 7989\n     * @param {Array|Object} collection The collection to iterate over.                                                // 7990\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 7991\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 7992\n     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.                      // 7993\n     * @example                                                                                                        // 7994\n     *                                                                                                                 // 7995\n     * _.some([null, 0, 'yes', false], Boolean);                                                                       // 7996\n     * // => true                                                                                                      // 7997\n     *                                                                                                                 // 7998\n     * var users = [                                                                                                   // 7999\n     *   { 'user': 'barney', 'active': true },                                                                         // 8000\n     *   { 'user': 'fred',   'active': false }                                                                         // 8001\n     * ];                                                                                                              // 8002\n     *                                                                                                                 // 8003\n     * // using the `_.matches` iteratee shorthand                                                                     // 8004\n     * _.some(users, { 'user': 'barney', 'active': false });                                                           // 8005\n     * // => false                                                                                                     // 8006\n     *                                                                                                                 // 8007\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 8008\n     * _.some(users, ['active', false]);                                                                               // 8009\n     * // => true                                                                                                      // 8010\n     *                                                                                                                 // 8011\n     * // using the `_.property` iteratee shorthand                                                                    // 8012\n     * _.some(users, 'active');                                                                                        // 8013\n     * // => true                                                                                                      // 8014\n     */                                                                                                                // 8015\n    function some(collection, predicate, guard) {                                                                      // 8016\n      var func = isArray(collection) ? arraySome : baseSome;                                                           // 8017\n      if (guard && isIterateeCall(collection, predicate, guard)) {                                                     // 8018\n        predicate = undefined;                                                                                         // 8019\n      }                                                                                                                // 8020\n      return func(collection, getIteratee(predicate, 3));                                                              // 8021\n    }                                                                                                                  // 8022\n                                                                                                                       // 8023\n    /**                                                                                                                // 8024\n     * Creates an array of elements, sorted in ascending order by the results of                                       // 8025\n     * running each element in a collection through each iteratee. This method                                         // 8026\n     * performs a stable sort, that is, it preserves the original sort order of                                        // 8027\n     * equal elements. The iteratees are invoked with one argument: (value).                                           // 8028\n     *                                                                                                                 // 8029\n     * @static                                                                                                         // 8030\n     * @memberOf _                                                                                                     // 8031\n     * @category Collection                                                                                            // 8032\n     * @param {Array|Object} collection The collection to iterate over.                                                // 8033\n     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]                      // 8034\n     *  The iteratees to sort by, specified individually or in arrays.                                                 // 8035\n     * @returns {Array} Returns the new sorted array.                                                                  // 8036\n     * @example                                                                                                        // 8037\n     *                                                                                                                 // 8038\n     * var users = [                                                                                                   // 8039\n     *   { 'user': 'fred',   'age': 48 },                                                                              // 8040\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 8041\n     *   { 'user': 'fred',   'age': 42 },                                                                              // 8042\n     *   { 'user': 'barney', 'age': 34 }                                                                               // 8043\n     * ];                                                                                                              // 8044\n     *                                                                                                                 // 8045\n     * _.sortBy(users, function(o) { return o.user; });                                                                // 8046\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                  // 8047\n     *                                                                                                                 // 8048\n     * _.sortBy(users, ['user', 'age']);                                                                               // 8049\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]                                  // 8050\n     *                                                                                                                 // 8051\n     * _.sortBy(users, 'user', function(o) {                                                                           // 8052\n     *   return Math.floor(o.age / 10);                                                                                // 8053\n     * });                                                                                                             // 8054\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                  // 8055\n     */                                                                                                                // 8056\n    var sortBy = rest(function(collection, iteratees) {                                                                // 8057\n      if (collection == null) {                                                                                        // 8058\n        return [];                                                                                                     // 8059\n      }                                                                                                                // 8060\n      var length = iteratees.length;                                                                                   // 8061\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {                                      // 8062\n        iteratees = [];                                                                                                // 8063\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {                             // 8064\n        iteratees.length = 1;                                                                                          // 8065\n      }                                                                                                                // 8066\n      return baseOrderBy(collection, baseFlatten(iteratees), []);                                                      // 8067\n    });                                                                                                                // 8068\n                                                                                                                       // 8069\n    /*------------------------------------------------------------------------*/                                       // 8070\n                                                                                                                       // 8071\n    /**                                                                                                                // 8072\n     * Gets the timestamp of the number of milliseconds that have elapsed since                                        // 8073\n     * the Unix epoch (1 January 1970 00:00:00 UTC).                                                                   // 8074\n     *                                                                                                                 // 8075\n     * @static                                                                                                         // 8076\n     * @memberOf _                                                                                                     // 8077\n     * @type Function                                                                                                  // 8078\n     * @category Date                                                                                                  // 8079\n     * @returns {number} Returns the timestamp.                                                                        // 8080\n     * @example                                                                                                        // 8081\n     *                                                                                                                 // 8082\n     * _.defer(function(stamp) {                                                                                       // 8083\n     *   console.log(_.now() - stamp);                                                                                 // 8084\n     * }, _.now());                                                                                                    // 8085\n     * // => logs the number of milliseconds it took for the deferred function to be invoked                           // 8086\n     */                                                                                                                // 8087\n    var now = Date.now;                                                                                                // 8088\n                                                                                                                       // 8089\n    /*------------------------------------------------------------------------*/                                       // 8090\n                                                                                                                       // 8091\n    /**                                                                                                                // 8092\n     * The opposite of `_.before`; this method creates a function that invokes                                         // 8093\n     * `func` once it's called `n` or more times.                                                                      // 8094\n     *                                                                                                                 // 8095\n     * @static                                                                                                         // 8096\n     * @memberOf _                                                                                                     // 8097\n     * @category Function                                                                                              // 8098\n     * @param {number} n The number of calls before `func` is invoked.                                                 // 8099\n     * @param {Function} func The function to restrict.                                                                // 8100\n     * @returns {Function} Returns the new restricted function.                                                        // 8101\n     * @example                                                                                                        // 8102\n     *                                                                                                                 // 8103\n     * var saves = ['profile', 'settings'];                                                                            // 8104\n     *                                                                                                                 // 8105\n     * var done = _.after(saves.length, function() {                                                                   // 8106\n     *   console.log('done saving!');                                                                                  // 8107\n     * });                                                                                                             // 8108\n     *                                                                                                                 // 8109\n     * _.forEach(saves, function(type) {                                                                               // 8110\n     *   asyncSave({ 'type': type, 'complete': done });                                                                // 8111\n     * });                                                                                                             // 8112\n     * // => logs 'done saving!' after the two async saves have completed                                              // 8113\n     */                                                                                                                // 8114\n    function after(n, func) {                                                                                          // 8115\n      if (typeof func != 'function') {                                                                                 // 8116\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8117\n      }                                                                                                                // 8118\n      n = toInteger(n);                                                                                                // 8119\n      return function() {                                                                                              // 8120\n        if (--n < 1) {                                                                                                 // 8121\n          return func.apply(this, arguments);                                                                          // 8122\n        }                                                                                                              // 8123\n      };                                                                                                               // 8124\n    }                                                                                                                  // 8125\n                                                                                                                       // 8126\n    /**                                                                                                                // 8127\n     * Creates a function that accepts up to `n` arguments, ignoring any                                               // 8128\n     * additional arguments.                                                                                           // 8129\n     *                                                                                                                 // 8130\n     * @static                                                                                                         // 8131\n     * @memberOf _                                                                                                     // 8132\n     * @category Function                                                                                              // 8133\n     * @param {Function} func The function to cap arguments for.                                                       // 8134\n     * @param {number} [n=func.length] The arity cap.                                                                  // 8135\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 8136\n     * @returns {Function} Returns the new function.                                                                   // 8137\n     * @example                                                                                                        // 8138\n     *                                                                                                                 // 8139\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));                                                                    // 8140\n     * // => [6, 8, 10]                                                                                                // 8141\n     */                                                                                                                // 8142\n    function ary(func, n, guard) {                                                                                     // 8143\n      n = guard ? undefined : n;                                                                                       // 8144\n      n = (func && n == null) ? func.length : n;                                                                       // 8145\n      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);                             // 8146\n    }                                                                                                                  // 8147\n                                                                                                                       // 8148\n    /**                                                                                                                // 8149\n     * Creates a function that invokes `func`, with the `this` binding and arguments                                   // 8150\n     * of the created function, while it's called less than `n` times. Subsequent                                      // 8151\n     * calls to the created function return the result of the last `func` invocation.                                  // 8152\n     *                                                                                                                 // 8153\n     * @static                                                                                                         // 8154\n     * @memberOf _                                                                                                     // 8155\n     * @category Function                                                                                              // 8156\n     * @param {number} n The number of calls at which `func` is no longer invoked.                                     // 8157\n     * @param {Function} func The function to restrict.                                                                // 8158\n     * @returns {Function} Returns the new restricted function.                                                        // 8159\n     * @example                                                                                                        // 8160\n     *                                                                                                                 // 8161\n     * jQuery(element).on('click', _.before(5, addContactToList));                                                     // 8162\n     * // => allows adding up to 4 contacts to the list                                                                // 8163\n     */                                                                                                                // 8164\n    function before(n, func) {                                                                                         // 8165\n      var result;                                                                                                      // 8166\n      if (typeof func != 'function') {                                                                                 // 8167\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8168\n      }                                                                                                                // 8169\n      n = toInteger(n);                                                                                                // 8170\n      return function() {                                                                                              // 8171\n        if (--n > 0) {                                                                                                 // 8172\n          result = func.apply(this, arguments);                                                                        // 8173\n        }                                                                                                              // 8174\n        if (n <= 1) {                                                                                                  // 8175\n          func = undefined;                                                                                            // 8176\n        }                                                                                                              // 8177\n        return result;                                                                                                 // 8178\n      };                                                                                                               // 8179\n    }                                                                                                                  // 8180\n                                                                                                                       // 8181\n    /**                                                                                                                // 8182\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 8183\n     * and prepends any additional `_.bind` arguments to those provided to the                                         // 8184\n     * bound function.                                                                                                 // 8185\n     *                                                                                                                 // 8186\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,                                     // 8187\n     * may be used as a placeholder for partially applied arguments.                                                   // 8188\n     *                                                                                                                 // 8189\n     * **Note:** Unlike native `Function#bind` this method doesn't set the \"length\"                                    // 8190\n     * property of bound functions.                                                                                    // 8191\n     *                                                                                                                 // 8192\n     * @static                                                                                                         // 8193\n     * @memberOf _                                                                                                     // 8194\n     * @category Function                                                                                              // 8195\n     * @param {Function} func The function to bind.                                                                    // 8196\n     * @param {*} thisArg The `this` binding of `func`.                                                                // 8197\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8198\n     * @returns {Function} Returns the new bound function.                                                             // 8199\n     * @example                                                                                                        // 8200\n     *                                                                                                                 // 8201\n     * var greet = function(greeting, punctuation) {                                                                   // 8202\n     *   return greeting + ' ' + this.user + punctuation;                                                              // 8203\n     * };                                                                                                              // 8204\n     *                                                                                                                 // 8205\n     * var object = { 'user': 'fred' };                                                                                // 8206\n     *                                                                                                                 // 8207\n     * var bound = _.bind(greet, object, 'hi');                                                                        // 8208\n     * bound('!');                                                                                                     // 8209\n     * // => 'hi fred!'                                                                                                // 8210\n     *                                                                                                                 // 8211\n     * // using placeholders                                                                                           // 8212\n     * var bound = _.bind(greet, object, _, '!');                                                                      // 8213\n     * bound('hi');                                                                                                    // 8214\n     * // => 'hi fred!'                                                                                                // 8215\n     */                                                                                                                // 8216\n    var bind = rest(function(func, thisArg, partials) {                                                                // 8217\n      var bitmask = BIND_FLAG;                                                                                         // 8218\n      if (partials.length) {                                                                                           // 8219\n        var holders = replaceHolders(partials, bind.placeholder);                                                      // 8220\n        bitmask |= PARTIAL_FLAG;                                                                                       // 8221\n      }                                                                                                                // 8222\n      return createWrapper(func, bitmask, thisArg, partials, holders);                                                 // 8223\n    });                                                                                                                // 8224\n                                                                                                                       // 8225\n    /**                                                                                                                // 8226\n     * Creates a function that invokes the method at `object[key]` and prepends                                        // 8227\n     * any additional `_.bindKey` arguments to those provided to the bound function.                                   // 8228\n     *                                                                                                                 // 8229\n     * This method differs from `_.bind` by allowing bound functions to reference                                      // 8230\n     * methods that may be redefined or don't yet exist.                                                               // 8231\n     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)                // 8232\n     * for more details.                                                                                               // 8233\n     *                                                                                                                 // 8234\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic                                          // 8235\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 8236\n     *                                                                                                                 // 8237\n     * @static                                                                                                         // 8238\n     * @memberOf _                                                                                                     // 8239\n     * @category Function                                                                                              // 8240\n     * @param {Object} object The object to invoke the method on.                                                      // 8241\n     * @param {string} key The key of the method.                                                                      // 8242\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8243\n     * @returns {Function} Returns the new bound function.                                                             // 8244\n     * @example                                                                                                        // 8245\n     *                                                                                                                 // 8246\n     * var object = {                                                                                                  // 8247\n     *   'user': 'fred',                                                                                               // 8248\n     *   'greet': function(greeting, punctuation) {                                                                    // 8249\n     *     return greeting + ' ' + this.user + punctuation;                                                            // 8250\n     *   }                                                                                                             // 8251\n     * };                                                                                                              // 8252\n     *                                                                                                                 // 8253\n     * var bound = _.bindKey(object, 'greet', 'hi');                                                                   // 8254\n     * bound('!');                                                                                                     // 8255\n     * // => 'hi fred!'                                                                                                // 8256\n     *                                                                                                                 // 8257\n     * object.greet = function(greeting, punctuation) {                                                                // 8258\n     *   return greeting + 'ya ' + this.user + punctuation;                                                            // 8259\n     * };                                                                                                              // 8260\n     *                                                                                                                 // 8261\n     * bound('!');                                                                                                     // 8262\n     * // => 'hiya fred!'                                                                                              // 8263\n     *                                                                                                                 // 8264\n     * // using placeholders                                                                                           // 8265\n     * var bound = _.bindKey(object, 'greet', _, '!');                                                                 // 8266\n     * bound('hi');                                                                                                    // 8267\n     * // => 'hiya fred!'                                                                                              // 8268\n     */                                                                                                                // 8269\n    var bindKey = rest(function(object, key, partials) {                                                               // 8270\n      var bitmask = BIND_FLAG | BIND_KEY_FLAG;                                                                         // 8271\n      if (partials.length) {                                                                                           // 8272\n        var holders = replaceHolders(partials, bindKey.placeholder);                                                   // 8273\n        bitmask |= PARTIAL_FLAG;                                                                                       // 8274\n      }                                                                                                                // 8275\n      return createWrapper(key, bitmask, object, partials, holders);                                                   // 8276\n    });                                                                                                                // 8277\n                                                                                                                       // 8278\n    /**                                                                                                                // 8279\n     * Creates a function that accepts arguments of `func` and either invokes                                          // 8280\n     * `func` returning its result, if at least `arity` number of arguments have                                       // 8281\n     * been provided, or returns a function that accepts the remaining `func`                                          // 8282\n     * arguments, and so on. The arity of `func` may be specified if `func.length`                                     // 8283\n     * is not sufficient.                                                                                              // 8284\n     *                                                                                                                 // 8285\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,                                    // 8286\n     * may be used as a placeholder for provided arguments.                                                            // 8287\n     *                                                                                                                 // 8288\n     * **Note:** This method doesn't set the \"length\" property of curried functions.                                   // 8289\n     *                                                                                                                 // 8290\n     * @static                                                                                                         // 8291\n     * @memberOf _                                                                                                     // 8292\n     * @category Function                                                                                              // 8293\n     * @param {Function} func The function to curry.                                                                   // 8294\n     * @param {number} [arity=func.length] The arity of `func`.                                                        // 8295\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 8296\n     * @returns {Function} Returns the new curried function.                                                           // 8297\n     * @example                                                                                                        // 8298\n     *                                                                                                                 // 8299\n     * var abc = function(a, b, c) {                                                                                   // 8300\n     *   return [a, b, c];                                                                                             // 8301\n     * };                                                                                                              // 8302\n     *                                                                                                                 // 8303\n     * var curried = _.curry(abc);                                                                                     // 8304\n     *                                                                                                                 // 8305\n     * curried(1)(2)(3);                                                                                               // 8306\n     * // => [1, 2, 3]                                                                                                 // 8307\n     *                                                                                                                 // 8308\n     * curried(1, 2)(3);                                                                                               // 8309\n     * // => [1, 2, 3]                                                                                                 // 8310\n     *                                                                                                                 // 8311\n     * curried(1, 2, 3);                                                                                               // 8312\n     * // => [1, 2, 3]                                                                                                 // 8313\n     *                                                                                                                 // 8314\n     * // using placeholders                                                                                           // 8315\n     * curried(1)(_, 3)(2);                                                                                            // 8316\n     * // => [1, 2, 3]                                                                                                 // 8317\n     */                                                                                                                // 8318\n    function curry(func, arity, guard) {                                                                               // 8319\n      arity = guard ? undefined : arity;                                                                               // 8320\n      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);      // 8321\n      result.placeholder = curry.placeholder;                                                                          // 8322\n      return result;                                                                                                   // 8323\n    }                                                                                                                  // 8324\n                                                                                                                       // 8325\n    /**                                                                                                                // 8326\n     * This method is like `_.curry` except that arguments are applied to `func`                                       // 8327\n     * in the manner of `_.partialRight` instead of `_.partial`.                                                       // 8328\n     *                                                                                                                 // 8329\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic                                       // 8330\n     * builds, may be used as a placeholder for provided arguments.                                                    // 8331\n     *                                                                                                                 // 8332\n     * **Note:** This method doesn't set the \"length\" property of curried functions.                                   // 8333\n     *                                                                                                                 // 8334\n     * @static                                                                                                         // 8335\n     * @memberOf _                                                                                                     // 8336\n     * @category Function                                                                                              // 8337\n     * @param {Function} func The function to curry.                                                                   // 8338\n     * @param {number} [arity=func.length] The arity of `func`.                                                        // 8339\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 8340\n     * @returns {Function} Returns the new curried function.                                                           // 8341\n     * @example                                                                                                        // 8342\n     *                                                                                                                 // 8343\n     * var abc = function(a, b, c) {                                                                                   // 8344\n     *   return [a, b, c];                                                                                             // 8345\n     * };                                                                                                              // 8346\n     *                                                                                                                 // 8347\n     * var curried = _.curryRight(abc);                                                                                // 8348\n     *                                                                                                                 // 8349\n     * curried(3)(2)(1);                                                                                               // 8350\n     * // => [1, 2, 3]                                                                                                 // 8351\n     *                                                                                                                 // 8352\n     * curried(2, 3)(1);                                                                                               // 8353\n     * // => [1, 2, 3]                                                                                                 // 8354\n     *                                                                                                                 // 8355\n     * curried(1, 2, 3);                                                                                               // 8356\n     * // => [1, 2, 3]                                                                                                 // 8357\n     *                                                                                                                 // 8358\n     * // using placeholders                                                                                           // 8359\n     * curried(3)(1, _)(2);                                                                                            // 8360\n     * // => [1, 2, 3]                                                                                                 // 8361\n     */                                                                                                                // 8362\n    function curryRight(func, arity, guard) {                                                                          // 8363\n      arity = guard ? undefined : arity;                                                                               // 8364\n      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;                                                                     // 8366\n      return result;                                                                                                   // 8367\n    }                                                                                                                  // 8368\n                                                                                                                       // 8369\n    /**                                                                                                                // 8370\n     * Creates a debounced function that delays invoking `func` until after `wait`                                     // 8371\n     * milliseconds have elapsed since the last time the debounced function was                                        // 8372\n     * invoked. The debounced function comes with a `cancel` method to cancel                                          // 8373\n     * delayed `func` invocations and a `flush` method to immediately invoke them.                                     // 8374\n     * Provide an options object to indicate whether `func` should be invoked on                                       // 8375\n     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked                                   // 8376\n     * with the last arguments provided to the debounced function. Subsequent calls                                    // 8377\n     * to the debounced function return the result of the last `func` invocation.                                      // 8378\n     *                                                                                                                 // 8379\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 8380\n     * on the trailing edge of the timeout only if the the debounced function is                                       // 8381\n     * invoked more than once during the `wait` timeout.                                                               // 8382\n     *                                                                                                                 // 8383\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 8384\n     * for details over the differences between `_.debounce` and `_.throttle`.                                         // 8385\n     *                                                                                                                 // 8386\n     * @static                                                                                                         // 8387\n     * @memberOf _                                                                                                     // 8388\n     * @category Function                                                                                              // 8389\n     * @param {Function} func The function to debounce.                                                                // 8390\n     * @param {number} [wait=0] The number of milliseconds to delay.                                                   // 8391\n     * @param {Object} [options] The options object.                                                                   // 8392\n     * @param {boolean} [options.leading=false] Specify invoking on the leading                                        // 8393\n     *  edge of the timeout.                                                                                           // 8394\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be                                      // 8395\n     *  delayed before it's invoked.                                                                                   // 8396\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 8397\n     *  edge of the timeout.                                                                                           // 8398\n     * @returns {Function} Returns the new debounced function.                                                         // 8399\n     * @example                                                                                                        // 8400\n     *                                                                                                                 // 8401\n     * // avoid costly calculations while the window size is in flux                                                   // 8402\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));                                                  // 8403\n     *                                                                                                                 // 8404\n     * // invoke `sendMail` when clicked, debouncing subsequent calls                                                  // 8405\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {                                                         // 8406\n     *   'leading': true,                                                                                              // 8407\n     *   'trailing': false                                                                                             // 8408\n     * }));                                                                                                            // 8409\n     *                                                                                                                 // 8410\n     * // ensure `batchLog` is invoked once after 1 second of debounced calls                                          // 8411\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });                                                 // 8412\n     * var source = new EventSource('/stream');                                                                        // 8413\n     * jQuery(source).on('message', debounced);                                                                        // 8414\n     *                                                                                                                 // 8415\n     * // cancel a trailing debounced invocation                                                                       // 8416\n     * jQuery(window).on('popstate', debounced.cancel);                                                                // 8417\n     */                                                                                                                // 8418\n    function debounce(func, wait, options) {                                                                           // 8419\n      var args,                                                                                                        // 8420\n          maxTimeoutId,                                                                                                // 8421\n          result,                                                                                                      // 8422\n          stamp,                                                                                                       // 8423\n          thisArg,                                                                                                     // 8424\n          timeoutId,                                                                                                   // 8425\n          trailingCall,                                                                                                // 8426\n          lastCalled = 0,                                                                                              // 8427\n          leading = false,                                                                                             // 8428\n          maxWait = false,                                                                                             // 8429\n          trailing = true;                                                                                             // 8430\n                                                                                                                       // 8431\n      if (typeof func != 'function') {                                                                                 // 8432\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8433\n      }                                                                                                                // 8434\n      wait = toNumber(wait) || 0;                                                                                      // 8435\n      if (isObject(options)) {                                                                                         // 8436\n        leading = !!options.leading;                                                                                   // 8437\n        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);                             // 8438\n        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 8439\n      }                                                                                                                // 8440\n                                                                                                                       // 8441\n      function cancel() {                                                                                              // 8442\n        if (timeoutId) {                                                                                               // 8443\n          clearTimeout(timeoutId);                                                                                     // 8444\n        }                                                                                                              // 8445\n        if (maxTimeoutId) {                                                                                            // 8446\n          clearTimeout(maxTimeoutId);                                                                                  // 8447\n        }                                                                                                              // 8448\n        lastCalled = 0;                                                                                                // 8449\n        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;                                          // 8450\n      }                                                                                                                // 8451\n                                                                                                                       // 8452\n      function complete(isCalled, id) {                                                                                // 8453\n        if (id) {                                                                                                      // 8454\n          clearTimeout(id);                                                                                            // 8455\n        }                                                                                                              // 8456\n        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 8457\n        if (isCalled) {                                                                                                // 8458\n          lastCalled = now();                                                                                          // 8459\n          result = func.apply(thisArg, args);                                                                          // 8460\n          if (!timeoutId && !maxTimeoutId) {                                                                           // 8461\n            args = thisArg = undefined;                                                                                // 8462\n          }                                                                                                            // 8463\n        }                                                                                                              // 8464\n      }                                                                                                                // 8465\n                                                                                                                       // 8466\n      function delayed() {                                                                                             // 8467\n        var remaining = wait - (now() - stamp);                                                                        // 8468\n        if (remaining <= 0 || remaining > wait) {                                                                      // 8469\n          complete(trailingCall, maxTimeoutId);                                                                        // 8470\n        } else {                                                                                                       // 8471\n          timeoutId = setTimeout(delayed, remaining);                                                                  // 8472\n        }                                                                                                              // 8473\n      }                                                                                                                // 8474\n                                                                                                                       // 8475\n      function flush() {                                                                                               // 8476\n        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {                                               // 8477\n          result = func.apply(thisArg, args);                                                                          // 8478\n        }                                                                                                              // 8479\n        cancel();                                                                                                      // 8480\n        return result;                                                                                                 // 8481\n      }                                                                                                                // 8482\n                                                                                                                       // 8483\n      function maxDelayed() {                                                                                          // 8484\n        complete(trailing, timeoutId);                                                                                 // 8485\n      }                                                                                                                // 8486\n                                                                                                                       // 8487\n      function debounced() {                                                                                           // 8488\n        args = arguments;                                                                                              // 8489\n        stamp = now();                                                                                                 // 8490\n        thisArg = this;                                                                                                // 8491\n        trailingCall = trailing && (timeoutId || !leading);                                                            // 8492\n                                                                                                                       // 8493\n        if (maxWait === false) {                                                                                       // 8494\n          var leadingCall = leading && !timeoutId;                                                                     // 8495\n        } else {                                                                                                       // 8496\n          if (!maxTimeoutId && !leading) {                                                                             // 8497\n            lastCalled = stamp;                                                                                        // 8498\n          }                                                                                                            // 8499\n          var remaining = maxWait - (stamp - lastCalled),                                                              // 8500\n              isCalled = remaining <= 0 || remaining > maxWait;                                                        // 8501\n                                                                                                                       // 8502\n          if (isCalled) {                                                                                              // 8503\n            if (maxTimeoutId) {                                                                                        // 8504\n              maxTimeoutId = clearTimeout(maxTimeoutId);                                                               // 8505\n            }                                                                                                          // 8506\n            lastCalled = stamp;                                                                                        // 8507\n            result = func.apply(thisArg, args);                                                                        // 8508\n          }                                                                                                            // 8509\n          else if (!maxTimeoutId) {                                                                                    // 8510\n            maxTimeoutId = setTimeout(maxDelayed, remaining);                                                          // 8511\n          }                                                                                                            // 8512\n        }                                                                                                              // 8513\n        if (isCalled && timeoutId) {                                                                                   // 8514\n          timeoutId = clearTimeout(timeoutId);                                                                         // 8515\n        }                                                                                                              // 8516\n        else if (!timeoutId && wait !== maxWait) {                                                                     // 8517\n          timeoutId = setTimeout(delayed, wait);                                                                       // 8518\n        }                                                                                                              // 8519\n        if (leadingCall) {                                                                                             // 8520\n          isCalled = true;                                                                                             // 8521\n          result = func.apply(thisArg, args);                                                                          // 8522\n        }                                                                                                              // 8523\n        if (isCalled && !timeoutId && !maxTimeoutId) {                                                                 // 8524\n          args = thisArg = undefined;                                                                                  // 8525\n        }                                                                                                              // 8526\n        return result;                                                                                                 // 8527\n      }                                                                                                                // 8528\n      debounced.cancel = cancel;                                                                                       // 8529\n      debounced.flush = flush;                                                                                         // 8530\n      return debounced;                                                                                                // 8531\n    }                                                                                                                  // 8532\n                                                                                                                       // 8533\n    /**                                                                                                                // 8534\n     * Defers invoking the `func` until the current call stack has cleared. Any                                        // 8535\n     * additional arguments are provided to `func` when it's invoked.                                                  // 8536\n     *                                                                                                                 // 8537\n     * @static                                                                                                         // 8538\n     * @memberOf _                                                                                                     // 8539\n     * @category Function                                                                                              // 8540\n     * @param {Function} func The function to defer.                                                                   // 8541\n     * @param {...*} [args] The arguments to invoke `func` with.                                                       // 8542\n     * @returns {number} Returns the timer id.                                                                         // 8543\n     * @example                                                                                                        // 8544\n     *                                                                                                                 // 8545\n     * _.defer(function(text) {                                                                                        // 8546\n     *   console.log(text);                                                                                            // 8547\n     * }, 'deferred');                                                                                                 // 8548\n     * // logs 'deferred' after one or more milliseconds                                                               // 8549\n     */                                                                                                                // 8550\n    var defer = rest(function(func, args) {                                                                            // 8551\n      return baseDelay(func, 1, args);                                                                                 // 8552\n    });                                                                                                                // 8553\n                                                                                                                       // 8554\n    /**                                                                                                                // 8555\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are                                          // 8556\n     * provided to `func` when it's invoked.                                                                           // 8557\n     *                                                                                                                 // 8558\n     * @static                                                                                                         // 8559\n     * @memberOf _                                                                                                     // 8560\n     * @category Function                                                                                              // 8561\n     * @param {Function} func The function to delay.                                                                   // 8562\n     * @param {number} wait The number of milliseconds to delay invocation.                                            // 8563\n     * @param {...*} [args] The arguments to invoke `func` with.                                                       // 8564\n     * @returns {number} Returns the timer id.                                                                         // 8565\n     * @example                                                                                                        // 8566\n     *                                                                                                                 // 8567\n     * _.delay(function(text) {                                                                                        // 8568\n     *   console.log(text);                                                                                            // 8569\n     * }, 1000, 'later');                                                                                              // 8570\n     * // => logs 'later' after one second                                                                             // 8571\n     */                                                                                                                // 8572\n    var delay = rest(function(func, wait, args) {                                                                      // 8573\n      return baseDelay(func, toNumber(wait) || 0, args);                                                               // 8574\n    });                                                                                                                // 8575\n                                                                                                                       // 8576\n    /**                                                                                                                // 8577\n     * Creates a function that invokes `func` with arguments reversed.                                                 // 8578\n     *                                                                                                                 // 8579\n     * @static                                                                                                         // 8580\n     * @memberOf _                                                                                                     // 8581\n     * @category Function                                                                                              // 8582\n     * @param {Function} func The function to flip arguments for.                                                      // 8583\n     * @returns {Function} Returns the new function.                                                                   // 8584\n     * @example                                                                                                        // 8585\n     *                                                                                                                 // 8586\n     * var flipped = _.flip(function() {                                                                               // 8587\n     *   return _.toArray(arguments);                                                                                  // 8588\n     * });                                                                                                             // 8589\n     *                                                                                                                 // 8590\n     * flipped('a', 'b', 'c', 'd');                                                                                    // 8591\n     * // => ['d', 'c', 'b', 'a']                                                                                      // 8592\n     */                                                                                                                // 8593\n    function flip(func) {                                                                                              // 8594\n      return createWrapper(func, FLIP_FLAG);                                                                           // 8595\n    }                                                                                                                  // 8596\n                                                                                                                       // 8597\n    /**                                                                                                                // 8598\n     * Creates a function that memoizes the result of `func`. If `resolver` is                                         // 8599\n     * provided it determines the cache key for storing the result based on the                                        // 8600\n     * arguments provided to the memoized function. By default, the first argument                                     // 8601\n     * provided to the memoized function is used as the map cache key. The `func`                                      // 8602\n     * is invoked with the `this` binding of the memoized function.                                                    // 8603\n     *                                                                                                                 // 8604\n     * **Note:** The cache is exposed as the `cache` property on the memoized                                          // 8605\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`                                     // 8606\n     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `delete`, `get`, `has`, and `set`.                                                          // 8608\n     *                                                                                                                 // 8609\n     * @static                                                                                                         // 8610\n     * @memberOf _                                                                                                     // 8611\n     * @category Function                                                                                              // 8612\n     * @param {Function} func The function to have its output memoized.                                                // 8613\n     * @param {Function} [resolver] The function to resolve the cache key.                                             // 8614\n     * @returns {Function} Returns the new memoizing function.                                                         // 8615\n     * @example                                                                                                        // 8616\n     *                                                                                                                 // 8617\n     * var object = { 'a': 1, 'b': 2 };                                                                                // 8618\n     * var other = { 'c': 3, 'd': 4 };                                                                                 // 8619\n     *                                                                                                                 // 8620\n     * var values = _.memoize(_.values);                                                                               // 8621\n     * values(object);                                                                                                 // 8622\n     * // => [1, 2]                                                                                                    // 8623\n     *                                                                                                                 // 8624\n     * values(other);                                                                                                  // 8625\n     * // => [3, 4]                                                                                                    // 8626\n     *                                                                                                                 // 8627\n     * object.a = 2;                                                                                                   // 8628\n     * values(object);                                                                                                 // 8629\n     * // => [1, 2]                                                                                                    // 8630\n     *                                                                                                                 // 8631\n     * // modifying the result cache                                                                                   // 8632\n     * values.cache.set(object, ['a', 'b']);                                                                           // 8633\n     * values(object);                                                                                                 // 8634\n     * // => ['a', 'b']                                                                                                // 8635\n     *                                                                                                                 // 8636\n     * // replacing `_.memoize.Cache`                                                                                  // 8637\n     * _.memoize.Cache = WeakMap;                                                                                      // 8638\n     */                                                                                                                // 8639\n    function memoize(func, resolver) {                                                                                 // 8640\n      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                  // 8641\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8642\n      }                                                                                                                // 8643\n      var memoized = function() {                                                                                      // 8644\n        var args = arguments,                                                                                          // 8645\n            key = resolver ? resolver.apply(this, args) : args[0],                                                     // 8646\n            cache = memoized.cache;                                                                                    // 8647\n                                                                                                                       // 8648\n        if (cache.has(key)) {                                                                                          // 8649\n          return cache.get(key);                                                                                       // 8650\n        }                                                                                                              // 8651\n        var result = func.apply(this, args);                                                                           // 8652\n        memoized.cache = cache.set(key, result);                                                                       // 8653\n        return result;                                                                                                 // 8654\n      };                                                                                                               // 8655\n      memoized.cache = new memoize.Cache;                                                                              // 8656\n      return memoized;                                                                                                 // 8657\n    }                                                                                                                  // 8658\n                                                                                                                       // 8659\n    /**                                                                                                                // 8660\n     * Creates a function that negates the result of the predicate `func`. The                                         // 8661\n     * `func` predicate is invoked with the `this` binding and arguments of the                                        // 8662\n     * created function.                                                                                               // 8663\n     *                                                                                                                 // 8664\n     * @static                                                                                                         // 8665\n     * @memberOf _                                                                                                     // 8666\n     * @category Function                                                                                              // 8667\n     * @param {Function} predicate The predicate to negate.                                                            // 8668\n     * @returns {Function} Returns the new function.                                                                   // 8669\n     * @example                                                                                                        // 8670\n     *                                                                                                                 // 8671\n     * function isEven(n) {                                                                                            // 8672\n     *   return n % 2 == 0;                                                                                            // 8673\n     * }                                                                                                               // 8674\n     *                                                                                                                 // 8675\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));                                                                 // 8676\n     * // => [1, 3, 5]                                                                                                 // 8677\n     */                                                                                                                // 8678\n    function negate(predicate) {                                                                                       // 8679\n      if (typeof predicate != 'function') {                                                                            // 8680\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8681\n      }                                                                                                                // 8682\n      return function() {                                                                                              // 8683\n        return !predicate.apply(this, arguments);                                                                      // 8684\n      };                                                                                                               // 8685\n    }                                                                                                                  // 8686\n                                                                                                                       // 8687\n    /**                                                                                                                // 8688\n     * Creates a function that is restricted to invoking `func` once. Repeat calls                                     // 8689\n     * to the function return the value of the first invocation. The `func` is                                         // 8690\n     * invoked with the `this` binding and arguments of the created function.                                          // 8691\n     *                                                                                                                 // 8692\n     * @static                                                                                                         // 8693\n     * @memberOf _                                                                                                     // 8694\n     * @category Function                                                                                              // 8695\n     * @param {Function} func The function to restrict.                                                                // 8696\n     * @returns {Function} Returns the new restricted function.                                                        // 8697\n     * @example                                                                                                        // 8698\n     *                                                                                                                 // 8699\n     * var initialize = _.once(createApplication);                                                                     // 8700\n     * initialize();                                                                                                   // 8701\n     * initialize();                                                                                                   // 8702\n     * // `initialize` invokes `createApplication` once                                                                // 8703\n     */                                                                                                                // 8704\n    function once(func) {                                                                                              // 8705\n      return before(2, func);                                                                                          // 8706\n    }                                                                                                                  // 8707\n                                                                                                                       // 8708\n    /**                                                                                                                // 8709\n     * Creates a function that invokes `func` with arguments transformed by                                            // 8710\n     * corresponding `transforms`.                                                                                     // 8711\n     *                                                                                                                 // 8712\n     * @static                                                                                                         // 8713\n     * @memberOf _                                                                                                     // 8714\n     * @category Function                                                                                              // 8715\n     * @param {Function} func The function to wrap.                                                                    // 8716\n     * @param {...(Function|Function[])} [transforms] The functions to transform                                       // 8717\n     * arguments, specified individually or in arrays.                                                                 // 8718\n     * @returns {Function} Returns the new function.                                                                   // 8719\n     * @example                                                                                                        // 8720\n     *                                                                                                                 // 8721\n     * function doubled(n) {                                                                                           // 8722\n     *   return n * 2;                                                                                                 // 8723\n     * }                                                                                                               // 8724\n     *                                                                                                                 // 8725\n     * function square(n) {                                                                                            // 8726\n     *   return n * n;                                                                                                 // 8727\n     * }                                                                                                               // 8728\n     *                                                                                                                 // 8729\n     * var func = _.overArgs(function(x, y) {                                                                          // 8730\n     *   return [x, y];                                                                                                // 8731\n     * }, square, doubled);                                                                                            // 8732\n     *                                                                                                                 // 8733\n     * func(9, 3);                                                                                                     // 8734\n     * // => [81, 6]                                                                                                   // 8735\n     *                                                                                                                 // 8736\n     * func(10, 5);                                                                                                    // 8737\n     * // => [100, 10]                                                                                                 // 8738\n     */                                                                                                                // 8739\n    var overArgs = rest(function(func, transforms) {                                                                   // 8740\n      transforms = arrayMap(baseFlatten(transforms), getIteratee());                                                   // 8741\n                                                                                                                       // 8742\n      var funcsLength = transforms.length;                                                                             // 8743\n      return rest(function(args) {                                                                                     // 8744\n        var index = -1,                                                                                                // 8745\n            length = nativeMin(args.length, funcsLength);                                                              // 8746\n                                                                                                                       // 8747\n        while (++index < length) {                                                                                     // 8748\n          args[index] = transforms[index].call(this, args[index]);                                                     // 8749\n        }                                                                                                              // 8750\n        return apply(func, this, args);                                                                                // 8751\n      });                                                                                                              // 8752\n    });                                                                                                                // 8753\n                                                                                                                       // 8754\n    /**                                                                                                                // 8755\n     * Creates a function that invokes `func` with `partial` arguments prepended                                       // 8756\n     * to those provided to the new function. This method is like `_.bind` except                                      // 8757\n     * it does **not** alter the `this` binding.                                                                       // 8758\n     *                                                                                                                 // 8759\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic                                          // 8760\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 8761\n     *                                                                                                                 // 8762\n     * **Note:** This method doesn't set the \"length\" property of partially                                            // 8763\n     * applied functions.                                                                                              // 8764\n     *                                                                                                                 // 8765\n     * @static                                                                                                         // 8766\n     * @memberOf _                                                                                                     // 8767\n     * @category Function                                                                                              // 8768\n     * @param {Function} func The function to partially apply arguments to.                                            // 8769\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8770\n     * @returns {Function} Returns the new partially applied function.                                                 // 8771\n     * @example                                                                                                        // 8772\n     *                                                                                                                 // 8773\n     * var greet = function(greeting, name) {                                                                          // 8774\n     *   return greeting + ' ' + name;                                                                                 // 8775\n     * };                                                                                                              // 8776\n     *                                                                                                                 // 8777\n     * var sayHelloTo = _.partial(greet, 'hello');                                                                     // 8778\n     * sayHelloTo('fred');                                                                                             // 8779\n     * // => 'hello fred'                                                                                              // 8780\n     *                                                                                                                 // 8781\n     * // using placeholders                                                                                           // 8782\n     * var greetFred = _.partial(greet, _, 'fred');                                                                    // 8783\n     * greetFred('hi');                                                                                                // 8784\n     * // => 'hi fred'                                                                                                 // 8785\n     */                                                                                                                // 8786\n    var partial = rest(function(func, partials) {                                                                      // 8787\n      var holders = replaceHolders(partials, partial.placeholder);                                                     // 8788\n      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);                                          // 8789\n    });                                                                                                                // 8790\n                                                                                                                       // 8791\n    /**                                                                                                                // 8792\n     * This method is like `_.partial` except that partially applied arguments                                         // 8793\n     * are appended to those provided to the new function.                                                             // 8794\n     *                                                                                                                 // 8795\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic                                     // 8796\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 8797\n     *                                                                                                                 // 8798\n     * **Note:** This method doesn't set the \"length\" property of partially                                            // 8799\n     * applied functions.                                                                                              // 8800\n     *                                                                                                                 // 8801\n     * @static                                                                                                         // 8802\n     * @memberOf _                                                                                                     // 8803\n     * @category Function                                                                                              // 8804\n     * @param {Function} func The function to partially apply arguments to.                                            // 8805\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8806\n     * @returns {Function} Returns the new partially applied function.                                                 // 8807\n     * @example                                                                                                        // 8808\n     *                                                                                                                 // 8809\n     * var greet = function(greeting, name) {                                                                          // 8810\n     *   return greeting + ' ' + name;                                                                                 // 8811\n     * };                                                                                                              // 8812\n     *                                                                                                                 // 8813\n     * var greetFred = _.partialRight(greet, 'fred');                                                                  // 8814\n     * greetFred('hi');                                                                                                // 8815\n     * // => 'hi fred'                                                                                                 // 8816\n     *                                                                                                                 // 8817\n     * // using placeholders                                                                                           // 8818\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);                                                             // 8819\n     * sayHelloTo('fred');                                                                                             // 8820\n     * // => 'hello fred'                                                                                              // 8821\n     */                                                                                                                // 8822\n    var partialRight = rest(function(func, partials) {                                                                 // 8823\n      var holders = replaceHolders(partials, partialRight.placeholder);                                                // 8824\n      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);                                    // 8825\n    });                                                                                                                // 8826\n                                                                                                                       // 8827\n    /**                                                                                                                // 8828\n     * Creates a function that invokes `func` with arguments arranged according                                        // 8829\n     * to the specified indexes where the argument value at the first index is                                         // 8830\n     * provided as the first argument, the argument value at the second index is                                       // 8831\n     * provided as the second argument, and so on.                                                                     // 8832\n     *                                                                                                                 // 8833\n     * @static                                                                                                         // 8834\n     * @memberOf _                                                                                                     // 8835\n     * @category Function                                                                                              // 8836\n     * @param {Function} func The function to rearrange arguments for.                                                 // 8837\n     * @param {...(number|number[])} indexes The arranged argument indexes,                                            // 8838\n     *  specified individually or in arrays.                                                                           // 8839\n     * @returns {Function} Returns the new function.                                                                   // 8840\n     * @example                                                                                                        // 8841\n     *                                                                                                                 // 8842\n     * var rearged = _.rearg(function(a, b, c) {                                                                       // 8843\n     *   return [a, b, c];                                                                                             // 8844\n     * }, 2, 0, 1);                                                                                                    // 8845\n     *                                                                                                                 // 8846\n     * rearged('b', 'c', 'a')                                                                                          // 8847\n     * // => ['a', 'b', 'c']                                                                                           // 8848\n     */                                                                                                                // 8849\n    var rearg = rest(function(func, indexes) {                                                                         // 8850\n      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));                   // 8851\n    });                                                                                                                // 8852\n                                                                                                                       // 8853\n    /**                                                                                                                // 8854\n     * Creates a function that invokes `func` with the `this` binding of the                                           // 8855\n     * created function and arguments from `start` and beyond provided as an array.                                    // 8856\n     *                                                                                                                 // 8857\n     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).                         // 8858\n     *                                                                                                                 // 8859\n     * @static                                                                                                         // 8860\n     * @memberOf _                                                                                                     // 8861\n     * @category Function                                                                                              // 8862\n     * @param {Function} func The function to apply a rest parameter to.                                               // 8863\n     * @param {number} [start=func.length-1] The start position of the rest parameter.                                 // 8864\n     * @returns {Function} Returns the new function.                                                                   // 8865\n     * @example                                                                                                        // 8866\n     *                                                                                                                 // 8867\n     * var say = _.rest(function(what, names) {                                                                        // 8868\n     *   return what + ' ' + _.initial(names).join(', ') +                                                             // 8869\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);                                                          // 8870\n     * });                                                                                                             // 8871\n     *                                                                                                                 // 8872\n     * say('hello', 'fred', 'barney', 'pebbles');                                                                      // 8873\n     * // => 'hello fred, barney, & pebbles'                                                                           // 8874\n     */                                                                                                                // 8875\n    function rest(func, start) {                                                                                       // 8876\n      if (typeof func != 'function') {                                                                                 // 8877\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8878\n      }                                                                                                                // 8879\n      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);                                // 8880\n      return function() {                                                                                              // 8881\n        var args = arguments,                                                                                          // 8882\n            index = -1,                                                                                                // 8883\n            length = nativeMax(args.length - start, 0),                                                                // 8884\n            array = Array(length);                                                                                     // 8885\n                                                                                                                       // 8886\n        while (++index < length) {                                                                                     // 8887\n          array[index] = args[start + index];                                                                          // 8888\n        }                                                                                                              // 8889\n        switch (start) {                                                                                               // 8890\n          case 0: return func.call(this, array);                                                                       // 8891\n          case 1: return func.call(this, args[0], array);                                                              // 8892\n          case 2: return func.call(this, args[0], args[1], array);                                                     // 8893\n        }                                                                                                              // 8894\n        var otherArgs = Array(start + 1);                                                                              // 8895\n        index = -1;                                                                                                    // 8896\n        while (++index < start) {                                                                                      // 8897\n          otherArgs[index] = args[index];                                                                              // 8898\n        }                                                                                                              // 8899\n        otherArgs[start] = array;                                                                                      // 8900\n        return apply(func, this, otherArgs);                                                                           // 8901\n      };                                                                                                               // 8902\n    }                                                                                                                  // 8903\n                                                                                                                       // 8904\n    /**                                                                                                                // 8905\n     * Creates a function that invokes `func` with the `this` binding of the created                                   // 8906\n     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).              // 8907\n     *                                                                                                                 // 8908\n     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).                        // 8909\n     *                                                                                                                 // 8910\n     * @static                                                                                                         // 8911\n     * @memberOf _                                                                                                     // 8912\n     * @category Function                                                                                              // 8913\n     * @param {Function} func The function to spread arguments over.                                                   // 8914\n     * @returns {Function} Returns the new function.                                                                   // 8915\n     * @example                                                                                                        // 8916\n     *                                                                                                                 // 8917\n     * var say = _.spread(function(who, what) {                                                                        // 8918\n     *   return who + ' says ' + what;                                                                                 // 8919\n     * });                                                                                                             // 8920\n     *                                                                                                                 // 8921\n     * say(['fred', 'hello']);                                                                                         // 8922\n     * // => 'fred says hello'                                                                                         // 8923\n     *                                                                                                                 // 8924\n     * // with a Promise                                                                                               // 8925\n     * var numbers = Promise.all([                                                                                     // 8926\n     *   Promise.resolve(40),                                                                                          // 8927\n     *   Promise.resolve(36)                                                                                           // 8928\n     * ]);                                                                                                             // 8929\n     *                                                                                                                 // 8930\n     * numbers.then(_.spread(function(x, y) {                                                                          // 8931\n     *   return x + y;                                                                                                 // 8932\n     * }));                                                                                                            // 8933\n     * // => a Promise of 76                                                                                           // 8934\n     */                                                                                                                // 8935\n    function spread(func) {                                                                                            // 8936\n      if (typeof func != 'function') {                                                                                 // 8937\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8938\n      }                                                                                                                // 8939\n      return function(array) {                                                                                         // 8940\n        return apply(func, this, array);                                                                               // 8941\n      };                                                                                                               // 8942\n    }                                                                                                                  // 8943\n                                                                                                                       // 8944\n    /**                                                                                                                // 8945\n     * Creates a throttled function that only invokes `func` at most once per                                          // 8946\n     * every `wait` milliseconds. The throttled function comes with a `cancel`                                         // 8947\n     * method to cancel delayed `func` invocations and a `flush` method to                                             // 8948\n     * immediately invoke them. Provide an options object to indicate whether                                          // 8949\n     * `func` should be invoked on the leading and/or trailing edge of the `wait`                                      // 8950\n     * timeout. The `func` is invoked with the last arguments provided to the                                          // 8951\n     * throttled function. Subsequent calls to the throttled function return the                                       // 8952\n     * result of the last `func` invocation.                                                                           // 8953\n     *                                                                                                                 // 8954\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 8955\n     * on the trailing edge of the timeout only if the the throttled function is                                       // 8956\n     * invoked more than once during the `wait` timeout.                                                               // 8957\n     *                                                                                                                 // 8958\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 8959\n     * for details over the differences between `_.throttle` and `_.debounce`.                                         // 8960\n     *                                                                                                                 // 8961\n     * @static                                                                                                         // 8962\n     * @memberOf _                                                                                                     // 8963\n     * @category Function                                                                                              // 8964\n     * @param {Function} func The function to throttle.                                                                // 8965\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.                                 // 8966\n     * @param {Object} [options] The options object.                                                                   // 8967\n     * @param {boolean} [options.leading=true] Specify invoking on the leading                                         // 8968\n     *  edge of the timeout.                                                                                           // 8969\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 8970\n     *  edge of the timeout.                                                                                           // 8971\n     * @returns {Function} Returns the new throttled function.                                                         // 8972\n     * @example                                                                                                        // 8973\n     *                                                                                                                 // 8974\n     * // avoid excessively updating the position while scrolling                                                      // 8975\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));                                                   // 8976\n     *                                                                                                                 // 8977\n     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes                    // 8978\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });                                          // 8979\n     * jQuery(element).on('click', throttled);                                                                         // 8980\n     *                                                                                                                 // 8981\n     * // cancel a trailing throttled invocation                                                                       // 8982\n     * jQuery(window).on('popstate', throttled.cancel);                                                                // 8983\n     */                                                                                                                // 8984\n    function throttle(func, wait, options) {                                                                           // 8985\n      var leading = true,                                                                                              // 8986\n          trailing = true;                                                                                             // 8987\n                                                                                                                       // 8988\n      if (typeof func != 'function') {                                                                                 // 8989\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8990\n      }                                                                                                                // 8991\n      if (isObject(options)) {                                                                                         // 8992\n        leading = 'leading' in options ? !!options.leading : leading;                                                  // 8993\n        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 8994\n      }                                                                                                                // 8995\n      return debounce(func, wait, { 'leading': leading, 'maxWait': wait, 'trailing': trailing });                      // 8996\n    }                                                                                                                  // 8997\n                                                                                                                       // 8998\n    /**                                                                                                                // 8999\n     * Creates a function that accepts up to one argument, ignoring any                                                // 9000\n     * additional arguments.                                                                                           // 9001\n     *                                                                                                                 // 9002\n     * @static                                                                                                         // 9003\n     * @memberOf _                                                                                                     // 9004\n     * @category Function                                                                                              // 9005\n     * @param {Function} func The function to cap arguments for.                                                       // 9006\n     * @returns {Function} Returns the new function.                                                                   // 9007\n     * @example                                                                                                        // 9008\n     *                                                                                                                 // 9009\n     * _.map(['6', '8', '10'], _.unary(parseInt));                                                                     // 9010\n     * // => [6, 8, 10]                                                                                                // 9011\n     */                                                                                                                // 9012\n    function unary(func) {                                                                                             // 9013\n      return ary(func, 1);                                                                                             // 9014\n    }                                                                                                                  // 9015\n                                                                                                                       // 9016\n    /**                                                                                                                // 9017\n     * Creates a function that provides `value` to the wrapper function as its                                         // 9018\n     * first argument. Any additional arguments provided to the function are                                           // 9019\n     * appended to those provided to the wrapper function. The wrapper is invoked                                      // 9020\n     * with the `this` binding of the created function.                                                                // 9021\n     *                                                                                                                 // 9022\n     * @static                                                                                                         // 9023\n     * @memberOf _                                                                                                     // 9024\n     * @category Function                                                                                              // 9025\n     * @param {*} value The value to wrap.                                                                             // 9026\n     * @param {Function} wrapper The wrapper function.                                                                 // 9027\n     * @returns {Function} Returns the new function.                                                                   // 9028\n     * @example                                                                                                        // 9029\n     *                                                                                                                 // 9030\n     * var p = _.wrap(_.escape, function(func, text) {                                                                 // 9031\n     *   return '<p>' + func(text) + '</p>';                                                                           // 9032\n     * });                                                                                                             // 9033\n     *                                                                                                                 // 9034\n     * p('fred, barney, & pebbles');                                                                                   // 9035\n     * // => '<p>fred, barney, &amp; pebbles</p>'                                                                      // 9036\n     */                                                                                                                // 9037\n    function wrap(value, wrapper) {                                                                                    // 9038\n      wrapper = wrapper == null ? identity : wrapper;                                                                  // 9039\n      return partial(wrapper, value);                                                                                  // 9040\n    }                                                                                                                  // 9041\n                                                                                                                       // 9042\n    /*------------------------------------------------------------------------*/                                       // 9043\n                                                                                                                       // 9044\n    /**                                                                                                                // 9045\n     * Creates a shallow clone of `value`.                                                                             // 9046\n     *                                                                                                                 // 9047\n     * **Note:** This method is loosely based on the                                                                   // 9048\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)                                         // 9049\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,                                       // 9050\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed                                           // 9051\n     * arrays. The own enumerable properties of `arguments` objects are cloned                                         // 9052\n     * as plain objects. An empty object is returned for uncloneable values such                                       // 9053\n     * as error objects, functions, DOM nodes, and WeakMaps.                                                           // 9054\n     *                                                                                                                 // 9055\n     * @static                                                                                                         // 9056\n     * @memberOf _                                                                                                     // 9057\n     * @category Lang                                                                                                  // 9058\n     * @param {*} value The value to clone.                                                                            // 9059\n     * @returns {*} Returns the cloned value.                                                                          // 9060\n     * @example                                                                                                        // 9061\n     *                                                                                                                 // 9062\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];                                                                         // 9063\n     *                                                                                                                 // 9064\n     * var shallow = _.clone(objects);                                                                                 // 9065\n     * console.log(shallow[0] === objects[0]);                                                                         // 9066\n     * // => true                                                                                                      // 9067\n     */                                                                                                                // 9068\n    function clone(value) {                                                                                            // 9069\n      return baseClone(value);                                                                                         // 9070\n    }                                                                                                                  // 9071\n                                                                                                                       // 9072\n    /**                                                                                                                // 9073\n     * This method is like `_.clone` except that it accepts `customizer` which                                         // 9074\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`                                     // 9075\n     * cloning is handled by the method instead. The `customizer` is invoked with                                      // 9076\n     * up to five arguments; (value [, index|key, object, stack]).                                                     // 9077\n     *                                                                                                                 // 9078\n     * @static                                                                                                         // 9079\n     * @memberOf _                                                                                                     // 9080\n     * @category Lang                                                                                                  // 9081\n     * @param {*} value The value to clone.                                                                            // 9082\n     * @param {Function} [customizer] The function to customize cloning.                                               // 9083\n     * @returns {*} Returns the cloned value.                                                                          // 9084\n     * @example                                                                                                        // 9085\n     *                                                                                                                 // 9086\n     * function customizer(value) {                                                                                    // 9087\n     *   if (_.isElement(value)) {                                                                                     // 9088\n     *     return value.cloneNode(false);                                                                              // 9089\n     *   }                                                                                                             // 9090\n     * }                                                                                                               // 9091\n     *                                                                                                                 // 9092\n     * var el = _.clone(document.body, customizer);                                                                    // 9093\n     *                                                                                                                 // 9094\n     * console.log(el === document.body);                                                                              // 9095\n     * // => false                                                                                                     // 9096\n     * console.log(el.nodeName);                                                                                       // 9097\n     * // => 'BODY'                                                                                                    // 9098\n     * console.log(el.childNodes.length);                                                                              // 9099\n     * // => 0                                                                                                         // 9100\n     */                                                                                                                // 9101\n    function cloneWith(value, customizer) {                                                                            // 9102\n      return baseClone(value, false, customizer);                                                                      // 9103\n    }                                                                                                                  // 9104\n                                                                                                                       // 9105\n    /**                                                                                                                // 9106\n     * This method is like `_.clone` except that it recursively clones `value`.                                        // 9107\n     *                                                                                                                 // 9108\n     * @static                                                                                                         // 9109\n     * @memberOf _                                                                                                     // 9110\n     * @category Lang                                                                                                  // 9111\n     * @param {*} value The value to recursively clone.                                                                // 9112\n     * @returns {*} Returns the deep cloned value.                                                                     // 9113\n     * @example                                                                                                        // 9114\n     *                                                                                                                 // 9115\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];                                                                         // 9116\n     *                                                                                                                 // 9117\n     * var deep = _.cloneDeep(objects);                                                                                // 9118\n     * console.log(deep[0] === objects[0]);                                                                            // 9119\n     * // => false                                                                                                     // 9120\n     */                                                                                                                // 9121\n    function cloneDeep(value) {                                                                                        // 9122\n      return baseClone(value, true);                                                                                   // 9123\n    }                                                                                                                  // 9124\n                                                                                                                       // 9125\n    /**                                                                                                                // 9126\n     * This method is like `_.cloneWith` except that it recursively clones `value`.                                    // 9127\n     *                                                                                                                 // 9128\n     * @static                                                                                                         // 9129\n     * @memberOf _                                                                                                     // 9130\n     * @category Lang                                                                                                  // 9131\n     * @param {*} value The value to recursively clone.                                                                // 9132\n     * @param {Function} [customizer] The function to customize cloning.                                               // 9133\n     * @returns {*} Returns the deep cloned value.                                                                     // 9134\n     * @example                                                                                                        // 9135\n     *                                                                                                                 // 9136\n     * function customizer(value) {                                                                                    // 9137\n     *   if (_.isElement(value)) {                                                                                     // 9138\n     *     return value.cloneNode(true);                                                                               // 9139\n     *   }                                                                                                             // 9140\n     * }                                                                                                               // 9141\n     *                                                                                                                 // 9142\n     * var el = _.cloneDeep(document.body, customizer);                                                                // 9143\n     *                                                                                                                 // 9144\n     * console.log(el === document.body);                                                                              // 9145\n     * // => false                                                                                                     // 9146\n     * console.log(el.nodeName);                                                                                       // 9147\n     * // => 'BODY'                                                                                                    // 9148\n     * console.log(el.childNodes.length);                                                                              // 9149\n     * // => 20                                                                                                        // 9150\n     */                                                                                                                // 9151\n    function cloneDeepWith(value, customizer) {                                                                        // 9152\n      return baseClone(value, true, customizer);                                                                       // 9153\n    }                                                                                                                  // 9154\n                                                                                                                       // 9155\n    /**                                                                                                                // 9156\n     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                     // 9157\n     * comparison between two values to determine if they are equivalent.                                              // 9158\n     *                                                                                                                 // 9159\n     * @static                                                                                                         // 9160\n     * @memberOf _                                                                                                     // 9161\n     * @category Lang                                                                                                  // 9162\n     * @param {*} value The value to compare.                                                                          // 9163\n     * @param {*} other The other value to compare.                                                                    // 9164\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 9165\n     * @example                                                                                                        // 9166\n     *                                                                                                                 // 9167\n     * var object = { 'user': 'fred' };                                                                                // 9168\n     * var other = { 'user': 'fred' };                                                                                 // 9169\n     *                                                                                                                 // 9170\n     * _.eq(object, object);                                                                                           // 9171\n     * // => true                                                                                                      // 9172\n     *                                                                                                                 // 9173\n     * _.eq(object, other);                                                                                            // 9174\n     * // => false                                                                                                     // 9175\n     *                                                                                                                 // 9176\n     * _.eq('a', 'a');                                                                                                 // 9177\n     * // => true                                                                                                      // 9178\n     *                                                                                                                 // 9179\n     * _.eq('a', Object('a'));                                                                                         // 9180\n     * // => false                                                                                                     // 9181\n     *                                                                                                                 // 9182\n     * _.eq(NaN, NaN);                                                                                                 // 9183\n     * // => true                                                                                                      // 9184\n     */                                                                                                                // 9185\n    function eq(value, other) {                                                                                        // 9186\n      return value === other || (value !== value && other !== other);                                                  // 9187\n    }                                                                                                                  // 9188\n                                                                                                                       // 9189\n    /**                                                                                                                // 9190\n     * Checks if `value` is greater than `other`.                                                                      // 9191\n     *                                                                                                                 // 9192\n     * @static                                                                                                         // 9193\n     * @memberOf _                                                                                                     // 9194\n     * @category Lang                                                                                                  // 9195\n     * @param {*} value The value to compare.                                                                          // 9196\n     * @param {*} other The other value to compare.                                                                    // 9197\n     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.                             // 9198\n     * @example                                                                                                        // 9199\n     *                                                                                                                 // 9200\n     * _.gt(3, 1);                                                                                                     // 9201\n     * // => true                                                                                                      // 9202\n     *                                                                                                                 // 9203\n     * _.gt(3, 3);                                                                                                     // 9204\n     * // => false                                                                                                     // 9205\n     *                                                                                                                 // 9206\n     * _.gt(1, 3);                                                                                                     // 9207\n     * // => false                                                                                                     // 9208\n     */                                                                                                                // 9209\n    function gt(value, other) {                                                                                        // 9210\n      return value > other;                                                                                            // 9211\n    }                                                                                                                  // 9212\n                                                                                                                       // 9213\n    /**                                                                                                                // 9214\n     * Checks if `value` is greater than or equal to `other`.                                                          // 9215\n     *                                                                                                                 // 9216\n     * @static                                                                                                         // 9217\n     * @memberOf _                                                                                                     // 9218\n     * @category Lang                                                                                                  // 9219\n     * @param {*} value The value to compare.                                                                          // 9220\n     * @param {*} other The other value to compare.                                                                    // 9221\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.                 // 9222\n     * @example                                                                                                        // 9223\n     *                                                                                                                 // 9224\n     * _.gte(3, 1);                                                                                                    // 9225\n     * // => true                                                                                                      // 9226\n     *                                                                                                                 // 9227\n     * _.gte(3, 3);                                                                                                    // 9228\n     * // => true                                                                                                      // 9229\n     *                                                                                                                 // 9230\n     * _.gte(1, 3);                                                                                                    // 9231\n     * // => false                                                                                                     // 9232\n     */                                                                                                                // 9233\n    function gte(value, other) {                                                                                       // 9234\n      return value >= other;                                                                                           // 9235\n    }                                                                                                                  // 9236\n                                                                                                                       // 9237\n    /**                                                                                                                // 9238\n     * Checks if `value` is likely an `arguments` object.                                                              // 9239\n     *                                                                                                                 // 9240\n     * @static                                                                                                         // 9241\n     * @memberOf _                                                                                                     // 9242\n     * @category Lang                                                                                                  // 9243\n     * @param {*} value The value to check.                                                                            // 9244\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9245\n     * @example                                                                                                        // 9246\n     *                                                                                                                 // 9247\n     * _.isArguments(function() { return arguments; }());                                                              // 9248\n     * // => true                                                                                                      // 9249\n     *                                                                                                                 // 9250\n     * _.isArguments([1, 2, 3]);                                                                                       // 9251\n     * // => false                                                                                                     // 9252\n     */                                                                                                                // 9253\n    function isArguments(value) {                                                                                      // 9254\n      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.                                    // 9255\n      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&                                       // 9256\n        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);                        // 9257\n    }                                                                                                                  // 9258\n                                                                                                                       // 9259\n    /**                                                                                                                // 9260\n     * Checks if `value` is classified as an `Array` object.                                                           // 9261\n     *                                                                                                                 // 9262\n     * @static                                                                                                         // 9263\n     * @memberOf _                                                                                                     // 9264\n     * @type Function                                                                                                  // 9265\n     * @category Lang                                                                                                  // 9266\n     * @param {*} value The value to check.                                                                            // 9267\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9268\n     * @example                                                                                                        // 9269\n     *                                                                                                                 // 9270\n     * _.isArray([1, 2, 3]);                                                                                           // 9271\n     * // => true                                                                                                      // 9272\n     *                                                                                                                 // 9273\n     * _.isArray(document.body.children);                                                                              // 9274\n     * // => false                                                                                                     // 9275\n     *                                                                                                                 // 9276\n     * _.isArray('abc');                                                                                               // 9277\n     * // => false                                                                                                     // 9278\n     *                                                                                                                 // 9279\n     * _.isArray(_.noop);                                                                                              // 9280\n     * // => false                                                                                                     // 9281\n     */                                                                                                                // 9282\n    var isArray = Array.isArray;                                                                                       // 9283\n                                                                                                                       // 9284\n    /**                                                                                                                // 9285\n     * Checks if `value` is array-like. A value is considered array-like if it's                                       // 9286\n     * not a function and has a `value.length` that's an integer greater than or                                       // 9287\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.                                               // 9288\n     *                                                                                                                 // 9289\n     * @static                                                                                                         // 9290\n     * @memberOf _                                                                                                     // 9291\n     * @type Function                                                                                                  // 9292\n     * @category Lang                                                                                                  // 9293\n     * @param {*} value The value to check.                                                                            // 9294\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                       // 9295\n     * @example                                                                                                        // 9296\n     *                                                                                                                 // 9297\n     * _.isArrayLike([1, 2, 3]);                                                                                       // 9298\n     * // => true                                                                                                      // 9299\n     *                                                                                                                 // 9300\n     * _.isArrayLike(document.body.children);                                                                          // 9301\n     * // => true                                                                                                      // 9302\n     *                                                                                                                 // 9303\n     * _.isArrayLike('abc');                                                                                           // 9304\n     * // => true                                                                                                      // 9305\n     *                                                                                                                 // 9306\n     * _.isArrayLike(_.noop);                                                                                          // 9307\n     * // => false                                                                                                     // 9308\n     */                                                                                                                // 9309\n    function isArrayLike(value) {                                                                                      // 9310\n      return value != null &&                                                                                          // 9311\n        !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));                              // 9312\n    }                                                                                                                  // 9313\n                                                                                                                       // 9314\n    /**                                                                                                                // 9315\n     * This method is like `_.isArrayLike` except that it also checks if `value`                                       // 9316\n     * is an object.                                                                                                   // 9317\n     *                                                                                                                 // 9318\n     * @static                                                                                                         // 9319\n     * @memberOf _                                                                                                     // 9320\n     * @type Function                                                                                                  // 9321\n     * @category Lang                                                                                                  // 9322\n     * @param {*} value The value to check.                                                                            // 9323\n     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.                             // 9324\n     * @example                                                                                                        // 9325\n     *                                                                                                                 // 9326\n     * _.isArrayLikeObject([1, 2, 3]);                                                                                 // 9327\n     * // => true                                                                                                      // 9328\n     *                                                                                                                 // 9329\n     * _.isArrayLikeObject(document.body.children);                                                                    // 9330\n     * // => true                                                                                                      // 9331\n     *                                                                                                                 // 9332\n     * _.isArrayLikeObject('abc');                                                                                     // 9333\n     * // => false                                                                                                     // 9334\n     *                                                                                                                 // 9335\n     * _.isArrayLikeObject(_.noop);                                                                                    // 9336\n     * // => false                                                                                                     // 9337\n     */                                                                                                                // 9338\n    function isArrayLikeObject(value) {                                                                                // 9339\n      return isObjectLike(value) && isArrayLike(value);                                                                // 9340\n    }                                                                                                                  // 9341\n                                                                                                                       // 9342\n    /**                                                                                                                // 9343\n     * Checks if `value` is classified as a boolean primitive or object.                                               // 9344\n     *                                                                                                                 // 9345\n     * @static                                                                                                         // 9346\n     * @memberOf _                                                                                                     // 9347\n     * @category Lang                                                                                                  // 9348\n     * @param {*} value The value to check.                                                                            // 9349\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9350\n     * @example                                                                                                        // 9351\n     *                                                                                                                 // 9352\n     * _.isBoolean(false);                                                                                             // 9353\n     * // => true                                                                                                      // 9354\n     *                                                                                                                 // 9355\n     * _.isBoolean(null);                                                                                              // 9356\n     * // => false                                                                                                     // 9357\n     */                                                                                                                // 9358\n    function isBoolean(value) {                                                                                        // 9359\n      return value === true || value === false ||                                                                      // 9360\n        (isObjectLike(value) && objectToString.call(value) == boolTag);                                                // 9361\n    }                                                                                                                  // 9362\n                                                                                                                       // 9363\n    /**                                                                                                                // 9364\n     * Checks if `value` is classified as a `Date` object.                                                             // 9365\n     *                                                                                                                 // 9366\n     * @static                                                                                                         // 9367\n     * @memberOf _                                                                                                     // 9368\n     * @category Lang                                                                                                  // 9369\n     * @param {*} value The value to check.                                                                            // 9370\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9371\n     * @example                                                                                                        // 9372\n     *                                                                                                                 // 9373\n     * _.isDate(new Date);                                                                                             // 9374\n     * // => true                                                                                                      // 9375\n     *                                                                                                                 // 9376\n     * _.isDate('Mon April 23 2012');                                                                                  // 9377\n     * // => false                                                                                                     // 9378\n     */                                                                                                                // 9379\n    function isDate(value) {                                                                                           // 9380\n      return isObjectLike(value) && objectToString.call(value) == dateTag;                                             // 9381\n    }                                                                                                                  // 9382\n                                                                                                                       // 9383\n    /**                                                                                                                // 9384\n     * Checks if `value` is likely a DOM element.                                                                      // 9385\n     *                                                                                                                 // 9386\n     * @static                                                                                                         // 9387\n     * @memberOf _                                                                                                     // 9388\n     * @category Lang                                                                                                  // 9389\n     * @param {*} value The value to check.                                                                            // 9390\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.                                    // 9391\n     * @example                                                                                                        // 9392\n     *                                                                                                                 // 9393\n     * _.isElement(document.body);                                                                                     // 9394\n     * // => true                                                                                                      // 9395\n     *                                                                                                                 // 9396\n     * _.isElement('<body>');                                                                                          // 9397\n     * // => false                                                                                                     // 9398\n     */                                                                                                                // 9399\n    function isElement(value) {                                                                                        // 9400\n      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);                          // 9401\n    }                                                                                                                  // 9402\n                                                                                                                       // 9403\n    /**                                                                                                                // 9404\n     * Checks if `value` is empty. A value is considered empty unless it's an                                          // 9405\n     * `arguments` object, array, string, or jQuery-like collection with a length                                      // 9406\n     * greater than `0` or an object with own enumerable properties.                                                   // 9407\n     *                                                                                                                 // 9408\n     * @static                                                                                                         // 9409\n     * @memberOf _                                                                                                     // 9410\n     * @category Lang                                                                                                  // 9411\n     * @param {Array|Object|string} value The value to inspect.                                                        // 9412\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.                                            // 9413\n     * @example                                                                                                        // 9414\n     *                                                                                                                 // 9415\n     * _.isEmpty(null);                                                                                                // 9416\n     * // => true                                                                                                      // 9417\n     *                                                                                                                 // 9418\n     * _.isEmpty(true);                                                                                                // 9419\n     * // => true                                                                                                      // 9420\n     *                                                                                                                 // 9421\n     * _.isEmpty(1);                                                                                                   // 9422\n     * // => true                                                                                                      // 9423\n     *                                                                                                                 // 9424\n     * _.isEmpty([1, 2, 3]);                                                                                           // 9425\n     * // => false                                                                                                     // 9426\n     *                                                                                                                 // 9427\n     * _.isEmpty({ 'a': 1 });                                                                                          // 9428\n     * // => false                                                                                                     // 9429\n     */                                                                                                                // 9430\n    function isEmpty(value) {                                                                                          // 9431\n      return (!isObjectLike(value) || isFunction(value.splice))                                                        // 9432\n        ? !size(value)                                                                                                 // 9433\n        : !keys(value).length;                                                                                         // 9434\n    }                                                                                                                  // 9435\n                                                                                                                       // 9436\n    /**                                                                                                                // 9437\n     * Performs a deep comparison between two values to determine if they are                                          // 9438\n     * equivalent.                                                                                                     // 9439\n     *                                                                                                                 // 9440\n     * **Note:** This method supports comparing arrays, array buffers, booleans,                                       // 9441\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,                                          // 9442\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared                                         // 9443\n     * by their own, not inherited, enumerable properties. Functions and DOM                                           // 9444\n     * nodes are **not** supported.                                                                                    // 9445\n     *                                                                                                                 // 9446\n     * @static                                                                                                         // 9447\n     * @memberOf _                                                                                                     // 9448\n     * @category Lang                                                                                                  // 9449\n     * @param {*} value The value to compare.                                                                          // 9450\n     * @param {*} other The other value to compare.                                                                    // 9451\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 9452\n     * @example                                                                                                        // 9453\n     *                                                                                                                 // 9454\n     * var object = { 'user': 'fred' };                                                                                // 9455\n     * var other = { 'user': 'fred' };                                                                                 // 9456\n     *                                                                                                                 // 9457\n     * _.isEqual(object, other);                                                                                       // 9458\n     * // => true                                                                                                      // 9459\n     *                                                                                                                 // 9460\n     * object === other;                                                                                               // 9461\n     * // => false                                                                                                     // 9462\n     */                                                                                                                // 9463\n    function isEqual(value, other) {                                                                                   // 9464\n      return baseIsEqual(value, other);                                                                                // 9465\n    }                                                                                                                  // 9466\n                                                                                                                       // 9467\n    /**                                                                                                                // 9468\n     * This method is like `_.isEqual` except that it accepts `customizer` which is                                    // 9469\n     * invoked to compare values. If `customizer` returns `undefined` comparisons are                                  // 9470\n     * handled by the method instead. The `customizer` is invoked with up to seven arguments:                          // 9471\n     * (objValue, othValue [, index|key, object, other, stack]).                                                       // 9472\n     *                                                                                                                 // 9473\n     * @static                                                                                                         // 9474\n     * @memberOf _                                                                                                     // 9475\n     * @category Lang                                                                                                  // 9476\n     * @param {*} value The value to compare.                                                                          // 9477\n     * @param {*} other The other value to compare.                                                                    // 9478\n     * @param {Function} [customizer] The function to customize comparisons.                                           // 9479\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 9480\n     * @example                                                                                                        // 9481\n     *                                                                                                                 // 9482\n     * function isGreeting(value) {                                                                                    // 9483\n     *   return /^h(?:i|ello)$/.test(value);                                                                           // 9484\n     * }                                                                                                               // 9485\n     *                                                                                                                 // 9486\n     * function customizer(objValue, othValue) {                                                                       // 9487\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {                                                           // 9488\n     *     return true;                                                                                                // 9489\n     *   }                                                                                                             // 9490\n     * }                                                                                                               // 9491\n     *                                                                                                                 // 9492\n     * var array = ['hello', 'goodbye'];                                                                               // 9493\n     * var other = ['hi', 'goodbye'];                                                                                  // 9494\n     *                                                                                                                 // 9495\n     * _.isEqualWith(array, other, customizer);                                                                        // 9496\n     * // => true                                                                                                      // 9497\n     */                                                                                                                // 9498\n    function isEqualWith(value, other, customizer) {                                                                   // 9499\n      customizer = typeof customizer == 'function' ? customizer : undefined;                                           // 9500\n      var result = customizer ? customizer(value, other) : undefined;                                                  // 9501\n      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;                                  // 9502\n    }                                                                                                                  // 9503\n                                                                                                                       // 9504\n    /**                                                                                                                // 9505\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,                                   // 9506\n     * `SyntaxError`, `TypeError`, or `URIError` object.                                                               // 9507\n     *                                                                                                                 // 9508\n     * @static                                                                                                         // 9509\n     * @memberOf _                                                                                                     // 9510\n     * @category Lang                                                                                                  // 9511\n     * @param {*} value The value to check.                                                                            // 9512\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.                                  // 9513\n     * @example                                                                                                        // 9514\n     *                                                                                                                 // 9515\n     * _.isError(new Error);                                                                                           // 9516\n     * // => true                                                                                                      // 9517\n     *                                                                                                                 // 9518\n     * _.isError(Error);                                                                                               // 9519\n     * // => false                                                                                                     // 9520\n     */                                                                                                                // 9521\n    function isError(value) {                                                                                          // 9522\n      return isObjectLike(value) &&                                                                                    // 9523\n        typeof value.message == 'string' && objectToString.call(value) == errorTag;                                    // 9524\n    }                                                                                                                  // 9525\n                                                                                                                       // 9526\n    /**                                                                                                                // 9527\n     * Checks if `value` is a finite primitive number.                                                                 // 9528\n     *                                                                                                                 // 9529\n     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).                          // 9530\n     *                                                                                                                 // 9531\n     * @static                                                                                                         // 9532\n     * @memberOf _                                                                                                     // 9533\n     * @category Lang                                                                                                  // 9534\n     * @param {*} value The value to check.                                                                            // 9535\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.                                  // 9536\n     * @example                                                                                                        // 9537\n     *                                                                                                                 // 9538\n     * _.isFinite(3);                                                                                                  // 9539\n     * // => true                                                                                                      // 9540\n     *                                                                                                                 // 9541\n     * _.isFinite(Number.MAX_VALUE);                                                                                   // 9542\n     * // => true                                                                                                      // 9543\n     *                                                                                                                 // 9544\n     * _.isFinite(3.14);                                                                                               // 9545\n     * // => true                                                                                                      // 9546\n     *                                                                                                                 // 9547\n     * _.isFinite(Infinity);                                                                                           // 9548\n     * // => false                                                                                                     // 9549\n     */                                                                                                                // 9550\n    function isFinite(value) {                                                                                         // 9551\n      return typeof value == 'number' && nativeIsFinite(value);                                                        // 9552\n    }                                                                                                                  // 9553\n                                                                                                                       // 9554\n    /**                                                                                                                // 9555\n     * Checks if `value` is classified as a `Function` object.                                                         // 9556\n     *                                                                                                                 // 9557\n     * @static                                                                                                         // 9558\n     * @memberOf _                                                                                                     // 9559\n     * @category Lang                                                                                                  // 9560\n     * @param {*} value The value to check.                                                                            // 9561\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9562\n     * @example                                                                                                        // 9563\n     *                                                                                                                 // 9564\n     * _.isFunction(_);                                                                                                // 9565\n     * // => true                                                                                                      // 9566\n     *                                                                                                                 // 9567\n     * _.isFunction(/abc/);                                                                                            // 9568\n     * // => false                                                                                                     // 9569\n     */                                                                                                                // 9570\n    function isFunction(value) {                                                                                       // 9571\n      // The use of `Object#toString` avoids issues with the `typeof` operator                                         // 9572\n      // in Safari 8 which returns 'object' for typed array constructors, and                                          // 9573\n      // PhantomJS 1.9 which returns 'function' for `NodeList` instances.                                              // 9574\n      var tag = isObject(value) ? objectToString.call(value) : '';                                                     // 9575\n      return tag == funcTag || tag == genTag;                                                                          // 9576\n    }                                                                                                                  // 9577\n                                                                                                                       // 9578\n    /**                                                                                                                // 9579\n     * Checks if `value` is an integer.                                                                                // 9580\n     *                                                                                                                 // 9581\n     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).                        // 9582\n     *                                                                                                                 // 9583\n     * @static                                                                                                         // 9584\n     * @memberOf _                                                                                                     // 9585\n     * @category Lang                                                                                                  // 9586\n     * @param {*} value The value to check.                                                                            // 9587\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.                                       // 9588\n     * @example                                                                                                        // 9589\n     *                                                                                                                 // 9590\n     * _.isInteger(3);                                                                                                 // 9591\n     * // => true                                                                                                      // 9592\n     *                                                                                                                 // 9593\n     * _.isInteger(Number.MIN_VALUE);                                                                                  // 9594\n     * // => false                                                                                                     // 9595\n     *                                                                                                                 // 9596\n     * _.isInteger(Infinity);                                                                                          // 9597\n     * // => false                                                                                                     // 9598\n     *                                                                                                                 // 9599\n     * _.isInteger('3');                                                                                               // 9600\n     * // => false                                                                                                     // 9601\n     */                                                                                                                // 9602\n    function isInteger(value) {                                                                                        // 9603\n      return typeof value == 'number' && value == toInteger(value);                                                    // 9604\n    }                                                                                                                  // 9605\n                                                                                                                       // 9606\n    /**                                                                                                                // 9607\n     * Checks if `value` is a valid array-like length.                                                                 // 9608\n     *                                                                                                                 // 9609\n     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n     *                                                                                                                 // 9611\n     * @static                                                                                                         // 9612\n     * @memberOf _                                                                                                     // 9613\n     * @category Lang                                                                                                  // 9614\n     * @param {*} value The value to check.                                                                            // 9615\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                   // 9616\n     * @example                                                                                                        // 9617\n     *                                                                                                                 // 9618\n     * _.isLength(3);                                                                                                  // 9619\n     * // => true                                                                                                      // 9620\n     *                                                                                                                 // 9621\n     * _.isLength(Number.MIN_VALUE);                                                                                   // 9622\n     * // => false                                                                                                     // 9623\n     *                                                                                                                 // 9624\n     * _.isLength(Infinity);                                                                                           // 9625\n     * // => false                                                                                                     // 9626\n     *                                                                                                                 // 9627\n     * _.isLength('3');                                                                                                // 9628\n     * // => false                                                                                                     // 9629\n     */                                                                                                                // 9630\n    function isLength(value) {                                                                                         // 9631\n      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                    // 9632\n    }                                                                                                                  // 9633\n                                                                                                                       // 9634\n    /**                                                                                                                // 9635\n     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.                                // 9636\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                               // 9637\n     *                                                                                                                 // 9638\n     * @static                                                                                                         // 9639\n     * @memberOf _                                                                                                     // 9640\n     * @category Lang                                                                                                  // 9641\n     * @param {*} value The value to check.                                                                            // 9642\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                        // 9643\n     * @example                                                                                                        // 9644\n     *                                                                                                                 // 9645\n     * _.isObject({});                                                                                                 // 9646\n     * // => true                                                                                                      // 9647\n     *                                                                                                                 // 9648\n     * _.isObject([1, 2, 3]);                                                                                          // 9649\n     * // => true                                                                                                      // 9650\n     *                                                                                                                 // 9651\n     * _.isObject(_.noop);                                                                                             // 9652\n     * // => true                                                                                                      // 9653\n     *                                                                                                                 // 9654\n     * _.isObject(null);                                                                                               // 9655\n     * // => false                                                                                                     // 9656\n     */                                                                                                                // 9657\n    function isObject(value) {                                                                                         // 9658\n      // Avoid a V8 JIT bug in Chrome 19-20.                                                                           // 9659\n      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.                                      // 9660\n      var type = typeof value;                                                                                         // 9661\n      return !!value && (type == 'object' || type == 'function');                                                      // 9662\n    }                                                                                                                  // 9663\n                                                                                                                       // 9664\n    /**                                                                                                                // 9665\n     * Checks if `value` is object-like. A value is object-like if it's not `null`                                     // 9666\n     * and has a `typeof` result of \"object\".                                                                          // 9667\n     *                                                                                                                 // 9668\n     * @static                                                                                                         // 9669\n     * @memberOf _                                                                                                     // 9670\n     * @category Lang                                                                                                  // 9671\n     * @param {*} value The value to check.                                                                            // 9672\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                      // 9673\n     * @example                                                                                                        // 9674\n     *                                                                                                                 // 9675\n     * _.isObjectLike({});                                                                                             // 9676\n     * // => true                                                                                                      // 9677\n     *                                                                                                                 // 9678\n     * _.isObjectLike([1, 2, 3]);                                                                                      // 9679\n     * // => true                                                                                                      // 9680\n     *                                                                                                                 // 9681\n     * _.isObjectLike(_.noop);                                                                                         // 9682\n     * // => false                                                                                                     // 9683\n     *                                                                                                                 // 9684\n     * _.isObjectLike(null);                                                                                           // 9685\n     * // => false                                                                                                     // 9686\n     */                                                                                                                // 9687\n    function isObjectLike(value) {                                                                                     // 9688\n      return !!value && typeof value == 'object';                                                                      // 9689\n    }                                                                                                                  // 9690\n                                                                                                                       // 9691\n    /**                                                                                                                // 9692\n     * Performs a deep comparison between `object` and `source` to determine if                                        // 9693\n     * `object` contains equivalent property values.                                                                   // 9694\n     *                                                                                                                 // 9695\n     * **Note:** This method supports comparing the same values as `_.isEqual`.                                        // 9696\n     *                                                                                                                 // 9697\n     * @static                                                                                                         // 9698\n     * @memberOf _                                                                                                     // 9699\n     * @category Lang                                                                                                  // 9700\n     * @param {Object} object The object to inspect.                                                                   // 9701\n     * @param {Object} source The object of property values to match.                                                  // 9702\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 9703\n     * @example                                                                                                        // 9704\n     *                                                                                                                 // 9705\n     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 9706\n     *                                                                                                                 // 9707\n     * _.isMatch(object, { 'age': 40 });                                                                               // 9708\n     * // => true                                                                                                      // 9709\n     *                                                                                                                 // 9710\n     * _.isMatch(object, { 'age': 36 });                                                                               // 9711\n     * // => false                                                                                                     // 9712\n     */                                                                                                                // 9713\n    function isMatch(object, source) {                                                                                 // 9714\n      return object === source || baseIsMatch(object, source, getMatchData(source));                                   // 9715\n    }                                                                                                                  // 9716\n                                                                                                                       // 9717\n    /**                                                                                                                // 9718\n     * This method is like `_.isMatch` except that it accepts `customizer` which                                       // 9719\n     * is invoked to compare values. If `customizer` returns `undefined` comparisons                                   // 9720\n     * are handled by the method instead. The `customizer` is invoked with three                                       // 9721\n     * arguments: (objValue, srcValue, index|key, object, source).                                                     // 9722\n     *                                                                                                                 // 9723\n     * @static                                                                                                         // 9724\n     * @memberOf _                                                                                                     // 9725\n     * @category Lang                                                                                                  // 9726\n     * @param {Object} object The object to inspect.                                                                   // 9727\n     * @param {Object} source The object of property values to match.                                                  // 9728\n     * @param {Function} [customizer] The function to customize comparisons.                                           // 9729\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 9730\n     * @example                                                                                                        // 9731\n     *                                                                                                                 // 9732\n     * function isGreeting(value) {                                                                                    // 9733\n     *   return /^h(?:i|ello)$/.test(value);                                                                           // 9734\n     * }                                                                                                               // 9735\n     *                                                                                                                 // 9736\n     * function customizer(objValue, srcValue) {                                                                       // 9737\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {                                                           // 9738\n     *     return true;                                                                                                // 9739\n     *   }                                                                                                             // 9740\n     * }                                                                                                               // 9741\n     *                                                                                                                 // 9742\n     * var object = { 'greeting': 'hello' };                                                                           // 9743\n     * var source = { 'greeting': 'hi' };                                                                              // 9744\n     *                                                                                                                 // 9745\n     * _.isMatchWith(object, source, customizer);                                                                      // 9746\n     * // => true                                                                                                      // 9747\n     */                                                                                                                // 9748\n    function isMatchWith(object, source, customizer) {                                                                 // 9749\n      customizer = typeof customizer == 'function' ? customizer : undefined;                                           // 9750\n      return baseIsMatch(object, source, getMatchData(source), customizer);                                            // 9751\n    }                                                                                                                  // 9752\n                                                                                                                       // 9753\n    /**                                                                                                                // 9754\n     * Checks if `value` is `NaN`.                                                                                     // 9755\n     *                                                                                                                 // 9756\n     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)                            // 9757\n     * which returns `true` for `undefined` and other non-numeric values.                                              // 9758\n     *                                                                                                                 // 9759\n     * @static                                                                                                         // 9760\n     * @memberOf _                                                                                                     // 9761\n     * @category Lang                                                                                                  // 9762\n     * @param {*} value The value to check.                                                                            // 9763\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.                                            // 9764\n     * @example                                                                                                        // 9765\n     *                                                                                                                 // 9766\n     * _.isNaN(NaN);                                                                                                   // 9767\n     * // => true                                                                                                      // 9768\n     *                                                                                                                 // 9769\n     * _.isNaN(new Number(NaN));                                                                                       // 9770\n     * // => true                                                                                                      // 9771\n     *                                                                                                                 // 9772\n     * isNaN(undefined);                                                                                               // 9773\n     * // => true                                                                                                      // 9774\n     *                                                                                                                 // 9775\n     * _.isNaN(undefined);                                                                                             // 9776\n     * // => false                                                                                                     // 9777\n     */                                                                                                                // 9778\n    function isNaN(value) {                                                                                            // 9779\n      // An `NaN` primitive is the only value that is not equal to itself.                                             // 9780\n      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.                        // 9781\n      return isNumber(value) && value != +value;                                                                       // 9782\n    }                                                                                                                  // 9783\n                                                                                                                       // 9784\n    /**                                                                                                                // 9785\n     * Checks if `value` is a native function.                                                                         // 9786\n     *                                                                                                                 // 9787\n     * @static                                                                                                         // 9788\n     * @memberOf _                                                                                                     // 9789\n     * @category Lang                                                                                                  // 9790\n     * @param {*} value The value to check.                                                                            // 9791\n     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.                                // 9792\n     * @example                                                                                                        // 9793\n     *                                                                                                                 // 9794\n     * _.isNative(Array.prototype.push);                                                                               // 9795\n     * // => true                                                                                                      // 9796\n     *                                                                                                                 // 9797\n     * _.isNative(_);                                                                                                  // 9798\n     * // => false                                                                                                     // 9799\n     */                                                                                                                // 9800\n    function isNative(value) {                                                                                         // 9801\n      if (value == null) {                                                                                             // 9802\n        return false;                                                                                                  // 9803\n      }                                                                                                                // 9804\n      if (isFunction(value)) {                                                                                         // 9805\n        return reIsNative.test(funcToString.call(value));                                                              // 9806\n      }                                                                                                                // 9807\n      return isObjectLike(value) &&                                                                                    // 9808\n        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);                                                 // 9809\n    }                                                                                                                  // 9810\n                                                                                                                       // 9811\n    /**                                                                                                                // 9812\n     * Checks if `value` is `null`.                                                                                    // 9813\n     *                                                                                                                 // 9814\n     * @static                                                                                                         // 9815\n     * @memberOf _                                                                                                     // 9816\n     * @category Lang                                                                                                  // 9817\n     * @param {*} value The value to check.                                                                            // 9818\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.                                           // 9819\n     * @example                                                                                                        // 9820\n     *                                                                                                                 // 9821\n     * _.isNull(null);                                                                                                 // 9822\n     * // => true                                                                                                      // 9823\n     *                                                                                                                 // 9824\n     * _.isNull(void 0);                                                                                               // 9825\n     * // => false                                                                                                     // 9826\n     */                                                                                                                // 9827\n    function isNull(value) {                                                                                           // 9828\n      return value === null;                                                                                           // 9829\n    }                                                                                                                  // 9830\n                                                                                                                       // 9831\n    /**                                                                                                                // 9832\n     * Checks if `value` is `null` or `undefined`.                                                                     // 9833\n     *                                                                                                                 // 9834\n     * @static                                                                                                         // 9835\n     * @memberOf _                                                                                                     // 9836\n     * @category Lang                                                                                                  // 9837\n     * @param {*} value The value to check.                                                                            // 9838\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.                                          // 9839\n     * @example                                                                                                        // 9840\n     *                                                                                                                 // 9841\n     * _.isNil(null);                                                                                                  // 9842\n     * // => true                                                                                                      // 9843\n     *                                                                                                                 // 9844\n     * _.isNil(void 0);                                                                                                // 9845\n     * // => true                                                                                                      // 9846\n     *                                                                                                                 // 9847\n     * _.isNil(NaN);                                                                                                   // 9848\n     * // => false                                                                                                     // 9849\n     */                                                                                                                // 9850\n    function isNil(value) {                                                                                            // 9851\n      return value == null;                                                                                            // 9852\n    }                                                                                                                  // 9853\n                                                                                                                       // 9854\n    /**                                                                                                                // 9855\n     * Checks if `value` is classified as a `Number` primitive or object.                                              // 9856\n     *                                                                                                                 // 9857\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified                                   // 9858\n     * as numbers, use the `_.isFinite` method.                                                                        // 9859\n     *                                                                                                                 // 9860\n     * @static                                                                                                         // 9861\n     * @memberOf _                                                                                                     // 9862\n     * @category Lang                                                                                                  // 9863\n     * @param {*} value The value to check.                                                                            // 9864\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9865\n     * @example                                                                                                        // 9866\n     *                                                                                                                 // 9867\n     * _.isNumber(3);                                                                                                  // 9868\n     * // => true                                                                                                      // 9869\n     *                                                                                                                 // 9870\n     * _.isNumber(Number.MIN_VALUE);                                                                                   // 9871\n     * // => true                                                                                                      // 9872\n     *                                                                                                                 // 9873\n     * _.isNumber(Infinity);                                                                                           // 9874\n     * // => true                                                                                                      // 9875\n     *                                                                                                                 // 9876\n     * _.isNumber('3');                                                                                                // 9877\n     * // => false                                                                                                     // 9878\n     */                                                                                                                // 9879\n    function isNumber(value) {                                                                                         // 9880\n      return typeof value == 'number' ||                                                                               // 9881\n        (isObjectLike(value) && objectToString.call(value) == numberTag);                                              // 9882\n    }                                                                                                                  // 9883\n                                                                                                                       // 9884\n    /**                                                                                                                // 9885\n     * Checks if `value` is a plain object, that is, an object created by the                                          // 9886\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                   // 9887\n     *                                                                                                                 // 9888\n     * @static                                                                                                         // 9889\n     * @memberOf _                                                                                                     // 9890\n     * @category Lang                                                                                                  // 9891\n     * @param {*} value The value to check.                                                                            // 9892\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                   // 9893\n     * @example                                                                                                        // 9894\n     *                                                                                                                 // 9895\n     * function Foo() {                                                                                                // 9896\n     *   this.a = 1;                                                                                                   // 9897\n     * }                                                                                                               // 9898\n     *                                                                                                                 // 9899\n     * _.isPlainObject(new Foo);                                                                                       // 9900\n     * // => false                                                                                                     // 9901\n     *                                                                                                                 // 9902\n     * _.isPlainObject([1, 2, 3]);                                                                                     // 9903\n     * // => false                                                                                                     // 9904\n     *                                                                                                                 // 9905\n     * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                            // 9906\n     * // => true                                                                                                      // 9907\n     *                                                                                                                 // 9908\n     * _.isPlainObject(Object.create(null));                                                                           // 9909\n     * // => true                                                                                                      // 9910\n     */                                                                                                                // 9911\n    function isPlainObject(value) {                                                                                    // 9912\n      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {                    // 9913\n        return false;                                                                                                  // 9914\n      }                                                                                                                // 9915\n      var proto = objectProto;                                                                                         // 9916\n      if (typeof value.constructor == 'function') {                                                                    // 9917\n        proto = getPrototypeOf(value);                                                                                 // 9918\n      }                                                                                                                // 9919\n      if (proto === null) {                                                                                            // 9920\n        return true;                                                                                                   // 9921\n      }                                                                                                                // 9922\n      var Ctor = proto.constructor;                                                                                    // 9923\n      return (typeof Ctor == 'function' &&                                                                             // 9924\n        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);                                          // 9925\n    }                                                                                                                  // 9926\n                                                                                                                       // 9927\n    /**                                                                                                                // 9928\n     * Checks if `value` is classified as a `RegExp` object.                                                           // 9929\n     *                                                                                                                 // 9930\n     * @static                                                                                                         // 9931\n     * @memberOf _                                                                                                     // 9932\n     * @category Lang                                                                                                  // 9933\n     * @param {*} value The value to check.                                                                            // 9934\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9935\n     * @example                                                                                                        // 9936\n     *                                                                                                                 // 9937\n     * _.isRegExp(/abc/);                                                                                              // 9938\n     * // => true                                                                                                      // 9939\n     *                                                                                                                 // 9940\n     * _.isRegExp('/abc/');                                                                                            // 9941\n     * // => false                                                                                                     // 9942\n     */                                                                                                                // 9943\n    function isRegExp(value) {                                                                                         // 9944\n      return isObject(value) && objectToString.call(value) == regexpTag;                                               // 9945\n    }                                                                                                                  // 9946\n                                                                                                                       // 9947\n    /**                                                                                                                // 9948\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754                                     // 9949\n     * double precision number which isn't the result of a rounded unsafe integer.                                     // 9950\n     *                                                                                                                 // 9951\n     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).                // 9952\n     *                                                                                                                 // 9953\n     * @static                                                                                                         // 9954\n     * @memberOf _                                                                                                     // 9955\n     * @category Lang                                                                                                  // 9956\n     * @param {*} value The value to check.                                                                            // 9957\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.                                   // 9958\n     * @example                                                                                                        // 9959\n     *                                                                                                                 // 9960\n     * _.isSafeInteger(3);                                                                                             // 9961\n     * // => true                                                                                                      // 9962\n     *                                                                                                                 // 9963\n     * _.isSafeInteger(Number.MIN_VALUE);                                                                              // 9964\n     * // => false                                                                                                     // 9965\n     *                                                                                                                 // 9966\n     * _.isSafeInteger(Infinity);                                                                                      // 9967\n     * // => false                                                                                                     // 9968\n     *                                                                                                                 // 9969\n     * _.isSafeInteger('3');                                                                                           // 9970\n     * // => false                                                                                                     // 9971\n     */                                                                                                                // 9972\n    function isSafeInteger(value) {                                                                                    // 9973\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;                              // 9974\n    }                                                                                                                  // 9975\n                                                                                                                       // 9976\n    /**                                                                                                                // 9977\n     * Checks if `value` is classified as a `String` primitive or object.                                              // 9978\n     *                                                                                                                 // 9979\n     * @static                                                                                                         // 9980\n     * @memberOf _                                                                                                     // 9981\n     * @category Lang                                                                                                  // 9982\n     * @param {*} value The value to check.                                                                            // 9983\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9984\n     * @example                                                                                                        // 9985\n     *                                                                                                                 // 9986\n     * _.isString('abc');                                                                                              // 9987\n     * // => true                                                                                                      // 9988\n     *                                                                                                                 // 9989\n     * _.isString(1);                                                                                                  // 9990\n     * // => false                                                                                                     // 9991\n     */                                                                                                                // 9992\n    function isString(value) {                                                                                         // 9993\n      return typeof value == 'string' ||                                                                               // 9994\n        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);                           // 9995\n    }                                                                                                                  // 9996\n                                                                                                                       // 9997\n    /**                                                                                                                // 9998\n     * Checks if `value` is classified as a `Symbol` primitive or object.                                              // 9999\n     *                                                                                                                 // 10000\n     * @static                                                                                                         // 10001\n     * @memberOf _                                                                                                     // 10002\n     * @category Lang                                                                                                  // 10003\n     * @param {*} value The value to check.                                                                            // 10004\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 10005\n     * @example                                                                                                        // 10006\n     *                                                                                                                 // 10007\n     * _.isSymbol(Symbol.iterator);                                                                                    // 10008\n     * // => true                                                                                                      // 10009\n     *                                                                                                                 // 10010\n     * _.isSymbol('abc');                                                                                              // 10011\n     * // => false                                                                                                     // 10012\n     */                                                                                                                // 10013\n    function isSymbol(value) {                                                                                         // 10014\n      return typeof value == 'symbol' ||                                                                               // 10015\n        (isObjectLike(value) && objectToString.call(value) == symbolTag);                                              // 10016\n    }                                                                                                                  // 10017\n                                                                                                                       // 10018\n    /**                                                                                                                // 10019\n     * Checks if `value` is classified as a typed array.                                                               // 10020\n     *                                                                                                                 // 10021\n     * @static                                                                                                         // 10022\n     * @memberOf _                                                                                                     // 10023\n     * @category Lang                                                                                                  // 10024\n     * @param {*} value The value to check.                                                                            // 10025\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 10026\n     * @example                                                                                                        // 10027\n     *                                                                                                                 // 10028\n     * _.isTypedArray(new Uint8Array);                                                                                 // 10029\n     * // => true                                                                                                      // 10030\n     *                                                                                                                 // 10031\n     * _.isTypedArray([]);                                                                                             // 10032\n     * // => false                                                                                                     // 10033\n     */                                                                                                                // 10034\n    function isTypedArray(value) {                                                                                     // 10035\n      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];            // 10036\n    }                                                                                                                  // 10037\n                                                                                                                       // 10038\n    /**                                                                                                                // 10039\n     * Checks if `value` is `undefined`.                                                                               // 10040\n     *                                                                                                                 // 10041\n     * @static                                                                                                         // 10042\n     * @memberOf _                                                                                                     // 10043\n     * @category Lang                                                                                                  // 10044\n     * @param {*} value The value to check.                                                                            // 10045\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.                                      // 10046\n     * @example                                                                                                        // 10047\n     *                                                                                                                 // 10048\n     * _.isUndefined(void 0);                                                                                          // 10049\n     * // => true                                                                                                      // 10050\n     *                                                                                                                 // 10051\n     * _.isUndefined(null);                                                                                            // 10052\n     * // => false                                                                                                     // 10053\n     */                                                                                                                // 10054\n    function isUndefined(value) {                                                                                      // 10055\n      return value === undefined;                                                                                      // 10056\n    }                                                                                                                  // 10057\n                                                                                                                       // 10058\n    /**                                                                                                                // 10059\n     * Checks if `value` is less than `other`.                                                                         // 10060\n     *                                                                                                                 // 10061\n     * @static                                                                                                         // 10062\n     * @memberOf _                                                                                                     // 10063\n     * @category Lang                                                                                                  // 10064\n     * @param {*} value The value to compare.                                                                          // 10065\n     * @param {*} other The other value to compare.                                                                    // 10066\n     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.                                // 10067\n     * @example                                                                                                        // 10068\n     *                                                                                                                 // 10069\n     * _.lt(1, 3);                                                                                                     // 10070\n     * // => true                                                                                                      // 10071\n     *                                                                                                                 // 10072\n     * _.lt(3, 3);                                                                                                     // 10073\n     * // => false                                                                                                     // 10074\n     *                                                                                                                 // 10075\n     * _.lt(3, 1);                                                                                                     // 10076\n     * // => false                                                                                                     // 10077\n     */                                                                                                                // 10078\n    function lt(value, other) {                                                                                        // 10079\n      return value < other;                                                                                            // 10080\n    }                                                                                                                  // 10081\n                                                                                                                       // 10082\n    /**                                                                                                                // 10083\n     * Checks if `value` is less than or equal to `other`.                                                             // 10084\n     *                                                                                                                 // 10085\n     * @static                                                                                                         // 10086\n     * @memberOf _                                                                                                     // 10087\n     * @category Lang                                                                                                  // 10088\n     * @param {*} value The value to compare.                                                                          // 10089\n     * @param {*} other The other value to compare.                                                                    // 10090\n     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.                    // 10091\n     * @example                                                                                                        // 10092\n     *                                                                                                                 // 10093\n     * _.lte(1, 3);                                                                                                    // 10094\n     * // => true                                                                                                      // 10095\n     *                                                                                                                 // 10096\n     * _.lte(3, 3);                                                                                                    // 10097\n     * // => true                                                                                                      // 10098\n     *                                                                                                                 // 10099\n     * _.lte(3, 1);                                                                                                    // 10100\n     * // => false                                                                                                     // 10101\n     */                                                                                                                // 10102\n    function lte(value, other) {                                                                                       // 10103\n      return value <= other;                                                                                           // 10104\n    }                                                                                                                  // 10105\n                                                                                                                       // 10106\n    /**                                                                                                                // 10107\n     * Converts `value` to an array.                                                                                   // 10108\n     *                                                                                                                 // 10109\n     * @static                                                                                                         // 10110\n     * @memberOf _                                                                                                     // 10111\n     * @category Lang                                                                                                  // 10112\n     * @param {*} value The value to convert.                                                                          // 10113\n     * @returns {Array} Returns the converted array.                                                                   // 10114\n     * @example                                                                                                        // 10115\n     *                                                                                                                 // 10116\n     * _.toArray({ 'a': 1, 'b': 2 });                                                                                  // 10117\n     * // => [1, 2]                                                                                                    // 10118\n     *                                                                                                                 // 10119\n     * _.toArray('abc');                                                                                               // 10120\n     * // => ['a', 'b', 'c']                                                                                           // 10121\n     *                                                                                                                 // 10122\n     * _.toArray(1);                                                                                                   // 10123\n     * // => []                                                                                                        // 10124\n     *                                                                                                                 // 10125\n     * _.toArray(null);                                                                                                // 10126\n     * // => []                                                                                                        // 10127\n     */                                                                                                                // 10128\n    function toArray(value) {                                                                                          // 10129\n      if (!value) {                                                                                                    // 10130\n        return [];                                                                                                     // 10131\n      }                                                                                                                // 10132\n      if (isArrayLike(value)) {                                                                                        // 10133\n        return isString(value) ? stringToArray(value) : copyArray(value);                                              // 10134\n      }                                                                                                                // 10135\n      if (iteratorSymbol && value[iteratorSymbol]) {                                                                   // 10136\n        return iteratorToArray(value[iteratorSymbol]());                                                               // 10137\n      }                                                                                                                // 10138\n      var tag = getTag(value),                                                                                         // 10139\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);                                   // 10140\n                                                                                                                       // 10141\n      return func(value);                                                                                              // 10142\n    }                                                                                                                  // 10143\n                                                                                                                       // 10144\n    /**                                                                                                                // 10145\n     * Converts `value` to an integer.                                                                                 // 10146\n     *                                                                                                                 // 10147\n     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n     *                                                                                                                 // 10149\n     * @static                                                                                                         // 10150\n     * @memberOf _                                                                                                     // 10151\n     * @category Lang                                                                                                  // 10152\n     * @param {*} value The value to convert.                                                                          // 10153\n     * @returns {number} Returns the converted integer.                                                                // 10154\n     * @example                                                                                                        // 10155\n     *                                                                                                                 // 10156\n     * _.toInteger(3);                                                                                                 // 10157\n     * // => 3                                                                                                         // 10158\n     *                                                                                                                 // 10159\n     * _.toInteger(Number.MIN_VALUE);                                                                                  // 10160\n     * // => 0                                                                                                         // 10161\n     *                                                                                                                 // 10162\n     * _.toInteger(Infinity);                                                                                          // 10163\n     * // => 1.7976931348623157e+308                                                                                   // 10164\n     *                                                                                                                 // 10165\n     * _.toInteger('3');                                                                                               // 10166\n     * // => 3                                                                                                         // 10167\n     */                                                                                                                // 10168\n    function toInteger(value) {                                                                                        // 10169\n      if (!value) {                                                                                                    // 10170\n        return value === 0 ? value : 0;                                                                                // 10171\n      }                                                                                                                // 10172\n      value = toNumber(value);                                                                                         // 10173\n      if (value === INFINITY || value === -INFINITY) {                                                                 // 10174\n        var sign = (value < 0 ? -1 : 1);                                                                               // 10175\n        return sign * MAX_INTEGER;                                                                                     // 10176\n      }                                                                                                                // 10177\n      var remainder = value % 1;                                                                                       // 10178\n      return value === value ? (remainder ? value - remainder : value) : 0;                                            // 10179\n    }                                                                                                                  // 10180\n                                                                                                                       // 10181\n    /**                                                                                                                // 10182\n     * Converts `value` to an integer suitable for use as the length of an                                             // 10183\n     * array-like object.                                                                                              // 10184\n     *                                                                                                                 // 10185\n     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).       // 10186\n     *                                                                                                                 // 10187\n     * @static                                                                                                         // 10188\n     * @memberOf _                                                                                                     // 10189\n     * @category Lang                                                                                                  // 10190\n     * @param {*} value The value to convert.                                                                          // 10191\n     * @return {number} Returns the converted integer.                                                                 // 10192\n     * @example                                                                                                        // 10193\n     *                                                                                                                 // 10194\n     * _.toLength(3);                                                                                                  // 10195\n     * // => 3                                                                                                         // 10196\n     *                                                                                                                 // 10197\n     * _.toLength(Number.MIN_VALUE);                                                                                   // 10198\n     * // => 0                                                                                                         // 10199\n     *                                                                                                                 // 10200\n     * _.toLength(Infinity);                                                                                           // 10201\n     * // => 4294967295                                                                                                // 10202\n     *                                                                                                                 // 10203\n     * _.toLength('3');                                                                                                // 10204\n     * // => 3                                                                                                         // 10205\n     */                                                                                                                // 10206\n    function toLength(value) {                                                                                         // 10207\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;                                             // 10208\n    }                                                                                                                  // 10209\n                                                                                                                       // 10210\n    /**                                                                                                                // 10211\n     * Converts `value` to a number.                                                                                   // 10212\n     *                                                                                                                 // 10213\n     * @static                                                                                                         // 10214\n     * @memberOf _                                                                                                     // 10215\n     * @category Lang                                                                                                  // 10216\n     * @param {*} value The value to process.                                                                          // 10217\n     * @returns {number} Returns the number.                                                                           // 10218\n     * @example                                                                                                        // 10219\n     *                                                                                                                 // 10220\n     * _.toNumber(3);                                                                                                  // 10221\n     * // => 3                                                                                                         // 10222\n     *                                                                                                                 // 10223\n     * _.toNumber(Number.MIN_VALUE);                                                                                   // 10224\n     * // => 5e-324                                                                                                    // 10225\n     *                                                                                                                 // 10226\n     * _.toNumber(Infinity);                                                                                           // 10227\n     * // => Infinity                                                                                                  // 10228\n     *                                                                                                                 // 10229\n     * _.toNumber('3');                                                                                                // 10230\n     * // => 3                                                                                                         // 10231\n     */                                                                                                                // 10232\n    function toNumber(value) {                                                                                         // 10233\n      if (isObject(value)) {                                                                                           // 10234\n        var other = isFunction(value.valueOf) ? value.valueOf() : value;                                               // 10235\n        value = isObject(other) ? (other + '') : other;                                                                // 10236\n      }                                                                                                                // 10237\n      if (typeof value != 'string') {                                                                                  // 10238\n        return value === 0 ? value : +value;                                                                           // 10239\n      }                                                                                                                // 10240\n      value = value.replace(reTrim, '');                                                                               // 10241\n      var isBinary = reIsBinary.test(value);                                                                           // 10242\n      return (isBinary || reIsOctal.test(value))                                                                       // 10243\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)                                                               // 10244\n        : (reIsBadHex.test(value) ? NAN : +value);                                                                     // 10245\n    }                                                                                                                  // 10246\n                                                                                                                       // 10247\n    /**                                                                                                                // 10248\n     * Converts `value` to a plain object flattening inherited enumerable                                              // 10249\n     * properties of `value` to own properties of the plain object.                                                    // 10250\n     *                                                                                                                 // 10251\n     * @static                                                                                                         // 10252\n     * @memberOf _                                                                                                     // 10253\n     * @category Lang                                                                                                  // 10254\n     * @param {*} value The value to convert.                                                                          // 10255\n     * @returns {Object} Returns the converted plain object.                                                           // 10256\n     * @example                                                                                                        // 10257\n     *                                                                                                                 // 10258\n     * function Foo() {                                                                                                // 10259\n     *   this.b = 2;                                                                                                   // 10260\n     * }                                                                                                               // 10261\n     *                                                                                                                 // 10262\n     * Foo.prototype.c = 3;                                                                                            // 10263\n     *                                                                                                                 // 10264\n     * _.assign({ 'a': 1 }, new Foo);                                                                                  // 10265\n     * // => { 'a': 1, 'b': 2 }                                                                                        // 10266\n     *                                                                                                                 // 10267\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));                                                                 // 10268\n     * // => { 'a': 1, 'b': 2, 'c': 3 }                                                                                // 10269\n     */                                                                                                                // 10270\n    function toPlainObject(value) {                                                                                    // 10271\n      return copyObject(value, keysIn(value));                                                                         // 10272\n    }                                                                                                                  // 10273\n                                                                                                                       // 10274\n    /**                                                                                                                // 10275\n     * Converts `value` to a safe integer. A safe integer can be compared and                                          // 10276\n     * represented correctly.                                                                                          // 10277\n     *                                                                                                                 // 10278\n     * @static                                                                                                         // 10279\n     * @memberOf _                                                                                                     // 10280\n     * @category Lang                                                                                                  // 10281\n     * @param {*} value The value to convert.                                                                          // 10282\n     * @returns {number} Returns the converted integer.                                                                // 10283\n     * @example                                                                                                        // 10284\n     *                                                                                                                 // 10285\n     * _.toSafeInteger(3);                                                                                             // 10286\n     * // => 3                                                                                                         // 10287\n     *                                                                                                                 // 10288\n     * _.toSafeInteger(Number.MIN_VALUE);                                                                              // 10289\n     * // => 0                                                                                                         // 10290\n     *                                                                                                                 // 10291\n     * _.toSafeInteger(Infinity);                                                                                      // 10292\n     * // => 9007199254740991                                                                                          // 10293\n     *                                                                                                                 // 10294\n     * _.toSafeInteger('3');                                                                                           // 10295\n     * // => 3                                                                                                         // 10296\n     */                                                                                                                // 10297\n    function toSafeInteger(value) {                                                                                    // 10298\n      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);                                         // 10299\n    }                                                                                                                  // 10300\n                                                                                                                       // 10301\n    /**                                                                                                                // 10302\n     * Converts `value` to a string if it's not one. An empty string is returned                                       // 10303\n     * for `null` and `undefined` values. The sign of `-0` is preserved.                                               // 10304\n     *                                                                                                                 // 10305\n     * @static                                                                                                         // 10306\n     * @memberOf _                                                                                                     // 10307\n     * @category Lang                                                                                                  // 10308\n     * @param {*} value The value to process.                                                                          // 10309\n     * @returns {string} Returns the string.                                                                           // 10310\n     * @example                                                                                                        // 10311\n     *                                                                                                                 // 10312\n     * _.toString(null);                                                                                               // 10313\n     * // => ''                                                                                                        // 10314\n     *                                                                                                                 // 10315\n     * _.toString(-0);                                                                                                 // 10316\n     * // => '-0'                                                                                                      // 10317\n     *                                                                                                                 // 10318\n     * _.toString([1, 2, 3]);                                                                                          // 10319\n     * // => '1,2,3'                                                                                                   // 10320\n     */                                                                                                                // 10321\n    function toString(value) {                                                                                         // 10322\n      // Exit early for strings to avoid a performance hit in some environments.                                       // 10323\n      if (typeof value == 'string') {                                                                                  // 10324\n        return value;                                                                                                  // 10325\n      }                                                                                                                // 10326\n      if (value == null) {                                                                                             // 10327\n        return '';                                                                                                     // 10328\n      }                                                                                                                // 10329\n      if (isSymbol(value)) {                                                                                           // 10330\n        return _Symbol ? symbolToString.call(value) : '';                                                              // 10331\n      }                                                                                                                // 10332\n      var result = (value + '');                                                                                       // 10333\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;                                              // 10334\n    }                                                                                                                  // 10335\n                                                                                                                       // 10336\n    /*------------------------------------------------------------------------*/                                       // 10337\n                                                                                                                       // 10338\n    /**                                                                                                                // 10339\n     * Assigns own enumerable properties of source objects to the destination                                          // 10340\n     * object. Source objects are applied from left to right. Subsequent sources                                       // 10341\n     * overwrite property assignments of previous sources.                                                             // 10342\n     *                                                                                                                 // 10343\n     * **Note:** This method mutates `object` and is loosely based on                                                  // 10344\n     * [`Object.assign`](https://mdn.io/Object/assign).                                                                // 10345\n     *                                                                                                                 // 10346\n     * @static                                                                                                         // 10347\n     * @memberOf _                                                                                                     // 10348\n     * @category Object                                                                                                // 10349\n     * @param {Object} object The destination object.                                                                  // 10350\n     * @param {...Object} [sources] The source objects.                                                                // 10351\n     * @returns {Object} Returns `object`.                                                                             // 10352\n     * @example                                                                                                        // 10353\n     *                                                                                                                 // 10354\n     * function Foo() {                                                                                                // 10355\n     *   this.c = 3;                                                                                                   // 10356\n     * }                                                                                                               // 10357\n     *                                                                                                                 // 10358\n     * function Bar() {                                                                                                // 10359\n     *   this.e = 5;                                                                                                   // 10360\n     * }                                                                                                               // 10361\n     *                                                                                                                 // 10362\n     * Foo.prototype.d = 4;                                                                                            // 10363\n     * Bar.prototype.f = 6;                                                                                            // 10364\n     *                                                                                                                 // 10365\n     * _.assign({ 'a': 1 }, new Foo, new Bar);                                                                         // 10366\n     * // => { 'a': 1, 'c': 3, 'e': 5 }                                                                                // 10367\n     */                                                                                                                // 10368\n    var assign = createAssigner(function(object, source) {                                                             // 10369\n      copyObject(source, keys(source), object);                                                                        // 10370\n    });                                                                                                                // 10371\n                                                                                                                       // 10372\n    /**                                                                                                                // 10373\n     * This method is like `_.assign` except that it iterates over own and                                             // 10374\n     * inherited source properties.                                                                                    // 10375\n     *                                                                                                                 // 10376\n     * **Note:** This method mutates `object`.                                                                         // 10377\n     *                                                                                                                 // 10378\n     * @static                                                                                                         // 10379\n     * @memberOf _                                                                                                     // 10380\n     * @alias extend                                                                                                   // 10381\n     * @category Object                                                                                                // 10382\n     * @param {Object} object The destination object.                                                                  // 10383\n     * @param {...Object} [sources] The source objects.                                                                // 10384\n     * @returns {Object} Returns `object`.                                                                             // 10385\n     * @example                                                                                                        // 10386\n     *                                                                                                                 // 10387\n     * function Foo() {                                                                                                // 10388\n     *   this.b = 2;                                                                                                   // 10389\n     * }                                                                                                               // 10390\n     *                                                                                                                 // 10391\n     * function Bar() {                                                                                                // 10392\n     *   this.d = 4;                                                                                                   // 10393\n     * }                                                                                                               // 10394\n     *                                                                                                                 // 10395\n     * Foo.prototype.c = 3;                                                                                            // 10396\n     * Bar.prototype.e = 5;                                                                                            // 10397\n     *                                                                                                                 // 10398\n     * _.assignIn({ 'a': 1 }, new Foo, new Bar);                                                                       // 10399\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }                                                                // 10400\n     */                                                                                                                // 10401\n    var assignIn = createAssigner(function(object, source) {                                                           // 10402\n      copyObject(source, keysIn(source), object);                                                                      // 10403\n    });                                                                                                                // 10404\n                                                                                                                       // 10405\n    /**                                                                                                                // 10406\n     * This method is like `_.assignIn` except that it accepts `customizer` which                                      // 10407\n     * is invoked to produce the assigned values. If `customizer` returns `undefined`                                  // 10408\n     * assignment is handled by the method instead. The `customizer` is invoked                                        // 10409\n     * with five arguments: (objValue, srcValue, key, object, source).                                                 // 10410\n     *                                                                                                                 // 10411\n     * **Note:** This method mutates `object`.                                                                         // 10412\n     *                                                                                                                 // 10413\n     * @static                                                                                                         // 10414\n     * @memberOf _                                                                                                     // 10415\n     * @alias extendWith                                                                                               // 10416\n     * @category Object                                                                                                // 10417\n     * @param {Object} object The destination object.                                                                  // 10418\n     * @param {...Object} sources The source objects.                                                                  // 10419\n     * @param {Function} [customizer] The function to customize assigned values.                                       // 10420\n     * @returns {Object} Returns `object`.                                                                             // 10421\n     * @example                                                                                                        // 10422\n     *                                                                                                                 // 10423\n     * function customizer(objValue, srcValue) {                                                                       // 10424\n     *   return _.isUndefined(objValue) ? srcValue : objValue;                                                         // 10425\n     * }                                                                                                               // 10426\n     *                                                                                                                 // 10427\n     * var defaults = _.partialRight(_.assignInWith, customizer);                                                      // 10428\n     *                                                                                                                 // 10429\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });                                                                   // 10430\n     * // => { 'a': 1, 'b': 2 }                                                                                        // 10431\n     */                                                                                                                // 10432\n    var assignInWith = createAssigner(function(object, source, customizer) {                                           // 10433\n      copyObjectWith(source, keysIn(source), object, customizer);                                                      // 10434\n    });                                                                                                                // 10435\n                                                                                                                       // 10436\n    /**                                                                                                                // 10437\n     * This method is like `_.assign` except that it accepts `customizer` which                                        // 10438\n     * is invoked to produce the assigned values. If `customizer` returns `undefined`                                  // 10439\n     * assignment is handled by the method instead. The `customizer` is invoked                                        // 10440\n     * with five arguments: (objValue, srcValue, key, object, source).                                                 // 10441\n     *                                                                                                                 // 10442\n     * **Note:** This method mutates `object`.                                                                         // 10443\n     *                                                                                                                 // 10444\n     * @static                                                                                                         // 10445\n     * @memberOf _                                                                                                     // 10446\n     * @category Object                                                                                                // 10447\n     * @param {Object} object The destination object.                                                                  // 10448\n     * @param {...Object} sources The source objects.                                                                  // 10449\n     * @param {Function} [customizer] The function to customize assigned values.                                       // 10450\n     * @returns {Object} Returns `object`.                                                                             // 10451\n     * @example                                                                                                        // 10452\n     *                                                                                                                 // 10453\n     * function customizer(objValue, srcValue) {                                                                       // 10454\n     *   return _.isUndefined(objValue) ? srcValue : objValue;                                                         // 10455\n     * }                                                                                                               // 10456\n     *                                                                                                                 // 10457\n     * var defaults = _.partialRight(_.assignWith, customizer);                                                        // 10458\n     *                                                                                                                 // 10459\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });                                                                   // 10460\n     * // => { 'a': 1, 'b': 2 }                                                                                        // 10461\n     */                                                                                                                // 10462\n    var assignWith = createAssigner(function(object, source, customizer) {                                             // 10463\n      copyObjectWith(source, keys(source), object, customizer);                                                        // 10464\n    });                                                                                                                // 10465\n                                                                                                                       // 10466\n    /**                                                                                                                // 10467\n     * Creates an array of values corresponding to `paths` of `object`.                                                // 10468\n     *                                                                                                                 // 10469\n     * @static                                                                                                         // 10470\n     * @memberOf _                                                                                                     // 10471\n     * @category Object                                                                                                // 10472\n     * @param {Object} object The object to iterate over.                                                              // 10473\n     * @param {...(string|string[])} [paths] The property paths of elements to pick,                                   // 10474\n     *  specified individually or in arrays.                                                                           // 10475\n     * @returns {Array} Returns the new array of picked elements.                                                      // 10476\n     * @example                                                                                                        // 10477\n     *                                                                                                                 // 10478\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };                                                                 // 10479\n     *                                                                                                                 // 10480\n     * _.at(object, ['a[0].b.c', 'a[1]']);                                                                             // 10481\n     * // => [3, 4]                                                                                                    // 10482\n     *                                                                                                                 // 10483\n     * _.at(['a', 'b', 'c'], 0, 2);                                                                                    // 10484\n     * // => ['a', 'c']                                                                                                // 10485\n     */                                                                                                                // 10486\n    var at = rest(function(object, paths) {                                                                            // 10487\n      return baseAt(object, baseFlatten(paths));                                                                       // 10488\n    });                                                                                                                // 10489\n                                                                                                                       // 10490\n    /**                                                                                                                // 10491\n     * Creates an object that inherits from the `prototype` object. If a `properties`                                  // 10492\n     * object is provided its own enumerable properties are assigned to the created object.                            // 10493\n     *                                                                                                                 // 10494\n     * @static                                                                                                         // 10495\n     * @memberOf _                                                                                                     // 10496\n     * @category Object                                                                                                // 10497\n     * @param {Object} prototype The object to inherit from.                                                           // 10498\n     * @param {Object} [properties] The properties to assign to the object.                                            // 10499\n     * @returns {Object} Returns the new object.                                                                       // 10500\n     * @example                                                                                                        // 10501\n     *                                                                                                                 // 10502\n     * function Shape() {                                                                                              // 10503\n     *   this.x = 0;                                                                                                   // 10504\n     *   this.y = 0;                                                                                                   // 10505\n     * }                                                                                                               // 10506\n     *                                                                                                                 // 10507\n     * function Circle() {                                                                                             // 10508\n     *   Shape.call(this);                                                                                             // 10509\n     * }                                                                                                               // 10510\n     *                                                                                                                 // 10511\n     * Circle.prototype = _.create(Shape.prototype, {                                                                  // 10512\n     *   'constructor': Circle                                                                                         // 10513\n     * });                                                                                                             // 10514\n     *                                                                                                                 // 10515\n     * var circle = new Circle;                                                                                        // 10516\n     * circle instanceof Circle;                                                                                       // 10517\n     * // => true                                                                                                      // 10518\n     *                                                                                                                 // 10519\n     * circle instanceof Shape;                                                                                        // 10520\n     * // => true                                                                                                      // 10521\n     */                                                                                                                // 10522\n    function create(prototype, properties) {                                                                           // 10523\n      var result = baseCreate(prototype);                                                                              // 10524\n      return properties ? baseAssign(result, properties) : result;                                                     // 10525\n    }                                                                                                                  // 10526\n                                                                                                                       // 10527\n    /**                                                                                                                // 10528\n     * Assigns own and inherited enumerable properties of source objects to the                                        // 10529\n     * destination object for all destination properties that resolve to `undefined`.                                  // 10530\n     * Source objects are applied from left to right. Once a property is set,                                          // 10531\n     * additional values of the same property are ignored.                                                             // 10532\n     *                                                                                                                 // 10533\n     * **Note:** This method mutates `object`.                                                                         // 10534\n     *                                                                                                                 // 10535\n     * @static                                                                                                         // 10536\n     * @memberOf _                                                                                                     // 10537\n     * @category Object                                                                                                // 10538\n     * @param {Object} object The destination object.                                                                  // 10539\n     * @param {...Object} [sources] The source objects.                                                                // 10540\n     * @returns {Object} Returns `object`.                                                                             // 10541\n     * @example                                                                                                        // 10542\n     *                                                                                                                 // 10543\n     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                            // 10544\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 10545\n     */                                                                                                                // 10546\n    var defaults = rest(function(args) {                                                                               // 10547\n      args.push(undefined, assignInDefaults);                                                                          // 10548\n      return apply(assignInWith, undefined, args);                                                                     // 10549\n    });                                                                                                                // 10550\n                                                                                                                       // 10551\n    /**                                                                                                                // 10552\n     * This method is like `_.defaults` except that it recursively assigns                                             // 10553\n     * default properties.                                                                                             // 10554\n     *                                                                                                                 // 10555\n     * **Note:** This method mutates `object`.                                                                         // 10556\n     *                                                                                                                 // 10557\n     * @static                                                                                                         // 10558\n     * @memberOf _                                                                                                     // 10559\n     * @category Object                                                                                                // 10560\n     * @param {Object} object The destination object.                                                                  // 10561\n     * @param {...Object} [sources] The source objects.                                                                // 10562\n     * @returns {Object} Returns `object`.                                                                             // 10563\n     * @example                                                                                                        // 10564\n     *                                                                                                                 // 10565\n     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });                    // 10566\n     * // => { 'user': { 'name': 'barney', 'age': 36 } }                                                               // 10567\n     *                                                                                                                 // 10568\n     */                                                                                                                // 10569\n    var defaultsDeep = rest(function(args) {                                                                           // 10570\n      args.push(undefined, mergeDefaults);                                                                             // 10571\n      return apply(mergeWith, undefined, args);                                                                        // 10572\n    });                                                                                                                // 10573\n                                                                                                                       // 10574\n    /**                                                                                                                // 10575\n     * This method is like `_.find` except that it returns the key of the first                                        // 10576\n     * element `predicate` returns truthy for instead of the element itself.                                           // 10577\n     *                                                                                                                 // 10578\n     * @static                                                                                                         // 10579\n     * @memberOf _                                                                                                     // 10580\n     * @category Object                                                                                                // 10581\n     * @param {Object} object The object to search.                                                                    // 10582\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 10583\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 10584\n     * @example                                                                                                        // 10585\n     *                                                                                                                 // 10586\n     * var users = {                                                                                                   // 10587\n     *   'barney':  { 'age': 36, 'active': true },                                                                     // 10588\n     *   'fred':    { 'age': 40, 'active': false },                                                                    // 10589\n     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 10590\n     * };                                                                                                              // 10591\n     *                                                                                                                 // 10592\n     * _.findKey(users, function(o) { return o.age < 40; });                                                           // 10593\n     * // => 'barney' (iteration order is not guaranteed)                                                              // 10594\n     *                                                                                                                 // 10595\n     * // using the `_.matches` iteratee shorthand                                                                     // 10596\n     * _.findKey(users, { 'age': 1, 'active': true });                                                                 // 10597\n     * // => 'pebbles'                                                                                                 // 10598\n     *                                                                                                                 // 10599\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 10600\n     * _.findKey(users, ['active', false]);                                                                            // 10601\n     * // => 'fred'                                                                                                    // 10602\n     *                                                                                                                 // 10603\n     * // using the `_.property` iteratee shorthand                                                                    // 10604\n     * _.findKey(users, 'active');                                                                                     // 10605\n     * // => 'barney'                                                                                                  // 10606\n     */                                                                                                                // 10607\n    function findKey(object, predicate) {                                                                              // 10608\n      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);                                            // 10609\n    }                                                                                                                  // 10610\n                                                                                                                       // 10611\n    /**                                                                                                                // 10612\n     * This method is like `_.findKey` except that it iterates over elements of                                        // 10613\n     * a collection in the opposite order.                                                                             // 10614\n     *                                                                                                                 // 10615\n     * @static                                                                                                         // 10616\n     * @memberOf _                                                                                                     // 10617\n     * @category Object                                                                                                // 10618\n     * @param {Object} object The object to search.                                                                    // 10619\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.                      // 10620\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 10621\n     * @example                                                                                                        // 10622\n     *                                                                                                                 // 10623\n     * var users = {                                                                                                   // 10624\n     *   'barney':  { 'age': 36, 'active': true },                                                                     // 10625\n     *   'fred':    { 'age': 40, 'active': false },                                                                    // 10626\n     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 10627\n     * };                                                                                                              // 10628\n     *                                                                                                                 // 10629\n     * _.findLastKey(users, function(o) { return o.age < 40; });                                                       // 10630\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'                                                   // 10631\n     *                                                                                                                 // 10632\n     * // using the `_.matches` iteratee shorthand                                                                     // 10633\n     * _.findLastKey(users, { 'age': 36, 'active': true });                                                            // 10634\n     * // => 'barney'                                                                                                  // 10635\n     *                                                                                                                 // 10636\n     * // using the `_.matchesProperty` iteratee shorthand                                                             // 10637\n     * _.findLastKey(users, ['active', false]);                                                                        // 10638\n     * // => 'fred'                                                                                                    // 10639\n     *                                                                                                                 // 10640\n     * // using the `_.property` iteratee shorthand                                                                    // 10641\n     * _.findLastKey(users, 'active');                                                                                 // 10642\n     * // => 'pebbles'                                                                                                 // 10643\n     */                                                                                                                // 10644\n    function findLastKey(object, predicate) {                                                                          // 10645\n      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);                                       // 10646\n    }                                                                                                                  // 10647\n                                                                                                                       // 10648\n    /**                                                                                                                // 10649\n     * Iterates over own and inherited enumerable properties of an object invoking                                     // 10650\n     * `iteratee` for each property. The iteratee is invoked with three arguments:                                     // 10651\n     * (value, key, object). Iteratee functions may exit iteration early by explicitly                                 // 10652\n     * returning `false`.                                                                                              // 10653\n     *                                                                                                                 // 10654\n     * @static                                                                                                         // 10655\n     * @memberOf _                                                                                                     // 10656\n     * @category Object                                                                                                // 10657\n     * @param {Object} object The object to iterate over.                                                              // 10658\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10659\n     * @returns {Object} Returns `object`.                                                                             // 10660\n     * @example                                                                                                        // 10661\n     *                                                                                                                 // 10662\n     * function Foo() {                                                                                                // 10663\n     *   this.a = 1;                                                                                                   // 10664\n     *   this.b = 2;                                                                                                   // 10665\n     * }                                                                                                               // 10666\n     *                                                                                                                 // 10667\n     * Foo.prototype.c = 3;                                                                                            // 10668\n     *                                                                                                                 // 10669\n     * _.forIn(new Foo, function(value, key) {                                                                         // 10670\n     *   console.log(key);                                                                                             // 10671\n     * });                                                                                                             // 10672\n     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)                                               // 10673\n     */                                                                                                                // 10674\n    function forIn(object, iteratee) {                                                                                 // 10675\n      return object == null ? object : baseFor(object, toFunction(iteratee), keysIn);                                  // 10676\n    }                                                                                                                  // 10677\n                                                                                                                       // 10678\n    /**                                                                                                                // 10679\n     * This method is like `_.forIn` except that it iterates over properties of                                        // 10680\n     * `object` in the opposite order.                                                                                 // 10681\n     *                                                                                                                 // 10682\n     * @static                                                                                                         // 10683\n     * @memberOf _                                                                                                     // 10684\n     * @category Object                                                                                                // 10685\n     * @param {Object} object The object to iterate over.                                                              // 10686\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10687\n     * @returns {Object} Returns `object`.                                                                             // 10688\n     * @example                                                                                                        // 10689\n     *                                                                                                                 // 10690\n     * function Foo() {                                                                                                // 10691\n     *   this.a = 1;                                                                                                   // 10692\n     *   this.b = 2;                                                                                                   // 10693\n     * }                                                                                                               // 10694\n     *                                                                                                                 // 10695\n     * Foo.prototype.c = 3;                                                                                            // 10696\n     *                                                                                                                 // 10697\n     * _.forInRight(new Foo, function(value, key) {                                                                    // 10698\n     *   console.log(key);                                                                                             // 10699\n     * });                                                                                                             // 10700\n     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'                                        // 10701\n     */                                                                                                                // 10702\n    function forInRight(object, iteratee) {                                                                            // 10703\n      return object == null ? object : baseForRight(object, toFunction(iteratee), keysIn);                             // 10704\n    }                                                                                                                  // 10705\n                                                                                                                       // 10706\n    /**                                                                                                                // 10707\n     * Iterates over own enumerable properties of an object invoking `iteratee`                                        // 10708\n     * for each property. The iteratee is invoked with three arguments:                                                // 10709\n     * (value, key, object). Iteratee functions may exit iteration early by                                            // 10710\n     * explicitly returning `false`.                                                                                   // 10711\n     *                                                                                                                 // 10712\n     * @static                                                                                                         // 10713\n     * @memberOf _                                                                                                     // 10714\n     * @category Object                                                                                                // 10715\n     * @param {Object} object The object to iterate over.                                                              // 10716\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10717\n     * @returns {Object} Returns `object`.                                                                             // 10718\n     * @example                                                                                                        // 10719\n     *                                                                                                                 // 10720\n     * function Foo() {                                                                                                // 10721\n     *   this.a = 1;                                                                                                   // 10722\n     *   this.b = 2;                                                                                                   // 10723\n     * }                                                                                                               // 10724\n     *                                                                                                                 // 10725\n     * Foo.prototype.c = 3;                                                                                            // 10726\n     *                                                                                                                 // 10727\n     * _.forOwn(new Foo, function(value, key) {                                                                        // 10728\n     *   console.log(key);                                                                                             // 10729\n     * });                                                                                                             // 10730\n     * // => logs 'a' then 'b' (iteration order is not guaranteed)                                                     // 10731\n     */                                                                                                                // 10732\n    function forOwn(object, iteratee) {                                                                                // 10733\n      return object && baseForOwn(object, toFunction(iteratee));                                                       // 10734\n    }                                                                                                                  // 10735\n                                                                                                                       // 10736\n    /**                                                                                                                // 10737\n     * This method is like `_.forOwn` except that it iterates over properties of                                       // 10738\n     * `object` in the opposite order.                                                                                 // 10739\n     *                                                                                                                 // 10740\n     * @static                                                                                                         // 10741\n     * @memberOf _                                                                                                     // 10742\n     * @category Object                                                                                                // 10743\n     * @param {Object} object The object to iterate over.                                                              // 10744\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10745\n     * @returns {Object} Returns `object`.                                                                             // 10746\n     * @example                                                                                                        // 10747\n     *                                                                                                                 // 10748\n     * function Foo() {                                                                                                // 10749\n     *   this.a = 1;                                                                                                   // 10750\n     *   this.b = 2;                                                                                                   // 10751\n     * }                                                                                                               // 10752\n     *                                                                                                                 // 10753\n     * Foo.prototype.c = 3;                                                                                            // 10754\n     *                                                                                                                 // 10755\n     * _.forOwnRight(new Foo, function(value, key) {                                                                   // 10756\n     *   console.log(key);                                                                                             // 10757\n     * });                                                                                                             // 10758\n     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'                                                   // 10759\n     */                                                                                                                // 10760\n    function forOwnRight(object, iteratee) {                                                                           // 10761\n      return object && baseForOwnRight(object, toFunction(iteratee));                                                  // 10762\n    }                                                                                                                  // 10763\n                                                                                                                       // 10764\n    /**                                                                                                                // 10765\n     * Creates an array of function property names from own enumerable properties                                      // 10766\n     * of `object`.                                                                                                    // 10767\n     *                                                                                                                 // 10768\n     * @static                                                                                                         // 10769\n     * @memberOf _                                                                                                     // 10770\n     * @category Object                                                                                                // 10771\n     * @param {Object} object The object to inspect.                                                                   // 10772\n     * @returns {Array} Returns the new array of property names.                                                       // 10773\n     * @example                                                                                                        // 10774\n     *                                                                                                                 // 10775\n     * function Foo() {                                                                                                // 10776\n     *   this.a = _.constant('a');                                                                                     // 10777\n     *   this.b = _.constant('b');                                                                                     // 10778\n     * }                                                                                                               // 10779\n     *                                                                                                                 // 10780\n     * Foo.prototype.c = _.constant('c');                                                                              // 10781\n     *                                                                                                                 // 10782\n     * _.functions(new Foo);                                                                                           // 10783\n     * // => ['a', 'b']                                                                                                // 10784\n     */                                                                                                                // 10785\n    function functions(object) {                                                                                       // 10786\n      return object == null ? [] : baseFunctions(object, keys(object));                                                // 10787\n    }                                                                                                                  // 10788\n                                                                                                                       // 10789\n    /**                                                                                                                // 10790\n     * Creates an array of function property names from own and inherited                                              // 10791\n     * enumerable properties of `object`.                                                                              // 10792\n     *                                                                                                                 // 10793\n     * @static                                                                                                         // 10794\n     * @memberOf _                                                                                                     // 10795\n     * @category Object                                                                                                // 10796\n     * @param {Object} object The object to inspect.                                                                   // 10797\n     * @returns {Array} Returns the new array of property names.                                                       // 10798\n     * @example                                                                                                        // 10799\n     *                                                                                                                 // 10800\n     * function Foo() {                                                                                                // 10801\n     *   this.a = _.constant('a');                                                                                     // 10802\n     *   this.b = _.constant('b');                                                                                     // 10803\n     * }                                                                                                               // 10804\n     *                                                                                                                 // 10805\n     * Foo.prototype.c = _.constant('c');                                                                              // 10806\n     *                                                                                                                 // 10807\n     * _.functionsIn(new Foo);                                                                                         // 10808\n     * // => ['a', 'b', 'c']                                                                                           // 10809\n     */                                                                                                                // 10810\n    function functionsIn(object) {                                                                                     // 10811\n      return object == null ? [] : baseFunctions(object, keysIn(object));                                              // 10812\n    }                                                                                                                  // 10813\n                                                                                                                       // 10814\n    /**                                                                                                                // 10815\n     * Gets the value at `path` of `object`. If the resolved value is                                                  // 10816\n     * `undefined` the `defaultValue` is used in its place.                                                            // 10817\n     *                                                                                                                 // 10818\n     * @static                                                                                                         // 10819\n     * @memberOf _                                                                                                     // 10820\n     * @category Object                                                                                                // 10821\n     * @param {Object} object The object to query.                                                                     // 10822\n     * @param {Array|string} path The path of the property to get.                                                     // 10823\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 10824\n     * @returns {*} Returns the resolved value.                                                                        // 10825\n     * @example                                                                                                        // 10826\n     *                                                                                                                 // 10827\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 10828\n     *                                                                                                                 // 10829\n     * _.get(object, 'a[0].b.c');                                                                                      // 10830\n     * // => 3                                                                                                         // 10831\n     *                                                                                                                 // 10832\n     * _.get(object, ['a', '0', 'b', 'c']);                                                                            // 10833\n     * // => 3                                                                                                         // 10834\n     *                                                                                                                 // 10835\n     * _.get(object, 'a.b.c', 'default');                                                                              // 10836\n     * // => 'default'                                                                                                 // 10837\n     */                                                                                                                // 10838\n    function get(object, path, defaultValue) {                                                                         // 10839\n      var result = object == null ? undefined : baseGet(object, path);                                                 // 10840\n      return result === undefined ? defaultValue : result;                                                             // 10841\n    }                                                                                                                  // 10842\n                                                                                                                       // 10843\n    /**                                                                                                                // 10844\n     * Checks if `path` is a direct property of `object`.                                                              // 10845\n     *                                                                                                                 // 10846\n     * @static                                                                                                         // 10847\n     * @memberOf _                                                                                                     // 10848\n     * @category Object                                                                                                // 10849\n     * @param {Object} object The object to query.                                                                     // 10850\n     * @param {Array|string} path The path to check.                                                                   // 10851\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.                                               // 10852\n     * @example                                                                                                        // 10853\n     *                                                                                                                 // 10854\n     * var object = { 'a': { 'b': { 'c': 3 } } };                                                                      // 10855\n     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });                                         // 10856\n     *                                                                                                                 // 10857\n     * _.has(object, 'a');                                                                                             // 10858\n     * // => true                                                                                                      // 10859\n     *                                                                                                                 // 10860\n     * _.has(object, 'a.b.c');                                                                                         // 10861\n     * // => true                                                                                                      // 10862\n     *                                                                                                                 // 10863\n     * _.has(object, ['a', 'b', 'c']);                                                                                 // 10864\n     * // => true                                                                                                      // 10865\n     *                                                                                                                 // 10866\n     * _.has(other, 'a');                                                                                              // 10867\n     * // => false                                                                                                     // 10868\n     */                                                                                                                // 10869\n    function has(object, path) {                                                                                       // 10870\n      return hasPath(object, path, baseHas);                                                                           // 10871\n    }                                                                                                                  // 10872\n                                                                                                                       // 10873\n    /**                                                                                                                // 10874\n     * Checks if `path` is a direct or inherited property of `object`.                                                 // 10875\n     *                                                                                                                 // 10876\n     * @static                                                                                                         // 10877\n     * @memberOf _                                                                                                     // 10878\n     * @category Object                                                                                                // 10879\n     * @param {Object} object The object to query.                                                                     // 10880\n     * @param {Array|string} path The path to check.                                                                   // 10881\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.                                               // 10882\n     * @example                                                                                                        // 10883\n     *                                                                                                                 // 10884\n     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });                                        // 10885\n     *                                                                                                                 // 10886\n     * _.hasIn(object, 'a');                                                                                           // 10887\n     * // => true                                                                                                      // 10888\n     *                                                                                                                 // 10889\n     * _.hasIn(object, 'a.b.c');                                                                                       // 10890\n     * // => true                                                                                                      // 10891\n     *                                                                                                                 // 10892\n     * _.hasIn(object, ['a', 'b', 'c']);                                                                               // 10893\n     * // => true                                                                                                      // 10894\n     *                                                                                                                 // 10895\n     * _.hasIn(object, 'b');                                                                                           // 10896\n     * // => false                                                                                                     // 10897\n     */                                                                                                                // 10898\n    function hasIn(object, path) {                                                                                     // 10899\n      return hasPath(object, path, baseHasIn);                                                                         // 10900\n    }                                                                                                                  // 10901\n                                                                                                                       // 10902\n    /**                                                                                                                // 10903\n     * Creates an object composed of the inverted keys and values of `object`.                                         // 10904\n     * If `object` contains duplicate values, subsequent values overwrite property                                     // 10905\n     * assignments of previous values unless `multiVal` is `true`.                                                     // 10906\n     *                                                                                                                 // 10907\n     * @static                                                                                                         // 10908\n     * @memberOf _                                                                                                     // 10909\n     * @category Object                                                                                                // 10910\n     * @param {Object} object The object to invert.                                                                    // 10911\n     * @param {boolean} [multiVal] Allow multiple values per key.                                                      // 10912\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 10913\n     * @returns {Object} Returns the new inverted object.                                                              // 10914\n     * @example                                                                                                        // 10915\n     *                                                                                                                 // 10916\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };                                                                        // 10917\n     *                                                                                                                 // 10918\n     * _.invert(object);                                                                                               // 10919\n     * // => { '1': 'c', '2': 'b' }                                                                                    // 10920\n     *                                                                                                                 // 10921\n     * // with `multiVal`                                                                                              // 10922\n     * _.invert(object, true);                                                                                         // 10923\n     * // => { '1': ['a', 'c'], '2': ['b'] }                                                                           // 10924\n     */                                                                                                                // 10925\n    function invert(object, multiVal, guard) {                                                                         // 10926\n      return arrayReduce(keys(object), function(result, key) {                                                         // 10927\n        var value = object[key];                                                                                       // 10928\n        if (multiVal && !guard) {                                                                                      // 10929\n          if (hasOwnProperty.call(result, value)) {                                                                    // 10930\n            result[value].push(key);                                                                                   // 10931\n          } else {                                                                                                     // 10932\n            result[value] = [key];                                                                                     // 10933\n          }                                                                                                            // 10934\n        }                                                                                                              // 10935\n        else {                                                                                                         // 10936\n          result[value] = key;                                                                                         // 10937\n        }                                                                                                              // 10938\n        return result;                                                                                                 // 10939\n      }, {});                                                                                                          // 10940\n    }                                                                                                                  // 10941\n                                                                                                                       // 10942\n    /**                                                                                                                // 10943\n     * Invokes the method at `path` of `object`.                                                                       // 10944\n     *                                                                                                                 // 10945\n     * @static                                                                                                         // 10946\n     * @memberOf _                                                                                                     // 10947\n     * @category Object                                                                                                // 10948\n     * @param {Object} object The object to query.                                                                     // 10949\n     * @param {Array|string} path The path of the method to invoke.                                                    // 10950\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 10951\n     * @returns {*} Returns the result of the invoked method.                                                          // 10952\n     * @example                                                                                                        // 10953\n     *                                                                                                                 // 10954\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };                                                         // 10955\n     *                                                                                                                 // 10956\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);                                                                       // 10957\n     * // => [2, 3]                                                                                                    // 10958\n     */                                                                                                                // 10959\n    var invoke = rest(baseInvoke);                                                                                     // 10960\n                                                                                                                       // 10961\n    /**                                                                                                                // 10962\n     * Creates an array of the own enumerable property names of `object`.                                              // 10963\n     *                                                                                                                 // 10964\n     * **Note:** Non-object values are coerced to objects. See the                                                     // 10965\n     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)                                          // 10966\n     * for more details.                                                                                               // 10967\n     *                                                                                                                 // 10968\n     * @static                                                                                                         // 10969\n     * @memberOf _                                                                                                     // 10970\n     * @category Object                                                                                                // 10971\n     * @param {Object} object The object to query.                                                                     // 10972\n     * @returns {Array} Returns the array of property names.                                                           // 10973\n     * @example                                                                                                        // 10974\n     *                                                                                                                 // 10975\n     * function Foo() {                                                                                                // 10976\n     *   this.a = 1;                                                                                                   // 10977\n     *   this.b = 2;                                                                                                   // 10978\n     * }                                                                                                               // 10979\n     *                                                                                                                 // 10980\n     * Foo.prototype.c = 3;                                                                                            // 10981\n     *                                                                                                                 // 10982\n     * _.keys(new Foo);                                                                                                // 10983\n     * // => ['a', 'b'] (iteration order is not guaranteed)                                                            // 10984\n     *                                                                                                                 // 10985\n     * _.keys('hi');                                                                                                   // 10986\n     * // => ['0', '1']                                                                                                // 10987\n     */                                                                                                                // 10988\n    function keys(object) {                                                                                            // 10989\n      var isProto = isPrototype(object);                                                                               // 10990\n      if (!(isProto || isArrayLike(object))) {                                                                         // 10991\n        return baseKeys(object);                                                                                       // 10992\n      }                                                                                                                // 10993\n      var indexes = indexKeys(object),                                                                                 // 10994\n          skipIndexes = !!indexes,                                                                                     // 10995\n          result = indexes || [],                                                                                      // 10996\n          length = result.length;                                                                                      // 10997\n                                                                                                                       // 10998\n      for (var key in object) {                                                                                        // 10999\n        if (baseHas(object, key) &&                                                                                    // 11000\n            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&                                             // 11001\n            !(isProto && key == 'constructor')) {                                                                      // 11002\n          result.push(key);                                                                                            // 11003\n        }                                                                                                              // 11004\n      }                                                                                                                // 11005\n      return result;                                                                                                   // 11006\n    }                                                                                                                  // 11007\n                                                                                                                       // 11008\n    /**                                                                                                                // 11009\n     * Creates an array of the own and inherited enumerable property names of `object`.                                // 11010\n     *                                                                                                                 // 11011\n     * **Note:** Non-object values are coerced to objects.                                                             // 11012\n     *                                                                                                                 // 11013\n     * @static                                                                                                         // 11014\n     * @memberOf _                                                                                                     // 11015\n     * @category Object                                                                                                // 11016\n     * @param {Object} object The object to query.                                                                     // 11017\n     * @returns {Array} Returns the array of property names.                                                           // 11018\n     * @example                                                                                                        // 11019\n     *                                                                                                                 // 11020\n     * function Foo() {                                                                                                // 11021\n     *   this.a = 1;                                                                                                   // 11022\n     *   this.b = 2;                                                                                                   // 11023\n     * }                                                                                                               // 11024\n     *                                                                                                                 // 11025\n     * Foo.prototype.c = 3;                                                                                            // 11026\n     *                                                                                                                 // 11027\n     * _.keysIn(new Foo);                                                                                              // 11028\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)                                                       // 11029\n     */                                                                                                                // 11030\n    function keysIn(object) {                                                                                          // 11031\n      var index = -1,                                                                                                  // 11032\n          isProto = isPrototype(object),                                                                               // 11033\n          props = baseKeysIn(object),                                                                                  // 11034\n          propsLength = props.length,                                                                                  // 11035\n          indexes = indexKeys(object),                                                                                 // 11036\n          skipIndexes = !!indexes,                                                                                     // 11037\n          result = indexes || [],                                                                                      // 11038\n          length = result.length;                                                                                      // 11039\n                                                                                                                       // 11040\n      while (++index < propsLength) {                                                                                  // 11041\n        var key = props[index];                                                                                        // 11042\n        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&                                             // 11043\n            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                               // 11044\n          result.push(key);                                                                                            // 11045\n        }                                                                                                              // 11046\n      }                                                                                                                // 11047\n      return result;                                                                                                   // 11048\n    }                                                                                                                  // 11049\n                                                                                                                       // 11050\n    /**                                                                                                                // 11051\n     * The opposite of `_.mapValues`; this method creates an object with the                                           // 11052\n     * same values as `object` and keys generated by running each own enumerable                                       // 11053\n     * property of `object` through `iteratee`.                                                                        // 11054\n     *                                                                                                                 // 11055\n     * @static                                                                                                         // 11056\n     * @memberOf _                                                                                                     // 11057\n     * @category Object                                                                                                // 11058\n     * @param {Object} object The object to iterate over.                                                              // 11059\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 11060\n     * @returns {Object} Returns the new mapped object.                                                                // 11061\n     * @example                                                                                                        // 11062\n     *                                                                                                                 // 11063\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {                                                            // 11064\n     *   return key + value;                                                                                           // 11065\n     * });                                                                                                             // 11066\n     * // => { 'a1': 1, 'b2': 2 }                                                                                      // 11067\n     */                                                                                                                // 11068\n    function mapKeys(object, iteratee) {                                                                               // 11069\n      var result = {};                                                                                                 // 11070\n      iteratee = getIteratee(iteratee, 3);                                                                             // 11071\n                                                                                                                       // 11072\n      baseForOwn(object, function(value, key, object) {                                                                // 11073\n        result[iteratee(value, key, object)] = value;                                                                  // 11074\n      });                                                                                                              // 11075\n      return result;                                                                                                   // 11076\n    }                                                                                                                  // 11077\n                                                                                                                       // 11078\n    /**                                                                                                                // 11079\n     * Creates an object with the same keys as `object` and values generated by                                        // 11080\n     * running each own enumerable property of `object` through `iteratee`. The                                        // 11081\n     * iteratee function is invoked with three arguments: (value, key, object).                                        // 11082\n     *                                                                                                                 // 11083\n     * @static                                                                                                         // 11084\n     * @memberOf _                                                                                                     // 11085\n     * @category Object                                                                                                // 11086\n     * @param {Object} object The object to iterate over.                                                              // 11087\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.                       // 11088\n     * @returns {Object} Returns the new mapped object.                                                                // 11089\n     * @example                                                                                                        // 11090\n     *                                                                                                                 // 11091\n     * var users = {                                                                                                   // 11092\n     *   'fred':    { 'user': 'fred',    'age': 40 },                                                                  // 11093\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }                                                                    // 11094\n     * };                                                                                                              // 11095\n     *                                                                                                                 // 11096\n     * _.mapValues(users, function(o) { return o.age; });                                                              // 11097\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                          // 11098\n     *                                                                                                                 // 11099\n     * // using the `_.property` iteratee shorthand                                                                    // 11100\n     * _.mapValues(users, 'age');                                                                                      // 11101\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                          // 11102\n     */                                                                                                                // 11103\n    function mapValues(object, iteratee) {                                                                             // 11104\n      var result = {};                                                                                                 // 11105\n      iteratee = getIteratee(iteratee, 3);                                                                             // 11106\n                                                                                                                       // 11107\n      baseForOwn(object, function(value, key, object) {                                                                // 11108\n        result[key] = iteratee(value, key, object);                                                                    // 11109\n      });                                                                                                              // 11110\n      return result;                                                                                                   // 11111\n    }                                                                                                                  // 11112\n                                                                                                                       // 11113\n    /**                                                                                                                // 11114\n     * Recursively merges own and inherited enumerable properties of source                                            // 11115\n     * objects into the destination object, skipping source properties that resolve                                    // 11116\n     * to `undefined`. Array and plain object properties are merged recursively.                                       // 11117\n     * Other objects and value types are overridden by assignment. Source objects                                      // 11118\n     * are applied from left to right. Subsequent sources overwrite property                                           // 11119\n     * assignments of previous sources.                                                                                // 11120\n     *                                                                                                                 // 11121\n     * **Note:** This method mutates `object`.                                                                         // 11122\n     *                                                                                                                 // 11123\n     * @static                                                                                                         // 11124\n     * @memberOf _                                                                                                     // 11125\n     * @category Object                                                                                                // 11126\n     * @param {Object} object The destination object.                                                                  // 11127\n     * @param {...Object} [sources] The source objects.                                                                // 11128\n     * @returns {Object} Returns `object`.                                                                             // 11129\n     * @example                                                                                                        // 11130\n     *                                                                                                                 // 11131\n     * var users = {                                                                                                   // 11132\n     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]                                                            // 11133\n     * };                                                                                                              // 11134\n     *                                                                                                                 // 11135\n     * var ages = {                                                                                                    // 11136\n     *   'data': [{ 'age': 36 }, { 'age': 40 }]                                                                        // 11137\n     * };                                                                                                              // 11138\n     *                                                                                                                 // 11139\n     * _.merge(users, ages);                                                                                           // 11140\n     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }                              // 11141\n     */                                                                                                                // 11142\n    var merge = createAssigner(function(object, source) {                                                              // 11143\n      baseMerge(object, source);                                                                                       // 11144\n    });                                                                                                                // 11145\n                                                                                                                       // 11146\n    /**                                                                                                                // 11147\n     * This method is like `_.merge` except that it accepts `customizer` which                                         // 11148\n     * is invoked to produce the merged values of the destination and source                                           // 11149\n     * properties. If `customizer` returns `undefined` merging is handled by the                                       // 11150\n     * method instead. The `customizer` is invoked with seven arguments:                                               // 11151\n     * (objValue, srcValue, key, object, source, stack).                                                               // 11152\n     *                                                                                                                 // 11153\n     * @static                                                                                                         // 11154\n     * @memberOf _                                                                                                     // 11155\n     * @category Object                                                                                                // 11156\n     * @param {Object} object The destination object.                                                                  // 11157\n     * @param {...Object} sources The source objects.                                                                  // 11158\n     * @param {Function} customizer The function to customize assigned values.                                         // 11159\n     * @returns {Object} Returns `object`.                                                                             // 11160\n     * @example                                                                                                        // 11161\n     *                                                                                                                 // 11162\n     * function customizer(objValue, srcValue) {                                                                       // 11163\n     *   if (_.isArray(objValue)) {                                                                                    // 11164\n     *     return objValue.concat(srcValue);                                                                           // 11165\n     *   }                                                                                                             // 11166\n     * }                                                                                                               // 11167\n     *                                                                                                                 // 11168\n     * var object = {                                                                                                  // 11169\n     *   'fruits': ['apple'],                                                                                          // 11170\n     *   'vegetables': ['beet']                                                                                        // 11171\n     * };                                                                                                              // 11172\n     *                                                                                                                 // 11173\n     * var other = {                                                                                                   // 11174\n     *   'fruits': ['banana'],                                                                                         // 11175\n     *   'vegetables': ['carrot']                                                                                      // 11176\n     * };                                                                                                              // 11177\n     *                                                                                                                 // 11178\n     * _.mergeWith(object, other, customizer);                                                                         // 11179\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }                                       // 11180\n     */                                                                                                                // 11181\n    var mergeWith = createAssigner(function(object, source, customizer) {                                              // 11182\n      baseMerge(object, source, customizer);                                                                           // 11183\n    });                                                                                                                // 11184\n                                                                                                                       // 11185\n    /**                                                                                                                // 11186\n     * The opposite of `_.pick`; this method creates an object composed of the                                         // 11187\n     * own and inherited enumerable properties of `object` that are not omitted.                                       // 11188\n     *                                                                                                                 // 11189\n     * @static                                                                                                         // 11190\n     * @memberOf _                                                                                                     // 11191\n     * @category Object                                                                                                // 11192\n     * @param {Object} object The source object.                                                                       // 11193\n     * @param {...(string|string[])} [props] The property names to omit, specified                                     // 11194\n     *  individually or in arrays..                                                                                    // 11195\n     * @returns {Object} Returns the new object.                                                                       // 11196\n     * @example                                                                                                        // 11197\n     *                                                                                                                 // 11198\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                      // 11199\n     *                                                                                                                 // 11200\n     * _.omit(object, ['a', 'c']);                                                                                     // 11201\n     * // => { 'b': '2' }                                                                                              // 11202\n     */                                                                                                                // 11203\n    var omit = rest(function(object, props) {                                                                          // 11204\n      if (object == null) {                                                                                            // 11205\n        return {};                                                                                                     // 11206\n      }                                                                                                                // 11207\n      props = arrayMap(baseFlatten(props), String);                                                                    // 11208\n      return basePick(object, baseDifference(keysIn(object), props));                                                  // 11209\n    });                                                                                                                // 11210\n                                                                                                                       // 11211\n    /**                                                                                                                // 11212\n     * The opposite of `_.pickBy`; this method creates an object composed of the                                       // 11213\n     * own and inherited enumerable properties of `object` that `predicate`                                            // 11214\n     * doesn't return truthy for.                                                                                      // 11215\n     *                                                                                                                 // 11216\n     * @static                                                                                                         // 11217\n     * @memberOf _                                                                                                     // 11218\n     * @category Object                                                                                                // 11219\n     * @param {Object} object The source object.                                                                       // 11220\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.                       // 11221\n     * @returns {Object} Returns the new object.                                                                       // 11222\n     * @example                                                                                                        // 11223\n     *                                                                                                                 // 11224\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                      // 11225\n     *                                                                                                                 // 11226\n     * _.omitBy(object, _.isNumber);                                                                                   // 11227\n     * // => { 'b': '2' }                                                                                              // 11228\n     */                                                                                                                // 11229\n    function omitBy(object, predicate) {                                                                               // 11230\n      predicate = getIteratee(predicate);                                                                              // 11231\n      return basePickBy(object, function(value) {                                                                      // 11232\n        return !predicate(value);                                                                                      // 11233\n      });                                                                                                              // 11234\n    }                                                                                                                  // 11235\n                                                                                                                       // 11236\n    /**                                                                                                                // 11237\n     * Creates an object composed of the picked `object` properties.                                                   // 11238\n     *                                                                                                                 // 11239\n     * @static                                                                                                         // 11240\n     * @memberOf _                                                                                                     // 11241\n     * @category Object                                                                                                // 11242\n     * @param {Object} object The source object.                                                                       // 11243\n     * @param {...(string|string[])} [props] The property names to pick, specified                                     // 11244\n     *  individually or in arrays.                                                                                     // 11245\n     * @returns {Object} Returns the new object.                                                                       // 11246\n     * @example                                                                                                        // 11247\n     *                                                                                                                 // 11248\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                      // 11249\n     *                                                                                                                 // 11250\n     * _.pick(object, ['a', 'c']);                                                                                     // 11251\n     * // => { 'a': 1, 'c': 3 }                                                                                        // 11252\n     */                                                                                                                // 11253\n    var pick = rest(function(object, props) {                                                                          // 11254\n      return object == null ? {} : basePick(object, baseFlatten(props));                                               // 11255\n    });                                                                                                                // 11256\n                                                                                                                       // 11257\n    /**                                                                                                                // 11258\n     * Creates an object composed of the `object` properties `predicate` returns                                       // 11259\n     * truthy for. The predicate is invoked with one argument: (value).                                                // 11260\n     *                                                                                                                 // 11261\n     * @static                                                                                                         // 11262\n     * @memberOf _                                                                                                     // 11263\n     * @category Object                                                                                                // 11264\n     * @param {Object} object The source object.                                                                       // 11265\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.                       // 11266\n     * @returns {Object} Returns the new object.                                                                       // 11267\n     * @example                                                                                                        // 11268\n     *                                                                                                                 // 11269\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };                                                                      // 11270\n     *                                                                                                                 // 11271\n     * _.pickBy(object, _.isNumber);                                                                                   // 11272\n     * // => { 'a': 1, 'c': 3 }                                                                                        // 11273\n     */                                                                                                                // 11274\n    function pickBy(object, predicate) {                                                                               // 11275\n      return object == null ? {} : basePickBy(object, getIteratee(predicate));                                         // 11276\n    }                                                                                                                  // 11277\n                                                                                                                       // 11278\n    /**                                                                                                                // 11279\n     * This method is like `_.get` except that if the resolved value is a function                                     // 11280\n     * it's invoked with the `this` binding of its parent object and its result                                        // 11281\n     * is returned.                                                                                                    // 11282\n     *                                                                                                                 // 11283\n     * @static                                                                                                         // 11284\n     * @memberOf _                                                                                                     // 11285\n     * @category Object                                                                                                // 11286\n     * @param {Object} object The object to query.                                                                     // 11287\n     * @param {Array|string} path The path of the property to resolve.                                                 // 11288\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 11289\n     * @returns {*} Returns the resolved value.                                                                        // 11290\n     * @example                                                                                                        // 11291\n     *                                                                                                                 // 11292\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };                                              // 11293\n     *                                                                                                                 // 11294\n     * _.result(object, 'a[0].b.c1');                                                                                  // 11295\n     * // => 3                                                                                                         // 11296\n     *                                                                                                                 // 11297\n     * _.result(object, 'a[0].b.c2');                                                                                  // 11298\n     * // => 4                                                                                                         // 11299\n     *                                                                                                                 // 11300\n     * _.result(object, 'a[0].b.c3', 'default');                                                                       // 11301\n     * // => 'default'                                                                                                 // 11302\n     *                                                                                                                 // 11303\n     * _.result(object, 'a[0].b.c3', _.constant('default'));                                                           // 11304\n     * // => 'default'                                                                                                 // 11305\n     */                                                                                                                // 11306\n    function result(object, path, defaultValue) {                                                                      // 11307\n      if (!isKey(path, object)) {                                                                                      // 11308\n        path = baseToPath(path);                                                                                       // 11309\n        var result = get(object, path);                                                                                // 11310\n        object = parent(object, path);                                                                                 // 11311\n      } else {                                                                                                         // 11312\n        result = object == null ? undefined : object[path];                                                            // 11313\n      }                                                                                                                // 11314\n      if (result === undefined) {                                                                                      // 11315\n        result = defaultValue;                                                                                         // 11316\n      }                                                                                                                // 11317\n      return isFunction(result) ? result.call(object) : result;                                                        // 11318\n    }                                                                                                                  // 11319\n                                                                                                                       // 11320\n    /**                                                                                                                // 11321\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist                                      // 11322\n     * it's created. Arrays are created for missing index properties while objects                                     // 11323\n     * are created for all other missing properties. Use `_.setWith` to customize                                      // 11324\n     * `path` creation.                                                                                                // 11325\n     *                                                                                                                 // 11326\n     * @static                                                                                                         // 11327\n     * @memberOf _                                                                                                     // 11328\n     * @category Object                                                                                                // 11329\n     * @param {Object} object The object to modify.                                                                    // 11330\n     * @param {Array|string} path The path of the property to set.                                                     // 11331\n     * @param {*} value The value to set.                                                                              // 11332\n     * @returns {Object} Returns `object`.                                                                             // 11333\n     * @example                                                                                                        // 11334\n     *                                                                                                                 // 11335\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 11336\n     *                                                                                                                 // 11337\n     * _.set(object, 'a[0].b.c', 4);                                                                                   // 11338\n     * console.log(object.a[0].b.c);                                                                                   // 11339\n     * // => 4                                                                                                         // 11340\n     *                                                                                                                 // 11341\n     * _.set(object, 'x[0].y.z', 5);                                                                                   // 11342\n     * console.log(object.x[0].y.z);                                                                                   // 11343\n     * // => 5                                                                                                         // 11344\n     */                                                                                                                // 11345\n    function set(object, path, value) {                                                                                // 11346\n      return object == null ? object : baseSet(object, path, value);                                                   // 11347\n    }                                                                                                                  // 11348\n                                                                                                                       // 11349\n    /**                                                                                                                // 11350\n     * This method is like `_.set` except that it accepts `customizer` which is                                        // 11351\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`                                  // 11352\n     * path creation is handled by the method instead. The `customizer` is invoked                                     // 11353\n     * with three arguments: (nsValue, key, nsObject).                                                                 // 11354\n     *                                                                                                                 // 11355\n     * @static                                                                                                         // 11356\n     * @memberOf _                                                                                                     // 11357\n     * @category Object                                                                                                // 11358\n     * @param {Object} object The object to modify.                                                                    // 11359\n     * @param {Array|string} path The path of the property to set.                                                     // 11360\n     * @param {*} value The value to set.                                                                              // 11361\n     * @param {Function} [customizer] The function to customize assigned values.                                       // 11362\n     * @returns {Object} Returns `object`.                                                                             // 11363\n     * @example                                                                                                        // 11364\n     *                                                                                                                 // 11365\n     * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);                                                    // 11366\n     * // => { '0': { '1': { '2': 3 }, 'length': 2 } }                                                                 // 11367\n     */                                                                                                                // 11368\n    function setWith(object, path, value, customizer) {                                                                // 11369\n      customizer = typeof customizer == 'function' ? customizer : undefined;                                           // 11370\n      return object == null ? object : baseSet(object, path, value, customizer);                                       // 11371\n    }                                                                                                                  // 11372\n                                                                                                                       // 11373\n    /**                                                                                                                // 11374\n     * Creates an array of own enumerable key-value pairs for `object`.                                                // 11375\n     *                                                                                                                 // 11376\n     * @static                                                                                                         // 11377\n     * @memberOf _                                                                                                     // 11378\n     * @category Object                                                                                                // 11379\n     * @param {Object} object The object to query.                                                                     // 11380\n     * @returns {Array} Returns the new array of key-value pairs.                                                      // 11381\n     * @example                                                                                                        // 11382\n     *                                                                                                                 // 11383\n     * function Foo() {                                                                                                // 11384\n     *   this.a = 1;                                                                                                   // 11385\n     *   this.b = 2;                                                                                                   // 11386\n     * }                                                                                                               // 11387\n     *                                                                                                                 // 11388\n     * Foo.prototype.c = 3;                                                                                            // 11389\n     *                                                                                                                 // 11390\n     * _.toPairs(new Foo);                                                                                             // 11391\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)                                                  // 11392\n     */                                                                                                                // 11393\n    function toPairs(object) {                                                                                         // 11394\n      return baseToPairs(object, keys(object));                                                                        // 11395\n    }                                                                                                                  // 11396\n                                                                                                                       // 11397\n    /**                                                                                                                // 11398\n     * Creates an array of own and inherited enumerable key-value pairs for `object`.                                  // 11399\n     *                                                                                                                 // 11400\n     * @static                                                                                                         // 11401\n     * @memberOf _                                                                                                     // 11402\n     * @category Object                                                                                                // 11403\n     * @param {Object} object The object to query.                                                                     // 11404\n     * @returns {Array} Returns the new array of key-value pairs.                                                      // 11405\n     * @example                                                                                                        // 11406\n     *                                                                                                                 // 11407\n     * function Foo() {                                                                                                // 11408\n     *   this.a = 1;                                                                                                   // 11409\n     *   this.b = 2;                                                                                                   // 11410\n     * }                                                                                                               // 11411\n     *                                                                                                                 // 11412\n     * Foo.prototype.c = 3;                                                                                            // 11413\n     *                                                                                                                 // 11414\n     * _.toPairsIn(new Foo);                                                                                           // 11415\n     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)                                        // 11416\n     */                                                                                                                // 11417\n    function toPairsIn(object) {                                                                                       // 11418\n      return baseToPairs(object, keysIn(object));                                                                      // 11419\n    }                                                                                                                  // 11420\n                                                                                                                       // 11421\n    /**                                                                                                                // 11422\n     * An alternative to `_.reduce`; this method transforms `object` to a new                                          // 11423\n     * `accumulator` object which is the result of running each of its own enumerable                                  // 11424\n     * properties through `iteratee`, with each invocation potentially mutating                                        // 11425\n     * the `accumulator` object. The iteratee is invoked with four arguments:                                          // 11426\n     * (accumulator, value, key, object). Iteratee functions may exit iteration                                        // 11427\n     * early by explicitly returning `false`.                                                                          // 11428\n     *                                                                                                                 // 11429\n     * @static                                                                                                         // 11430\n     * @memberOf _                                                                                                     // 11431\n     * @category Object                                                                                                // 11432\n     * @param {Array|Object} object The object to iterate over.                                                        // 11433\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 11434\n     * @param {*} [accumulator] The custom accumulator value.                                                          // 11435\n     * @returns {*} Returns the accumulated value.                                                                     // 11436\n     * @example                                                                                                        // 11437\n     *                                                                                                                 // 11438\n     * _.transform([2, 3, 4], function(result, n) {                                                                    // 11439\n     *   result.push(n *= n);                                                                                          // 11440\n     *   return n % 2 == 0;                                                                                            // 11441\n     * });                                                                                                             // 11442\n     * // => [4, 9]                                                                                                    // 11443\n     *                                                                                                                 // 11444\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {                                          // 11445\n     *   (result[value] || (result[value] = [])).push(key);                                                            // 11446\n     * });                                                                                                             // 11447\n     * // => { '1': ['a', 'c'], '2': ['b'] }                                                                           // 11448\n     */                                                                                                                // 11449\n    function transform(object, iteratee, accumulator) {                                                                // 11450\n      var isArr = isArray(object) || isTypedArray(object);                                                             // 11451\n      iteratee = getIteratee(iteratee, 4);                                                                             // 11452\n                                                                                                                       // 11453\n      if (accumulator == null) {                                                                                       // 11454\n        if (isArr || isObject(object)) {                                                                               // 11455\n          var Ctor = object.constructor;                                                                               // 11456\n          if (isArr) {                                                                                                 // 11457\n            accumulator = isArray(object) ? new Ctor : [];                                                             // 11458\n          } else {                                                                                                     // 11459\n            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);                                   // 11460\n          }                                                                                                            // 11461\n        } else {                                                                                                       // 11462\n          accumulator = {};                                                                                            // 11463\n        }                                                                                                              // 11464\n      }                                                                                                                // 11465\n      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {                                        // 11466\n        return iteratee(accumulator, value, index, object);                                                            // 11467\n      });                                                                                                              // 11468\n      return accumulator;                                                                                              // 11469\n    }                                                                                                                  // 11470\n                                                                                                                       // 11471\n    /**                                                                                                                // 11472\n     * Removes the property at `path` of `object`.                                                                     // 11473\n     *                                                                                                                 // 11474\n     * @static                                                                                                         // 11475\n     * @memberOf _                                                                                                     // 11476\n     * @category Object                                                                                                // 11477\n     * @param {Object} object The object to modify.                                                                    // 11478\n     * @param {Array|string} path The path of the property to unset.                                                   // 11479\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.                                     // 11480\n     * @example                                                                                                        // 11481\n     *                                                                                                                 // 11482\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };                                                                    // 11483\n     * _.unset(object, 'a[0].b.c');                                                                                    // 11484\n     * // => true                                                                                                      // 11485\n     *                                                                                                                 // 11486\n     * console.log(object);                                                                                            // 11487\n     * // => { 'a': [{ 'b': {} }] };                                                                                   // 11488\n     *                                                                                                                 // 11489\n     * _.unset(object, 'a[0].b.c');                                                                                    // 11490\n     * // => true                                                                                                      // 11491\n     *                                                                                                                 // 11492\n     * console.log(object);                                                                                            // 11493\n     * // => { 'a': [{ 'b': {} }] };                                                                                   // 11494\n     */                                                                                                                // 11495\n    function unset(object, path) {                                                                                     // 11496\n      return object == null ? true : baseUnset(object, path);                                                          // 11497\n    }                                                                                                                  // 11498\n                                                                                                                       // 11499\n    /**                                                                                                                // 11500\n     * Creates an array of the own enumerable property values of `object`.                                             // 11501\n     *                                                                                                                 // 11502\n     * **Note:** Non-object values are coerced to objects.                                                             // 11503\n     *                                                                                                                 // 11504\n     * @static                                                                                                         // 11505\n     * @memberOf _                                                                                                     // 11506\n     * @category Object                                                                                                // 11507\n     * @param {Object} object The object to query.                                                                     // 11508\n     * @returns {Array} Returns the array of property values.                                                          // 11509\n     * @example                                                                                                        // 11510\n     *                                                                                                                 // 11511\n     * function Foo() {                                                                                                // 11512\n     *   this.a = 1;                                                                                                   // 11513\n     *   this.b = 2;                                                                                                   // 11514\n     * }                                                                                                               // 11515\n     *                                                                                                                 // 11516\n     * Foo.prototype.c = 3;                                                                                            // 11517\n     *                                                                                                                 // 11518\n     * _.values(new Foo);                                                                                              // 11519\n     * // => [1, 2] (iteration order is not guaranteed)                                                                // 11520\n     *                                                                                                                 // 11521\n     * _.values('hi');                                                                                                 // 11522\n     * // => ['h', 'i']                                                                                                // 11523\n     */                                                                                                                // 11524\n    function values(object) {                                                                                          // 11525\n      return object ? baseValues(object, keys(object)) : [];                                                           // 11526\n    }                                                                                                                  // 11527\n                                                                                                                       // 11528\n    /**                                                                                                                // 11529\n     * Creates an array of the own and inherited enumerable property values of `object`.                               // 11530\n     *                                                                                                                 // 11531\n     * **Note:** Non-object values are coerced to objects.                                                             // 11532\n     *                                                                                                                 // 11533\n     * @static                                                                                                         // 11534\n     * @memberOf _                                                                                                     // 11535\n     * @category Object                                                                                                // 11536\n     * @param {Object} object The object to query.                                                                     // 11537\n     * @returns {Array} Returns the array of property values.                                                          // 11538\n     * @example                                                                                                        // 11539\n     *                                                                                                                 // 11540\n     * function Foo() {                                                                                                // 11541\n     *   this.a = 1;                                                                                                   // 11542\n     *   this.b = 2;                                                                                                   // 11543\n     * }                                                                                                               // 11544\n     *                                                                                                                 // 11545\n     * Foo.prototype.c = 3;                                                                                            // 11546\n     *                                                                                                                 // 11547\n     * _.valuesIn(new Foo);                                                                                            // 11548\n     * // => [1, 2, 3] (iteration order is not guaranteed)                                                             // 11549\n     */                                                                                                                // 11550\n    function valuesIn(object) {                                                                                        // 11551\n      return object == null ? baseValues(object, keysIn(object)) : [];                                                 // 11552\n    }                                                                                                                  // 11553\n                                                                                                                       // 11554\n    /*------------------------------------------------------------------------*/                                       // 11555\n                                                                                                                       // 11556\n    /**                                                                                                                // 11557\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.                                                // 11558\n     *                                                                                                                 // 11559\n     * @static                                                                                                         // 11560\n     * @memberOf _                                                                                                     // 11561\n     * @category Number                                                                                                // 11562\n     * @param {number} number The number to clamp.                                                                     // 11563\n     * @param {number} [lower] The lower bound.                                                                        // 11564\n     * @param {number} upper The upper bound.                                                                          // 11565\n     * @returns {number} Returns the clamped number.                                                                   // 11566\n     * @example                                                                                                        // 11567\n     *                                                                                                                 // 11568\n     * _.clamp(-10, -5, 5);                                                                                            // 11569\n     * // => -5                                                                                                        // 11570\n     *                                                                                                                 // 11571\n     * _.clamp(10, -5, 5);                                                                                             // 11572\n     * // => 5                                                                                                         // 11573\n     */                                                                                                                // 11574\n    function clamp(number, lower, upper) {                                                                             // 11575\n      if (upper === undefined) {                                                                                       // 11576\n        upper = lower;                                                                                                 // 11577\n        lower = undefined;                                                                                             // 11578\n      }                                                                                                                // 11579\n      if (upper !== undefined) {                                                                                       // 11580\n        upper = toNumber(upper);                                                                                       // 11581\n        upper = upper === upper ? upper : 0;                                                                           // 11582\n      }                                                                                                                // 11583\n      if (lower !== undefined) {                                                                                       // 11584\n        lower = toNumber(lower);                                                                                       // 11585\n        lower = lower === lower ? lower : 0;                                                                           // 11586\n      }                                                                                                                // 11587\n      return baseClamp(toNumber(number), lower, upper);                                                                // 11588\n    }                                                                                                                  // 11589\n                                                                                                                       // 11590\n    /**                                                                                                                // 11591\n     * Checks if `n` is between `start` and up to but not including, `end`. If                                         // 11592\n     * `end` is not specified it's set to `start` with `start` then set to `0`.                                        // 11593\n     * If `start` is greater than `end` the params are swapped to support                                              // 11594\n     * negative ranges.                                                                                                // 11595\n     *                                                                                                                 // 11596\n     * @static                                                                                                         // 11597\n     * @memberOf _                                                                                                     // 11598\n     * @category Number                                                                                                // 11599\n     * @param {number} number The number to check.                                                                     // 11600\n     * @param {number} [start=0] The start of the range.                                                               // 11601\n     * @param {number} end The end of the range.                                                                       // 11602\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.                                    // 11603\n     * @example                                                                                                        // 11604\n     *                                                                                                                 // 11605\n     * _.inRange(3, 2, 4);                                                                                             // 11606\n     * // => true                                                                                                      // 11607\n     *                                                                                                                 // 11608\n     * _.inRange(4, 8);                                                                                                // 11609\n     * // => true                                                                                                      // 11610\n     *                                                                                                                 // 11611\n     * _.inRange(4, 2);                                                                                                // 11612\n     * // => false                                                                                                     // 11613\n     *                                                                                                                 // 11614\n     * _.inRange(2, 2);                                                                                                // 11615\n     * // => false                                                                                                     // 11616\n     *                                                                                                                 // 11617\n     * _.inRange(1.2, 2);                                                                                              // 11618\n     * // => true                                                                                                      // 11619\n     *                                                                                                                 // 11620\n     * _.inRange(5.2, 4);                                                                                              // 11621\n     * // => false                                                                                                     // 11622\n     *                                                                                                                 // 11623\n     * _.inRange(-3, -2, -6);                                                                                          // 11624\n     * // => true                                                                                                      // 11625\n     */                                                                                                                // 11626\n    function inRange(number, start, end) {                                                                             // 11627\n      start = toNumber(start) || 0;                                                                                    // 11628\n      if (end === undefined) {                                                                                         // 11629\n        end = start;                                                                                                   // 11630\n        start = 0;                                                                                                     // 11631\n      } else {                                                                                                         // 11632\n        end = toNumber(end) || 0;                                                                                      // 11633\n      }                                                                                                                // 11634\n      number = toNumber(number);                                                                                       // 11635\n      return baseInRange(number, start, end);                                                                          // 11636\n    }                                                                                                                  // 11637\n                                                                                                                       // 11638\n    /**                                                                                                                // 11639\n     * Produces a random number between the inclusive `lower` and `upper` bounds.                                      // 11640\n     * If only one argument is provided a number between `0` and the given number                                      // 11641\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,                                  // 11642\n     * a floating-point number is returned instead of an integer.                                                      // 11643\n     *                                                                                                                 // 11644\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving                                                // 11645\n     * floating-point values which can produce unexpected results.                                                     // 11646\n     *                                                                                                                 // 11647\n     * @static                                                                                                         // 11648\n     * @memberOf _                                                                                                     // 11649\n     * @category Number                                                                                                // 11650\n     * @param {number} [lower=0] The lower bound.                                                                      // 11651\n     * @param {number} [upper=1] The upper bound.                                                                      // 11652\n     * @param {boolean} [floating] Specify returning a floating-point number.                                          // 11653\n     * @returns {number} Returns the random number.                                                                    // 11654\n     * @example                                                                                                        // 11655\n     *                                                                                                                 // 11656\n     * _.random(0, 5);                                                                                                 // 11657\n     * // => an integer between 0 and 5                                                                                // 11658\n     *                                                                                                                 // 11659\n     * _.random(5);                                                                                                    // 11660\n     * // => also an integer between 0 and 5                                                                           // 11661\n     *                                                                                                                 // 11662\n     * _.random(5, true);                                                                                              // 11663\n     * // => a floating-point number between 0 and 5                                                                   // 11664\n     *                                                                                                                 // 11665\n     * _.random(1.2, 5.2);                                                                                             // 11666\n     * // => a floating-point number between 1.2 and 5.2                                                               // 11667\n     */                                                                                                                // 11668\n    function random(lower, upper, floating) {                                                                          // 11669\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {                        // 11670\n        upper = floating = undefined;                                                                                  // 11671\n      }                                                                                                                // 11672\n      if (floating === undefined) {                                                                                    // 11673\n        if (typeof upper == 'boolean') {                                                                               // 11674\n          floating = upper;                                                                                            // 11675\n          upper = undefined;                                                                                           // 11676\n        }                                                                                                              // 11677\n        else if (typeof lower == 'boolean') {                                                                          // 11678\n          floating = lower;                                                                                            // 11679\n          lower = undefined;                                                                                           // 11680\n        }                                                                                                              // 11681\n      }                                                                                                                // 11682\n      if (lower === undefined && upper === undefined) {                                                                // 11683\n        lower = 0;                                                                                                     // 11684\n        upper = 1;                                                                                                     // 11685\n      }                                                                                                                // 11686\n      else {                                                                                                           // 11687\n        lower = toNumber(lower) || 0;                                                                                  // 11688\n        if (upper === undefined) {                                                                                     // 11689\n          upper = lower;                                                                                               // 11690\n          lower = 0;                                                                                                   // 11691\n        } else {                                                                                                       // 11692\n          upper = toNumber(upper) || 0;                                                                                // 11693\n        }                                                                                                              // 11694\n      }                                                                                                                // 11695\n      if (lower > upper) {                                                                                             // 11696\n        var temp = lower;                                                                                              // 11697\n        lower = upper;                                                                                                 // 11698\n        upper = temp;                                                                                                  // 11699\n      }                                                                                                                // 11700\n      if (floating || lower % 1 || upper % 1) {                                                                        // 11701\n        var rand = nativeRandom();                                                                                     // 11702\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);  // 11703\n      }                                                                                                                // 11704\n      return baseRandom(lower, upper);                                                                                 // 11705\n    }                                                                                                                  // 11706\n                                                                                                                       // 11707\n    /*------------------------------------------------------------------------*/                                       // 11708\n                                                                                                                       // 11709\n    /**                                                                                                                // 11710\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).                                     // 11711\n     *                                                                                                                 // 11712\n     * @static                                                                                                         // 11713\n     * @memberOf _                                                                                                     // 11714\n     * @category String                                                                                                // 11715\n     * @param {string} [string=''] The string to convert.                                                              // 11716\n     * @returns {string} Returns the camel cased string.                                                               // 11717\n     * @example                                                                                                        // 11718\n     *                                                                                                                 // 11719\n     * _.camelCase('Foo Bar');                                                                                         // 11720\n     * // => 'fooBar'                                                                                                  // 11721\n     *                                                                                                                 // 11722\n     * _.camelCase('--foo-bar');                                                                                       // 11723\n     * // => 'fooBar'                                                                                                  // 11724\n     *                                                                                                                 // 11725\n     * _.camelCase('__foo_bar__');                                                                                     // 11726\n     * // => 'fooBar'                                                                                                  // 11727\n     */                                                                                                                // 11728\n    var camelCase = createCompounder(function(result, word, index) {                                                   // 11729\n      word = word.toLowerCase();                                                                                       // 11730\n      return result + (index ? capitalize(word) : word);                                                               // 11731\n    });                                                                                                                // 11732\n                                                                                                                       // 11733\n    /**                                                                                                                // 11734\n     * Converts the first character of `string` to upper case and the remaining                                        // 11735\n     * to lower case.                                                                                                  // 11736\n     *                                                                                                                 // 11737\n     * @static                                                                                                         // 11738\n     * @memberOf _                                                                                                     // 11739\n     * @category String                                                                                                // 11740\n     * @param {string} [string=''] The string to capitalize.                                                           // 11741\n     * @returns {string} Returns the capitalized string.                                                               // 11742\n     * @example                                                                                                        // 11743\n     *                                                                                                                 // 11744\n     * _.capitalize('FRED');                                                                                           // 11745\n     * // => 'Fred'                                                                                                    // 11746\n     */                                                                                                                // 11747\n    function capitalize(string) {                                                                                      // 11748\n      return upperFirst(toString(string).toLowerCase());                                                               // 11749\n    }                                                                                                                  // 11750\n                                                                                                                       // 11751\n    /**                                                                                                                // 11752\n     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *                                                                                                                 // 11755\n     * @static                                                                                                         // 11756\n     * @memberOf _                                                                                                     // 11757\n     * @category String                                                                                                // 11758\n     * @param {string} [string=''] The string to deburr.                                                               // 11759\n     * @returns {string} Returns the deburred string.                                                                  // 11760\n     * @example                                                                                                        // 11761\n     *                                                                                                                 // 11762\n     * _.deburr('déjà vu');                                                                                            // 11763\n     * // => 'deja vu'                                                                                                 // 11764\n     */                                                                                                                // 11765\n    function deburr(string) {                                                                                          // 11766\n      string = toString(string);                                                                                       // 11767\n      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');                                // 11768\n    }                                                                                                                  // 11769\n                                                                                                                       // 11770\n    /**                                                                                                                // 11771\n     * Checks if `string` ends with the given target string.                                                           // 11772\n     *                                                                                                                 // 11773\n     * @static                                                                                                         // 11774\n     * @memberOf _                                                                                                     // 11775\n     * @category String                                                                                                // 11776\n     * @param {string} [string=''] The string to search.                                                               // 11777\n     * @param {string} [target] The string to search for.                                                              // 11778\n     * @param {number} [position=string.length] The position to search from.                                           // 11779\n     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.                                 // 11780\n     * @example                                                                                                        // 11781\n     *                                                                                                                 // 11782\n     * _.endsWith('abc', 'c');                                                                                         // 11783\n     * // => true                                                                                                      // 11784\n     *                                                                                                                 // 11785\n     * _.endsWith('abc', 'b');                                                                                         // 11786\n     * // => false                                                                                                     // 11787\n     *                                                                                                                 // 11788\n     * _.endsWith('abc', 'b', 2);                                                                                      // 11789\n     * // => true                                                                                                      // 11790\n     */                                                                                                                // 11791\n    function endsWith(string, target, position) {                                                                      // 11792\n      string = toString(string);                                                                                       // 11793\n      target = typeof target == 'string' ? target : (target + '');                                                     // 11794\n                                                                                                                       // 11795\n      var length = string.length;                                                                                      // 11796\n      position = position === undefined                                                                                // 11797\n        ? length                                                                                                       // 11798\n        : baseClamp(toInteger(position), 0, length);                                                                   // 11799\n                                                                                                                       // 11800\n      position -= target.length;                                                                                       // 11801\n      return position >= 0 && string.indexOf(target, position) == position;                                            // 11802\n    }                                                                                                                  // 11803\n                                                                                                                       // 11804\n    /**                                                                                                                // 11805\n     * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to                                        // 11806\n     * their corresponding HTML entities.                                                                              // 11807\n     *                                                                                                                 // 11808\n     * **Note:** No other characters are escaped. To escape additional                                                 // 11809\n     * characters use a third-party library like [_he_](https://mths.be/he).                                           // 11810\n     *                                                                                                                 // 11811\n     * Though the \">\" character is escaped for symmetry, characters like                                               // 11812\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning                                             // 11813\n     * unless they're part of a tag or unquoted attribute value.                                                       // 11814\n     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)                             // 11815\n     * (under \"semi-related fun fact\") for more details.                                                               // 11816\n     *                                                                                                                 // 11817\n     * Backticks are escaped because in IE < 9, they can break out of                                                  // 11818\n     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),                                         // 11819\n     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and                                       // 11820\n     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)                     // 11821\n     * for more details.                                                                                               // 11822\n     *                                                                                                                 // 11823\n     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)          // 11824\n     * to reduce XSS vectors.                                                                                          // 11825\n     *                                                                                                                 // 11826\n     * @static                                                                                                         // 11827\n     * @memberOf _                                                                                                     // 11828\n     * @category String                                                                                                // 11829\n     * @param {string} [string=''] The string to escape.                                                               // 11830\n     * @returns {string} Returns the escaped string.                                                                   // 11831\n     * @example                                                                                                        // 11832\n     *                                                                                                                 // 11833\n     * _.escape('fred, barney, & pebbles');                                                                            // 11834\n     * // => 'fred, barney, &amp; pebbles'                                                                             // 11835\n     */                                                                                                                // 11836\n    function escape(string) {                                                                                          // 11837\n      string = toString(string);                                                                                       // 11838\n      return (string && reHasUnescapedHtml.test(string))                                                               // 11839\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)                                                              // 11840\n        : string;                                                                                                      // 11841\n    }                                                                                                                  // 11842\n                                                                                                                       // 11843\n    /**                                                                                                                // 11844\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",                                           // 11845\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.                                                         // 11846\n     *                                                                                                                 // 11847\n     * @static                                                                                                         // 11848\n     * @memberOf _                                                                                                     // 11849\n     * @category String                                                                                                // 11850\n     * @param {string} [string=''] The string to escape.                                                               // 11851\n     * @returns {string} Returns the escaped string.                                                                   // 11852\n     * @example                                                                                                        // 11853\n     *                                                                                                                 // 11854\n     * _.escapeRegExp('[lodash](https://lodash.com/)');                                                                // 11855\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'                                                                      // 11856\n     */                                                                                                                // 11857\n    function escapeRegExp(string) {                                                                                    // 11858\n      string = toString(string);                                                                                       // 11859\n      return (string && reHasRegExpChar.test(string))                                                                  // 11860\n        ? string.replace(reRegExpChar, '\\\\$&')                                                                         // 11861\n        : string;                                                                                                      // 11862\n    }                                                                                                                  // 11863\n                                                                                                                       // 11864\n    /**                                                                                                                // 11865\n     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).               // 11866\n     *                                                                                                                 // 11867\n     * @static                                                                                                         // 11868\n     * @memberOf _                                                                                                     // 11869\n     * @category String                                                                                                // 11870\n     * @param {string} [string=''] The string to convert.                                                              // 11871\n     * @returns {string} Returns the kebab cased string.                                                               // 11872\n     * @example                                                                                                        // 11873\n     *                                                                                                                 // 11874\n     * _.kebabCase('Foo Bar');                                                                                         // 11875\n     * // => 'foo-bar'                                                                                                 // 11876\n     *                                                                                                                 // 11877\n     * _.kebabCase('fooBar');                                                                                          // 11878\n     * // => 'foo-bar'                                                                                                 // 11879\n     *                                                                                                                 // 11880\n     * _.kebabCase('__foo_bar__');                                                                                     // 11881\n     * // => 'foo-bar'                                                                                                 // 11882\n     */                                                                                                                // 11883\n    var kebabCase = createCompounder(function(result, word, index) {                                                   // 11884\n      return result + (index ? '-' : '') + word.toLowerCase();                                                         // 11885\n    });                                                                                                                // 11886\n                                                                                                                       // 11887\n    /**                                                                                                                // 11888\n     * Converts `string`, as space separated words, to lower case.                                                     // 11889\n     *                                                                                                                 // 11890\n     * @static                                                                                                         // 11891\n     * @memberOf _                                                                                                     // 11892\n     * @category String                                                                                                // 11893\n     * @param {string} [string=''] The string to convert.                                                              // 11894\n     * @returns {string} Returns the lower cased string.                                                               // 11895\n     * @example                                                                                                        // 11896\n     *                                                                                                                 // 11897\n     * _.lowerCase('--Foo-Bar');                                                                                       // 11898\n     * // => 'foo bar'                                                                                                 // 11899\n     *                                                                                                                 // 11900\n     * _.lowerCase('fooBar');                                                                                          // 11901\n     * // => 'foo bar'                                                                                                 // 11902\n     *                                                                                                                 // 11903\n     * _.lowerCase('__FOO_BAR__');                                                                                     // 11904\n     * // => 'foo bar'                                                                                                 // 11905\n     */                                                                                                                // 11906\n    var lowerCase = createCompounder(function(result, word, index) {                                                   // 11907\n      return result + (index ? ' ' : '') + word.toLowerCase();                                                         // 11908\n    });                                                                                                                // 11909\n                                                                                                                       // 11910\n    /**                                                                                                                // 11911\n     * Converts the first character of `string` to lower case.                                                         // 11912\n     *                                                                                                                 // 11913\n     * @static                                                                                                         // 11914\n     * @memberOf _                                                                                                     // 11915\n     * @category String                                                                                                // 11916\n     * @param {string} [string=''] The string to convert.                                                              // 11917\n     * @returns {string} Returns the converted string.                                                                 // 11918\n     * @example                                                                                                        // 11919\n     *                                                                                                                 // 11920\n     * _.lowerFirst('Fred');                                                                                           // 11921\n     * // => 'fred'                                                                                                    // 11922\n     *                                                                                                                 // 11923\n     * _.lowerFirst('FRED');                                                                                           // 11924\n     * // => 'fRED'                                                                                                    // 11925\n     */                                                                                                                // 11926\n    var lowerFirst = createCaseFirst('toLowerCase');                                                                   // 11927\n                                                                                                                       // 11928\n    /**                                                                                                                // 11929\n     * Converts the first character of `string` to upper case.                                                         // 11930\n     *                                                                                                                 // 11931\n     * @static                                                                                                         // 11932\n     * @memberOf _                                                                                                     // 11933\n     * @category String                                                                                                // 11934\n     * @param {string} [string=''] The string to convert.                                                              // 11935\n     * @returns {string} Returns the converted string.                                                                 // 11936\n     * @example                                                                                                        // 11937\n     *                                                                                                                 // 11938\n     * _.upperFirst('fred');                                                                                           // 11939\n     * // => 'Fred'                                                                                                    // 11940\n     *                                                                                                                 // 11941\n     * _.upperFirst('FRED');                                                                                           // 11942\n     * // => 'FRED'                                                                                                    // 11943\n     */                                                                                                                // 11944\n    var upperFirst = createCaseFirst('toUpperCase');                                                                   // 11945\n                                                                                                                       // 11946\n    /**                                                                                                                // 11947\n     * Pads `string` on the left and right sides if it's shorter than `length`.                                        // 11948\n     * Padding characters are truncated if they can't be evenly divided by `length`.                                   // 11949\n     *                                                                                                                 // 11950\n     * @static                                                                                                         // 11951\n     * @memberOf _                                                                                                     // 11952\n     * @category String                                                                                                // 11953\n     * @param {string} [string=''] The string to pad.                                                                  // 11954\n     * @param {number} [length=0] The padding length.                                                                  // 11955\n     * @param {string} [chars=' '] The string used as padding.                                                         // 11956\n     * @returns {string} Returns the padded string.                                                                    // 11957\n     * @example                                                                                                        // 11958\n     *                                                                                                                 // 11959\n     * _.pad('abc', 8);                                                                                                // 11960\n     * // => '  abc   '                                                                                                // 11961\n     *                                                                                                                 // 11962\n     * _.pad('abc', 8, '_-');                                                                                          // 11963\n     * // => '_-abc_-_'                                                                                                // 11964\n     *                                                                                                                 // 11965\n     * _.pad('abc', 3);                                                                                                // 11966\n     * // => 'abc'                                                                                                     // 11967\n     */                                                                                                                // 11968\n    function pad(string, length, chars) {                                                                              // 11969\n      string = toString(string);                                                                                       // 11970\n      length = toInteger(length);                                                                                      // 11971\n                                                                                                                       // 11972\n      var strLength = stringSize(string);                                                                              // 11973\n      if (!length || strLength >= length) {                                                                            // 11974\n        return string;                                                                                                 // 11975\n      }                                                                                                                // 11976\n      var mid = (length - strLength) / 2,                                                                              // 11977\n          leftLength = nativeFloor(mid),                                                                               // 11978\n          rightLength = nativeCeil(mid);                                                                               // 11979\n                                                                                                                       // 11980\n      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);                    // 11981\n    }                                                                                                                  // 11982\n                                                                                                                       // 11983\n    /**                                                                                                                // 11984\n     * Pads `string` on the right side if it's shorter than `length`. Padding                                          // 11985\n     * characters are truncated if they exceed `length`.                                                               // 11986\n     *                                                                                                                 // 11987\n     * @static                                                                                                         // 11988\n     * @memberOf _                                                                                                     // 11989\n     * @category String                                                                                                // 11990\n     * @param {string} [string=''] The string to pad.                                                                  // 11991\n     * @param {number} [length=0] The padding length.                                                                  // 11992\n     * @param {string} [chars=' '] The string used as padding.                                                         // 11993\n     * @returns {string} Returns the padded string.                                                                    // 11994\n     * @example                                                                                                        // 11995\n     *                                                                                                                 // 11996\n     * _.padEnd('abc', 6);                                                                                             // 11997\n     * // => 'abc   '                                                                                                  // 11998\n     *                                                                                                                 // 11999\n     * _.padEnd('abc', 6, '_-');                                                                                       // 12000\n     * // => 'abc_-_'                                                                                                  // 12001\n     *                                                                                                                 // 12002\n     * _.padEnd('abc', 3);                                                                                             // 12003\n     * // => 'abc'                                                                                                     // 12004\n     */                                                                                                                // 12005\n    function padEnd(string, length, chars) {                                                                           // 12006\n      string = toString(string);                                                                                       // 12007\n      return string + createPadding(string, length, chars);                                                            // 12008\n    }                                                                                                                  // 12009\n                                                                                                                       // 12010\n    /**                                                                                                                // 12011\n     * Pads `string` on the left side if it's shorter than `length`. Padding                                           // 12012\n     * characters are truncated if they exceed `length`.                                                               // 12013\n     *                                                                                                                 // 12014\n     * @static                                                                                                         // 12015\n     * @memberOf _                                                                                                     // 12016\n     * @category String                                                                                                // 12017\n     * @param {string} [string=''] The string to pad.                                                                  // 12018\n     * @param {number} [length=0] The padding length.                                                                  // 12019\n     * @param {string} [chars=' '] The string used as padding.                                                         // 12020\n     * @returns {string} Returns the padded string.                                                                    // 12021\n     * @example                                                                                                        // 12022\n     *                                                                                                                 // 12023\n     * _.padStart('abc', 6);                                                                                           // 12024\n     * // => '   abc'                                                                                                  // 12025\n     *                                                                                                                 // 12026\n     * _.padStart('abc', 6, '_-');                                                                                     // 12027\n     * // => '_-_abc'                                                                                                  // 12028\n     *                                                                                                                 // 12029\n     * _.padStart('abc', 3);                                                                                           // 12030\n     * // => 'abc'                                                                                                     // 12031\n     */                                                                                                                // 12032\n    function padStart(string, length, chars) {                                                                         // 12033\n      string = toString(string);                                                                                       // 12034\n      return createPadding(string, length, chars) + string;                                                            // 12035\n    }                                                                                                                  // 12036\n                                                                                                                       // 12037\n    /**                                                                                                                // 12038\n     * Converts `string` to an integer of the specified radix. If `radix` is                                           // 12039\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,                                  // 12040\n     * in which case a `radix` of `16` is used.                                                                        // 12041\n     *                                                                                                                 // 12042\n     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)                            // 12043\n     * of `parseInt`.                                                                                                  // 12044\n     *                                                                                                                 // 12045\n     * @static                                                                                                         // 12046\n     * @memberOf _                                                                                                     // 12047\n     * @category String                                                                                                // 12048\n     * @param {string} string The string to convert.                                                                   // 12049\n     * @param {number} [radix] The radix to interpret `value` by.                                                      // 12050\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12051\n     * @returns {number} Returns the converted integer.                                                                // 12052\n     * @example                                                                                                        // 12053\n     *                                                                                                                 // 12054\n     * _.parseInt('08');                                                                                               // 12055\n     * // => 8                                                                                                         // 12056\n     *                                                                                                                 // 12057\n     * _.map(['6', '08', '10'], _.parseInt);                                                                           // 12058\n     * // => [6, 8, 10]                                                                                                // 12059\n     */                                                                                                                // 12060\n    function parseInt(string, radix, guard) {                                                                          // 12061\n      // Chrome fails to trim leading <BOM> whitespace characters.                                                     // 12062\n      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.                                      // 12063\n      if (guard || radix == null) {                                                                                    // 12064\n        radix = 0;                                                                                                     // 12065\n      } else if (radix) {                                                                                              // 12066\n        radix = +radix;                                                                                                // 12067\n      }                                                                                                                // 12068\n      string = toString(string).replace(reTrim, '');                                                                   // 12069\n      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));                                 // 12070\n    }                                                                                                                  // 12071\n                                                                                                                       // 12072\n    /**                                                                                                                // 12073\n     * Repeats the given string `n` times.                                                                             // 12074\n     *                                                                                                                 // 12075\n     * @static                                                                                                         // 12076\n     * @memberOf _                                                                                                     // 12077\n     * @category String                                                                                                // 12078\n     * @param {string} [string=''] The string to repeat.                                                               // 12079\n     * @param {number} [n=0] The number of times to repeat the string.                                                 // 12080\n     * @returns {string} Returns the repeated string.                                                                  // 12081\n     * @example                                                                                                        // 12082\n     *                                                                                                                 // 12083\n     * _.repeat('*', 3);                                                                                               // 12084\n     * // => '***'                                                                                                     // 12085\n     *                                                                                                                 // 12086\n     * _.repeat('abc', 2);                                                                                             // 12087\n     * // => 'abcabc'                                                                                                  // 12088\n     *                                                                                                                 // 12089\n     * _.repeat('abc', 0);                                                                                             // 12090\n     * // => ''                                                                                                        // 12091\n     */                                                                                                                // 12092\n    function repeat(string, n) {                                                                                       // 12093\n      string = toString(string);                                                                                       // 12094\n      n = toInteger(n);                                                                                                // 12095\n                                                                                                                       // 12096\n      var result = '';                                                                                                 // 12097\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {                                                                  // 12098\n        return result;                                                                                                 // 12099\n      }                                                                                                                // 12100\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.                                        // 12101\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.                                // 12102\n      do {                                                                                                             // 12103\n        if (n % 2) {                                                                                                   // 12104\n          result += string;                                                                                            // 12105\n        }                                                                                                              // 12106\n        n = nativeFloor(n / 2);                                                                                        // 12107\n        string += string;                                                                                              // 12108\n      } while (n);                                                                                                     // 12109\n                                                                                                                       // 12110\n      return result;                                                                                                   // 12111\n    }                                                                                                                  // 12112\n                                                                                                                       // 12113\n    /**                                                                                                                // 12114\n     * Replaces matches for `pattern` in `string` with `replacement`.                                                  // 12115\n     *                                                                                                                 // 12116\n     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).                            // 12117\n     *                                                                                                                 // 12118\n     * @static                                                                                                         // 12119\n     * @memberOf _                                                                                                     // 12120\n     * @category String                                                                                                // 12121\n     * @param {string} [string=''] The string to modify.                                                               // 12122\n     * @param {RegExp|string} pattern The pattern to replace.                                                          // 12123\n     * @param {Function|string} replacement The match replacement.                                                     // 12124\n     * @returns {string} Returns the modified string.                                                                  // 12125\n     * @example                                                                                                        // 12126\n     *                                                                                                                 // 12127\n     * _.replace('Hi Fred', 'Fred', 'Barney');                                                                         // 12128\n     * // => 'Hi Barney'                                                                                               // 12129\n     */                                                                                                                // 12130\n    function replace() {                                                                                               // 12131\n      var args = arguments,                                                                                            // 12132\n          string = toString(args[0]);                                                                                  // 12133\n                                                                                                                       // 12134\n      return args.length < 3 ? string : string.replace(args[1], args[2]);                                              // 12135\n    }                                                                                                                  // 12136\n                                                                                                                       // 12137\n    /**                                                                                                                // 12138\n     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).                                    // 12139\n     *                                                                                                                 // 12140\n     * @static                                                                                                         // 12141\n     * @memberOf _                                                                                                     // 12142\n     * @category String                                                                                                // 12143\n     * @param {string} [string=''] The string to convert.                                                              // 12144\n     * @returns {string} Returns the snake cased string.                                                               // 12145\n     * @example                                                                                                        // 12146\n     *                                                                                                                 // 12147\n     * _.snakeCase('Foo Bar');                                                                                         // 12148\n     * // => 'foo_bar'                                                                                                 // 12149\n     *                                                                                                                 // 12150\n     * _.snakeCase('fooBar');                                                                                          // 12151\n     * // => 'foo_bar'                                                                                                 // 12152\n     *                                                                                                                 // 12153\n     * _.snakeCase('--foo-bar');                                                                                       // 12154\n     * // => 'foo_bar'                                                                                                 // 12155\n     */                                                                                                                // 12156\n    var snakeCase = createCompounder(function(result, word, index) {                                                   // 12157\n      return result + (index ? '_' : '') + word.toLowerCase();                                                         // 12158\n    });                                                                                                                // 12159\n                                                                                                                       // 12160\n    /**                                                                                                                // 12161\n     * Splits `string` by `separator`.                                                                                 // 12162\n     *                                                                                                                 // 12163\n     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).                                // 12164\n     *                                                                                                                 // 12165\n     * @static                                                                                                         // 12166\n     * @memberOf _                                                                                                     // 12167\n     * @category String                                                                                                // 12168\n     * @param {string} [string=''] The string to split.                                                                // 12169\n     * @param {RegExp|string} separator The separator pattern to split by.                                             // 12170\n     * @param {number} [limit] The length to truncate results to.                                                      // 12171\n     * @returns {Array} Returns the new array of string segments.                                                      // 12172\n     * @example                                                                                                        // 12173\n     *                                                                                                                 // 12174\n     * _.split('a-b-c', '-', 2);                                                                                       // 12175\n     * // => ['a', 'b']                                                                                                // 12176\n     */                                                                                                                // 12177\n    function split(string, separator, limit) {                                                                         // 12178\n      return toString(string).split(separator, limit);                                                                 // 12179\n    }                                                                                                                  // 12180\n                                                                                                                       // 12181\n    /**                                                                                                                // 12182\n     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).    // 12183\n     *                                                                                                                 // 12184\n     * @static                                                                                                         // 12185\n     * @memberOf _                                                                                                     // 12186\n     * @category String                                                                                                // 12187\n     * @param {string} [string=''] The string to convert.                                                              // 12188\n     * @returns {string} Returns the start cased string.                                                               // 12189\n     * @example                                                                                                        // 12190\n     *                                                                                                                 // 12191\n     * _.startCase('--foo-bar');                                                                                       // 12192\n     * // => 'Foo Bar'                                                                                                 // 12193\n     *                                                                                                                 // 12194\n     * _.startCase('fooBar');                                                                                          // 12195\n     * // => 'Foo Bar'                                                                                                 // 12196\n     *                                                                                                                 // 12197\n     * _.startCase('__foo_bar__');                                                                                     // 12198\n     * // => 'Foo Bar'                                                                                                 // 12199\n     */                                                                                                                // 12200\n    var startCase = createCompounder(function(result, word, index) {                                                   // 12201\n      return result + (index ? ' ' : '') + capitalize(word);                                                           // 12202\n    });                                                                                                                // 12203\n                                                                                                                       // 12204\n    /**                                                                                                                // 12205\n     * Checks if `string` starts with the given target string.                                                         // 12206\n     *                                                                                                                 // 12207\n     * @static                                                                                                         // 12208\n     * @memberOf _                                                                                                     // 12209\n     * @category String                                                                                                // 12210\n     * @param {string} [string=''] The string to search.                                                               // 12211\n     * @param {string} [target] The string to search for.                                                              // 12212\n     * @param {number} [position=0] The position to search from.                                                       // 12213\n     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.                               // 12214\n     * @example                                                                                                        // 12215\n     *                                                                                                                 // 12216\n     * _.startsWith('abc', 'a');                                                                                       // 12217\n     * // => true                                                                                                      // 12218\n     *                                                                                                                 // 12219\n     * _.startsWith('abc', 'b');                                                                                       // 12220\n     * // => false                                                                                                     // 12221\n     *                                                                                                                 // 12222\n     * _.startsWith('abc', 'b', 1);                                                                                    // 12223\n     * // => true                                                                                                      // 12224\n     */                                                                                                                // 12225\n    function startsWith(string, target, position) {                                                                    // 12226\n      string = toString(string);                                                                                       // 12227\n      position = baseClamp(toInteger(position), 0, string.length);                                                     // 12228\n      return string.lastIndexOf(target, position) == position;                                                         // 12229\n    }                                                                                                                  // 12230\n                                                                                                                       // 12231\n    /**                                                                                                                // 12232\n     * Creates a compiled template function that can interpolate data properties                                       // 12233\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in                                        // 12234\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data                                      // 12235\n     * properties may be accessed as free variables in the template. If a setting                                      // 12236\n     * object is provided it takes precedence over `_.templateSettings` values.                                        // 12237\n     *                                                                                                                 // 12238\n     * **Note:** In the development build `_.template` utilizes                                                        // 12239\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)                   // 12240\n     * for easier debugging.                                                                                           // 12241\n     *                                                                                                                 // 12242\n     * For more information on precompiling templates see                                                              // 12243\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).                                       // 12244\n     *                                                                                                                 // 12245\n     * For more information on Chrome extension sandboxes see                                                          // 12246\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).                    // 12247\n     *                                                                                                                 // 12248\n     * @static                                                                                                         // 12249\n     * @memberOf _                                                                                                     // 12250\n     * @category String                                                                                                // 12251\n     * @param {string} [string=''] The template string.                                                                // 12252\n     * @param {Object} [options] The options object.                                                                   // 12253\n     * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.                                                   // 12254\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.                                                    // 12255\n     * @param {Object} [options.imports] An object to import into the template as free variables.                      // 12256\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.                                              // 12257\n     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.                            // 12258\n     * @param {string} [options.variable] The data object variable name.                                               // 12259\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12260\n     * @returns {Function} Returns the compiled template function.                                                     // 12261\n     * @example                                                                                                        // 12262\n     *                                                                                                                 // 12263\n     * // using the \"interpolate\" delimiter to create a compiled template                                              // 12264\n     * var compiled = _.template('hello <%= user %>!');                                                                // 12265\n     * compiled({ 'user': 'fred' });                                                                                   // 12266\n     * // => 'hello fred!'                                                                                             // 12267\n     *                                                                                                                 // 12268\n     * // using the HTML \"escape\" delimiter to escape data property values                                             // 12269\n     * var compiled = _.template('<b><%- value %></b>');                                                               // 12270\n     * compiled({ 'value': '<script>' });                                                                              // 12271\n     * // => '<b>&lt;script&gt;</b>'                                                                                   // 12272\n     *                                                                                                                 // 12273\n     * // using the \"evaluate\" delimiter to execute JavaScript and generate HTML                                       // 12274\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');              // 12275\n     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 12276\n     * // => '<li>fred</li><li>barney</li>'                                                                            // 12277\n     *                                                                                                                 // 12278\n     * // using the internal `print` function in \"evaluate\" delimiters                                                 // 12279\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');                                                    // 12280\n     * compiled({ 'user': 'barney' });                                                                                 // 12281\n     * // => 'hello barney!'                                                                                           // 12282\n     *                                                                                                                 // 12283\n     * // using the ES delimiter as an alternative to the default \"interpolate\" delimiter                              // 12284\n     * var compiled = _.template('hello ${ user }!');                                                                  // 12285\n     * compiled({ 'user': 'pebbles' });                                                                                // 12286\n     * // => 'hello pebbles!'                                                                                          // 12287\n     *                                                                                                                 // 12288\n     * // using custom template delimiters                                                                             // 12289\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;                                                             // 12290\n     * var compiled = _.template('hello {{ user }}!');                                                                 // 12291\n     * compiled({ 'user': 'mustache' });                                                                               // 12292\n     * // => 'hello mustache!'                                                                                         // 12293\n     *                                                                                                                 // 12294\n     * // using backslashes to treat delimiters as plain text                                                          // 12295\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');                                                         // 12296\n     * compiled({ 'value': 'ignored' });                                                                               // 12297\n     * // => '<%- value %>'                                                                                            // 12298\n     *                                                                                                                 // 12299\n     * // using the `imports` option to import `jQuery` as `jq`                                                        // 12300\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';                                // 12301\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });                                               // 12302\n     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 12303\n     * // => '<li>fred</li><li>barney</li>'                                                                            // 12304\n     *                                                                                                                 // 12305\n     * // using the `sourceURL` option to specify a custom sourceURL for the template                                  // 12306\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });                        // 12307\n     * compiled(data);                                                                                                 // 12308\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector           // 12309\n     *                                                                                                                 // 12310\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template                   // 12311\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });                                      // 12312\n     * compiled.source;                                                                                                // 12313\n     * // => function(data) {                                                                                          // 12314\n     * //   var __t, __p = '';                                                                                         // 12315\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';                                           // 12316\n     * //   return __p;                                                                                                // 12317\n     * // }                                                                                                            // 12318\n     *                                                                                                                 // 12319\n     * // using the `source` property to inline compiled templates for meaningful                                      // 12320\n     * // line numbers in error messages and a stack trace                                                             // 12321\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');                                                                                                             // 12326\n     */                                                                                                                // 12327\n    function template(string, options, guard) {                                                                        // 12328\n      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)              // 12329\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).                                                  // 12330\n      var settings = lodash.templateSettings;                                                                          // 12331\n                                                                                                                       // 12332\n      if (guard && isIterateeCall(string, options, guard)) {                                                           // 12333\n        options = undefined;                                                                                           // 12334\n      }                                                                                                                // 12335\n      string = toString(string);                                                                                       // 12336\n      options = assignInWith({}, options, settings, assignInDefaults);                                                 // 12337\n                                                                                                                       // 12338\n      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),                             // 12339\n          importsKeys = keys(imports),                                                                                 // 12340\n          importsValues = baseValues(imports, importsKeys);                                                            // 12341\n                                                                                                                       // 12342\n      var isEscaping,                                                                                                  // 12343\n          isEvaluating,                                                                                                // 12344\n          index = 0,                                                                                                   // 12345\n          interpolate = options.interpolate || reNoMatch,                                                              // 12346\n          source = \"__p += '\";                                                                                         // 12347\n                                                                                                                       // 12348\n      // Compile the regexp to match each delimiter.                                                                   // 12349\n      var reDelimiters = RegExp(                                                                                       // 12350\n        (options.escape || reNoMatch).source + '|' +                                                                   // 12351\n        interpolate.source + '|' +                                                                                     // 12352\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +                                      // 12353\n        (options.evaluate || reNoMatch).source + '|$'                                                                  // 12354\n      , 'g');                                                                                                          // 12355\n                                                                                                                       // 12356\n      // Use a sourceURL for easier debugging.                                                                         // 12357\n      var sourceURL = '//# sourceURL=' +                                                                               // 12358\n        ('sourceURL' in options                                                                                        // 12359\n          ? options.sourceURL                                                                                          // 12360\n          : ('lodash.templateSources[' + (++templateCounter) + ']')                                                    // 12361\n        ) + '\\n';                                                                                                      // 12362\n                                                                                                                       // 12363\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);                                                      // 12365\n                                                                                                                       // 12366\n        // Escape characters that can't be included in string literals.                                                // 12367\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);                            // 12368\n                                                                                                                       // 12369\n        // Replace delimiters with snippets.                                                                           // 12370\n        if (escapeValue) {                                                                                             // 12371\n          isEscaping = true;                                                                                           // 12372\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";                                                              // 12373\n        }                                                                                                              // 12374\n        if (evaluateValue) {                                                                                           // 12375\n          isEvaluating = true;                                                                                         // 12376\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";                                                            // 12377\n        }                                                                                                              // 12378\n        if (interpolateValue) {                                                                                        // 12379\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";                               // 12380\n        }                                                                                                              // 12381\n        index = offset + match.length;                                                                                 // 12382\n                                                                                                                       // 12383\n        // The JS engine embedded in Adobe products needs `match` returned in                                          // 12384\n        // order to produce the correct `offset` value.                                                                // 12385\n        return match;                                                                                                  // 12386\n      });                                                                                                              // 12387\n                                                                                                                       // 12388\n      source += \"';\\n\";                                                                                                // 12389\n                                                                                                                       // 12390\n      // If `variable` is not specified wrap a with-statement around the generated                                     // 12391\n      // code to add the data object to the top of the scope chain.                                                    // 12392\n      var variable = options.variable;                                                                                 // 12393\n      if (!variable) {                                                                                                 // 12394\n        source = 'with (obj) {\\n' + source + '\\n}\\n';                                                                  // 12395\n      }                                                                                                                // 12396\n      // Cleanup code by stripping empty strings.                                                                      // 12397\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)                                      // 12398\n        .replace(reEmptyStringMiddle, '$1')                                                                            // 12399\n        .replace(reEmptyStringTrailing, '$1;');                                                                        // 12400\n                                                                                                                       // 12401\n      // Frame code as the function body.                                                                              // 12402\n      source = 'function(' + (variable || 'obj') + ') {\\n' +                                                           // 12403\n        (variable                                                                                                      // 12404\n          ? ''                                                                                                         // 12405\n          : 'obj || (obj = {});\\n'                                                                                     // 12406\n        ) +                                                                                                            // 12407\n        \"var __t, __p = ''\" +                                                                                          // 12408\n        (isEscaping                                                                                                    // 12409\n           ? ', __e = _.escape'                                                                                        // 12410\n           : ''                                                                                                        // 12411\n        ) +                                                                                                            // 12412\n        (isEvaluating                                                                                                  // 12413\n          ? ', __j = Array.prototype.join;\\n' +                                                                        // 12414\n            \"function print() { __p += __j.call(arguments, '') }\\n\"                                                    // 12415\n          : ';\\n'                                                                                                      // 12416\n        ) +                                                                                                            // 12417\n        source +                                                                                                       // 12418\n        'return __p\\n}';                                                                                               // 12419\n                                                                                                                       // 12420\n      var result = attempt(function() {                                                                                // 12421\n        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);                  // 12422\n      });                                                                                                              // 12423\n                                                                                                                       // 12424\n      // Provide the compiled function's source by its `toString` method or                                            // 12425\n      // the `source` property as a convenience for inlining compiled templates.                                       // 12426\n      result.source = source;                                                                                          // 12427\n      if (isError(result)) {                                                                                           // 12428\n        throw result;                                                                                                  // 12429\n      }                                                                                                                // 12430\n      return result;                                                                                                   // 12431\n    }                                                                                                                  // 12432\n                                                                                                                       // 12433\n    /**                                                                                                                // 12434\n     * Converts `string`, as a whole, to lower case.                                                                   // 12435\n     *                                                                                                                 // 12436\n     * @static                                                                                                         // 12437\n     * @memberOf _                                                                                                     // 12438\n     * @category String                                                                                                // 12439\n     * @param {string} [string=''] The string to convert.                                                              // 12440\n     * @returns {string} Returns the lower cased string.                                                               // 12441\n     * @example                                                                                                        // 12442\n     *                                                                                                                 // 12443\n     * _.toLower('--Foo-Bar');                                                                                         // 12444\n     * // => '--foo-bar'                                                                                               // 12445\n     *                                                                                                                 // 12446\n     * _.toLower('fooBar');                                                                                            // 12447\n     * // => 'foobar'                                                                                                  // 12448\n     *                                                                                                                 // 12449\n     * _.toLower('__FOO_BAR__');                                                                                       // 12450\n     * // => '__foo_bar__'                                                                                             // 12451\n     */                                                                                                                // 12452\n    function toLower(value) {                                                                                          // 12453\n      return toString(value).toLowerCase();                                                                            // 12454\n    }                                                                                                                  // 12455\n                                                                                                                       // 12456\n    /**                                                                                                                // 12457\n     * Converts `string`, as a whole, to upper case.                                                                   // 12458\n     *                                                                                                                 // 12459\n     * @static                                                                                                         // 12460\n     * @memberOf _                                                                                                     // 12461\n     * @category String                                                                                                // 12462\n     * @param {string} [string=''] The string to convert.                                                              // 12463\n     * @returns {string} Returns the upper cased string.                                                               // 12464\n     * @example                                                                                                        // 12465\n     *                                                                                                                 // 12466\n     * _.toUpper('--foo-bar');                                                                                         // 12467\n     * // => '--FOO-BAR'                                                                                               // 12468\n     *                                                                                                                 // 12469\n     * _.toUpper('fooBar');                                                                                            // 12470\n     * // => 'FOOBAR'                                                                                                  // 12471\n     *                                                                                                                 // 12472\n     * _.toUpper('__foo_bar__');                                                                                       // 12473\n     * // => '__FOO_BAR__'                                                                                             // 12474\n     */                                                                                                                // 12475\n    function toUpper(value) {                                                                                          // 12476\n      return toString(value).toUpperCase();                                                                            // 12477\n    }                                                                                                                  // 12478\n                                                                                                                       // 12479\n    /**                                                                                                                // 12480\n     * Removes leading and trailing whitespace or specified characters from `string`.                                  // 12481\n     *                                                                                                                 // 12482\n     * @static                                                                                                         // 12483\n     * @memberOf _                                                                                                     // 12484\n     * @category String                                                                                                // 12485\n     * @param {string} [string=''] The string to trim.                                                                 // 12486\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 12487\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12488\n     * @returns {string} Returns the trimmed string.                                                                   // 12489\n     * @example                                                                                                        // 12490\n     *                                                                                                                 // 12491\n     * _.trim('  abc  ');                                                                                              // 12492\n     * // => 'abc'                                                                                                     // 12493\n     *                                                                                                                 // 12494\n     * _.trim('-_-abc-_-', '_-');                                                                                      // 12495\n     * // => 'abc'                                                                                                     // 12496\n     *                                                                                                                 // 12497\n     * _.map(['  foo  ', '  bar  '], _.trim);                                                                          // 12498\n     * // => ['foo', 'bar']                                                                                            // 12499\n     */                                                                                                                // 12500\n    function trim(string, chars, guard) {                                                                              // 12501\n      string = toString(string);                                                                                       // 12502\n      if (!string) {                                                                                                   // 12503\n        return string;                                                                                                 // 12504\n      }                                                                                                                // 12505\n      if (guard || chars === undefined) {                                                                              // 12506\n        return string.replace(reTrim, '');                                                                             // 12507\n      }                                                                                                                // 12508\n      chars = (chars + '');                                                                                            // 12509\n      if (!chars) {                                                                                                    // 12510\n        return string;                                                                                                 // 12511\n      }                                                                                                                // 12512\n      var strSymbols = stringToArray(string),                                                                          // 12513\n          chrSymbols = stringToArray(chars);                                                                           // 12514\n                                                                                                                       // 12515\n      return strSymbols.slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1).join('');\n    }                                                                                                                  // 12517\n                                                                                                                       // 12518\n    /**                                                                                                                // 12519\n     * Removes trailing whitespace or specified characters from `string`.                                              // 12520\n     *                                                                                                                 // 12521\n     * @static                                                                                                         // 12522\n     * @memberOf _                                                                                                     // 12523\n     * @category String                                                                                                // 12524\n     * @param {string} [string=''] The string to trim.                                                                 // 12525\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 12526\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12527\n     * @returns {string} Returns the trimmed string.                                                                   // 12528\n     * @example                                                                                                        // 12529\n     *                                                                                                                 // 12530\n     * _.trimEnd('  abc  ');                                                                                           // 12531\n     * // => '  abc'                                                                                                   // 12532\n     *                                                                                                                 // 12533\n     * _.trimEnd('-_-abc-_-', '_-');                                                                                   // 12534\n     * // => '-_-abc'                                                                                                  // 12535\n     */                                                                                                                // 12536\n    function trimEnd(string, chars, guard) {                                                                           // 12537\n      string = toString(string);                                                                                       // 12538\n      if (!string) {                                                                                                   // 12539\n        return string;                                                                                                 // 12540\n      }                                                                                                                // 12541\n      if (guard || chars === undefined) {                                                                              // 12542\n        return string.replace(reTrimEnd, '');                                                                          // 12543\n      }                                                                                                                // 12544\n      chars = (chars + '');                                                                                            // 12545\n      if (!chars) {                                                                                                    // 12546\n        return string;                                                                                                 // 12547\n      }                                                                                                                // 12548\n      var strSymbols = stringToArray(string);                                                                          // 12549\n      return strSymbols.slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1).join('');                        // 12550\n    }                                                                                                                  // 12551\n                                                                                                                       // 12552\n    /**                                                                                                                // 12553\n     * Removes leading whitespace or specified characters from `string`.                                               // 12554\n     *                                                                                                                 // 12555\n     * @static                                                                                                         // 12556\n     * @memberOf _                                                                                                     // 12557\n     * @category String                                                                                                // 12558\n     * @param {string} [string=''] The string to trim.                                                                 // 12559\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 12560\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12561\n     * @returns {string} Returns the trimmed string.                                                                   // 12562\n     * @example                                                                                                        // 12563\n     *                                                                                                                 // 12564\n     * _.trimStart('  abc  ');                                                                                         // 12565\n     * // => 'abc  '                                                                                                   // 12566\n     *                                                                                                                 // 12567\n     * _.trimStart('-_-abc-_-', '_-');                                                                                 // 12568\n     * // => 'abc-_-'                                                                                                  // 12569\n     */                                                                                                                // 12570\n    function trimStart(string, chars, guard) {                                                                         // 12571\n      string = toString(string);                                                                                       // 12572\n      if (!string) {                                                                                                   // 12573\n        return string;                                                                                                 // 12574\n      }                                                                                                                // 12575\n      if (guard || chars === undefined) {                                                                              // 12576\n        return string.replace(reTrimStart, '');                                                                        // 12577\n      }                                                                                                                // 12578\n      chars = (chars + '');                                                                                            // 12579\n      if (!chars) {                                                                                                    // 12580\n        return string;                                                                                                 // 12581\n      }                                                                                                                // 12582\n      var strSymbols = stringToArray(string);                                                                          // 12583\n      return strSymbols.slice(charsStartIndex(strSymbols, stringToArray(chars))).join('');                             // 12584\n    }                                                                                                                  // 12585\n                                                                                                                       // 12586\n    /**                                                                                                                // 12587\n     * Truncates `string` if it's longer than the given maximum string length.                                         // 12588\n     * The last characters of the truncated string are replaced with the omission                                      // 12589\n     * string which defaults to \"...\".                                                                                 // 12590\n     *                                                                                                                 // 12591\n     * @static                                                                                                         // 12592\n     * @memberOf _                                                                                                     // 12593\n     * @category String                                                                                                // 12594\n     * @param {string} [string=''] The string to truncate.                                                             // 12595\n     * @param {Object} [options] The options object.                                                                   // 12596\n     * @param {number} [options.length=30] The maximum string length.                                                  // 12597\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.                                // 12598\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.                                // 12599\n     * @returns {string} Returns the truncated string.                                                                 // 12600\n     * @example                                                                                                        // 12601\n     *                                                                                                                 // 12602\n     * _.truncate('hi-diddly-ho there, neighborino');                                                                  // 12603\n     * // => 'hi-diddly-ho there, neighbo...'                                                                          // 12604\n     *                                                                                                                 // 12605\n     * _.truncate('hi-diddly-ho there, neighborino', {                                                                 // 12606\n     *   'length': 24,                                                                                                 // 12607\n     *   'separator': ' '                                                                                              // 12608\n     * });                                                                                                             // 12609\n     * // => 'hi-diddly-ho there,...'                                                                                  // 12610\n     *                                                                                                                 // 12611\n     * _.truncate('hi-diddly-ho there, neighborino', {                                                                 // 12612\n     *   'length': 24,                                                                                                 // 12613\n     *   'separator': /,? +/                                                                                           // 12614\n     * });                                                                                                             // 12615\n     * // => 'hi-diddly-ho there...'                                                                                   // 12616\n     *                                                                                                                 // 12617\n     * _.truncate('hi-diddly-ho there, neighborino', {                                                                 // 12618\n     *   'omission': ' [...]'                                                                                          // 12619\n     * });                                                                                                             // 12620\n     * // => 'hi-diddly-ho there, neig [...]'                                                                          // 12621\n     */                                                                                                                // 12622\n    function truncate(string, options) {                                                                               // 12623\n      var length = DEFAULT_TRUNC_LENGTH,                                                                               // 12624\n          omission = DEFAULT_TRUNC_OMISSION;                                                                           // 12625\n                                                                                                                       // 12626\n      if (isObject(options)) {                                                                                         // 12627\n        var separator = 'separator' in options ? options.separator : separator;                                        // 12628\n        length = 'length' in options ? toInteger(options.length) : length;                                             // 12629\n        omission = 'omission' in options ? toString(options.omission) : omission;                                      // 12630\n      }                                                                                                                // 12631\n      string = toString(string);                                                                                       // 12632\n                                                                                                                       // 12633\n      var strLength = string.length;                                                                                   // 12634\n      if (reHasComplexSymbol.test(string)) {                                                                           // 12635\n        var strSymbols = stringToArray(string);                                                                        // 12636\n        strLength = strSymbols.length;                                                                                 // 12637\n      }                                                                                                                // 12638\n      if (length >= strLength) {                                                                                       // 12639\n        return string;                                                                                                 // 12640\n      }                                                                                                                // 12641\n      var end = length - stringSize(omission);                                                                         // 12642\n      if (end < 1) {                                                                                                   // 12643\n        return omission;                                                                                               // 12644\n      }                                                                                                                // 12645\n      var result = strSymbols                                                                                          // 12646\n        ? strSymbols.slice(0, end).join('')                                                                            // 12647\n        : string.slice(0, end);                                                                                        // 12648\n                                                                                                                       // 12649\n      if (separator === undefined) {                                                                                   // 12650\n        return result + omission;                                                                                      // 12651\n      }                                                                                                                // 12652\n      if (strSymbols) {                                                                                                // 12653\n        end += (result.length - end);                                                                                  // 12654\n      }                                                                                                                // 12655\n      if (isRegExp(separator)) {                                                                                       // 12656\n        if (string.slice(end).search(separator)) {                                                                     // 12657\n          var match,                                                                                                   // 12658\n              substring = result;                                                                                      // 12659\n                                                                                                                       // 12660\n          if (!separator.global) {                                                                                     // 12661\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');                             // 12662\n          }                                                                                                            // 12663\n          separator.lastIndex = 0;                                                                                     // 12664\n          while ((match = separator.exec(substring))) {                                                                // 12665\n            var newEnd = match.index;                                                                                  // 12666\n          }                                                                                                            // 12667\n          result = result.slice(0, newEnd === undefined ? end : newEnd);                                               // 12668\n        }                                                                                                              // 12669\n      } else if (string.indexOf(separator, end) != end) {                                                              // 12670\n        var index = result.lastIndexOf(separator);                                                                     // 12671\n        if (index > -1) {                                                                                              // 12672\n          result = result.slice(0, index);                                                                             // 12673\n        }                                                                                                              // 12674\n      }                                                                                                                // 12675\n      return result + omission;                                                                                        // 12676\n    }                                                                                                                  // 12677\n                                                                                                                       // 12678\n    /**                                                                                                                // 12679\n     * The inverse of `_.escape`; this method converts the HTML entities                                               // 12680\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their                                    // 12681\n     * corresponding characters.                                                                                       // 12682\n     *                                                                                                                 // 12683\n     * **Note:** No other HTML entities are unescaped. To unescape additional HTML                                     // 12684\n     * entities use a third-party library like [_he_](https://mths.be/he).                                             // 12685\n     *                                                                                                                 // 12686\n     * @static                                                                                                         // 12687\n     * @memberOf _                                                                                                     // 12688\n     * @category String                                                                                                // 12689\n     * @param {string} [string=''] The string to unescape.                                                             // 12690\n     * @returns {string} Returns the unescaped string.                                                                 // 12691\n     * @example                                                                                                        // 12692\n     *                                                                                                                 // 12693\n     * _.unescape('fred, barney, &amp; pebbles');                                                                      // 12694\n     * // => 'fred, barney, & pebbles'                                                                                 // 12695\n     */                                                                                                                // 12696\n    function unescape(string) {                                                                                        // 12697\n      string = toString(string);                                                                                       // 12698\n      return (string && reHasEscapedHtml.test(string))                                                                 // 12699\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)                                                              // 12700\n        : string;                                                                                                      // 12701\n    }                                                                                                                  // 12702\n                                                                                                                       // 12703\n    /**                                                                                                                // 12704\n     * Converts `string`, as space separated words, to upper case.                                                     // 12705\n     *                                                                                                                 // 12706\n     * @static                                                                                                         // 12707\n     * @memberOf _                                                                                                     // 12708\n     * @category String                                                                                                // 12709\n     * @param {string} [string=''] The string to convert.                                                              // 12710\n     * @returns {string} Returns the upper cased string.                                                               // 12711\n     * @example                                                                                                        // 12712\n     *                                                                                                                 // 12713\n     * _.upperCase('--foo-bar');                                                                                       // 12714\n     * // => 'FOO BAR'                                                                                                 // 12715\n     *                                                                                                                 // 12716\n     * _.upperCase('fooBar');                                                                                          // 12717\n     * // => 'FOO BAR'                                                                                                 // 12718\n     *                                                                                                                 // 12719\n     * _.upperCase('__foo_bar__');                                                                                     // 12720\n     * // => 'FOO BAR'                                                                                                 // 12721\n     */                                                                                                                // 12722\n    var upperCase = createCompounder(function(result, word, index) {                                                   // 12723\n      return result + (index ? ' ' : '') + word.toUpperCase();                                                         // 12724\n    });                                                                                                                // 12725\n                                                                                                                       // 12726\n    /**                                                                                                                // 12727\n     * Splits `string` into an array of its words.                                                                     // 12728\n     *                                                                                                                 // 12729\n     * @static                                                                                                         // 12730\n     * @memberOf _                                                                                                     // 12731\n     * @category String                                                                                                // 12732\n     * @param {string} [string=''] The string to inspect.                                                              // 12733\n     * @param {RegExp|string} [pattern] The pattern to match words.                                                    // 12734\n     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.                                 // 12735\n     * @returns {Array} Returns the words of `string`.                                                                 // 12736\n     * @example                                                                                                        // 12737\n     *                                                                                                                 // 12738\n     * _.words('fred, barney, & pebbles');                                                                             // 12739\n     * // => ['fred', 'barney', 'pebbles']                                                                             // 12740\n     *                                                                                                                 // 12741\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);                                                                  // 12742\n     * // => ['fred', 'barney', '&', 'pebbles']                                                                        // 12743\n     */                                                                                                                // 12744\n    function words(string, pattern, guard) {                                                                           // 12745\n      string = toString(string);                                                                                       // 12746\n      pattern = guard ? undefined : pattern;                                                                           // 12747\n                                                                                                                       // 12748\n      if (pattern === undefined) {                                                                                     // 12749\n        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;                                         // 12750\n      }                                                                                                                // 12751\n      return string.match(pattern) || [];                                                                              // 12752\n    }                                                                                                                  // 12753\n                                                                                                                       // 12754\n    /*------------------------------------------------------------------------*/                                       // 12755\n                                                                                                                       // 12756\n    /**                                                                                                                // 12757\n     * Attempts to invoke `func`, returning either the result or the caught error                                      // 12758\n     * object. Any additional arguments are provided to `func` when it's invoked.                                      // 12759\n     *                                                                                                                 // 12760\n     * @static                                                                                                         // 12761\n     * @memberOf _                                                                                                     // 12762\n     * @category Util                                                                                                  // 12763\n     * @param {Function} func The function to attempt.                                                                 // 12764\n     * @returns {*} Returns the `func` result or error object.                                                         // 12765\n     * @example                                                                                                        // 12766\n     *                                                                                                                 // 12767\n     * // avoid throwing errors for invalid selectors                                                                  // 12768\n     * var elements = _.attempt(function(selector) {                                                                   // 12769\n     *   return document.querySelectorAll(selector);                                                                   // 12770\n     * }, '>_>');                                                                                                      // 12771\n     *                                                                                                                 // 12772\n     * if (_.isError(elements)) {                                                                                      // 12773\n     *   elements = [];                                                                                                // 12774\n     * }                                                                                                               // 12775\n     */                                                                                                                // 12776\n    var attempt = rest(function(func, args) {                                                                          // 12777\n      try {                                                                                                            // 12778\n        return apply(func, undefined, args);                                                                           // 12779\n      } catch (e) {                                                                                                    // 12780\n        return isError(e) ? e : new Error(e);                                                                          // 12781\n      }                                                                                                                // 12782\n    });                                                                                                                // 12783\n                                                                                                                       // 12784\n    /**                                                                                                                // 12785\n     * Binds methods of an object to the object itself, overwriting the existing                                       // 12786\n     * method.                                                                                                         // 12787\n     *                                                                                                                 // 12788\n     * **Note:** This method doesn't set the \"length\" property of bound functions.                                     // 12789\n     *                                                                                                                 // 12790\n     * @static                                                                                                         // 12791\n     * @memberOf _                                                                                                     // 12792\n     * @category Util                                                                                                  // 12793\n     * @param {Object} object The object to bind and assign the bound methods to.                                      // 12794\n     * @param {...(string|string[])} methodNames The object method names to bind,                                      // 12795\n     *  specified individually or in arrays.                                                                           // 12796\n     * @returns {Object} Returns `object`.                                                                             // 12797\n     * @example                                                                                                        // 12798\n     *                                                                                                                 // 12799\n     * var view = {                                                                                                    // 12800\n     *   'label': 'docs',                                                                                              // 12801\n     *   'onClick': function() {                                                                                       // 12802\n     *     console.log('clicked ' + this.label);                                                                       // 12803\n     *   }                                                                                                             // 12804\n     * };                                                                                                              // 12805\n     *                                                                                                                 // 12806\n     * _.bindAll(view, 'onClick');                                                                                     // 12807\n     * jQuery(element).on('click', view.onClick);                                                                      // 12808\n     * // => logs 'clicked docs' when clicked                                                                          // 12809\n     */                                                                                                                // 12810\n    var bindAll = rest(function(object, methodNames) {                                                                 // 12811\n      arrayEach(baseFlatten(methodNames), function(key) {                                                              // 12812\n        object[key] = bind(object[key], object);                                                                       // 12813\n      });                                                                                                              // 12814\n      return object;                                                                                                   // 12815\n    });                                                                                                                // 12816\n                                                                                                                       // 12817\n    /**                                                                                                                // 12818\n     * Creates a function that iterates over `pairs` invoking the corresponding                                        // 12819\n     * function of the first predicate to return truthy. The predicate-function                                        // 12820\n     * pairs are invoked with the `this` binding and arguments of the created                                          // 12821\n     * function.                                                                                                       // 12822\n     *                                                                                                                 // 12823\n     * @static                                                                                                         // 12824\n     * @memberOf _                                                                                                     // 12825\n     * @category Util                                                                                                  // 12826\n     * @param {Array} pairs The predicate-function pairs.                                                              // 12827\n     * @returns {Function} Returns the new function.                                                                   // 12828\n     * @example                                                                                                        // 12829\n     *                                                                                                                 // 12830\n     * var func = _.cond([                                                                                             // 12831\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],                                                   // 12832\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],                                                   // 12833\n     *   [_.constant(true),                _.constant('no match')]                                                     // 12834\n     * ])                                                                                                              // 12835\n     *                                                                                                                 // 12836\n     * func({ 'a': 1, 'b': 2 });                                                                                       // 12837\n     * // => 'matches A'                                                                                               // 12838\n     *                                                                                                                 // 12839\n     * func({ 'a': 0, 'b': 1 });                                                                                       // 12840\n     * // => 'matches B'                                                                                               // 12841\n     *                                                                                                                 // 12842\n     * func({ 'a': '1', 'b': '2' });                                                                                   // 12843\n     * // => 'no match'                                                                                                // 12844\n     */                                                                                                                // 12845\n    function cond(pairs) {                                                                                             // 12846\n      var length = pairs ? pairs.length : 0,                                                                           // 12847\n          toIteratee = getIteratee();                                                                                  // 12848\n                                                                                                                       // 12849\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {                                                          // 12850\n        if (typeof pair[1] != 'function') {                                                                            // 12851\n          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 12852\n        }                                                                                                              // 12853\n        return [toIteratee(pair[0]), pair[1]];                                                                         // 12854\n      });                                                                                                              // 12855\n                                                                                                                       // 12856\n      return rest(function(args) {                                                                                     // 12857\n        var index = -1;                                                                                                // 12858\n        while (++index < length) {                                                                                     // 12859\n          var pair = pairs[index];                                                                                     // 12860\n          if (apply(pair[0], this, args)) {                                                                            // 12861\n            return apply(pair[1], this, args);                                                                         // 12862\n          }                                                                                                            // 12863\n        }                                                                                                              // 12864\n      });                                                                                                              // 12865\n    }                                                                                                                  // 12866\n                                                                                                                       // 12867\n    /**                                                                                                                // 12868\n     * Creates a function that invokes the predicate properties of `source` with                                       // 12869\n     * the corresponding property values of a given object, returning `true` if                                        // 12870\n     * all predicates return truthy, else `false`.                                                                     // 12871\n     *                                                                                                                 // 12872\n     * @static                                                                                                         // 12873\n     * @memberOf _                                                                                                     // 12874\n     * @category Util                                                                                                  // 12875\n     * @param {Object} source The object of property predicates to conform to.                                         // 12876\n     * @returns {Function} Returns the new function.                                                                   // 12877\n     * @example                                                                                                        // 12878\n     *                                                                                                                 // 12879\n     * var users = [                                                                                                   // 12880\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 12881\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 12882\n     * ];                                                                                                              // 12883\n     *                                                                                                                 // 12884\n     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));                                                 // 12885\n     * // => [{ 'user': 'fred', 'age': 40 }]                                                                           // 12886\n     */                                                                                                                // 12887\n    function conforms(source) {                                                                                        // 12888\n      return baseConforms(baseClone(source, true));                                                                    // 12889\n    }                                                                                                                  // 12890\n                                                                                                                       // 12891\n    /**                                                                                                                // 12892\n     * Creates a function that returns `value`.                                                                        // 12893\n     *                                                                                                                 // 12894\n     * @static                                                                                                         // 12895\n     * @memberOf _                                                                                                     // 12896\n     * @category Util                                                                                                  // 12897\n     * @param {*} value The value to return from the new function.                                                     // 12898\n     * @returns {Function} Returns the new function.                                                                   // 12899\n     * @example                                                                                                        // 12900\n     *                                                                                                                 // 12901\n     * var object = { 'user': 'fred' };                                                                                // 12902\n     * var getter = _.constant(object);                                                                                // 12903\n     *                                                                                                                 // 12904\n     * getter() === object;                                                                                            // 12905\n     * // => true                                                                                                      // 12906\n     */                                                                                                                // 12907\n    function constant(value) {                                                                                         // 12908\n      return function() {                                                                                              // 12909\n        return value;                                                                                                  // 12910\n      };                                                                                                               // 12911\n    }                                                                                                                  // 12912\n                                                                                                                       // 12913\n    /**                                                                                                                // 12914\n     * Creates a function that returns the result of invoking the provided                                             // 12915\n     * functions with the `this` binding of the created function, where each                                           // 12916\n     * successive invocation is supplied the return value of the previous.                                             // 12917\n     *                                                                                                                 // 12918\n     * @static                                                                                                         // 12919\n     * @memberOf _                                                                                                     // 12920\n     * @category Util                                                                                                  // 12921\n     * @param {...(Function|Function[])} [funcs] Functions to invoke.                                                  // 12922\n     * @returns {Function} Returns the new function.                                                                   // 12923\n     * @example                                                                                                        // 12924\n     *                                                                                                                 // 12925\n     * function square(n) {                                                                                            // 12926\n     *   return n * n;                                                                                                 // 12927\n     * }                                                                                                               // 12928\n     *                                                                                                                 // 12929\n     * var addSquare = _.flow(_.add, square);                                                                          // 12930\n     * addSquare(1, 2);                                                                                                // 12931\n     * // => 9                                                                                                         // 12932\n     */                                                                                                                // 12933\n    var flow = createFlow();                                                                                           // 12934\n                                                                                                                       // 12935\n    /**                                                                                                                // 12936\n     * This method is like `_.flow` except that it creates a function that                                             // 12937\n     * invokes the provided functions from right to left.                                                              // 12938\n     *                                                                                                                 // 12939\n     * @static                                                                                                         // 12940\n     * @memberOf _                                                                                                     // 12941\n     * @category Util                                                                                                  // 12942\n     * @param {...(Function|Function[])} [funcs] Functions to invoke.                                                  // 12943\n     * @returns {Function} Returns the new function.                                                                   // 12944\n     * @example                                                                                                        // 12945\n     *                                                                                                                 // 12946\n     * function square(n) {                                                                                            // 12947\n     *   return n * n;                                                                                                 // 12948\n     * }                                                                                                               // 12949\n     *                                                                                                                 // 12950\n     * var addSquare = _.flowRight(square, _.add);                                                                     // 12951\n     * addSquare(1, 2);                                                                                                // 12952\n     * // => 9                                                                                                         // 12953\n     */                                                                                                                // 12954\n    var flowRight = createFlow(true);                                                                                  // 12955\n                                                                                                                       // 12956\n    /**                                                                                                                // 12957\n     * This method returns the first argument provided to it.                                                          // 12958\n     *                                                                                                                 // 12959\n     * @static                                                                                                         // 12960\n     * @memberOf _                                                                                                     // 12961\n     * @category Util                                                                                                  // 12962\n     * @param {*} value Any value.                                                                                     // 12963\n     * @returns {*} Returns `value`.                                                                                   // 12964\n     * @example                                                                                                        // 12965\n     *                                                                                                                 // 12966\n     * var object = { 'user': 'fred' };                                                                                // 12967\n     *                                                                                                                 // 12968\n     * _.identity(object) === object;                                                                                  // 12969\n     * // => true                                                                                                      // 12970\n     */                                                                                                                // 12971\n    function identity(value) {                                                                                         // 12972\n      return value;                                                                                                    // 12973\n    }                                                                                                                  // 12974\n                                                                                                                       // 12975\n    /**                                                                                                                // 12976\n     * Creates a function that invokes `func` with the arguments of the created                                        // 12977\n     * function. If `func` is a property name the created callback returns the                                         // 12978\n     * property value for a given element. If `func` is an object the created                                          // 12979\n     * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.\n     *                                                                                                                 // 12981\n     * @static                                                                                                         // 12982\n     * @memberOf _                                                                                                     // 12983\n     * @category Util                                                                                                  // 12984\n     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 12985\n     * @returns {Function} Returns the callback.                                                                       // 12986\n     * @example                                                                                                        // 12987\n     *                                                                                                                 // 12988\n     * var users = [                                                                                                   // 12989\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 12990\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 12991\n     * ];                                                                                                              // 12992\n     *                                                                                                                 // 12993\n     * // create custom iteratee shorthands                                                                            // 12994\n     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {                                                      // 12995\n     *   var p = /^(\\S+)\\s*([<>])\\s*(\\S+)$/.exec(func);                                                                // 12996\n     *   return !p ? callback(func) : function(object) {                                                               // 12997\n     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);                                           // 12998\n     *   };                                                                                                            // 12999\n     * });                                                                                                             // 13000\n     *                                                                                                                 // 13001\n     * _.filter(users, 'age > 36');                                                                                    // 13002\n     * // => [{ 'user': 'fred', 'age': 40 }]                                                                           // 13003\n     */                                                                                                                // 13004\n    function iteratee(func) {                                                                                          // 13005\n      return (isObjectLike(func) && !isArray(func))                                                                    // 13006\n        ? matches(func)                                                                                                // 13007\n        : baseIteratee(func);                                                                                          // 13008\n    }                                                                                                                  // 13009\n                                                                                                                       // 13010\n    /**                                                                                                                // 13011\n     * Creates a function that performs a deep partial comparison between a given                                      // 13012\n     * object and `source`, returning `true` if the given object has equivalent                                        // 13013\n     * property values, else `false`.                                                                                  // 13014\n     *                                                                                                                 // 13015\n     * **Note:** This method supports comparing the same values as `_.isEqual`.                                        // 13016\n     *                                                                                                                 // 13017\n     * @static                                                                                                         // 13018\n     * @memberOf _                                                                                                     // 13019\n     * @category Util                                                                                                  // 13020\n     * @param {Object} source The object of property values to match.                                                  // 13021\n     * @returns {Function} Returns the new function.                                                                   // 13022\n     * @example                                                                                                        // 13023\n     *                                                                                                                 // 13024\n     * var users = [                                                                                                   // 13025\n     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 13026\n     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 13027\n     * ];                                                                                                              // 13028\n     *                                                                                                                 // 13029\n     * _.filter(users, _.matches({ 'age': 40, 'active': false }));                                                     // 13030\n     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]                                                          // 13031\n     */                                                                                                                // 13032\n    function matches(source) {                                                                                         // 13033\n      return baseMatches(baseClone(source, true));                                                                     // 13034\n    }                                                                                                                  // 13035\n                                                                                                                       // 13036\n    /**                                                                                                                // 13037\n     * Creates a function that performs a deep partial comparison between the                                          // 13038\n     * value at `path` of a given object to `srcValue`, returning `true` if the                                        // 13039\n     * object value is equivalent, else `false`.                                                                       // 13040\n     *                                                                                                                 // 13041\n     * **Note:** This method supports comparing the same values as `_.isEqual`.                                        // 13042\n     *                                                                                                                 // 13043\n     * @static                                                                                                         // 13044\n     * @memberOf _                                                                                                     // 13045\n     * @category Util                                                                                                  // 13046\n     * @param {Array|string} path The path of the property to get.                                                     // 13047\n     * @param {*} srcValue The value to match.                                                                         // 13048\n     * @returns {Function} Returns the new function.                                                                   // 13049\n     * @example                                                                                                        // 13050\n     *                                                                                                                 // 13051\n     * var users = [                                                                                                   // 13052\n     *   { 'user': 'barney' },                                                                                         // 13053\n     *   { 'user': 'fred' }                                                                                            // 13054\n     * ];                                                                                                              // 13055\n     *                                                                                                                 // 13056\n     * _.find(users, _.matchesProperty('user', 'fred'));                                                               // 13057\n     * // => { 'user': 'fred' }                                                                                        // 13058\n     */                                                                                                                // 13059\n    function matchesProperty(path, srcValue) {                                                                         // 13060\n      return baseMatchesProperty(path, baseClone(srcValue, true));                                                     // 13061\n    }                                                                                                                  // 13062\n                                                                                                                       // 13063\n    /**                                                                                                                // 13064\n     * Creates a function that invokes the method at `path` of a given object.                                         // 13065\n     * Any additional arguments are provided to the invoked method.                                                    // 13066\n     *                                                                                                                 // 13067\n     * @static                                                                                                         // 13068\n     * @memberOf _                                                                                                     // 13069\n     * @category Util                                                                                                  // 13070\n     * @param {Array|string} path The path of the method to invoke.                                                    // 13071\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 13072\n     * @returns {Function} Returns the new function.                                                                   // 13073\n     * @example                                                                                                        // 13074\n     *                                                                                                                 // 13075\n     * var objects = [                                                                                                 // 13076\n     *   { 'a': { 'b': { 'c': _.constant(2) } } },                                                                     // 13077\n     *   { 'a': { 'b': { 'c': _.constant(1) } } }                                                                      // 13078\n     * ];                                                                                                              // 13079\n     *                                                                                                                 // 13080\n     * _.map(objects, _.method('a.b.c'));                                                                              // 13081\n     * // => [2, 1]                                                                                                    // 13082\n     *                                                                                                                 // 13083\n     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');                                             // 13084\n     * // => [1, 2]                                                                                                    // 13085\n     */                                                                                                                // 13086\n    var method = rest(function(path, args) {                                                                           // 13087\n      return function(object) {                                                                                        // 13088\n        return baseInvoke(object, path, args);                                                                         // 13089\n      };                                                                                                               // 13090\n    });                                                                                                                // 13091\n                                                                                                                       // 13092\n    /**                                                                                                                // 13093\n     * The opposite of `_.method`; this method creates a function that invokes                                         // 13094\n     * the method at a given path of `object`. Any additional arguments are                                            // 13095\n     * provided to the invoked method.                                                                                 // 13096\n     *                                                                                                                 // 13097\n     * @static                                                                                                         // 13098\n     * @memberOf _                                                                                                     // 13099\n     * @category Util                                                                                                  // 13100\n     * @param {Object} object The object to query.                                                                     // 13101\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 13102\n     * @returns {Function} Returns the new function.                                                                   // 13103\n     * @example                                                                                                        // 13104\n     *                                                                                                                 // 13105\n     * var array = _.times(3, _.constant),                                                                             // 13106\n     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 13107\n     *                                                                                                                 // 13108\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));                                                                    // 13109\n     * // => [2, 0]                                                                                                    // 13110\n     *                                                                                                                 // 13111\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));                                                            // 13112\n     * // => [2, 0]                                                                                                    // 13113\n     */                                                                                                                // 13114\n    var methodOf = rest(function(object, args) {                                                                       // 13115\n      return function(path) {                                                                                          // 13116\n        return baseInvoke(object, path, args);                                                                         // 13117\n      };                                                                                                               // 13118\n    });                                                                                                                // 13119\n                                                                                                                       // 13120\n    /**                                                                                                                // 13121\n     * Adds all own enumerable function properties of a source object to the                                           // 13122\n     * destination object. If `object` is a function then methods are added to                                         // 13123\n     * its prototype as well.                                                                                          // 13124\n     *                                                                                                                 // 13125\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to                                        // 13126\n     * avoid conflicts caused by modifying the original.                                                               // 13127\n     *                                                                                                                 // 13128\n     * @static                                                                                                         // 13129\n     * @memberOf _                                                                                                     // 13130\n     * @category Util                                                                                                  // 13131\n     * @param {Function|Object} [object=lodash] The destination object.                                                // 13132\n     * @param {Object} source The object of functions to add.                                                          // 13133\n     * @param {Object} [options] The options object.                                                                   // 13134\n     * @param {boolean} [options.chain=true] Specify whether the functions added                                       // 13135\n     *  are chainable.                                                                                                 // 13136\n     * @returns {Function|Object} Returns `object`.                                                                    // 13137\n     * @example                                                                                                        // 13138\n     *                                                                                                                 // 13139\n     * function vowels(string) {                                                                                       // 13140\n     *   return _.filter(string, function(v) {                                                                         // 13141\n     *     return /[aeiou]/i.test(v);                                                                                  // 13142\n     *   });                                                                                                           // 13143\n     * }                                                                                                               // 13144\n     *                                                                                                                 // 13145\n     * _.mixin({ 'vowels': vowels });                                                                                  // 13146\n     * _.vowels('fred');                                                                                               // 13147\n     * // => ['e']                                                                                                     // 13148\n     *                                                                                                                 // 13149\n     * _('fred').vowels().value();                                                                                     // 13150\n     * // => ['e']                                                                                                     // 13151\n     *                                                                                                                 // 13152\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });                                                              // 13153\n     * _('fred').vowels();                                                                                             // 13154\n     * // => ['e']                                                                                                     // 13155\n     */                                                                                                                // 13156\n    function mixin(object, source, options) {                                                                          // 13157\n      var props = keys(source),                                                                                        // 13158\n          methodNames = baseFunctions(source, props);                                                                  // 13159\n                                                                                                                       // 13160\n      if (options == null &&                                                                                           // 13161\n          !(isObject(source) && (methodNames.length || !props.length))) {                                              // 13162\n        options = source;                                                                                              // 13163\n        source = object;                                                                                               // 13164\n        object = this;                                                                                                 // 13165\n        methodNames = baseFunctions(source, keys(source));                                                             // 13166\n      }                                                                                                                // 13167\n      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,                                    // 13168\n          isFunc = isFunction(object);                                                                                 // 13169\n                                                                                                                       // 13170\n      arrayEach(methodNames, function(methodName) {                                                                    // 13171\n        var func = source[methodName];                                                                                 // 13172\n        object[methodName] = func;                                                                                     // 13173\n        if (isFunc) {                                                                                                  // 13174\n          object.prototype[methodName] = function() {                                                                  // 13175\n            var chainAll = this.__chain__;                                                                             // 13176\n            if (chain || chainAll) {                                                                                   // 13177\n              var result = object(this.__wrapped__),                                                                   // 13178\n                  actions = result.__actions__ = copyArray(this.__actions__);                                          // 13179\n                                                                                                                       // 13180\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });                                    // 13181\n              result.__chain__ = chainAll;                                                                             // 13182\n              return result;                                                                                           // 13183\n            }                                                                                                          // 13184\n            return func.apply(object, arrayPush([this.value()], arguments));                                           // 13185\n          };                                                                                                           // 13186\n        }                                                                                                              // 13187\n      });                                                                                                              // 13188\n                                                                                                                       // 13189\n      return object;                                                                                                   // 13190\n    }                                                                                                                  // 13191\n                                                                                                                       // 13192\n    /**                                                                                                                // 13193\n     * Reverts the `_` variable to its previous value and returns a reference to                                       // 13194\n     * the `lodash` function.                                                                                          // 13195\n     *                                                                                                                 // 13196\n     * @static                                                                                                         // 13197\n     * @memberOf _                                                                                                     // 13198\n     * @category Util                                                                                                  // 13199\n     * @returns {Function} Returns the `lodash` function.                                                              // 13200\n     * @example                                                                                                        // 13201\n     *                                                                                                                 // 13202\n     * var lodash = _.noConflict();                                                                                    // 13203\n     */                                                                                                                // 13204\n    function noConflict() {                                                                                            // 13205\n      root._ = oldDash;                                                                                                // 13206\n      return this;                                                                                                     // 13207\n    }                                                                                                                  // 13208\n                                                                                                                       // 13209\n    /**                                                                                                                // 13210\n     * A no-operation function that returns `undefined` regardless of the                                              // 13211\n     * arguments it receives.                                                                                          // 13212\n     *                                                                                                                 // 13213\n     * @static                                                                                                         // 13214\n     * @memberOf _                                                                                                     // 13215\n     * @category Util                                                                                                  // 13216\n     * @example                                                                                                        // 13217\n     *                                                                                                                 // 13218\n     * var object = { 'user': 'fred' };                                                                                // 13219\n     *                                                                                                                 // 13220\n     * _.noop(object) === undefined;                                                                                   // 13221\n     * // => true                                                                                                      // 13222\n     */                                                                                                                // 13223\n    function noop() {                                                                                                  // 13224\n      // No operation performed.                                                                                       // 13225\n    }                                                                                                                  // 13226\n                                                                                                                       // 13227\n    /**                                                                                                                // 13228\n     * Creates a function that returns its nth argument.                                                               // 13229\n     *                                                                                                                 // 13230\n     * @static                                                                                                         // 13231\n     * @memberOf _                                                                                                     // 13232\n     * @category Util                                                                                                  // 13233\n     * @param {number} [n=0] The index of the argument to return.                                                      // 13234\n     * @returns {Function} Returns the new function.                                                                   // 13235\n     * @example                                                                                                        // 13236\n     *                                                                                                                 // 13237\n     * var func = _.nthArg(1);                                                                                         // 13238\n     *                                                                                                                 // 13239\n     * func('a', 'b', 'c');                                                                                            // 13240\n     * // => 'b'                                                                                                       // 13241\n     */                                                                                                                // 13242\n    function nthArg(n) {                                                                                               // 13243\n      n = toInteger(n);                                                                                                // 13244\n      return function() {                                                                                              // 13245\n        return arguments[n];                                                                                           // 13246\n      };                                                                                                               // 13247\n    }                                                                                                                  // 13248\n                                                                                                                       // 13249\n    /**                                                                                                                // 13250\n     * Creates a function that invokes `iteratees` with the arguments provided                                         // 13251\n     * to the created function and returns their results.                                                              // 13252\n     *                                                                                                                 // 13253\n     * @static                                                                                                         // 13254\n     * @memberOf _                                                                                                     // 13255\n     * @category Util                                                                                                  // 13256\n     * @param {...(Function|Function[])} iteratees The iteratees to invoke.                                            // 13257\n     * @returns {Function} Returns the new function.                                                                   // 13258\n     * @example                                                                                                        // 13259\n     *                                                                                                                 // 13260\n     * var func = _.over(Math.max, Math.min);                                                                          // 13261\n     *                                                                                                                 // 13262\n     * func(1, 2, 3, 4);                                                                                               // 13263\n     * // => [4, 1]                                                                                                    // 13264\n     */                                                                                                                // 13265\n    var over = createOver(arrayMap);                                                                                   // 13266\n                                                                                                                       // 13267\n    /**                                                                                                                // 13268\n     * Creates a function that checks if **all** of the `predicates` return                                            // 13269\n     * truthy when invoked with the arguments provided to the created function.                                        // 13270\n     *                                                                                                                 // 13271\n     * @static                                                                                                         // 13272\n     * @memberOf _                                                                                                     // 13273\n     * @category Util                                                                                                  // 13274\n     * @param {...(Function|Function[])} predicates The predicates to check.                                           // 13275\n     * @returns {Function} Returns the new function.                                                                   // 13276\n     * @example                                                                                                        // 13277\n     *                                                                                                                 // 13278\n     * var func = _.overEvery(Boolean, isFinite);                                                                      // 13279\n     *                                                                                                                 // 13280\n     * func('1');                                                                                                      // 13281\n     * // => true                                                                                                      // 13282\n     *                                                                                                                 // 13283\n     * func(null);                                                                                                     // 13284\n     * // => false                                                                                                     // 13285\n     *                                                                                                                 // 13286\n     * func(NaN);                                                                                                      // 13287\n     * // => false                                                                                                     // 13288\n     */                                                                                                                // 13289\n    var overEvery = createOver(arrayEvery);                                                                            // 13290\n                                                                                                                       // 13291\n    /**                                                                                                                // 13292\n     * Creates a function that checks if **any** of the `predicates` return                                            // 13293\n     * truthy when invoked with the arguments provided to the created function.                                        // 13294\n     *                                                                                                                 // 13295\n     * @static                                                                                                         // 13296\n     * @memberOf _                                                                                                     // 13297\n     * @category Util                                                                                                  // 13298\n     * @param {...(Function|Function[])} predicates The predicates to check.                                           // 13299\n     * @returns {Function} Returns the new function.                                                                   // 13300\n     * @example                                                                                                        // 13301\n     *                                                                                                                 // 13302\n     * var func = _.overSome(Boolean, isFinite);                                                                       // 13303\n     *                                                                                                                 // 13304\n     * func('1');                                                                                                      // 13305\n     * // => true                                                                                                      // 13306\n     *                                                                                                                 // 13307\n     * func(null);                                                                                                     // 13308\n     * // => true                                                                                                      // 13309\n     *                                                                                                                 // 13310\n     * func(NaN);                                                                                                      // 13311\n     * // => false                                                                                                     // 13312\n     */                                                                                                                // 13313\n    var overSome = createOver(arraySome);                                                                              // 13314\n                                                                                                                       // 13315\n    /**                                                                                                                // 13316\n     * Creates a function that returns the value at `path` of a given object.                                          // 13317\n     *                                                                                                                 // 13318\n     * @static                                                                                                         // 13319\n     * @memberOf _                                                                                                     // 13320\n     * @category Util                                                                                                  // 13321\n     * @param {Array|string} path The path of the property to get.                                                     // 13322\n     * @returns {Function} Returns the new function.                                                                   // 13323\n     * @example                                                                                                        // 13324\n     *                                                                                                                 // 13325\n     * var objects = [                                                                                                 // 13326\n     *   { 'a': { 'b': { 'c': 2 } } },                                                                                 // 13327\n     *   { 'a': { 'b': { 'c': 1 } } }                                                                                  // 13328\n     * ];                                                                                                              // 13329\n     *                                                                                                                 // 13330\n     * _.map(objects, _.property('a.b.c'));                                                                            // 13331\n     * // => [2, 1]                                                                                                    // 13332\n     *                                                                                                                 // 13333\n     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');                                                 // 13334\n     * // => [1, 2]                                                                                                    // 13335\n     */                                                                                                                // 13336\n    function property(path) {                                                                                          // 13337\n      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);                                                // 13338\n    }                                                                                                                  // 13339\n                                                                                                                       // 13340\n    /**                                                                                                                // 13341\n     * The opposite of `_.property`; this method creates a function that returns                                       // 13342\n     * the value at a given path of `object`.                                                                          // 13343\n     *                                                                                                                 // 13344\n     * @static                                                                                                         // 13345\n     * @memberOf _                                                                                                     // 13346\n     * @category Util                                                                                                  // 13347\n     * @param {Object} object The object to query.                                                                     // 13348\n     * @returns {Function} Returns the new function.                                                                   // 13349\n     * @example                                                                                                        // 13350\n     *                                                                                                                 // 13351\n     * var array = [0, 1, 2],                                                                                          // 13352\n     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 13353\n     *                                                                                                                 // 13354\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));                                                                  // 13355\n     * // => [2, 0]                                                                                                    // 13356\n     *                                                                                                                 // 13357\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));                                                          // 13358\n     * // => [2, 0]                                                                                                    // 13359\n     */                                                                                                                // 13360\n    function propertyOf(object) {                                                                                      // 13361\n      return function(path) {                                                                                          // 13362\n        return object == null ? undefined : baseGet(object, path);                                                     // 13363\n      };                                                                                                               // 13364\n    }                                                                                                                  // 13365\n                                                                                                                       // 13366\n    /**                                                                                                                // 13367\n     * Creates an array of numbers (positive and/or negative) progressing from                                         // 13368\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative                                   // 13369\n     * `start` is specified without an `end` or `step`. If `end` is not specified                                      // 13370\n     * it's set to `start` with `start` then set to `0`.  If `end` is less than                                        // 13371\n     * `start` a zero-length range is created unless a negative `step` is specified.                                   // 13372\n     *                                                                                                                 // 13373\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving                                                // 13374\n     * floating-point values which can produce unexpected results.                                                     // 13375\n     *                                                                                                                 // 13376\n     * @static                                                                                                         // 13377\n     * @memberOf _                                                                                                     // 13378\n     * @category Util                                                                                                  // 13379\n     * @param {number} [start=0] The start of the range.                                                               // 13380\n     * @param {number} end The end of the range.                                                                       // 13381\n     * @param {number} [step=1] The value to increment or decrement by.                                                // 13382\n     * @returns {Array} Returns the new array of numbers.                                                              // 13383\n     * @example                                                                                                        // 13384\n     *                                                                                                                 // 13385\n     * _.range(4);                                                                                                     // 13386\n     * // => [0, 1, 2, 3]                                                                                              // 13387\n     *                                                                                                                 // 13388\n     * _.range(-4);                                                                                                    // 13389\n     * // => [0, -1, -2, -3]                                                                                           // 13390\n     *                                                                                                                 // 13391\n     * _.range(1, 5);                                                                                                  // 13392\n     * // => [1, 2, 3, 4]                                                                                              // 13393\n     *                                                                                                                 // 13394\n     * _.range(0, 20, 5);                                                                                              // 13395\n     * // => [0, 5, 10, 15]                                                                                            // 13396\n     *                                                                                                                 // 13397\n     * _.range(0, -4, -1);                                                                                             // 13398\n     * // => [0, -1, -2, -3]                                                                                           // 13399\n     *                                                                                                                 // 13400\n     * _.range(1, 4, 0);                                                                                               // 13401\n     * // => [1, 1, 1]                                                                                                 // 13402\n     *                                                                                                                 // 13403\n     * _.range(0);                                                                                                     // 13404\n     * // => []                                                                                                        // 13405\n     */                                                                                                                // 13406\n    var range = createRange();                                                                                         // 13407\n                                                                                                                       // 13408\n    /**                                                                                                                // 13409\n     * This method is like `_.range` except that it populates values in                                                // 13410\n     * descending order.                                                                                               // 13411\n     *                                                                                                                 // 13412\n     * @static                                                                                                         // 13413\n     * @memberOf _                                                                                                     // 13414\n     * @category Util                                                                                                  // 13415\n     * @param {number} [start=0] The start of the range.                                                               // 13416\n     * @param {number} end The end of the range.                                                                       // 13417\n     * @param {number} [step=1] The value to increment or decrement by.                                                // 13418\n     * @returns {Array} Returns the new array of numbers.                                                              // 13419\n     * @example                                                                                                        // 13420\n     *                                                                                                                 // 13421\n     * _.rangeRight(4);                                                                                                // 13422\n     * // => [3, 2, 1, 0]                                                                                              // 13423\n     *                                                                                                                 // 13424\n     * _.rangeRight(-4);                                                                                               // 13425\n     * // => [-3, -2, -1, 0]                                                                                           // 13426\n     *                                                                                                                 // 13427\n     * _.rangeRight(1, 5);                                                                                             // 13428\n     * // => [4, 3, 2, 1]                                                                                              // 13429\n     *                                                                                                                 // 13430\n     * _.rangeRight(0, 20, 5);                                                                                         // 13431\n     * // => [15, 10, 5, 0]                                                                                            // 13432\n     *                                                                                                                 // 13433\n     * _.rangeRight(0, -4, -1);                                                                                        // 13434\n     * // => [-3, -2, -1, 0]                                                                                           // 13435\n     *                                                                                                                 // 13436\n     * _.rangeRight(1, 4, 0);                                                                                          // 13437\n     * // => [1, 1, 1]                                                                                                 // 13438\n     *                                                                                                                 // 13439\n     * _.rangeRight(0);                                                                                                // 13440\n     * // => []                                                                                                        // 13441\n     */                                                                                                                // 13442\n    var rangeRight = createRange(true);                                                                                // 13443\n                                                                                                                       // 13444\n    /**                                                                                                                // 13445\n     * Invokes the iteratee function `n` times, returning an array of the results                                      // 13446\n     * of each invocation. The iteratee is invoked with one argument; (index).                                         // 13447\n     *                                                                                                                 // 13448\n     * @static                                                                                                         // 13449\n     * @memberOf _                                                                                                     // 13450\n     * @category Util                                                                                                  // 13451\n     * @param {number} n The number of times to invoke `iteratee`.                                                     // 13452\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 13453\n     * @returns {Array} Returns the array of results.                                                                  // 13454\n     * @example                                                                                                        // 13455\n     *                                                                                                                 // 13456\n     * _.times(3, String);                                                                                             // 13457\n     * // => ['0', '1', '2']                                                                                           // 13458\n     *                                                                                                                 // 13459\n     *  _.times(4, _.constant(true));                                                                                  // 13460\n     * // => [true, true, true, true]                                                                                  // 13461\n     */                                                                                                                // 13462\n    function times(n, iteratee) {                                                                                      // 13463\n      n = toInteger(n);                                                                                                // 13464\n      if (n < 1 || n > MAX_SAFE_INTEGER) {                                                                             // 13465\n        return [];                                                                                                     // 13466\n      }                                                                                                                // 13467\n      var index = MAX_ARRAY_LENGTH,                                                                                    // 13468\n          length = nativeMin(n, MAX_ARRAY_LENGTH);                                                                     // 13469\n                                                                                                                       // 13470\n      iteratee = toFunction(iteratee);                                                                                 // 13471\n      n -= MAX_ARRAY_LENGTH;                                                                                           // 13472\n                                                                                                                       // 13473\n      var result = baseTimes(length, iteratee);                                                                        // 13474\n      while (++index < n) {                                                                                            // 13475\n        iteratee(index);                                                                                               // 13476\n      }                                                                                                                // 13477\n      return result;                                                                                                   // 13478\n    }                                                                                                                  // 13479\n                                                                                                                       // 13480\n    /**                                                                                                                // 13481\n     * Converts `value` to a property path array.                                                                      // 13482\n     *                                                                                                                 // 13483\n     * @static                                                                                                         // 13484\n     * @memberOf _                                                                                                     // 13485\n     * @category Util                                                                                                  // 13486\n     * @param {*} value The value to convert.                                                                          // 13487\n     * @returns {Array} Returns the new property path array.                                                           // 13488\n     * @example                                                                                                        // 13489\n     *                                                                                                                 // 13490\n     * _.toPath('a.b.c');                                                                                              // 13491\n     * // => ['a', 'b', 'c']                                                                                           // 13492\n     *                                                                                                                 // 13493\n     * _.toPath('a[0].b.c');                                                                                           // 13494\n     * // => ['a', '0', 'b', 'c']                                                                                      // 13495\n     *                                                                                                                 // 13496\n     * var path = ['a', 'b', 'c'],                                                                                     // 13497\n     *     newPath = _.toPath(path);                                                                                   // 13498\n     *                                                                                                                 // 13499\n     * console.log(newPath);                                                                                           // 13500\n     * // => ['a', 'b', 'c']                                                                                           // 13501\n     *                                                                                                                 // 13502\n     * console.log(path === newPath);                                                                                  // 13503\n     * // => false                                                                                                     // 13504\n     */                                                                                                                // 13505\n    function toPath(value) {                                                                                           // 13506\n      return isArray(value) ? arrayMap(value, String) : stringToPath(value);                                           // 13507\n    }                                                                                                                  // 13508\n                                                                                                                       // 13509\n    /**                                                                                                                // 13510\n     * Generates a unique ID. If `prefix` is provided the ID is appended to it.                                        // 13511\n     *                                                                                                                 // 13512\n     * @static                                                                                                         // 13513\n     * @memberOf _                                                                                                     // 13514\n     * @category Util                                                                                                  // 13515\n     * @param {string} [prefix] The value to prefix the ID with.                                                       // 13516\n     * @returns {string} Returns the unique ID.                                                                        // 13517\n     * @example                                                                                                        // 13518\n     *                                                                                                                 // 13519\n     * _.uniqueId('contact_');                                                                                         // 13520\n     * // => 'contact_104'                                                                                             // 13521\n     *                                                                                                                 // 13522\n     * _.uniqueId();                                                                                                   // 13523\n     * // => '105'                                                                                                     // 13524\n     */                                                                                                                // 13525\n    function uniqueId(prefix) {                                                                                        // 13526\n      var id = ++idCounter;                                                                                            // 13527\n      return toString(prefix) + id;                                                                                    // 13528\n    }                                                                                                                  // 13529\n                                                                                                                       // 13530\n    /*------------------------------------------------------------------------*/                                       // 13531\n                                                                                                                       // 13532\n    /**                                                                                                                // 13533\n     * Adds two numbers.                                                                                               // 13534\n     *                                                                                                                 // 13535\n     * @static                                                                                                         // 13536\n     * @memberOf _                                                                                                     // 13537\n     * @category Math                                                                                                  // 13538\n     * @param {number} augend The first number in an addition.                                                         // 13539\n     * @param {number} addend The second number in an addition.                                                        // 13540\n     * @returns {number} Returns the total.                                                                            // 13541\n     * @example                                                                                                        // 13542\n     *                                                                                                                 // 13543\n     * _.add(6, 4);                                                                                                    // 13544\n     * // => 10                                                                                                        // 13545\n     */                                                                                                                // 13546\n    function add(augend, addend) {                                                                                     // 13547\n      var result;                                                                                                      // 13548\n      if (augend !== undefined) {                                                                                      // 13549\n        result = augend;                                                                                               // 13550\n      }                                                                                                                // 13551\n      if (addend !== undefined) {                                                                                      // 13552\n        result = result === undefined ? addend : (result + addend);                                                    // 13553\n      }                                                                                                                // 13554\n      return result;                                                                                                   // 13555\n    }                                                                                                                  // 13556\n                                                                                                                       // 13557\n    /**                                                                                                                // 13558\n     * Computes `number` rounded up to `precision`.                                                                    // 13559\n     *                                                                                                                 // 13560\n     * @static                                                                                                         // 13561\n     * @memberOf _                                                                                                     // 13562\n     * @category Math                                                                                                  // 13563\n     * @param {number} number The number to round up.                                                                  // 13564\n     * @param {number} [precision=0] The precision to round up to.                                                     // 13565\n     * @returns {number} Returns the rounded up number.                                                                // 13566\n     * @example                                                                                                        // 13567\n     *                                                                                                                 // 13568\n     * _.ceil(4.006);                                                                                                  // 13569\n     * // => 5                                                                                                         // 13570\n     *                                                                                                                 // 13571\n     * _.ceil(6.004, 2);                                                                                               // 13572\n     * // => 6.01                                                                                                      // 13573\n     *                                                                                                                 // 13574\n     * _.ceil(6040, -2);                                                                                               // 13575\n     * // => 6100                                                                                                      // 13576\n     */                                                                                                                // 13577\n    var ceil = createRound('ceil');                                                                                    // 13578\n                                                                                                                       // 13579\n    /**                                                                                                                // 13580\n     * Computes `number` rounded down to `precision`.                                                                  // 13581\n     *                                                                                                                 // 13582\n     * @static                                                                                                         // 13583\n     * @memberOf _                                                                                                     // 13584\n     * @category Math                                                                                                  // 13585\n     * @param {number} number The number to round down.                                                                // 13586\n     * @param {number} [precision=0] The precision to round down to.                                                   // 13587\n     * @returns {number} Returns the rounded down number.                                                              // 13588\n     * @example                                                                                                        // 13589\n     *                                                                                                                 // 13590\n     * _.floor(4.006);                                                                                                 // 13591\n     * // => 4                                                                                                         // 13592\n     *                                                                                                                 // 13593\n     * _.floor(0.046, 2);                                                                                              // 13594\n     * // => 0.04                                                                                                      // 13595\n     *                                                                                                                 // 13596\n     * _.floor(4060, -2);                                                                                              // 13597\n     * // => 4000                                                                                                      // 13598\n     */                                                                                                                // 13599\n    var floor = createRound('floor');                                                                                  // 13600\n                                                                                                                       // 13601\n    /**                                                                                                                // 13602\n     * Computes the maximum value of `array`. If `array` is empty or falsey                                            // 13603\n     * `undefined` is returned.                                                                                        // 13604\n     *                                                                                                                 // 13605\n     * @static                                                                                                         // 13606\n     * @memberOf _                                                                                                     // 13607\n     * @category Math                                                                                                  // 13608\n     * @param {Array} array The array to iterate over.                                                                 // 13609\n     * @returns {*} Returns the maximum value.                                                                         // 13610\n     * @example                                                                                                        // 13611\n     *                                                                                                                 // 13612\n     * _.max([4, 2, 8, 6]);                                                                                            // 13613\n     * // => 8                                                                                                         // 13614\n     *                                                                                                                 // 13615\n     * _.max([]);                                                                                                      // 13616\n     * // => undefined                                                                                                 // 13617\n     */                                                                                                                // 13618\n    function max(array) {                                                                                              // 13619\n      return (array && array.length)                                                                                   // 13620\n        ? baseExtremum(array, identity, gt)                                                                            // 13621\n        : undefined;                                                                                                   // 13622\n    }                                                                                                                  // 13623\n                                                                                                                       // 13624\n    /**                                                                                                                // 13625\n     * This method is like `_.max` except that it accepts `iteratee` which is                                          // 13626\n     * invoked for each element in `array` to generate the criterion by which                                          // 13627\n     * the value is ranked. The iteratee is invoked with one argument: (value).                                        // 13628\n     *                                                                                                                 // 13629\n     * @static                                                                                                         // 13630\n     * @memberOf _                                                                                                     // 13631\n     * @category Math                                                                                                  // 13632\n     * @param {Array} array The array to iterate over.                                                                 // 13633\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 13634\n     * @returns {*} Returns the maximum value.                                                                         // 13635\n     * @example                                                                                                        // 13636\n     *                                                                                                                 // 13637\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];                                                                         // 13638\n     *                                                                                                                 // 13639\n     * _.maxBy(objects, function(o) { return o.a; });                                                                  // 13640\n     * // => { 'n': 2 }                                                                                                // 13641\n     *                                                                                                                 // 13642\n     * // using the `_.property` iteratee shorthand                                                                    // 13643\n     * _.maxBy(objects, 'n');                                                                                          // 13644\n     * // => { 'n': 2 }                                                                                                // 13645\n     */                                                                                                                // 13646\n    function maxBy(array, iteratee) {                                                                                  // 13647\n      return (array && array.length)                                                                                   // 13648\n        ? baseExtremum(array, getIteratee(iteratee), gt)                                                               // 13649\n        : undefined;                                                                                                   // 13650\n    }                                                                                                                  // 13651\n                                                                                                                       // 13652\n    /**                                                                                                                // 13653\n     * Computes the mean of the values in `array`.                                                                     // 13654\n     *                                                                                                                 // 13655\n     * @static                                                                                                         // 13656\n     * @memberOf _                                                                                                     // 13657\n     * @category Math                                                                                                  // 13658\n     * @param {Array} array The array to iterate over.                                                                 // 13659\n     * @returns {number} Returns the mean.                                                                             // 13660\n     * @example                                                                                                        // 13661\n     *                                                                                                                 // 13662\n     * _.mean([4, 2, 8, 6]);                                                                                           // 13663\n     * // => 5                                                                                                         // 13664\n     */                                                                                                                // 13665\n    function mean(array) {                                                                                             // 13666\n      return sum(array) / (array ? array.length : 0);                                                                  // 13667\n    }                                                                                                                  // 13668\n                                                                                                                       // 13669\n    /**                                                                                                                // 13670\n     * Computes the minimum value of `array`. If `array` is empty or falsey                                            // 13671\n     * `undefined` is returned.                                                                                        // 13672\n     *                                                                                                                 // 13673\n     * @static                                                                                                         // 13674\n     * @memberOf _                                                                                                     // 13675\n     * @category Math                                                                                                  // 13676\n     * @param {Array} array The array to iterate over.                                                                 // 13677\n     * @returns {*} Returns the minimum value.                                                                         // 13678\n     * @example                                                                                                        // 13679\n     *                                                                                                                 // 13680\n     * _.min([4, 2, 8, 6]);                                                                                            // 13681\n     * // => 2                                                                                                         // 13682\n     *                                                                                                                 // 13683\n     * _.min([]);                                                                                                      // 13684\n     * // => undefined                                                                                                 // 13685\n     */                                                                                                                // 13686\n    function min(array) {                                                                                              // 13687\n      return (array && array.length)                                                                                   // 13688\n        ? baseExtremum(array, identity, lt)                                                                            // 13689\n        : undefined;                                                                                                   // 13690\n    }                                                                                                                  // 13691\n                                                                                                                       // 13692\n    /**                                                                                                                // 13693\n     * This method is like `_.min` except that it accepts `iteratee` which is                                          // 13694\n     * invoked for each element in `array` to generate the criterion by which                                          // 13695\n     * the value is ranked. The iteratee is invoked with one argument: (value).                                        // 13696\n     *                                                                                                                 // 13697\n     * @static                                                                                                         // 13698\n     * @memberOf _                                                                                                     // 13699\n     * @category Math                                                                                                  // 13700\n     * @param {Array} array The array to iterate over.                                                                 // 13701\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 13702\n     * @returns {*} Returns the minimum value.                                                                         // 13703\n     * @example                                                                                                        // 13704\n     *                                                                                                                 // 13705\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];                                                                         // 13706\n     *                                                                                                                 // 13707\n     * _.minBy(objects, function(o) { return o.a; });                                                                  // 13708\n     * // => { 'n': 1 }                                                                                                // 13709\n     *                                                                                                                 // 13710\n     * // using the `_.property` iteratee shorthand                                                                    // 13711\n     * _.minBy(objects, 'n');                                                                                          // 13712\n     * // => { 'n': 1 }                                                                                                // 13713\n     */                                                                                                                // 13714\n    function minBy(array, iteratee) {                                                                                  // 13715\n      return (array && array.length)                                                                                   // 13716\n        ? baseExtremum(array, getIteratee(iteratee), lt)                                                               // 13717\n        : undefined;                                                                                                   // 13718\n    }                                                                                                                  // 13719\n                                                                                                                       // 13720\n    /**                                                                                                                // 13721\n     * Computes `number` rounded to `precision`.                                                                       // 13722\n     *                                                                                                                 // 13723\n     * @static                                                                                                         // 13724\n     * @memberOf _                                                                                                     // 13725\n     * @category Math                                                                                                  // 13726\n     * @param {number} number The number to round.                                                                     // 13727\n     * @param {number} [precision=0] The precision to round to.                                                        // 13728\n     * @returns {number} Returns the rounded number.                                                                   // 13729\n     * @example                                                                                                        // 13730\n     *                                                                                                                 // 13731\n     * _.round(4.006);                                                                                                 // 13732\n     * // => 4                                                                                                         // 13733\n     *                                                                                                                 // 13734\n     * _.round(4.006, 2);                                                                                              // 13735\n     * // => 4.01                                                                                                      // 13736\n     *                                                                                                                 // 13737\n     * _.round(4060, -2);                                                                                              // 13738\n     * // => 4100                                                                                                      // 13739\n     */                                                                                                                // 13740\n    var round = createRound('round');                                                                                  // 13741\n                                                                                                                       // 13742\n    /**                                                                                                                // 13743\n     * Subtract two numbers.                                                                                           // 13744\n     *                                                                                                                 // 13745\n     * @static                                                                                                         // 13746\n     * @memberOf _                                                                                                     // 13747\n     * @category Math                                                                                                  // 13748\n     * @param {number} minuend The first number in a subtraction.                                                      // 13749\n     * @param {number} subtrahend The second number in a subtraction.                                                  // 13750\n     * @returns {number} Returns the difference.                                                                       // 13751\n     * @example                                                                                                        // 13752\n     *                                                                                                                 // 13753\n     * _.subtract(6, 4);                                                                                               // 13754\n     * // => 2                                                                                                         // 13755\n     */                                                                                                                // 13756\n    function subtract(minuend, subtrahend) {                                                                           // 13757\n      var result;                                                                                                      // 13758\n      if (minuend !== undefined) {                                                                                     // 13759\n        result = minuend;                                                                                              // 13760\n      }                                                                                                                // 13761\n      if (subtrahend !== undefined) {                                                                                  // 13762\n        result = result === undefined ? subtrahend : (result - subtrahend);                                            // 13763\n      }                                                                                                                // 13764\n      return result;                                                                                                   // 13765\n    }                                                                                                                  // 13766\n                                                                                                                       // 13767\n    /**                                                                                                                // 13768\n     * Computes the sum of the values in `array`.                                                                      // 13769\n     *                                                                                                                 // 13770\n     * @static                                                                                                         // 13771\n     * @memberOf _                                                                                                     // 13772\n     * @category Math                                                                                                  // 13773\n     * @param {Array} array The array to iterate over.                                                                 // 13774\n     * @returns {number} Returns the sum.                                                                              // 13775\n     * @example                                                                                                        // 13776\n     *                                                                                                                 // 13777\n     * _.sum([4, 2, 8, 6]);                                                                                            // 13778\n     * // => 20                                                                                                        // 13779\n     */                                                                                                                // 13780\n    function sum(array) {                                                                                              // 13781\n      return (array && array.length)                                                                                   // 13782\n        ? baseSum(array, identity)                                                                                     // 13783\n        : undefined;                                                                                                   // 13784\n    }                                                                                                                  // 13785\n                                                                                                                       // 13786\n    /**                                                                                                                // 13787\n     * This method is like `_.sum` except that it accepts `iteratee` which is                                          // 13788\n     * invoked for each element in `array` to generate the value to be summed.                                         // 13789\n     * The iteratee is invoked with one argument: (value).                                                             // 13790\n     *                                                                                                                 // 13791\n     * @static                                                                                                         // 13792\n     * @memberOf _                                                                                                     // 13793\n     * @category Math                                                                                                  // 13794\n     * @param {Array} array The array to iterate over.                                                                 // 13795\n     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.                         // 13796\n     * @returns {number} Returns the sum.                                                                              // 13797\n     * @example                                                                                                        // 13798\n     *                                                                                                                 // 13799\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];                                                 // 13800\n     *                                                                                                                 // 13801\n     * _.sumBy(objects, function(o) { return o.n; });                                                                  // 13802\n     * // => 20                                                                                                        // 13803\n     *                                                                                                                 // 13804\n     * // using the `_.property` iteratee shorthand                                                                    // 13805\n     * _.sumBy(objects, 'n');                                                                                          // 13806\n     * // => 20                                                                                                        // 13807\n     */                                                                                                                // 13808\n    function sumBy(array, iteratee) {                                                                                  // 13809\n      return (array && array.length)                                                                                   // 13810\n        ? baseSum(array, getIteratee(iteratee))                                                                        // 13811\n        : undefined;                                                                                                   // 13812\n    }                                                                                                                  // 13813\n                                                                                                                       // 13814\n    /*------------------------------------------------------------------------*/                                       // 13815\n                                                                                                                       // 13816\n    // Ensure wrappers are instances of `baseLodash`.                                                                  // 13817\n    lodash.prototype = baseLodash.prototype;                                                                           // 13818\n                                                                                                                       // 13819\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);                                                        // 13820\n    LodashWrapper.prototype.constructor = LodashWrapper;                                                               // 13821\n                                                                                                                       // 13822\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);                                                          // 13823\n    LazyWrapper.prototype.constructor = LazyWrapper;                                                                   // 13824\n                                                                                                                       // 13825\n    // Avoid inheriting from `Object.prototype` when possible.                                                         // 13826\n    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;                                                  // 13827\n                                                                                                                       // 13828\n    // Add functions to the `MapCache`.                                                                                // 13829\n    MapCache.prototype.clear = mapClear;                                                                               // 13830\n    MapCache.prototype['delete'] = mapDelete;                                                                          // 13831\n    MapCache.prototype.get = mapGet;                                                                                   // 13832\n    MapCache.prototype.has = mapHas;                                                                                   // 13833\n    MapCache.prototype.set = mapSet;                                                                                   // 13834\n                                                                                                                       // 13835\n    // Add functions to the `SetCache`.                                                                                // 13836\n    SetCache.prototype.push = cachePush;                                                                               // 13837\n                                                                                                                       // 13838\n    // Add functions to the `Stack` cache.                                                                             // 13839\n    Stack.prototype.clear = stackClear;                                                                                // 13840\n    Stack.prototype['delete'] = stackDelete;                                                                           // 13841\n    Stack.prototype.get = stackGet;                                                                                    // 13842\n    Stack.prototype.has = stackHas;                                                                                    // 13843\n    Stack.prototype.set = stackSet;                                                                                    // 13844\n                                                                                                                       // 13845\n    // Assign cache to `_.memoize`.                                                                                    // 13846\n    memoize.Cache = MapCache;                                                                                          // 13847\n                                                                                                                       // 13848\n    // Add functions that return wrapped values when chaining.                                                         // 13849\n    lodash.after = after;                                                                                              // 13850\n    lodash.ary = ary;                                                                                                  // 13851\n    lodash.assign = assign;                                                                                            // 13852\n    lodash.assignIn = assignIn;                                                                                        // 13853\n    lodash.assignInWith = assignInWith;                                                                                // 13854\n    lodash.assignWith = assignWith;                                                                                    // 13855\n    lodash.at = at;                                                                                                    // 13856\n    lodash.before = before;                                                                                            // 13857\n    lodash.bind = bind;                                                                                                // 13858\n    lodash.bindAll = bindAll;                                                                                          // 13859\n    lodash.bindKey = bindKey;                                                                                          // 13860\n    lodash.chain = chain;                                                                                              // 13861\n    lodash.chunk = chunk;                                                                                              // 13862\n    lodash.compact = compact;                                                                                          // 13863\n    lodash.concat = concat;                                                                                            // 13864\n    lodash.cond = cond;                                                                                                // 13865\n    lodash.conforms = conforms;                                                                                        // 13866\n    lodash.constant = constant;                                                                                        // 13867\n    lodash.countBy = countBy;                                                                                          // 13868\n    lodash.create = create;                                                                                            // 13869\n    lodash.curry = curry;                                                                                              // 13870\n    lodash.curryRight = curryRight;                                                                                    // 13871\n    lodash.debounce = debounce;                                                                                        // 13872\n    lodash.defaults = defaults;                                                                                        // 13873\n    lodash.defaultsDeep = defaultsDeep;                                                                                // 13874\n    lodash.defer = defer;                                                                                              // 13875\n    lodash.delay = delay;                                                                                              // 13876\n    lodash.difference = difference;                                                                                    // 13877\n    lodash.differenceBy = differenceBy;                                                                                // 13878\n    lodash.differenceWith = differenceWith;                                                                            // 13879\n    lodash.drop = drop;                                                                                                // 13880\n    lodash.dropRight = dropRight;                                                                                      // 13881\n    lodash.dropRightWhile = dropRightWhile;                                                                            // 13882\n    lodash.dropWhile = dropWhile;                                                                                      // 13883\n    lodash.fill = fill;                                                                                                // 13884\n    lodash.filter = filter;                                                                                            // 13885\n    lodash.flatMap = flatMap;                                                                                          // 13886\n    lodash.flatten = flatten;                                                                                          // 13887\n    lodash.flattenDeep = flattenDeep;                                                                                  // 13888\n    lodash.flip = flip;                                                                                                // 13889\n    lodash.flow = flow;                                                                                                // 13890\n    lodash.flowRight = flowRight;                                                                                      // 13891\n    lodash.fromPairs = fromPairs;                                                                                      // 13892\n    lodash.functions = functions;                                                                                      // 13893\n    lodash.functionsIn = functionsIn;                                                                                  // 13894\n    lodash.groupBy = groupBy;                                                                                          // 13895\n    lodash.initial = initial;                                                                                          // 13896\n    lodash.intersection = intersection;                                                                                // 13897\n    lodash.intersectionBy = intersectionBy;                                                                            // 13898\n    lodash.intersectionWith = intersectionWith;                                                                        // 13899\n    lodash.invert = invert;                                                                                            // 13900\n    lodash.invokeMap = invokeMap;                                                                                      // 13901\n    lodash.iteratee = iteratee;                                                                                        // 13902\n    lodash.keyBy = keyBy;                                                                                              // 13903\n    lodash.keys = keys;                                                                                                // 13904\n    lodash.keysIn = keysIn;                                                                                            // 13905\n    lodash.map = map;                                                                                                  // 13906\n    lodash.mapKeys = mapKeys;                                                                                          // 13907\n    lodash.mapValues = mapValues;                                                                                      // 13908\n    lodash.matches = matches;                                                                                          // 13909\n    lodash.matchesProperty = matchesProperty;                                                                          // 13910\n    lodash.memoize = memoize;                                                                                          // 13911\n    lodash.merge = merge;                                                                                              // 13912\n    lodash.mergeWith = mergeWith;                                                                                      // 13913\n    lodash.method = method;                                                                                            // 13914\n    lodash.methodOf = methodOf;                                                                                        // 13915\n    lodash.mixin = mixin;                                                                                              // 13916\n    lodash.negate = negate;                                                                                            // 13917\n    lodash.nthArg = nthArg;                                                                                            // 13918\n    lodash.omit = omit;                                                                                                // 13919\n    lodash.omitBy = omitBy;                                                                                            // 13920\n    lodash.once = once;                                                                                                // 13921\n    lodash.orderBy = orderBy;                                                                                          // 13922\n    lodash.over = over;                                                                                                // 13923\n    lodash.overArgs = overArgs;                                                                                        // 13924\n    lodash.overEvery = overEvery;                                                                                      // 13925\n    lodash.overSome = overSome;                                                                                        // 13926\n    lodash.partial = partial;                                                                                          // 13927\n    lodash.partialRight = partialRight;                                                                                // 13928\n    lodash.partition = partition;                                                                                      // 13929\n    lodash.pick = pick;                                                                                                // 13930\n    lodash.pickBy = pickBy;                                                                                            // 13931\n    lodash.property = property;                                                                                        // 13932\n    lodash.propertyOf = propertyOf;                                                                                    // 13933\n    lodash.pull = pull;                                                                                                // 13934\n    lodash.pullAll = pullAll;                                                                                          // 13935\n    lodash.pullAllBy = pullAllBy;                                                                                      // 13936\n    lodash.pullAt = pullAt;                                                                                            // 13937\n    lodash.range = range;                                                                                              // 13938\n    lodash.rangeRight = rangeRight;                                                                                    // 13939\n    lodash.rearg = rearg;                                                                                              // 13940\n    lodash.reject = reject;                                                                                            // 13941\n    lodash.remove = remove;                                                                                            // 13942\n    lodash.rest = rest;                                                                                                // 13943\n    lodash.reverse = reverse;                                                                                          // 13944\n    lodash.sampleSize = sampleSize;                                                                                    // 13945\n    lodash.set = set;                                                                                                  // 13946\n    lodash.setWith = setWith;                                                                                          // 13947\n    lodash.shuffle = shuffle;                                                                                          // 13948\n    lodash.slice = slice;                                                                                              // 13949\n    lodash.sortBy = sortBy;                                                                                            // 13950\n    lodash.sortedUniq = sortedUniq;                                                                                    // 13951\n    lodash.sortedUniqBy = sortedUniqBy;                                                                                // 13952\n    lodash.split = split;                                                                                              // 13953\n    lodash.spread = spread;                                                                                            // 13954\n    lodash.tail = tail;                                                                                                // 13955\n    lodash.take = take;                                                                                                // 13956\n    lodash.takeRight = takeRight;                                                                                      // 13957\n    lodash.takeRightWhile = takeRightWhile;                                                                            // 13958\n    lodash.takeWhile = takeWhile;                                                                                      // 13959\n    lodash.tap = tap;                                                                                                  // 13960\n    lodash.throttle = throttle;                                                                                        // 13961\n    lodash.thru = thru;                                                                                                // 13962\n    lodash.toArray = toArray;                                                                                          // 13963\n    lodash.toPairs = toPairs;                                                                                          // 13964\n    lodash.toPairsIn = toPairsIn;                                                                                      // 13965\n    lodash.toPath = toPath;                                                                                            // 13966\n    lodash.toPlainObject = toPlainObject;                                                                              // 13967\n    lodash.transform = transform;                                                                                      // 13968\n    lodash.unary = unary;                                                                                              // 13969\n    lodash.union = union;                                                                                              // 13970\n    lodash.unionBy = unionBy;                                                                                          // 13971\n    lodash.unionWith = unionWith;                                                                                      // 13972\n    lodash.uniq = uniq;                                                                                                // 13973\n    lodash.uniqBy = uniqBy;                                                                                            // 13974\n    lodash.uniqWith = uniqWith;                                                                                        // 13975\n    lodash.unset = unset;                                                                                              // 13976\n    lodash.unzip = unzip;                                                                                              // 13977\n    lodash.unzipWith = unzipWith;                                                                                      // 13978\n    lodash.values = values;                                                                                            // 13979\n    lodash.valuesIn = valuesIn;                                                                                        // 13980\n    lodash.without = without;                                                                                          // 13981\n    lodash.words = words;                                                                                              // 13982\n    lodash.wrap = wrap;                                                                                                // 13983\n    lodash.xor = xor;                                                                                                  // 13984\n    lodash.xorBy = xorBy;                                                                                              // 13985\n    lodash.xorWith = xorWith;                                                                                          // 13986\n    lodash.zip = zip;                                                                                                  // 13987\n    lodash.zipObject = zipObject;                                                                                      // 13988\n    lodash.zipWith = zipWith;                                                                                          // 13989\n                                                                                                                       // 13990\n    // Add aliases.                                                                                                    // 13991\n    lodash.each = forEach;                                                                                             // 13992\n    lodash.eachRight = forEachRight;                                                                                   // 13993\n    lodash.extend = assignIn;                                                                                          // 13994\n    lodash.extendWith = assignInWith;                                                                                  // 13995\n                                                                                                                       // 13996\n    // Add functions to `lodash.prototype`.                                                                            // 13997\n    mixin(lodash, lodash);                                                                                             // 13998\n                                                                                                                       // 13999\n    /*------------------------------------------------------------------------*/                                       // 14000\n                                                                                                                       // 14001\n    // Add functions that return unwrapped values when chaining.                                                       // 14002\n    lodash.add = add;                                                                                                  // 14003\n    lodash.attempt = attempt;                                                                                          // 14004\n    lodash.camelCase = camelCase;                                                                                      // 14005\n    lodash.capitalize = capitalize;                                                                                    // 14006\n    lodash.ceil = ceil;                                                                                                // 14007\n    lodash.clamp = clamp;                                                                                              // 14008\n    lodash.clone = clone;                                                                                              // 14009\n    lodash.cloneDeep = cloneDeep;                                                                                      // 14010\n    lodash.cloneDeepWith = cloneDeepWith;                                                                              // 14011\n    lodash.cloneWith = cloneWith;                                                                                      // 14012\n    lodash.deburr = deburr;                                                                                            // 14013\n    lodash.endsWith = endsWith;                                                                                        // 14014\n    lodash.eq = eq;                                                                                                    // 14015\n    lodash.escape = escape;                                                                                            // 14016\n    lodash.escapeRegExp = escapeRegExp;                                                                                // 14017\n    lodash.every = every;                                                                                              // 14018\n    lodash.find = find;                                                                                                // 14019\n    lodash.findIndex = findIndex;                                                                                      // 14020\n    lodash.findKey = findKey;                                                                                          // 14021\n    lodash.findLast = findLast;                                                                                        // 14022\n    lodash.findLastIndex = findLastIndex;                                                                              // 14023\n    lodash.findLastKey = findLastKey;                                                                                  // 14024\n    lodash.floor = floor;                                                                                              // 14025\n    lodash.forEach = forEach;                                                                                          // 14026\n    lodash.forEachRight = forEachRight;                                                                                // 14027\n    lodash.forIn = forIn;                                                                                              // 14028\n    lodash.forInRight = forInRight;                                                                                    // 14029\n    lodash.forOwn = forOwn;                                                                                            // 14030\n    lodash.forOwnRight = forOwnRight;                                                                                  // 14031\n    lodash.get = get;                                                                                                  // 14032\n    lodash.gt = gt;                                                                                                    // 14033\n    lodash.gte = gte;                                                                                                  // 14034\n    lodash.has = has;                                                                                                  // 14035\n    lodash.hasIn = hasIn;                                                                                              // 14036\n    lodash.head = head;                                                                                                // 14037\n    lodash.identity = identity;                                                                                        // 14038\n    lodash.includes = includes;                                                                                        // 14039\n    lodash.indexOf = indexOf;                                                                                          // 14040\n    lodash.inRange = inRange;                                                                                          // 14041\n    lodash.invoke = invoke;                                                                                            // 14042\n    lodash.isArguments = isArguments;                                                                                  // 14043\n    lodash.isArray = isArray;                                                                                          // 14044\n    lodash.isArrayLike = isArrayLike;                                                                                  // 14045\n    lodash.isArrayLikeObject = isArrayLikeObject;                                                                      // 14046\n    lodash.isBoolean = isBoolean;                                                                                      // 14047\n    lodash.isDate = isDate;                                                                                            // 14048\n    lodash.isElement = isElement;                                                                                      // 14049\n    lodash.isEmpty = isEmpty;                                                                                          // 14050\n    lodash.isEqual = isEqual;                                                                                          // 14051\n    lodash.isEqualWith = isEqualWith;                                                                                  // 14052\n    lodash.isError = isError;                                                                                          // 14053\n    lodash.isFinite = isFinite;                                                                                        // 14054\n    lodash.isFunction = isFunction;                                                                                    // 14055\n    lodash.isInteger = isInteger;                                                                                      // 14056\n    lodash.isLength = isLength;                                                                                        // 14057\n    lodash.isMatch = isMatch;                                                                                          // 14058\n    lodash.isMatchWith = isMatchWith;                                                                                  // 14059\n    lodash.isNaN = isNaN;                                                                                              // 14060\n    lodash.isNative = isNative;                                                                                        // 14061\n    lodash.isNil = isNil;                                                                                              // 14062\n    lodash.isNull = isNull;                                                                                            // 14063\n    lodash.isNumber = isNumber;                                                                                        // 14064\n    lodash.isObject = isObject;                                                                                        // 14065\n    lodash.isObjectLike = isObjectLike;                                                                                // 14066\n    lodash.isPlainObject = isPlainObject;                                                                              // 14067\n    lodash.isRegExp = isRegExp;                                                                                        // 14068\n    lodash.isSafeInteger = isSafeInteger;                                                                              // 14069\n    lodash.isString = isString;                                                                                        // 14070\n    lodash.isSymbol = isSymbol;                                                                                        // 14071\n    lodash.isTypedArray = isTypedArray;                                                                                // 14072\n    lodash.isUndefined = isUndefined;                                                                                  // 14073\n    lodash.join = join;                                                                                                // 14074\n    lodash.kebabCase = kebabCase;                                                                                      // 14075\n    lodash.last = last;                                                                                                // 14076\n    lodash.lastIndexOf = lastIndexOf;                                                                                  // 14077\n    lodash.lowerCase = lowerCase;                                                                                      // 14078\n    lodash.lowerFirst = lowerFirst;                                                                                    // 14079\n    lodash.lt = lt;                                                                                                    // 14080\n    lodash.lte = lte;                                                                                                  // 14081\n    lodash.max = max;                                                                                                  // 14082\n    lodash.maxBy = maxBy;                                                                                              // 14083\n    lodash.mean = mean;                                                                                                // 14084\n    lodash.min = min;                                                                                                  // 14085\n    lodash.minBy = minBy;                                                                                              // 14086\n    lodash.noConflict = noConflict;                                                                                    // 14087\n    lodash.noop = noop;                                                                                                // 14088\n    lodash.now = now;                                                                                                  // 14089\n    lodash.pad = pad;                                                                                                  // 14090\n    lodash.padEnd = padEnd;                                                                                            // 14091\n    lodash.padStart = padStart;                                                                                        // 14092\n    lodash.parseInt = parseInt;                                                                                        // 14093\n    lodash.random = random;                                                                                            // 14094\n    lodash.reduce = reduce;                                                                                            // 14095\n    lodash.reduceRight = reduceRight;                                                                                  // 14096\n    lodash.repeat = repeat;                                                                                            // 14097\n    lodash.replace = replace;                                                                                          // 14098\n    lodash.result = result;                                                                                            // 14099\n    lodash.round = round;                                                                                              // 14100\n    lodash.runInContext = runInContext;                                                                                // 14101\n    lodash.sample = sample;                                                                                            // 14102\n    lodash.size = size;                                                                                                // 14103\n    lodash.snakeCase = snakeCase;                                                                                      // 14104\n    lodash.some = some;                                                                                                // 14105\n    lodash.sortedIndex = sortedIndex;                                                                                  // 14106\n    lodash.sortedIndexBy = sortedIndexBy;                                                                              // 14107\n    lodash.sortedIndexOf = sortedIndexOf;                                                                              // 14108\n    lodash.sortedLastIndex = sortedLastIndex;                                                                          // 14109\n    lodash.sortedLastIndexBy = sortedLastIndexBy;                                                                      // 14110\n    lodash.sortedLastIndexOf = sortedLastIndexOf;                                                                      // 14111\n    lodash.startCase = startCase;                                                                                      // 14112\n    lodash.startsWith = startsWith;                                                                                    // 14113\n    lodash.subtract = subtract;                                                                                        // 14114\n    lodash.sum = sum;                                                                                                  // 14115\n    lodash.sumBy = sumBy;                                                                                              // 14116\n    lodash.template = template;                                                                                        // 14117\n    lodash.times = times;                                                                                              // 14118\n    lodash.toInteger = toInteger;                                                                                      // 14119\n    lodash.toLength = toLength;                                                                                        // 14120\n    lodash.toLower = toLower;                                                                                          // 14121\n    lodash.toNumber = toNumber;                                                                                        // 14122\n    lodash.toSafeInteger = toSafeInteger;                                                                              // 14123\n    lodash.toString = toString;                                                                                        // 14124\n    lodash.toUpper = toUpper;                                                                                          // 14125\n    lodash.trim = trim;                                                                                                // 14126\n    lodash.trimEnd = trimEnd;                                                                                          // 14127\n    lodash.trimStart = trimStart;                                                                                      // 14128\n    lodash.truncate = truncate;                                                                                        // 14129\n    lodash.unescape = unescape;                                                                                        // 14130\n    lodash.uniqueId = uniqueId;                                                                                        // 14131\n    lodash.upperCase = upperCase;                                                                                      // 14132\n    lodash.upperFirst = upperFirst;                                                                                    // 14133\n                                                                                                                       // 14134\n    // Add aliases.                                                                                                    // 14135\n    lodash.first = head;                                                                                               // 14136\n                                                                                                                       // 14137\n    mixin(lodash, (function() {                                                                                        // 14138\n      var source = {};                                                                                                 // 14139\n      baseForOwn(lodash, function(func, methodName) {                                                                  // 14140\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {                                                      // 14141\n          source[methodName] = func;                                                                                   // 14142\n        }                                                                                                              // 14143\n      });                                                                                                              // 14144\n      return source;                                                                                                   // 14145\n    }()), { 'chain': false });                                                                                         // 14146\n                                                                                                                       // 14147\n    /*------------------------------------------------------------------------*/                                       // 14148\n                                                                                                                       // 14149\n    /**                                                                                                                // 14150\n     * The semantic version number.                                                                                    // 14151\n     *                                                                                                                 // 14152\n     * @static                                                                                                         // 14153\n     * @memberOf _                                                                                                     // 14154\n     * @type string                                                                                                    // 14155\n     */                                                                                                                // 14156\n    lodash.VERSION = VERSION;                                                                                          // 14157\n                                                                                                                       // 14158\n    // Assign default placeholders.                                                                                    // 14159\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {            // 14160\n      lodash[methodName].placeholder = lodash;                                                                         // 14161\n    });                                                                                                                // 14162\n                                                                                                                       // 14163\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.                                                   // 14164\n    arrayEach(['drop', 'take'], function(methodName, index) {                                                          // 14165\n      LazyWrapper.prototype[methodName] = function(n) {                                                                // 14166\n        var filtered = this.__filtered__;                                                                              // 14167\n        if (filtered && !index) {                                                                                      // 14168\n          return new LazyWrapper(this);                                                                                // 14169\n        }                                                                                                              // 14170\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);                                                          // 14171\n                                                                                                                       // 14172\n        var result = this.clone();                                                                                     // 14173\n        if (filtered) {                                                                                                // 14174\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);                                                   // 14175\n        } else {                                                                                                       // 14176\n          result.__views__.push({ 'size': nativeMin(n, MAX_ARRAY_LENGTH), 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });\n        }                                                                                                              // 14178\n        return result;                                                                                                 // 14179\n      };                                                                                                               // 14180\n                                                                                                                       // 14181\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {                                                      // 14182\n        return this.reverse()[methodName](n).reverse();                                                                // 14183\n      };                                                                                                               // 14184\n    });                                                                                                                // 14185\n                                                                                                                       // 14186\n    // Add `LazyWrapper` methods that accept an `iteratee` value.                                                      // 14187\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {                                            // 14188\n      var type = index + 1,                                                                                            // 14189\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;                                              // 14190\n                                                                                                                       // 14191\n      LazyWrapper.prototype[methodName] = function(iteratee) {                                                         // 14192\n        var result = this.clone();                                                                                     // 14193\n        result.__iteratees__.push({ 'iteratee': getIteratee(iteratee, 3), 'type': type });                             // 14194\n        result.__filtered__ = result.__filtered__ || isFilter;                                                         // 14195\n        return result;                                                                                                 // 14196\n      };                                                                                                               // 14197\n    });                                                                                                                // 14198\n                                                                                                                       // 14199\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.                                                            // 14200\n    arrayEach(['head', 'last'], function(methodName, index) {                                                          // 14201\n      var takeName = 'take' + (index ? 'Right' : '');                                                                  // 14202\n                                                                                                                       // 14203\n      LazyWrapper.prototype[methodName] = function() {                                                                 // 14204\n        return this[takeName](1).value()[0];                                                                           // 14205\n      };                                                                                                               // 14206\n    });                                                                                                                // 14207\n                                                                                                                       // 14208\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.                                                         // 14209\n    arrayEach(['initial', 'tail'], function(methodName, index) {                                                       // 14210\n      var dropName = 'drop' + (index ? '' : 'Right');                                                                  // 14211\n                                                                                                                       // 14212\n      LazyWrapper.prototype[methodName] = function() {                                                                 // 14213\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);                                          // 14214\n      };                                                                                                               // 14215\n    });                                                                                                                // 14216\n                                                                                                                       // 14217\n    LazyWrapper.prototype.compact = function() {                                                                       // 14218\n      return this.filter(identity);                                                                                    // 14219\n    };                                                                                                                 // 14220\n                                                                                                                       // 14221\n    LazyWrapper.prototype.find = function(predicate) {                                                                 // 14222\n      return this.filter(predicate).head();                                                                            // 14223\n    };                                                                                                                 // 14224\n                                                                                                                       // 14225\n    LazyWrapper.prototype.findLast = function(predicate) {                                                             // 14226\n      return this.reverse().find(predicate);                                                                           // 14227\n    };                                                                                                                 // 14228\n                                                                                                                       // 14229\n    LazyWrapper.prototype.invokeMap = rest(function(path, args) {                                                      // 14230\n      if (typeof path == 'function') {                                                                                 // 14231\n        return new LazyWrapper(this);                                                                                  // 14232\n      }                                                                                                                // 14233\n      return this.map(function(value) {                                                                                // 14234\n        return baseInvoke(value, path, args);                                                                          // 14235\n      });                                                                                                              // 14236\n    });                                                                                                                // 14237\n                                                                                                                       // 14238\n    LazyWrapper.prototype.reject = function(predicate) {                                                               // 14239\n      predicate = getIteratee(predicate, 3);                                                                           // 14240\n      return this.filter(function(value) {                                                                             // 14241\n        return !predicate(value);                                                                                      // 14242\n      });                                                                                                              // 14243\n    };                                                                                                                 // 14244\n                                                                                                                       // 14245\n    LazyWrapper.prototype.slice = function(start, end) {                                                               // 14246\n      start = toInteger(start);                                                                                        // 14247\n                                                                                                                       // 14248\n      var result = this;                                                                                               // 14249\n      if (result.__filtered__ && (start > 0 || end < 0)) {                                                             // 14250\n        return new LazyWrapper(result);                                                                                // 14251\n      }                                                                                                                // 14252\n      if (start < 0) {                                                                                                 // 14253\n        result = result.takeRight(-start);                                                                             // 14254\n      } else if (start) {                                                                                              // 14255\n        result = result.drop(start);                                                                                   // 14256\n      }                                                                                                                // 14257\n      if (end !== undefined) {                                                                                         // 14258\n        end = toInteger(end);                                                                                          // 14259\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);                                          // 14260\n      }                                                                                                                // 14261\n      return result;                                                                                                   // 14262\n    };                                                                                                                 // 14263\n                                                                                                                       // 14264\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {                                                       // 14265\n      return this.reverse().takeWhile(predicate).reverse();                                                            // 14266\n    };                                                                                                                 // 14267\n                                                                                                                       // 14268\n    LazyWrapper.prototype.toArray = function() {                                                                       // 14269\n      return this.take(MAX_ARRAY_LENGTH);                                                                              // 14270\n    };                                                                                                                 // 14271\n                                                                                                                       // 14272\n    // Add `LazyWrapper` methods to `lodash.prototype`.                                                                // 14273\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 14274\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),                                       // 14275\n          isTaker = /^(?:head|last)$/.test(methodName),                                                                // 14276\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],                // 14277\n          retUnwrapped = isTaker || /^find/.test(methodName);                                                          // 14278\n                                                                                                                       // 14279\n      if (!lodashFunc) {                                                                                               // 14280\n        return;                                                                                                        // 14281\n      }                                                                                                                // 14282\n      lodash.prototype[methodName] = function() {                                                                      // 14283\n        var value = this.__wrapped__,                                                                                  // 14284\n            args = isTaker ? [1] : arguments,                                                                          // 14285\n            isLazy = value instanceof LazyWrapper,                                                                     // 14286\n            iteratee = args[0],                                                                                        // 14287\n            useLazy = isLazy || isArray(value);                                                                        // 14288\n                                                                                                                       // 14289\n        var interceptor = function(value) {                                                                            // 14290\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));                                             // 14291\n          return (isTaker && chainAll) ? result[0] : result;                                                           // 14292\n        };                                                                                                             // 14293\n                                                                                                                       // 14294\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {                       // 14295\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.                                       // 14296\n          isLazy = useLazy = false;                                                                                    // 14297\n        }                                                                                                              // 14298\n        var chainAll = this.__chain__,                                                                                 // 14299\n            isHybrid = !!this.__actions__.length,                                                                      // 14300\n            isUnwrapped = retUnwrapped && !chainAll,                                                                   // 14301\n            onlyLazy = isLazy && !isHybrid;                                                                            // 14302\n                                                                                                                       // 14303\n        if (!retUnwrapped && useLazy) {                                                                                // 14304\n          value = onlyLazy ? value : new LazyWrapper(this);                                                            // 14305\n          var result = func.apply(value, args);                                                                        // 14306\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });                      // 14307\n          return new LodashWrapper(result, chainAll);                                                                  // 14308\n        }                                                                                                              // 14309\n        if (isUnwrapped && onlyLazy) {                                                                                 // 14310\n          return func.apply(this, args);                                                                               // 14311\n        }                                                                                                              // 14312\n        result = this.thru(interceptor);                                                                               // 14313\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;                                  // 14314\n      };                                                                                                               // 14315\n    });                                                                                                                // 14316\n                                                                                                                       // 14317\n    // Add `Array` and `String` methods to `lodash.prototype`.                                                         // 14318\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {                            // 14319\n      var func = arrayProto[methodName],                                                                               // 14320\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',                                     // 14321\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);                                                           // 14322\n                                                                                                                       // 14323\n      lodash.prototype[methodName] = function() {                                                                      // 14324\n        var args = arguments;                                                                                          // 14325\n        if (retUnwrapped && !this.__chain__) {                                                                         // 14326\n          return func.apply(this.value(), args);                                                                       // 14327\n        }                                                                                                              // 14328\n        return this[chainName](function(value) {                                                                       // 14329\n          return func.apply(value, args);                                                                              // 14330\n        });                                                                                                            // 14331\n      };                                                                                                               // 14332\n    });                                                                                                                // 14333\n                                                                                                                       // 14334\n    // Map minified function names to their real names.                                                                // 14335\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 14336\n      var lodashFunc = lodash[methodName];                                                                             // 14337\n      if (lodashFunc) {                                                                                                // 14338\n        var key = (lodashFunc.name + ''),                                                                              // 14339\n            names = realNames[key] || (realNames[key] = []);                                                           // 14340\n                                                                                                                       // 14341\n        names.push({ 'name': methodName, 'func': lodashFunc });                                                        // 14342\n      }                                                                                                                // 14343\n    });                                                                                                                // 14344\n                                                                                                                       // 14345\n    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];        // 14346\n                                                                                                                       // 14347\n    // Add functions to the lazy wrapper.                                                                              // 14348\n    LazyWrapper.prototype.clone = lazyClone;                                                                           // 14349\n    LazyWrapper.prototype.reverse = lazyReverse;                                                                       // 14350\n    LazyWrapper.prototype.value = lazyValue;                                                                           // 14351\n                                                                                                                       // 14352\n    // Add chaining functions to the `lodash` wrapper.                                                                 // 14353\n    lodash.prototype.at = wrapperAt;                                                                                   // 14354\n    lodash.prototype.chain = wrapperChain;                                                                             // 14355\n    lodash.prototype.commit = wrapperCommit;                                                                           // 14356\n    lodash.prototype.flatMap = wrapperFlatMap;                                                                         // 14357\n    lodash.prototype.next = wrapperNext;                                                                               // 14358\n    lodash.prototype.plant = wrapperPlant;                                                                             // 14359\n    lodash.prototype.reverse = wrapperReverse;                                                                         // 14360\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;                        // 14361\n                                                                                                                       // 14362\n    if (iteratorSymbol) {                                                                                              // 14363\n      lodash.prototype[iteratorSymbol] = wrapperToIterator;                                                            // 14364\n    }                                                                                                                  // 14365\n    return lodash;                                                                                                     // 14366\n  }                                                                                                                    // 14367\n                                                                                                                       // 14368\n  /*--------------------------------------------------------------------------*/                                       // 14369\n                                                                                                                       // 14370\n  // Export lodash.                                                                                                    // 14371\n  var _ = runInContext();                                                                                              // 14372\n                                                                                                                       // 14373\n  // Expose lodash on the free variable `window` or `self` when available. This                                        // 14374\n  // prevents errors in cases where lodash is loaded by a script tag in the presence                                   // 14375\n  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.                            // 14376\n  (freeWindow || freeSelf || {})._ = _;                                                                                // 14377\n                                                                                                                       // 14378\n  // Some AMD build optimizers like r.js check for condition patterns like the following:                              // 14379\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {                                    // 14380\n    // Define as an anonymous module so, through path mapping, it can be                                               // 14381\n    // referenced as the \"underscore\" module.                                                                          // 14382\n    define(function() {                                                                                                // 14383\n      return _;                                                                                                        // 14384\n    });                                                                                                                // 14385\n  }                                                                                                                    // 14386\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.                            // 14387\n  else if (freeExports && freeModule) {                                                                                // 14388\n    // Export for Node.js.                                                                                             // 14389\n    if (moduleExports) {                                                                                               // 14390\n      (freeModule.exports = _)._ = _;                                                                                  // 14391\n    }                                                                                                                  // 14392\n    // Export for CommonJS support.                                                                                    // 14393\n    freeExports._ = _;                                                                                                 // 14394\n  }                                                                                                                    // 14395\n  else {                                                                                                               // 14396\n    // Export to the global object.                                                                                    // 14397\n    root._ = _;                                                                                                        // 14398\n  }                                                                                                                    // 14399\n}.call(this));                                                                                                         // 14400\n                                                                                                                       // 14401\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/erasaur_meteor-lodash/export.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlodash = this._;                                                                                                       // 1\n_ = lodash;                                                                                                            // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['erasaur:meteor-lodash'] = {}, {\n  lodash: lodash,\n  _: _\n});\n\n})();\n","servePath":"/packages/erasaur_meteor-lodash.js"}]