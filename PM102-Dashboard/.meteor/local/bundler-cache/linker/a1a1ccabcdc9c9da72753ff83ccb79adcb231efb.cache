[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar NpmModuleMongodb = Package['npm-mongo'].NpmModuleMongodb;\nvar NpmModuleMongodbVersion = Package['npm-mongo'].NpmModuleMongodbVersion;\nvar AllowDeny = Package['allow-deny'].AllowDeny;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MaxHeap = Package['binary-heap'].MaxHeap;\nvar MinHeap = Package['binary-heap'].MinHeap;\nvar MinMaxHeap = Package['binary-heap'].MinMaxHeap;\nvar Hook = Package['callback-hook'].Hook;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar MongoInternals, MongoTest, MongoConnection, mongoResult, CursorDescription, Cursor, listenAll, forEachTrigger, OPLOG_COLLECTION, idForOp, OplogHandle, ObserveMultiplexer, ObserveHandle, DocFetcher, PollingObserveDriver, OplogObserveDriver, LocalCollectionDriver, Mongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mongo\":{\"mongo_driver.js\":[\"babel-runtime/helpers/typeof\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/mongo_driver.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});                         //\n/**                                                                                                                   // 1\n * Provide a synchronous Collection API using fibers, backed by                                                       //\n * MongoDB.  This is only for use on the server, and mostly identical                                                 //\n * to the client API.                                                                                                 //\n *                                                                                                                    //\n * NOTE: the public API methods must be run within a fiber. If you call                                               //\n * these outside of a fiber they will explode!                                                                        //\n */                                                                                                                   //\n                                                                                                                      //\nvar path = Npm.require('path');                                                                                       // 10\nvar MongoDB = NpmModuleMongodb;                                                                                       // 11\nvar Fiber = Npm.require('fibers');                                                                                    // 12\nvar Future = Npm.require(path.join('fibers', 'future'));                                                              // 13\n                                                                                                                      //\nMongoInternals = {};                                                                                                  // 15\nMongoTest = {};                                                                                                       // 16\n                                                                                                                      //\nMongoInternals.NpmModules = {                                                                                         // 18\n  mongodb: {                                                                                                          // 19\n    version: NpmModuleMongodbVersion,                                                                                 // 20\n    module: MongoDB                                                                                                   // 21\n  }                                                                                                                   // 19\n};                                                                                                                    // 18\n                                                                                                                      //\n// Older version of what is now available via                                                                         // 25\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but                                            // 26\n// people do use it.                                                                                                  // 27\n// XXX COMPAT WITH 1.0.3.2                                                                                            // 28\nMongoInternals.NpmModule = MongoDB;                                                                                   // 29\n                                                                                                                      //\n// This is used to add or remove EJSON from the beginning of everything nested                                        // 31\n// inside an EJSON custom type. It should only be called on pure JSON!                                                // 32\nvar replaceNames = function replaceNames(filter, thing) {                                                             // 33\n  if ((typeof thing === 'undefined' ? 'undefined' : _typeof(thing)) === \"object\") {                                   // 34\n    if (_.isArray(thing)) {                                                                                           // 35\n      return _.map(thing, _.bind(replaceNames, null, filter));                                                        // 36\n    }                                                                                                                 // 37\n    var ret = {};                                                                                                     // 38\n    _.each(thing, function (value, key) {                                                                             // 39\n      ret[filter(key)] = replaceNames(filter, value);                                                                 // 40\n    });                                                                                                               // 41\n    return ret;                                                                                                       // 42\n  }                                                                                                                   // 43\n  return thing;                                                                                                       // 44\n};                                                                                                                    // 45\n                                                                                                                      //\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just                                          // 47\n// doing a structural clone).                                                                                         // 48\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?                                           // 49\nMongoDB.Timestamp.prototype.clone = function () {                                                                     // 50\n  // Timestamps should be immutable.                                                                                  // 51\n  return this;                                                                                                        // 52\n};                                                                                                                    // 53\n                                                                                                                      //\nvar makeMongoLegal = function makeMongoLegal(name) {                                                                  // 55\n  return \"EJSON\" + name;                                                                                              // 55\n};                                                                                                                    // 55\nvar unmakeMongoLegal = function unmakeMongoLegal(name) {                                                              // 56\n  return name.substr(5);                                                                                              // 56\n};                                                                                                                    // 56\n                                                                                                                      //\nvar replaceMongoAtomWithMeteor = function replaceMongoAtomWithMeteor(document) {                                      // 58\n  if (document instanceof MongoDB.Binary) {                                                                           // 59\n    var buffer = document.value(true);                                                                                // 60\n    return new Uint8Array(buffer);                                                                                    // 61\n  }                                                                                                                   // 62\n  if (document instanceof MongoDB.ObjectID) {                                                                         // 63\n    return new Mongo.ObjectID(document.toHexString());                                                                // 64\n  }                                                                                                                   // 65\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {                                  // 66\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));                                             // 68\n  }                                                                                                                   // 69\n  if (document instanceof MongoDB.Timestamp) {                                                                        // 70\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!                                      // 71\n    // this is a weird internal thing used in the oplog!) is the same as the                                          // 72\n    // Mongo representation. We need to do this explicitly or else we would do a                                      // 73\n    // structural clone and lose the prototype.                                                                       // 74\n    return document;                                                                                                  // 75\n  }                                                                                                                   // 76\n  return undefined;                                                                                                   // 77\n};                                                                                                                    // 78\n                                                                                                                      //\nvar replaceMeteorAtomWithMongo = function replaceMeteorAtomWithMongo(document) {                                      // 80\n  if (EJSON.isBinary(document)) {                                                                                     // 81\n    // This does more copies than we'd like, but is necessary because                                                 // 82\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually                                       // 83\n    // serialize it correctly).                                                                                       // 84\n    return new MongoDB.Binary(new Buffer(document));                                                                  // 85\n  }                                                                                                                   // 86\n  if (document instanceof Mongo.ObjectID) {                                                                           // 87\n    return new MongoDB.ObjectID(document.toHexString());                                                              // 88\n  }                                                                                                                   // 89\n  if (document instanceof MongoDB.Timestamp) {                                                                        // 90\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!                                      // 91\n    // this is a weird internal thing used in the oplog!) is the same as the                                          // 92\n    // Mongo representation. We need to do this explicitly or else we would do a                                      // 93\n    // structural clone and lose the prototype.                                                                       // 94\n    return document;                                                                                                  // 95\n  }                                                                                                                   // 96\n  if (EJSON._isCustomType(document)) {                                                                                // 97\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));                                                 // 98\n  }                                                                                                                   // 99\n  // It is not ordinarily possible to stick dollar-sign keys into mongo                                               // 100\n  // so we don't bother checking for things that need escaping at this time.                                          // 101\n  return undefined;                                                                                                   // 102\n};                                                                                                                    // 103\n                                                                                                                      //\nvar replaceTypes = function replaceTypes(document, atomTransformer) {                                                 // 105\n  if ((typeof document === 'undefined' ? 'undefined' : _typeof(document)) !== 'object' || document === null) return document;\n                                                                                                                      //\n  var replacedTopLevelAtom = atomTransformer(document);                                                               // 109\n  if (replacedTopLevelAtom !== undefined) return replacedTopLevelAtom;                                                // 110\n                                                                                                                      //\n  var ret = document;                                                                                                 // 113\n  _.each(document, function (val, key) {                                                                              // 114\n    var valReplaced = replaceTypes(val, atomTransformer);                                                             // 115\n    if (val !== valReplaced) {                                                                                        // 116\n      // Lazy clone. Shallow copy.                                                                                    // 117\n      if (ret === document) ret = _.clone(document);                                                                  // 118\n      ret[key] = valReplaced;                                                                                         // 120\n    }                                                                                                                 // 121\n  });                                                                                                                 // 122\n  return ret;                                                                                                         // 123\n};                                                                                                                    // 124\n                                                                                                                      //\nMongoConnection = function MongoConnection(url, options) {                                                            // 127\n  var self = this;                                                                                                    // 128\n  options = options || {};                                                                                            // 129\n  self._observeMultiplexers = {};                                                                                     // 130\n  self._onFailoverHook = new Hook();                                                                                  // 131\n                                                                                                                      //\n  var mongoOptions = _.extend({                                                                                       // 133\n    db: { safe: true },                                                                                               // 134\n    // http://mongodb.github.io/node-mongodb-native/2.2/api/Server.html                                               // 135\n    server: {                                                                                                         // 136\n      // Reconnect on error.                                                                                          // 137\n      autoReconnect: true,                                                                                            // 138\n      // Try to reconnect forever, instead of stopping after 30 tries (the                                            // 139\n      // default), with each attempt separated by 1000ms.                                                             // 140\n      reconnectTries: Infinity                                                                                        // 141\n    },                                                                                                                // 136\n    replSet: {}                                                                                                       // 143\n  }, Mongo._connectionOptions);                                                                                       // 133\n                                                                                                                      //\n  // Disable the native parser by default, unless specifically enabled                                                // 146\n  // in the mongo URL.                                                                                                // 147\n  // - The native driver can cause errors which normally would be                                                     // 148\n  //   thrown, caught, and handled into segfaults that take down the                                                  // 149\n  //   whole app.                                                                                                     // 150\n  // - Binary modules don't yet work when you bundle and move the bundle                                              // 151\n  //   to a different platform (aka deploy)                                                                           // 152\n  // We should revisit this after binary npm module support lands.                                                    // 153\n  if (!/[\\?&]native_?[pP]arser=/.test(url)) {                                                                         // 154\n    mongoOptions.db.native_parser = false;                                                                            // 155\n  }                                                                                                                   // 156\n                                                                                                                      //\n  // Internally the oplog connections specify their own poolSize                                                      // 158\n  // which we don't want to overwrite with any user defined value                                                     // 159\n  if (_.has(options, 'poolSize')) {                                                                                   // 160\n    // If we just set this for \"server\", replSet will override it. If we just                                         // 161\n    // set it for replSet, it will be ignored if we're not using a replSet.                                           // 162\n    mongoOptions.server.poolSize = options.poolSize;                                                                  // 163\n    mongoOptions.replSet.poolSize = options.poolSize;                                                                 // 164\n  }                                                                                                                   // 165\n                                                                                                                      //\n  self.db = null;                                                                                                     // 167\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when                                        // 168\n  // it changes.  The Node driver's joined callback seems to fire way too                                             // 169\n  // often, which is why we need to track it ourselves.                                                               // 170\n  self._primary = null;                                                                                               // 171\n  self._oplogHandle = null;                                                                                           // 172\n  self._docFetcher = null;                                                                                            // 173\n                                                                                                                      //\n  var connectFuture = new Future();                                                                                   // 176\n  MongoDB.connect(url, mongoOptions, Meteor.bindEnvironment(function (err, db) {                                      // 177\n    if (err) {                                                                                                        // 182\n      throw err;                                                                                                      // 183\n    }                                                                                                                 // 184\n                                                                                                                      //\n    // First, figure out what the current primary is, if any.                                                         // 186\n    if (db.serverConfig.isMasterDoc) {                                                                                // 187\n      self._primary = db.serverConfig.isMasterDoc.primary;                                                            // 188\n    }                                                                                                                 // 189\n                                                                                                                      //\n    db.serverConfig.on('joined', Meteor.bindEnvironment(function (kind, doc) {                                        // 191\n      if (kind === 'primary') {                                                                                       // 193\n        if (doc.primary !== self._primary) {                                                                          // 194\n          self._primary = doc.primary;                                                                                // 195\n          self._onFailoverHook.each(function (callback) {                                                             // 196\n            callback();                                                                                               // 197\n            return true;                                                                                              // 198\n          });                                                                                                         // 199\n        }                                                                                                             // 200\n      } else if (doc.me === self._primary) {                                                                          // 201\n        // The thing we thought was primary is now something other than                                               // 202\n        // primary.  Forget that we thought it was primary.  (This means                                              // 203\n        // that if a server stops being primary and then starts being                                                 // 204\n        // primary again without another server becoming primary in the                                               // 205\n        // middle, we'll correctly count it as a failover.)                                                           // 206\n        self._primary = null;                                                                                         // 207\n      }                                                                                                               // 208\n    }));                                                                                                              // 209\n                                                                                                                      //\n    // Allow the constructor to return.                                                                               // 211\n    connectFuture['return'](db);                                                                                      // 212\n  }, connectFuture.resolver() // onException                                                                          // 213\n  ));                                                                                                                 // 180\n                                                                                                                      //\n  // Wait for the connection to be successful; throws on failure.                                                     // 218\n  self.db = connectFuture.wait();                                                                                     // 219\n                                                                                                                      //\n  if (options.oplogUrl && !Package['disable-oplog']) {                                                                // 221\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);                                      // 222\n    self._docFetcher = new DocFetcher(self);                                                                          // 223\n  }                                                                                                                   // 224\n};                                                                                                                    // 225\n                                                                                                                      //\nMongoConnection.prototype.close = function () {                                                                       // 227\n  var self = this;                                                                                                    // 228\n                                                                                                                      //\n  if (!self.db) throw Error(\"close called before Connection created?\");                                               // 230\n                                                                                                                      //\n  // XXX probably untested                                                                                            // 233\n  var oplogHandle = self._oplogHandle;                                                                                // 234\n  self._oplogHandle = null;                                                                                           // 235\n  if (oplogHandle) oplogHandle.stop();                                                                                // 236\n                                                                                                                      //\n  // Use Future.wrap so that errors get thrown. This happens to                                                       // 239\n  // work even outside a fiber since the 'close' method is not                                                        // 240\n  // actually asynchronous.                                                                                           // 241\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();                                                           // 242\n};                                                                                                                    // 243\n                                                                                                                      //\n// Returns the Mongo Collection object; may yield.                                                                    // 245\nMongoConnection.prototype.rawCollection = function (collectionName) {                                                 // 246\n  var self = this;                                                                                                    // 247\n                                                                                                                      //\n  if (!self.db) throw Error(\"rawCollection called before Connection created?\");                                       // 249\n                                                                                                                      //\n  var future = new Future();                                                                                          // 252\n  self.db.collection(collectionName, future.resolver());                                                              // 253\n  return future.wait();                                                                                               // 254\n};                                                                                                                    // 255\n                                                                                                                      //\nMongoConnection.prototype._createCappedCollection = function (collectionName, byteSize, maxDocuments) {               // 257\n  var self = this;                                                                                                    // 259\n                                                                                                                      //\n  if (!self.db) throw Error(\"_createCappedCollection called before Connection created?\");                             // 261\n                                                                                                                      //\n  var future = new Future();                                                                                          // 264\n  self.db.createCollection(collectionName, { capped: true, size: byteSize, max: maxDocuments }, future.resolver());   // 265\n  future.wait();                                                                                                      // 269\n};                                                                                                                    // 270\n                                                                                                                      //\n// This should be called synchronously with a write, to create a                                                      // 272\n// transaction on the current write fence, if any. After we can read                                                  // 273\n// the write, and after observers have been notified (or at least,                                                    // 274\n// after the observer notifiers have added themselves to the write                                                    // 275\n// fence), you should call 'committed()' on the object returned.                                                      // 276\nMongoConnection.prototype._maybeBeginWrite = function () {                                                            // 277\n  var self = this;                                                                                                    // 278\n  var fence = DDPServer._CurrentWriteFence.get();                                                                     // 279\n  if (fence) return fence.beginWrite();else return { committed: function () {                                         // 280\n      function committed() {}                                                                                         // 283\n                                                                                                                      //\n      return committed;                                                                                               // 283\n    }() };                                                                                                            // 283\n};                                                                                                                    // 284\n                                                                                                                      //\n// Internal interface: adds a callback which is called when the Mongo primary                                         // 286\n// changes. Returns a stop handle.                                                                                    // 287\nMongoConnection.prototype._onFailover = function (callback) {                                                         // 288\n  return this._onFailoverHook.register(callback);                                                                     // 289\n};                                                                                                                    // 290\n                                                                                                                      //\n//////////// Public API //////////                                                                                    // 293\n                                                                                                                      //\n// The write methods block until the database has confirmed the write (it may                                         // 295\n// not be replicated or stable on disk, but one server has confirmed it) if no                                        // 296\n// callback is provided. If a callback is provided, then they call the callback                                       // 297\n// when the write is confirmed. They return nothing on success, and raise an                                          // 298\n// exception on failure.                                                                                              // 299\n//                                                                                                                    // 300\n// After making a write (with insert, update, remove), observers are                                                  // 301\n// notified asynchronously. If you want to receive a callback once all                                                // 302\n// of the observer notifications have landed for your write, do the                                                   // 303\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new                                             // 304\n// _WriteFence, and then set a callback on the write fence.)                                                          // 305\n//                                                                                                                    // 306\n// Since our execution environment is single-threaded, this is                                                        // 307\n// well-defined -- a write \"has been made\" if it's returned, and an                                                   // 308\n// observer \"has been notified\" if its callback has returned.                                                         // 309\n                                                                                                                      //\nvar writeCallback = function writeCallback(write, refresh, callback) {                                                // 311\n  return function (err, result) {                                                                                     // 312\n    if (!err) {                                                                                                       // 313\n      // XXX We don't have to run this on error, right?                                                               // 314\n      try {                                                                                                           // 315\n        refresh();                                                                                                    // 316\n      } catch (refreshErr) {                                                                                          // 317\n        if (callback) {                                                                                               // 318\n          callback(refreshErr);                                                                                       // 319\n          return;                                                                                                     // 320\n        } else {                                                                                                      // 321\n          throw refreshErr;                                                                                           // 322\n        }                                                                                                             // 323\n      }                                                                                                               // 324\n    }                                                                                                                 // 325\n    write.committed();                                                                                                // 326\n    if (callback) callback(err, result);else if (err) throw err;                                                      // 327\n  };                                                                                                                  // 331\n};                                                                                                                    // 332\n                                                                                                                      //\nvar bindEnvironmentForWrite = function bindEnvironmentForWrite(callback) {                                            // 334\n  return Meteor.bindEnvironment(callback, \"Mongo write\");                                                             // 335\n};                                                                                                                    // 336\n                                                                                                                      //\nMongoConnection.prototype._insert = function (collection_name, document, callback) {                                  // 338\n  var self = this;                                                                                                    // 340\n                                                                                                                      //\n  var sendError = function sendError(e) {                                                                             // 342\n    if (callback) return callback(e);                                                                                 // 343\n    throw e;                                                                                                          // 345\n  };                                                                                                                  // 346\n                                                                                                                      //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                      // 348\n    var e = new Error(\"Failure test\");                                                                                // 349\n    e.expected = true;                                                                                                // 350\n    sendError(e);                                                                                                     // 351\n    return;                                                                                                           // 352\n  }                                                                                                                   // 353\n                                                                                                                      //\n  if (!(LocalCollection._isPlainObject(document) && !EJSON._isCustomType(document))) {                                // 355\n    sendError(new Error(\"Only plain objects may be inserted into MongoDB\"));                                          // 357\n    return;                                                                                                           // 359\n  }                                                                                                                   // 360\n                                                                                                                      //\n  var write = self._maybeBeginWrite();                                                                                // 362\n  var refresh = function refresh() {                                                                                  // 363\n    Meteor.refresh({ collection: collection_name, id: document._id });                                                // 364\n  };                                                                                                                  // 365\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));                                        // 366\n  try {                                                                                                               // 367\n    var collection = self.rawCollection(collection_name);                                                             // 368\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo), { safe: true }, callback);                  // 369\n  } catch (e) {                                                                                                       // 371\n    write.committed();                                                                                                // 372\n    throw e;                                                                                                          // 373\n  }                                                                                                                   // 374\n};                                                                                                                    // 375\n                                                                                                                      //\n// Cause queries that may be affected by the selector to poll in this write                                           // 377\n// fence.                                                                                                             // 378\nMongoConnection.prototype._refresh = function (collectionName, selector) {                                            // 379\n  var self = this;                                                                                                    // 380\n  var refreshKey = { collection: collectionName };                                                                    // 381\n  // If we know which documents we're removing, don't poll queries that are                                           // 382\n  // specific to other documents. (Note that multiple notifications here should                                       // 383\n  // not cause multiple polls, since all our listener is doing is enqueueing a                                        // 384\n  // poll.)                                                                                                           // 385\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);                                                  // 386\n  if (specificIds) {                                                                                                  // 387\n    _.each(specificIds, function (id) {                                                                               // 388\n      Meteor.refresh(_.extend({ id: id }, refreshKey));                                                               // 389\n    });                                                                                                               // 390\n  } else {                                                                                                            // 391\n    Meteor.refresh(refreshKey);                                                                                       // 392\n  }                                                                                                                   // 393\n};                                                                                                                    // 394\n                                                                                                                      //\nMongoConnection.prototype._remove = function (collection_name, selector, callback) {                                  // 396\n  var self = this;                                                                                                    // 398\n                                                                                                                      //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                      // 400\n    var e = new Error(\"Failure test\");                                                                                // 401\n    e.expected = true;                                                                                                // 402\n    if (callback) return callback(e);else throw e;                                                                    // 403\n  }                                                                                                                   // 407\n                                                                                                                      //\n  var write = self._maybeBeginWrite();                                                                                // 409\n  var refresh = function refresh() {                                                                                  // 410\n    self._refresh(collection_name, selector);                                                                         // 411\n  };                                                                                                                  // 412\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));                                        // 413\n                                                                                                                      //\n  try {                                                                                                               // 415\n    var collection = self.rawCollection(collection_name);                                                             // 416\n    var wrappedCallback = function wrappedCallback(err, driverResult) {                                               // 417\n      callback(err, transformResult(driverResult).numberAffected);                                                    // 418\n    };                                                                                                                // 419\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo), { safe: true }, wrappedCallback);           // 420\n  } catch (e) {                                                                                                       // 422\n    write.committed();                                                                                                // 423\n    throw e;                                                                                                          // 424\n  }                                                                                                                   // 425\n};                                                                                                                    // 426\n                                                                                                                      //\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {                                           // 428\n  var self = this;                                                                                                    // 429\n                                                                                                                      //\n  var write = self._maybeBeginWrite();                                                                                // 431\n  var refresh = function refresh() {                                                                                  // 432\n    Meteor.refresh({ collection: collectionName, id: null,                                                            // 433\n      dropCollection: true });                                                                                        // 434\n  };                                                                                                                  // 435\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));                                                    // 436\n                                                                                                                      //\n  try {                                                                                                               // 438\n    var collection = self.rawCollection(collectionName);                                                              // 439\n    collection.drop(cb);                                                                                              // 440\n  } catch (e) {                                                                                                       // 441\n    write.committed();                                                                                                // 442\n    throw e;                                                                                                          // 443\n  }                                                                                                                   // 444\n};                                                                                                                    // 445\n                                                                                                                      //\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`                                           // 447\n// because it lets the test's fence wait for it to be complete.                                                       // 448\nMongoConnection.prototype._dropDatabase = function (cb) {                                                             // 449\n  var self = this;                                                                                                    // 450\n                                                                                                                      //\n  var write = self._maybeBeginWrite();                                                                                // 452\n  var refresh = function refresh() {                                                                                  // 453\n    Meteor.refresh({ dropDatabase: true });                                                                           // 454\n  };                                                                                                                  // 455\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));                                                    // 456\n                                                                                                                      //\n  try {                                                                                                               // 458\n    self.db.dropDatabase(cb);                                                                                         // 459\n  } catch (e) {                                                                                                       // 460\n    write.committed();                                                                                                // 461\n    throw e;                                                                                                          // 462\n  }                                                                                                                   // 463\n};                                                                                                                    // 464\n                                                                                                                      //\nMongoConnection.prototype._update = function (collection_name, selector, mod, options, callback) {                    // 466\n  var self = this;                                                                                                    // 468\n                                                                                                                      //\n  if (!callback && options instanceof Function) {                                                                     // 470\n    callback = options;                                                                                               // 471\n    options = null;                                                                                                   // 472\n  }                                                                                                                   // 473\n                                                                                                                      //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                      // 475\n    var e = new Error(\"Failure test\");                                                                                // 476\n    e.expected = true;                                                                                                // 477\n    if (callback) return callback(e);else throw e;                                                                    // 478\n  }                                                                                                                   // 482\n                                                                                                                      //\n  // explicit safety check. null and undefined can crash the mongo                                                    // 484\n  // driver. Although the node driver and minimongo do 'support'                                                      // 485\n  // non-object modifier in that they don't crash, they are not                                                       // 486\n  // meaningful operations and do not do anything. Defensively throw an                                               // 487\n  // error here.                                                                                                      // 488\n  if (!mod || (typeof mod === 'undefined' ? 'undefined' : _typeof(mod)) !== 'object') throw new Error(\"Invalid modifier. Modifier must be an object.\");\n                                                                                                                      //\n  if (!(LocalCollection._isPlainObject(mod) && !EJSON._isCustomType(mod))) {                                          // 492\n    throw new Error(\"Only plain objects may be used as replacement\" + \" documents in MongoDB\");                       // 494\n    return;                                                                                                           // 497\n  }                                                                                                                   // 498\n                                                                                                                      //\n  if (!options) options = {};                                                                                         // 500\n                                                                                                                      //\n  var write = self._maybeBeginWrite();                                                                                // 502\n  var refresh = function refresh() {                                                                                  // 503\n    self._refresh(collection_name, selector);                                                                         // 504\n  };                                                                                                                  // 505\n  callback = writeCallback(write, refresh, callback);                                                                 // 506\n  try {                                                                                                               // 507\n    var collection = self.rawCollection(collection_name);                                                             // 508\n    var mongoOpts = { safe: true };                                                                                   // 509\n    // explictly enumerate options that minimongo supports                                                            // 510\n    if (options.upsert) mongoOpts.upsert = true;                                                                      // 511\n    if (options.multi) mongoOpts.multi = true;                                                                        // 512\n    // Lets you get a more more full result from MongoDB. Use with caution:                                           // 513\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or                                         // 514\n    // with simulated upsert.                                                                                         // 515\n    if (options.fullResult) mongoOpts.fullResult = true;                                                              // 516\n                                                                                                                      //\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);                                           // 518\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);                                                     // 519\n                                                                                                                      //\n    var isModify = isModificationMod(mongoMod);                                                                       // 521\n    var knownId = selector._id || mod._id;                                                                            // 522\n                                                                                                                      //\n    if (options._forbidReplace && !isModify) {                                                                        // 524\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");                                             // 525\n      if (callback) {                                                                                                 // 526\n        return callback(e);                                                                                           // 527\n      } else {                                                                                                        // 528\n        throw e;                                                                                                      // 529\n      }                                                                                                               // 530\n    }                                                                                                                 // 531\n                                                                                                                      //\n    if (options.upsert && !knownId && options.insertedId) {                                                           // 533\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)                                          // 534\n      //     we should be able to just use $setOnInsert instead of this                                               // 535\n      //     simulated upsert thing. (We can't use $setOnInsert with                                                  // 536\n      //     replacements because there's nowhere to write it, and $setOnInsert                                       // 537\n      //     can't set _id on Mongo 2.4.)                                                                             // 538\n      //                                                                                                              // 539\n      //     Also, in the future we could do a real upsert for the mongo id                                           // 540\n      //     generation case, if the the node mongo driver gives us back the id                                       // 541\n      //     of the upserted doc (which our current version does not).                                                // 542\n      //                                                                                                              // 543\n      //     For more context, see                                                                                    // 544\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706                                       // 545\n      simulateUpsertWithInsertedId(collection, mongoSelector, mongoMod, isModify, options,                            // 546\n      // This callback does not need to be bindEnvironment'ed because                                                 // 549\n      // simulateUpsertWithInsertedId() wraps it and then passes it through                                           // 550\n      // bindEnvironmentForWrite.                                                                                     // 551\n      function (err, result) {                                                                                        // 552\n        // If we got here via a upsert() call, then options._returnObject will                                        // 553\n        // be set and we should return the whole object. Otherwise, we should                                         // 554\n        // just return the number of affected docs to match the mongo API.                                            // 555\n        if (result && !options._returnObject) callback(err, result.numberAffected);else callback(err, result);        // 556\n      });                                                                                                             // 560\n    } else {                                                                                                          // 562\n      collection.update(mongoSelector, mongoMod, mongoOpts, bindEnvironmentForWrite(function (err, result) {          // 563\n        if (!err) {                                                                                                   // 566\n          var meteorResult = transformResult(result);                                                                 // 567\n          if (meteorResult && options._returnObject) {                                                                // 568\n            // If this was an upsert() call, and we ended up                                                          // 569\n            // inserting a new doc and we know its id, then                                                           // 570\n            // return that id as well.                                                                                // 571\n                                                                                                                      //\n            if (options.upsert && meteorResult.insertedId && knownId) {                                               // 573\n              meteorResult.insertedId = knownId;                                                                      // 574\n            }                                                                                                         // 575\n            callback(err, meteorResult);                                                                              // 576\n          } else {                                                                                                    // 577\n            callback(err, meteorResult.numberAffected);                                                               // 578\n          }                                                                                                           // 579\n        } else {                                                                                                      // 580\n          callback(err);                                                                                              // 581\n        }                                                                                                             // 582\n      }));                                                                                                            // 583\n    }                                                                                                                 // 584\n  } catch (e) {                                                                                                       // 585\n    write.committed();                                                                                                // 586\n    throw e;                                                                                                          // 587\n  }                                                                                                                   // 588\n};                                                                                                                    // 589\n                                                                                                                      //\nvar isModificationMod = function isModificationMod(mod) {                                                             // 591\n  var isReplace = false;                                                                                              // 592\n  var isModify = false;                                                                                               // 593\n  for (var k in meteorBabelHelpers.sanitizeForInObject(mod)) {                                                        // 594\n    if (k.substr(0, 1) === '$') {                                                                                     // 595\n      isModify = true;                                                                                                // 596\n    } else {                                                                                                          // 597\n      isReplace = true;                                                                                               // 598\n    }                                                                                                                 // 599\n  }                                                                                                                   // 600\n  if (isModify && isReplace) {                                                                                        // 601\n    throw new Error(\"Update parameter cannot have both modifier and non-modifier fields.\");                           // 602\n  }                                                                                                                   // 604\n  return isModify;                                                                                                    // 605\n};                                                                                                                    // 606\n                                                                                                                      //\nvar transformResult = function transformResult(driverResult) {                                                        // 608\n  var meteorResult = { numberAffected: 0 };                                                                           // 609\n  if (driverResult) {                                                                                                 // 610\n    mongoResult = driverResult.result;                                                                                // 611\n                                                                                                                      //\n    // On updates with upsert:true, the inserted values come as a list of                                             // 613\n    // upserted values -- even with options.multi, when the upsert does insert,                                       // 614\n    // it only inserts one element.                                                                                   // 615\n    if (mongoResult.upserted) {                                                                                       // 616\n      meteorResult.numberAffected += mongoResult.upserted.length;                                                     // 617\n                                                                                                                      //\n      if (mongoResult.upserted.length == 1) {                                                                         // 619\n        meteorResult.insertedId = mongoResult.upserted[0]._id;                                                        // 620\n      }                                                                                                               // 621\n    } else {                                                                                                          // 622\n      meteorResult.numberAffected = mongoResult.n;                                                                    // 623\n    }                                                                                                                 // 624\n  }                                                                                                                   // 625\n                                                                                                                      //\n  return meteorResult;                                                                                                // 627\n};                                                                                                                    // 628\n                                                                                                                      //\nvar NUM_OPTIMISTIC_TRIES = 3;                                                                                         // 631\n                                                                                                                      //\n// exposed for testing                                                                                                // 633\nMongoConnection._isCannotChangeIdError = function (err) {                                                             // 634\n  // First check for what this error looked like in Mongo 2.4.  Either of these                                       // 635\n  // checks should work, but just to be safe...                                                                       // 636\n  if (err.code === 13596) return true;                                                                                // 637\n  if (err.errmsg.indexOf(\"cannot change _id of a document\") === 0) return true;                                       // 639\n                                                                                                                      //\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code                                       // 642\n  // here, because the error code we observed it producing (16837) appears to be                                      // 643\n  // a far more generic error code based on examining the source.                                                     // 644\n  if (err.errmsg.indexOf(\"The _id field cannot be changed\") === 0) return true;                                       // 645\n                                                                                                                      //\n  return false;                                                                                                       // 648\n};                                                                                                                    // 649\n                                                                                                                      //\nvar simulateUpsertWithInsertedId = function simulateUpsertWithInsertedId(collection, selector, mod, isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,                                          // 653\n  // then without affecting the database, we know we should probably do an                                            // 654\n  // insert.  We then do a *conditional* insert that will fail in the case                                            // 655\n  // of a race condition.  This conditional insert is actually an                                                     // 656\n  // upsert-replace with an _id, which will never successfully update an                                              // 657\n  // existing document.  If this upsert fails with an error saying it                                                 // 658\n  // couldn't change an existing _id, then we know an intervening write has                                           // 659\n  // caused the query to match something.  We go back to step one and repeat.                                         // 660\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's                                               // 661\n  // unlikely our writes will continue to be interfered with under normal                                             // 662\n  // circumstances (though sufficiently heavy contention with writers                                                 // 663\n  // disagreeing on the existence of an object will cause writes to fail                                              // 664\n  // in theory).                                                                                                      // 665\n                                                                                                                      //\n  var newDoc;                                                                                                         // 667\n  // Run this code up front so that it fails fast if someone uses                                                     // 668\n  // a Mongo update operator we don't support.                                                                        // 669\n  if (isModify) {                                                                                                     // 670\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on                                                   // 671\n    // selector and mod.  We assume it doesn't matter, as far as                                                      // 672\n    // the behavior of modifiers is concerned, whether `_modify`                                                      // 673\n    // is run on EJSON or on mongo-converted EJSON.                                                                   // 674\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);                                               // 675\n                                                                                                                      //\n    newDoc = selectorDoc;                                                                                             // 677\n                                                                                                                      //\n    // Convert dotted keys into objects. (Resolves issue #4522).                                                      // 679\n    _.each(newDoc, function (value, key) {                                                                            // 680\n      var trail = key.split(\".\");                                                                                     // 681\n                                                                                                                      //\n      if (trail.length > 1) {                                                                                         // 683\n        //Key is dotted. Convert it into an object.                                                                   // 684\n        delete newDoc[key];                                                                                           // 685\n                                                                                                                      //\n        var obj = newDoc,                                                                                             // 687\n            leaf = trail.pop();                                                                                       // 687\n                                                                                                                      //\n        // XXX It is not quite certain what should be done if there are clashing                                      // 690\n        // keys on the trail of the dotted key. For now we will just override it                                      // 691\n        // It wouldn't be a very sane query in the first place, but should look                                       // 692\n        // up what mongo does in this case.                                                                           // 693\n                                                                                                                      //\n        while (key = trail.shift()) {                                                                                 // 695\n          if (_typeof(obj[key]) !== \"object\") {                                                                       // 696\n            obj[key] = {};                                                                                            // 697\n          }                                                                                                           // 698\n                                                                                                                      //\n          obj = obj[key];                                                                                             // 700\n        }                                                                                                             // 701\n                                                                                                                      //\n        obj[leaf] = value;                                                                                            // 703\n      }                                                                                                               // 704\n    });                                                                                                               // 705\n                                                                                                                      //\n    LocalCollection._modify(newDoc, mod, { isInsert: true });                                                         // 707\n  } else {                                                                                                            // 708\n    newDoc = mod;                                                                                                     // 709\n  }                                                                                                                   // 710\n                                                                                                                      //\n  var insertedId = options.insertedId; // must exist                                                                  // 712\n  var mongoOptsForUpdate = {                                                                                          // 713\n    safe: true,                                                                                                       // 714\n    multi: options.multi                                                                                              // 715\n  };                                                                                                                  // 713\n  var mongoOptsForInsert = {                                                                                          // 717\n    safe: true,                                                                                                       // 718\n    upsert: true                                                                                                      // 719\n  };                                                                                                                  // 717\n                                                                                                                      //\n  var tries = NUM_OPTIMISTIC_TRIES;                                                                                   // 722\n                                                                                                                      //\n  var doUpdate = function doUpdate() {                                                                                // 724\n    tries--;                                                                                                          // 725\n    if (!tries) {                                                                                                     // 726\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));                                 // 727\n    } else {                                                                                                          // 728\n      collection.update(selector, mod, mongoOptsForUpdate, bindEnvironmentForWrite(function (err, result) {           // 729\n        if (err) {                                                                                                    // 731\n          callback(err);                                                                                              // 732\n        } else if (result && result.result.n != 0) {                                                                  // 733\n          callback(null, {                                                                                            // 734\n            numberAffected: result.result.n                                                                           // 735\n          });                                                                                                         // 734\n        } else {                                                                                                      // 737\n          doConditionalInsert();                                                                                      // 738\n        }                                                                                                             // 739\n      }));                                                                                                            // 740\n    }                                                                                                                 // 741\n  };                                                                                                                  // 742\n                                                                                                                      //\n  var doConditionalInsert = function doConditionalInsert() {                                                          // 744\n    var replacementWithId = _.extend(replaceTypes({ _id: insertedId }, replaceMeteorAtomWithMongo), newDoc);          // 745\n    collection.update(selector, replacementWithId, mongoOptsForInsert, bindEnvironmentForWrite(function (err, result) {\n      if (err) {                                                                                                      // 750\n        // figure out if this is a                                                                                    // 751\n        // \"cannot change _id of document\" error, and                                                                 // 752\n        // if so, try doUpdate() again, up to 3 times.                                                                // 753\n        if (MongoConnection._isCannotChangeIdError(err)) {                                                            // 754\n          doUpdate();                                                                                                 // 755\n        } else {                                                                                                      // 756\n          callback(err);                                                                                              // 757\n        }                                                                                                             // 758\n      } else {                                                                                                        // 759\n        callback(null, {                                                                                              // 760\n          numberAffected: result.result.upserted.length,                                                              // 761\n          insertedId: insertedId                                                                                      // 762\n        });                                                                                                           // 760\n      }                                                                                                               // 764\n    }));                                                                                                              // 765\n  };                                                                                                                  // 766\n                                                                                                                      //\n  doUpdate();                                                                                                         // 768\n};                                                                                                                    // 769\n                                                                                                                      //\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {                          // 771\n  MongoConnection.prototype[method] = function () /* arguments */{                                                    // 772\n    var self = this;                                                                                                  // 773\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);                                               // 774\n  };                                                                                                                  // 775\n});                                                                                                                   // 776\n                                                                                                                      //\n// XXX MongoConnection.upsert() does not return the id of the inserted document                                       // 778\n// unless you set it explicitly in the selector or modifier (as a replacement                                         // 779\n// doc).                                                                                                              // 780\nMongoConnection.prototype.upsert = function (collectionName, selector, mod, options, callback) {                      // 781\n  var self = this;                                                                                                    // 783\n  if (typeof options === \"function\" && !callback) {                                                                   // 784\n    callback = options;                                                                                               // 785\n    options = {};                                                                                                     // 786\n  }                                                                                                                   // 787\n                                                                                                                      //\n  return self.update(collectionName, selector, mod, _.extend({}, options, {                                           // 789\n    upsert: true,                                                                                                     // 791\n    _returnObject: true                                                                                               // 792\n  }), callback);                                                                                                      // 790\n};                                                                                                                    // 794\n                                                                                                                      //\nMongoConnection.prototype.find = function (collectionName, selector, options) {                                       // 796\n  var self = this;                                                                                                    // 797\n                                                                                                                      //\n  if (arguments.length === 1) selector = {};                                                                          // 799\n                                                                                                                      //\n  return new Cursor(self, new CursorDescription(collectionName, selector, options));                                  // 802\n};                                                                                                                    // 804\n                                                                                                                      //\nMongoConnection.prototype.findOne = function (collection_name, selector, options) {                                   // 806\n  var self = this;                                                                                                    // 808\n  if (arguments.length === 1) selector = {};                                                                          // 809\n                                                                                                                      //\n  options = options || {};                                                                                            // 812\n  options.limit = 1;                                                                                                  // 813\n  return self.find(collection_name, selector, options).fetch()[0];                                                    // 814\n};                                                                                                                    // 815\n                                                                                                                      //\n// We'll actually design an index API later. For now, we just pass through to                                         // 817\n// Mongo's, but make it synchronous.                                                                                  // 818\nMongoConnection.prototype._ensureIndex = function (collectionName, index, options) {                                  // 819\n  var self = this;                                                                                                    // 821\n                                                                                                                      //\n  // We expect this function to be called at startup, not from within a method,                                       // 823\n  // so we don't interact with the write fence.                                                                       // 824\n  var collection = self.rawCollection(collectionName);                                                                // 825\n  var future = new Future();                                                                                          // 826\n  var indexName = collection.ensureIndex(index, options, future.resolver());                                          // 827\n  future.wait();                                                                                                      // 828\n};                                                                                                                    // 829\nMongoConnection.prototype._dropIndex = function (collectionName, index) {                                             // 830\n  var self = this;                                                                                                    // 831\n                                                                                                                      //\n  // This function is only used by test code, not within a method, so we don't                                        // 833\n  // interact with the write fence.                                                                                   // 834\n  var collection = self.rawCollection(collectionName);                                                                // 835\n  var future = new Future();                                                                                          // 836\n  var indexName = collection.dropIndex(index, future.resolver());                                                     // 837\n  future.wait();                                                                                                      // 838\n};                                                                                                                    // 839\n                                                                                                                      //\n// CURSORS                                                                                                            // 841\n                                                                                                                      //\n// There are several classes which relate to cursors:                                                                 // 843\n//                                                                                                                    // 844\n// CursorDescription represents the arguments used to construct a cursor:                                             // 845\n// collectionName, selector, and (find) options.  Because it is used as a key                                         // 846\n// for cursor de-dup, everything in it should either be JSON-stringifiable or                                         // 847\n// not affect observeChanges output (eg, options.transform functions are not                                          // 848\n// stringifiable but do not affect observeChanges).                                                                   // 849\n//                                                                                                                    // 850\n// SynchronousCursor is a wrapper around a MongoDB cursor                                                             // 851\n// which includes fully-synchronous versions of forEach, etc.                                                         // 852\n//                                                                                                                    // 853\n// Cursor is the cursor object returned from find(), which implements the                                             // 854\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a                                        // 855\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method                                        // 856\n// like fetch or forEach on it).                                                                                      // 857\n//                                                                                                                    // 858\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a                                       // 859\n// reference to an ObserveMultiplexer.                                                                                // 860\n//                                                                                                                    // 861\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a                                      // 862\n// single observe driver.                                                                                             // 863\n//                                                                                                                    // 864\n// There are two \"observe drivers\" which drive ObserveMultiplexers:                                                   // 865\n//   - PollingObserveDriver caches the results of a query and reruns it when                                          // 866\n//     necessary.                                                                                                     // 867\n//   - OplogObserveDriver follows the Mongo operation log to directly observe                                         // 868\n//     database changes.                                                                                              // 869\n// Both implementations follow the same simple interface: when you create them,                                       // 870\n// they start sending observeChanges callbacks (and a ready() invocation) to                                          // 871\n// their ObserveMultiplexer, and you stop them by calling their stop() method.                                        // 872\n                                                                                                                      //\nCursorDescription = function CursorDescription(collectionName, selector, options) {                                   // 874\n  var self = this;                                                                                                    // 875\n  self.collectionName = collectionName;                                                                               // 876\n  self.selector = Mongo.Collection._rewriteSelector(selector);                                                        // 877\n  self.options = options || {};                                                                                       // 878\n};                                                                                                                    // 879\n                                                                                                                      //\nCursor = function Cursor(mongo, cursorDescription) {                                                                  // 881\n  var self = this;                                                                                                    // 882\n                                                                                                                      //\n  self._mongo = mongo;                                                                                                // 884\n  self._cursorDescription = cursorDescription;                                                                        // 885\n  self._synchronousCursor = null;                                                                                     // 886\n};                                                                                                                    // 887\n                                                                                                                      //\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {                                                      // 889\n  Cursor.prototype[method] = function () {                                                                            // 890\n    var self = this;                                                                                                  // 891\n                                                                                                                      //\n    // You can only observe a tailable cursor.                                                                        // 893\n    if (self._cursorDescription.options.tailable) throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n                                                                                                                      //\n    if (!self._synchronousCursor) {                                                                                   // 897\n      self._synchronousCursor = self._mongo._createSynchronousCursor(self._cursorDescription, {                       // 898\n        // Make sure that the \"self\" argument to forEach/map callbacks is the                                         // 900\n        // Cursor, not the SynchronousCursor.                                                                         // 901\n        selfForIteration: self,                                                                                       // 902\n        useTransform: true                                                                                            // 903\n      });                                                                                                             // 899\n    }                                                                                                                 // 905\n                                                                                                                      //\n    return self._synchronousCursor[method].apply(self._synchronousCursor, arguments);                                 // 907\n  };                                                                                                                  // 909\n});                                                                                                                   // 910\n                                                                                                                      //\n// Since we don't actually have a \"nextObject\" interface, there's really no                                           // 912\n// reason to have a \"rewind\" interface.  All it did was make multiple calls                                           // 913\n// to fetch/map/forEach return nothing the second time.                                                               // 914\n// XXX COMPAT WITH 0.8.1                                                                                              // 915\nCursor.prototype.rewind = function () {};                                                                             // 916\n                                                                                                                      //\nCursor.prototype.getTransform = function () {                                                                         // 919\n  return this._cursorDescription.options.transform;                                                                   // 920\n};                                                                                                                    // 921\n                                                                                                                      //\n// When you call Meteor.publish() with a function that returns a Cursor, we need                                      // 923\n// to transmute it into the equivalent subscription.  This is the function that                                       // 924\n// does that.                                                                                                         // 925\n                                                                                                                      //\nCursor.prototype._publishCursor = function (sub) {                                                                    // 927\n  var self = this;                                                                                                    // 928\n  var collection = self._cursorDescription.collectionName;                                                            // 929\n  return Mongo.Collection._publishCursor(self, sub, collection);                                                      // 930\n};                                                                                                                    // 931\n                                                                                                                      //\n// Used to guarantee that publish functions return at most one cursor per                                             // 933\n// collection. Private, because we might later have cursors that include                                              // 934\n// documents from multiple collections somehow.                                                                       // 935\nCursor.prototype._getCollectionName = function () {                                                                   // 936\n  var self = this;                                                                                                    // 937\n  return self._cursorDescription.collectionName;                                                                      // 938\n};                                                                                                                    // 939\n                                                                                                                      //\nCursor.prototype.observe = function (callbacks) {                                                                     // 941\n  var self = this;                                                                                                    // 942\n  return LocalCollection._observeFromObserveChanges(self, callbacks);                                                 // 943\n};                                                                                                                    // 944\n                                                                                                                      //\nCursor.prototype.observeChanges = function (callbacks) {                                                              // 946\n  var self = this;                                                                                                    // 947\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);                                        // 948\n  return self._mongo._observeChanges(self._cursorDescription, ordered, callbacks);                                    // 949\n};                                                                                                                    // 951\n                                                                                                                      //\nMongoConnection.prototype._createSynchronousCursor = function (cursorDescription, options) {                          // 953\n  var self = this;                                                                                                    // 955\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');                                                // 956\n                                                                                                                      //\n  var collection = self.rawCollection(cursorDescription.collectionName);                                              // 958\n  var cursorOptions = cursorDescription.options;                                                                      // 959\n  var mongoOptions = {                                                                                                // 960\n    sort: cursorOptions.sort,                                                                                         // 961\n    limit: cursorOptions.limit,                                                                                       // 962\n    skip: cursorOptions.skip                                                                                          // 963\n  };                                                                                                                  // 960\n                                                                                                                      //\n  // Do we want a tailable cursor (which only works on capped collections)?                                           // 966\n  if (cursorOptions.tailable) {                                                                                       // 967\n    // We want a tailable cursor...                                                                                   // 968\n    mongoOptions.tailable = true;                                                                                     // 969\n    // ... and for the server to wait a bit if any getMore has no data (rather                                        // 970\n    // than making us put the relevant sleeps in the client)...                                                       // 971\n    mongoOptions.awaitdata = true;                                                                                    // 972\n    // ... and to keep querying the server indefinitely rather than just 5 times                                      // 973\n    // if there's no more data.                                                                                       // 974\n    mongoOptions.numberOfRetries = -1;                                                                                // 975\n    // And if this is on the oplog collection and the cursor specifies a 'ts',                                        // 976\n    // then set the undocumented oplog replay flag, which does a special scan to                                      // 977\n    // find the first document (instead of creating an index on ts). This is a                                        // 978\n    // very hard-coded Mongo flag which only works on the oplog collection and                                        // 979\n    // only works with the ts field.                                                                                  // 980\n    if (cursorDescription.collectionName === OPLOG_COLLECTION && cursorDescription.selector.ts) {                     // 981\n      mongoOptions.oplogReplay = true;                                                                                // 983\n    }                                                                                                                 // 984\n  }                                                                                                                   // 985\n                                                                                                                      //\n  var dbCursor = collection.find(replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), cursorOptions.fields, mongoOptions);\n                                                                                                                      //\n  return new SynchronousCursor(dbCursor, cursorDescription, options);                                                 // 991\n};                                                                                                                    // 992\n                                                                                                                      //\nvar SynchronousCursor = function SynchronousCursor(dbCursor, cursorDescription, options) {                            // 994\n  var self = this;                                                                                                    // 995\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');                                                // 996\n                                                                                                                      //\n  self._dbCursor = dbCursor;                                                                                          // 998\n  self._cursorDescription = cursorDescription;                                                                        // 999\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped                                            // 1000\n  // inside a user-visible Cursor, we want to provide the outer cursor!                                               // 1001\n  self._selfForIteration = options.selfForIteration || self;                                                          // 1002\n  if (options.useTransform && cursorDescription.options.transform) {                                                  // 1003\n    self._transform = LocalCollection.wrapTransform(cursorDescription.options.transform);                             // 1004\n  } else {                                                                                                            // 1006\n    self._transform = null;                                                                                           // 1007\n  }                                                                                                                   // 1008\n                                                                                                                      //\n  // Need to specify that the callback is the first argument to nextObject,                                           // 1010\n  // since otherwise when we try to call it with no args the driver will                                              // 1011\n  // interpret \"undefined\" first arg as an options hash and crash.                                                    // 1012\n  self._synchronousNextObject = Future.wrap(dbCursor.nextObject.bind(dbCursor), 0);                                   // 1013\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));                                                // 1015\n  self._visitedIds = new LocalCollection._IdMap();                                                                    // 1016\n};                                                                                                                    // 1017\n                                                                                                                      //\n_.extend(SynchronousCursor.prototype, {                                                                               // 1019\n  _nextObject: function () {                                                                                          // 1020\n    function _nextObject() {                                                                                          // 1020\n      var self = this;                                                                                                // 1021\n                                                                                                                      //\n      while (true) {                                                                                                  // 1023\n        var doc = self._synchronousNextObject().wait();                                                               // 1024\n                                                                                                                      //\n        if (!doc) return null;                                                                                        // 1026\n        doc = replaceTypes(doc, replaceMongoAtomWithMeteor);                                                          // 1027\n                                                                                                                      //\n        if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {                                         // 1029\n          // Did Mongo give us duplicate documents in the same cursor? If so,                                         // 1030\n          // ignore this one. (Do this before the transform, since transform might                                    // 1031\n          // return some unrelated value.) We don't do this for tailable cursors,                                     // 1032\n          // because we want to maintain O(1) memory usage. And if there isn't _id                                    // 1033\n          // for some reason (maybe it's the oplog), then we don't do this either.                                    // 1034\n          // (Be careful to do this for falsey but existing _id, though.)                                             // 1035\n          if (self._visitedIds.has(doc._id)) continue;                                                                // 1036\n          self._visitedIds.set(doc._id, true);                                                                        // 1037\n        }                                                                                                             // 1038\n                                                                                                                      //\n        if (self._transform) doc = self._transform(doc);                                                              // 1040\n                                                                                                                      //\n        return doc;                                                                                                   // 1043\n      }                                                                                                               // 1044\n    }                                                                                                                 // 1045\n                                                                                                                      //\n    return _nextObject;                                                                                               // 1020\n  }(),                                                                                                                // 1020\n                                                                                                                      //\n  forEach: function () {                                                                                              // 1047\n    function forEach(callback, thisArg) {                                                                             // 1047\n      var self = this;                                                                                                // 1048\n                                                                                                                      //\n      // Get back to the beginning.                                                                                   // 1050\n      self._rewind();                                                                                                 // 1051\n                                                                                                                      //\n      // We implement the loop ourself instead of using self._dbCursor.each,                                          // 1053\n      // because \"each\" will call its callback outside of a fiber which makes it                                      // 1054\n      // much more complex to make this function synchronous.                                                         // 1055\n      var index = 0;                                                                                                  // 1056\n      while (true) {                                                                                                  // 1057\n        var doc = self._nextObject();                                                                                 // 1058\n        if (!doc) return;                                                                                             // 1059\n        callback.call(thisArg, doc, index++, self._selfForIteration);                                                 // 1060\n      }                                                                                                               // 1061\n    }                                                                                                                 // 1062\n                                                                                                                      //\n    return forEach;                                                                                                   // 1047\n  }(),                                                                                                                // 1047\n                                                                                                                      //\n  // XXX Allow overlapping callback executions if callback yields.                                                    // 1064\n  map: function () {                                                                                                  // 1065\n    function map(callback, thisArg) {                                                                                 // 1065\n      var self = this;                                                                                                // 1066\n      var res = [];                                                                                                   // 1067\n      self.forEach(function (doc, index) {                                                                            // 1068\n        res.push(callback.call(thisArg, doc, index, self._selfForIteration));                                         // 1069\n      });                                                                                                             // 1070\n      return res;                                                                                                     // 1071\n    }                                                                                                                 // 1072\n                                                                                                                      //\n    return map;                                                                                                       // 1065\n  }(),                                                                                                                // 1065\n                                                                                                                      //\n  _rewind: function () {                                                                                              // 1074\n    function _rewind() {                                                                                              // 1074\n      var self = this;                                                                                                // 1075\n                                                                                                                      //\n      // known to be synchronous                                                                                      // 1077\n      self._dbCursor.rewind();                                                                                        // 1078\n                                                                                                                      //\n      self._visitedIds = new LocalCollection._IdMap();                                                                // 1080\n    }                                                                                                                 // 1081\n                                                                                                                      //\n    return _rewind;                                                                                                   // 1074\n  }(),                                                                                                                // 1074\n                                                                                                                      //\n  // Mostly usable for tailable cursors.                                                                              // 1083\n  close: function () {                                                                                                // 1084\n    function close() {                                                                                                // 1084\n      var self = this;                                                                                                // 1085\n                                                                                                                      //\n      self._dbCursor.close();                                                                                         // 1087\n    }                                                                                                                 // 1088\n                                                                                                                      //\n    return close;                                                                                                     // 1084\n  }(),                                                                                                                // 1084\n                                                                                                                      //\n  fetch: function () {                                                                                                // 1090\n    function fetch() {                                                                                                // 1090\n      var self = this;                                                                                                // 1091\n      return self.map(_.identity);                                                                                    // 1092\n    }                                                                                                                 // 1093\n                                                                                                                      //\n    return fetch;                                                                                                     // 1090\n  }(),                                                                                                                // 1090\n                                                                                                                      //\n  count: function () {                                                                                                // 1095\n    function count(applySkipLimit) {                                                                                  // 1095\n      var self = this;                                                                                                // 1096\n      return self._synchronousCount(applySkipLimit).wait();                                                           // 1097\n    }                                                                                                                 // 1098\n                                                                                                                      //\n    return count;                                                                                                     // 1095\n  }(),                                                                                                                // 1095\n                                                                                                                      //\n  // This method is NOT wrapped in Cursor.                                                                            // 1100\n  getRawObjects: function () {                                                                                        // 1101\n    function getRawObjects(ordered) {                                                                                 // 1101\n      var self = this;                                                                                                // 1102\n      if (ordered) {                                                                                                  // 1103\n        return self.fetch();                                                                                          // 1104\n      } else {                                                                                                        // 1105\n        var results = new LocalCollection._IdMap();                                                                   // 1106\n        self.forEach(function (doc) {                                                                                 // 1107\n          results.set(doc._id, doc);                                                                                  // 1108\n        });                                                                                                           // 1109\n        return results;                                                                                               // 1110\n      }                                                                                                               // 1111\n    }                                                                                                                 // 1112\n                                                                                                                      //\n    return getRawObjects;                                                                                             // 1101\n  }()                                                                                                                 // 1101\n});                                                                                                                   // 1019\n                                                                                                                      //\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {                                          // 1115\n  var self = this;                                                                                                    // 1116\n  if (!cursorDescription.options.tailable) throw new Error(\"Can only tail a tailable cursor\");                        // 1117\n                                                                                                                      //\n  var cursor = self._createSynchronousCursor(cursorDescription);                                                      // 1120\n                                                                                                                      //\n  var stopped = false;                                                                                                // 1122\n  var lastTS = undefined;                                                                                             // 1123\n  var loop = function loop() {                                                                                        // 1124\n    while (true) {                                                                                                    // 1125\n      if (stopped) return;                                                                                            // 1126\n      try {                                                                                                           // 1128\n        var doc = cursor._nextObject();                                                                               // 1129\n      } catch (err) {                                                                                                 // 1130\n        // There's no good way to figure out if this was actually an error                                            // 1131\n        // from Mongo. Ah well. But either way, we need to retry the cursor                                           // 1132\n        // (unless the failure was because the observe got stopped).                                                  // 1133\n        doc = null;                                                                                                   // 1134\n      }                                                                                                               // 1135\n      // Since cursor._nextObject can yield, we need to check again to see if                                         // 1136\n      // we've been stopped before calling the callback.                                                              // 1137\n      if (stopped) return;                                                                                            // 1138\n      if (doc) {                                                                                                      // 1140\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the                                         // 1141\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for                                        // 1142\n        // the oplog, and there's a special flag that lets you do binary search                                       // 1143\n        // on it instead of needing to use an index.)                                                                 // 1144\n        lastTS = doc.ts;                                                                                              // 1145\n        docCallback(doc);                                                                                             // 1146\n      } else {                                                                                                        // 1147\n        var newSelector = _.clone(cursorDescription.selector);                                                        // 1148\n        if (lastTS) {                                                                                                 // 1149\n          newSelector.ts = { $gt: lastTS };                                                                           // 1150\n        }                                                                                                             // 1151\n        cursor = self._createSynchronousCursor(new CursorDescription(cursorDescription.collectionName, newSelector, cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this                                         // 1156\n        // setTimeout, we peg the CPU at 100% and never notice the actual                                             // 1157\n        // failover.                                                                                                  // 1158\n        Meteor.setTimeout(loop, 100);                                                                                 // 1159\n        break;                                                                                                        // 1160\n      }                                                                                                               // 1161\n    }                                                                                                                 // 1162\n  };                                                                                                                  // 1163\n                                                                                                                      //\n  Meteor.defer(loop);                                                                                                 // 1165\n                                                                                                                      //\n  return {                                                                                                            // 1167\n    stop: function () {                                                                                               // 1168\n      function stop() {                                                                                               // 1168\n        stopped = true;                                                                                               // 1169\n        cursor.close();                                                                                               // 1170\n      }                                                                                                               // 1171\n                                                                                                                      //\n      return stop;                                                                                                    // 1168\n    }()                                                                                                               // 1168\n  };                                                                                                                  // 1167\n};                                                                                                                    // 1173\n                                                                                                                      //\nMongoConnection.prototype._observeChanges = function (cursorDescription, ordered, callbacks) {                        // 1175\n  var self = this;                                                                                                    // 1177\n                                                                                                                      //\n  if (cursorDescription.options.tailable) {                                                                           // 1179\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);                                       // 1180\n  }                                                                                                                   // 1181\n                                                                                                                      //\n  // You may not filter out _id when observing changes, because the id is a core                                      // 1183\n  // part of the observeChanges API.                                                                                  // 1184\n  if (cursorDescription.options.fields && (cursorDescription.options.fields._id === 0 || cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");                                              // 1188\n  }                                                                                                                   // 1189\n                                                                                                                      //\n  var observeKey = JSON.stringify(_.extend({ ordered: ordered }, cursorDescription));                                 // 1191\n                                                                                                                      //\n  var multiplexer, observeDriver;                                                                                     // 1194\n  var firstHandle = false;                                                                                            // 1195\n                                                                                                                      //\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is                                      // 1197\n  // guaranteed to not yield (and it doesn't call anything that can observe a                                         // 1198\n  // new query), so no other calls to this function can interleave with it.                                           // 1199\n  Meteor._noYieldsAllowed(function () {                                                                               // 1200\n    if (_.has(self._observeMultiplexers, observeKey)) {                                                               // 1201\n      multiplexer = self._observeMultiplexers[observeKey];                                                            // 1202\n    } else {                                                                                                          // 1203\n      firstHandle = true;                                                                                             // 1204\n      // Create a new ObserveMultiplexer.                                                                             // 1205\n      multiplexer = new ObserveMultiplexer({                                                                          // 1206\n        ordered: ordered,                                                                                             // 1207\n        onStop: function () {                                                                                         // 1208\n          function onStop() {                                                                                         // 1208\n            delete self._observeMultiplexers[observeKey];                                                             // 1209\n            observeDriver.stop();                                                                                     // 1210\n          }                                                                                                           // 1211\n                                                                                                                      //\n          return onStop;                                                                                              // 1208\n        }()                                                                                                           // 1208\n      });                                                                                                             // 1206\n      self._observeMultiplexers[observeKey] = multiplexer;                                                            // 1213\n    }                                                                                                                 // 1214\n  });                                                                                                                 // 1215\n                                                                                                                      //\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);                                                      // 1217\n                                                                                                                      //\n  if (firstHandle) {                                                                                                  // 1219\n    var matcher, sorter;                                                                                              // 1220\n    var canUseOplog = _.all([function () {                                                                            // 1221\n      // At a bare minimum, using the oplog requires us to have an oplog, to                                          // 1223\n      // want unordered callbacks, and to not want a callback on the polls                                            // 1224\n      // that won't happen.                                                                                           // 1225\n      return self._oplogHandle && !ordered && !callbacks._testOnlyPollCallback;                                       // 1226\n    }, function () {                                                                                                  // 1228\n      // We need to be able to compile the selector. Fall back to polling for                                         // 1229\n      // some newfangled $selector that minimongo doesn't support yet.                                                // 1230\n      try {                                                                                                           // 1231\n        matcher = new Minimongo.Matcher(cursorDescription.selector);                                                  // 1232\n        return true;                                                                                                  // 1233\n      } catch (e) {                                                                                                   // 1234\n        // XXX make all compilation errors MinimongoError or something                                                // 1235\n        //     so that this doesn't ignore unrelated exceptions                                                       // 1236\n        return false;                                                                                                 // 1237\n      }                                                                                                               // 1238\n    }, function () {                                                                                                  // 1239\n      // ... and the selector itself needs to support oplog.                                                          // 1240\n      return OplogObserveDriver.cursorSupported(cursorDescription, matcher);                                          // 1241\n    }, function () {                                                                                                  // 1242\n      // And we need to be able to compile the sort, if any.  eg, can't be                                            // 1243\n      // {$natural: 1}.                                                                                               // 1244\n      if (!cursorDescription.options.sort) return true;                                                               // 1245\n      try {                                                                                                           // 1247\n        sorter = new Minimongo.Sorter(cursorDescription.options.sort, { matcher: matcher });                          // 1248\n        return true;                                                                                                  // 1250\n      } catch (e) {                                                                                                   // 1251\n        // XXX make all compilation errors MinimongoError or something                                                // 1252\n        //     so that this doesn't ignore unrelated exceptions                                                       // 1253\n        return false;                                                                                                 // 1254\n      }                                                                                                               // 1255\n    }], function (f) {                                                                                                // 1256\n      return f();                                                                                                     // 1256\n    }); // invoke each function                                                                                       // 1256\n                                                                                                                      //\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;                                        // 1258\n    observeDriver = new driverClass({                                                                                 // 1259\n      cursorDescription: cursorDescription,                                                                           // 1260\n      mongoHandle: self,                                                                                              // 1261\n      multiplexer: multiplexer,                                                                                       // 1262\n      ordered: ordered,                                                                                               // 1263\n      matcher: matcher, // ignored by polling                                                                         // 1264\n      sorter: sorter, // ignored by polling                                                                           // 1265\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback                                                          // 1266\n    });                                                                                                               // 1259\n                                                                                                                      //\n    // This field is only set for use in tests.                                                                       // 1269\n    multiplexer._observeDriver = observeDriver;                                                                       // 1270\n  }                                                                                                                   // 1271\n                                                                                                                      //\n  // Blocks until the initial adds have been sent.                                                                    // 1273\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);                                                             // 1274\n                                                                                                                      //\n  return observeHandle;                                                                                               // 1276\n};                                                                                                                    // 1277\n                                                                                                                      //\n// Listen for the invalidation messages that will trigger us to poll the                                              // 1279\n// database for changes. If this selector specifies specific IDs, specify them                                        // 1280\n// here, so that updates to different specific IDs don't cause us to poll.                                            // 1281\n// listenCallback is the same kind of (notification, complete) callback passed                                        // 1282\n// to InvalidationCrossbar.listen.                                                                                    // 1283\n                                                                                                                      //\nlistenAll = function listenAll(cursorDescription, listenCallback) {                                                   // 1285\n  var listeners = [];                                                                                                 // 1286\n  forEachTrigger(cursorDescription, function (trigger) {                                                              // 1287\n    listeners.push(DDPServer._InvalidationCrossbar.listen(trigger, listenCallback));                                  // 1288\n  });                                                                                                                 // 1290\n                                                                                                                      //\n  return {                                                                                                            // 1292\n    stop: function () {                                                                                               // 1293\n      function stop() {                                                                                               // 1293\n        _.each(listeners, function (listener) {                                                                       // 1294\n          listener.stop();                                                                                            // 1295\n        });                                                                                                           // 1296\n      }                                                                                                               // 1297\n                                                                                                                      //\n      return stop;                                                                                                    // 1293\n    }()                                                                                                               // 1293\n  };                                                                                                                  // 1292\n};                                                                                                                    // 1299\n                                                                                                                      //\nforEachTrigger = function forEachTrigger(cursorDescription, triggerCallback) {                                        // 1301\n  var key = { collection: cursorDescription.collectionName };                                                         // 1302\n  var specificIds = LocalCollection._idsMatchedBySelector(cursorDescription.selector);                                // 1303\n  if (specificIds) {                                                                                                  // 1305\n    _.each(specificIds, function (id) {                                                                               // 1306\n      triggerCallback(_.extend({ id: id }, key));                                                                     // 1307\n    });                                                                                                               // 1308\n    triggerCallback(_.extend({ dropCollection: true, id: null }, key));                                               // 1309\n  } else {                                                                                                            // 1310\n    triggerCallback(key);                                                                                             // 1311\n  }                                                                                                                   // 1312\n  // Everyone cares about the database being dropped.                                                                 // 1313\n  triggerCallback({ dropDatabase: true });                                                                            // 1314\n};                                                                                                                    // 1315\n                                                                                                                      //\n// observeChanges for tailable cursors on capped collections.                                                         // 1317\n//                                                                                                                    // 1318\n// Some differences from normal cursors:                                                                              // 1319\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you                                        // 1320\n//     do update a document that has already been produced, this will not notice                                      // 1321\n//     it.                                                                                                            // 1322\n//   - If you disconnect and reconnect from Mongo, it will essentially restart                                        // 1323\n//     the query, which will lead to duplicate results. This is pretty bad,                                           // 1324\n//     but if you include a field called 'ts' which is inserted as                                                    // 1325\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the                                           // 1326\n//     current Mongo-style timestamp), we'll be able to find the place to                                             // 1327\n//     restart properly. (This field is specifically understood by Mongo with an                                      // 1328\n//     optimization which allows it to find the right place to start without                                          // 1329\n//     an index on ts. It's how the oplog works.)                                                                     // 1330\n//   - No callbacks are triggered synchronously with the call (there's no                                             // 1331\n//     differentiation between \"initial data\" and \"later changes\"; everything                                         // 1332\n//     that matches the query gets sent asynchronously).                                                              // 1333\n//   - De-duplication is not implemented.                                                                             // 1334\n//   - Does not yet interact with the write fence. Probably, this should work by                                      // 1335\n//     ignoring removes (which don't work on capped collections) and updates                                          // 1336\n//     (which don't affect tailable cursors), and just keeping track of the ID                                        // 1337\n//     of the inserted object, and closing the write fence once you get to that                                       // 1338\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match                                      // 1339\n//     the query, though.  On the other hand, the write fence can close                                               // 1340\n//     immediately if it does not match the query. So if we trust minimongo                                           // 1341\n//     enough to accurately evaluate the query against the write fence, we                                            // 1342\n//     should be able to do this...  Of course, minimongo doesn't even support                                        // 1343\n//     Mongo Timestamps yet.                                                                                          // 1344\nMongoConnection.prototype._observeChangesTailable = function (cursorDescription, ordered, callbacks) {                // 1345\n  var self = this;                                                                                                    // 1347\n                                                                                                                      //\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an                                          // 1349\n  // error if you didn't provide them.                                                                                // 1350\n  if (ordered && !callbacks.addedBefore || !ordered && !callbacks.added) {                                            // 1351\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\") + \" tailable cursor without a \" + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }                                                                                                                   // 1356\n                                                                                                                      //\n  return self.tail(cursorDescription, function (doc) {                                                                // 1358\n    var id = doc._id;                                                                                                 // 1359\n    delete doc._id;                                                                                                   // 1360\n    // The ts is an implementation detail. Hide it.                                                                   // 1361\n    delete doc.ts;                                                                                                    // 1362\n    if (ordered) {                                                                                                    // 1363\n      callbacks.addedBefore(id, doc, null);                                                                           // 1364\n    } else {                                                                                                          // 1365\n      callbacks.added(id, doc);                                                                                       // 1366\n    }                                                                                                                 // 1367\n  });                                                                                                                 // 1368\n};                                                                                                                    // 1369\n                                                                                                                      //\n// XXX We probably need to find a better way to expose this. Right now                                                // 1371\n// it's only used by tests, but in fact you need it in normal                                                         // 1372\n// operation to interact with capped collections.                                                                     // 1373\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;                                                                    // 1374\n                                                                                                                      //\nMongoInternals.Connection = MongoConnection;                                                                          // 1376\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"oplog_tailing.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/oplog_tailing.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Future = Npm.require('fibers/future');                                                                            // 1\n                                                                                                                      //\nOPLOG_COLLECTION = 'oplog.rs';                                                                                        // 3\n                                                                                                                      //\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;                                                 // 5\n                                                                                                                      //\nvar showTS = function showTS(ts) {                                                                                    // 7\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";                                              // 8\n};                                                                                                                    // 9\n                                                                                                                      //\nidForOp = function idForOp(op) {                                                                                      // 11\n  if (op.op === 'd') return op.o._id;else if (op.op === 'i') return op.o._id;else if (op.op === 'u') return op.o2._id;else if (op.op === 'c') throw Error(\"Operator 'c' doesn't supply an object with id: \" + EJSON.stringify(op));else throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};                                                                                                                    // 23\n                                                                                                                      //\nOplogHandle = function OplogHandle(oplogUrl, dbName) {                                                                // 25\n  var self = this;                                                                                                    // 26\n  self._oplogUrl = oplogUrl;                                                                                          // 27\n  self._dbName = dbName;                                                                                              // 28\n                                                                                                                      //\n  self._oplogLastEntryConnection = null;                                                                              // 30\n  self._oplogTailConnection = null;                                                                                   // 31\n  self._stopped = false;                                                                                              // 32\n  self._tailHandle = null;                                                                                            // 33\n  self._readyFuture = new Future();                                                                                   // 34\n  self._crossbar = new DDPServer._Crossbar({                                                                          // 35\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"                                                         // 36\n  });                                                                                                                 // 35\n  self._baseOplogSelector = {                                                                                         // 38\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),                                                 // 39\n    $or: [{ op: { $in: ['i', 'u', 'd'] } },                                                                           // 40\n    // drop collection                                                                                                // 42\n    { op: 'c', 'o.drop': { $exists: true } }, { op: 'c', 'o.dropDatabase': 1 }]                                       // 43\n  };                                                                                                                  // 38\n                                                                                                                      //\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a                                           // 48\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a                                          // 49\n  // combination of time and an incrementing counter; see                                                             // 50\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).                                                // 51\n  //                                                                                                                  // 52\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}                                           // 53\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the                                                  // 54\n  // MongoTimestamp of the last oplog entry we've processed.                                                          // 55\n  //                                                                                                                  // 56\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog                                           // 57\n  // entry in the db.  If we've already processed it (ie, it is not greater than                                      // 58\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,                                             // 59\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final                                         // 60\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp                                         // 61\n  // then waits on that future, which is resolved once _lastProcessedTS is                                            // 62\n  // incremented to be past its timestamp by the worker fiber.                                                        // 63\n  //                                                                                                                  // 64\n  // XXX use a priority queue or something else that's faster than an array                                           // 65\n  self._catchingUpFutures = [];                                                                                       // 66\n  self._lastProcessedTS = null;                                                                                       // 67\n                                                                                                                      //\n  self._onSkippedEntriesHook = new Hook({                                                                             // 69\n    debugPrintExceptions: \"onSkippedEntries callback\"                                                                 // 70\n  });                                                                                                                 // 69\n                                                                                                                      //\n  self._entryQueue = new Meteor._DoubleEndedQueue();                                                                  // 73\n  self._workerActive = false;                                                                                         // 74\n                                                                                                                      //\n  self._startTailing();                                                                                               // 76\n};                                                                                                                    // 77\n                                                                                                                      //\n_.extend(OplogHandle.prototype, {                                                                                     // 79\n  stop: function () {                                                                                                 // 80\n    function stop() {                                                                                                 // 80\n      var self = this;                                                                                                // 81\n      if (self._stopped) return;                                                                                      // 82\n      self._stopped = true;                                                                                           // 84\n      if (self._tailHandle) self._tailHandle.stop();                                                                  // 85\n      // XXX should close connections too                                                                             // 87\n    }                                                                                                                 // 88\n                                                                                                                      //\n    return stop;                                                                                                      // 80\n  }(),                                                                                                                // 80\n  onOplogEntry: function () {                                                                                         // 89\n    function onOplogEntry(trigger, callback) {                                                                        // 89\n      var self = this;                                                                                                // 90\n      if (self._stopped) throw new Error(\"Called onOplogEntry on stopped handle!\");                                   // 91\n                                                                                                                      //\n      // Calling onOplogEntry requires us to wait for the tailing to be ready.                                        // 94\n      self._readyFuture.wait();                                                                                       // 95\n                                                                                                                      //\n      var originalCallback = callback;                                                                                // 97\n      callback = Meteor.bindEnvironment(function (notification) {                                                     // 98\n        // XXX can we avoid this clone by making oplog.js careful?                                                    // 99\n        originalCallback(EJSON.clone(notification));                                                                  // 100\n      }, function (err) {                                                                                             // 101\n        Meteor._debug(\"Error in oplog callback\", err.stack);                                                          // 102\n      });                                                                                                             // 103\n      var listenHandle = self._crossbar.listen(trigger, callback);                                                    // 104\n      return {                                                                                                        // 105\n        stop: function () {                                                                                           // 106\n          function stop() {                                                                                           // 106\n            listenHandle.stop();                                                                                      // 107\n          }                                                                                                           // 108\n                                                                                                                      //\n          return stop;                                                                                                // 106\n        }()                                                                                                           // 106\n      };                                                                                                              // 105\n    }                                                                                                                 // 110\n                                                                                                                      //\n    return onOplogEntry;                                                                                              // 89\n  }(),                                                                                                                // 89\n  // Register a callback to be invoked any time we skip oplog entries (eg,                                            // 111\n  // because we are too far behind).                                                                                  // 112\n  onSkippedEntries: function () {                                                                                     // 113\n    function onSkippedEntries(callback) {                                                                             // 113\n      var self = this;                                                                                                // 114\n      if (self._stopped) throw new Error(\"Called onSkippedEntries on stopped handle!\");                               // 115\n      return self._onSkippedEntriesHook.register(callback);                                                           // 117\n    }                                                                                                                 // 118\n                                                                                                                      //\n    return onSkippedEntries;                                                                                          // 113\n  }(),                                                                                                                // 113\n  // Calls `callback` once the oplog has been processed up to a point that is                                         // 119\n  // roughly \"now\": specifically, once we've processed all ops that are                                               // 120\n  // currently visible.                                                                                               // 121\n  // XXX become convinced that this is actually safe even if oplogConnection                                          // 122\n  // is some kind of pool                                                                                             // 123\n  waitUntilCaughtUp: function () {                                                                                    // 124\n    function waitUntilCaughtUp() {                                                                                    // 124\n      var self = this;                                                                                                // 125\n      if (self._stopped) throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");                              // 126\n                                                                                                                      //\n      // Calling waitUntilCaughtUp requries us to wait for the oplog connection to                                    // 129\n      // be ready.                                                                                                    // 130\n      self._readyFuture.wait();                                                                                       // 131\n                                                                                                                      //\n      while (!self._stopped) {                                                                                        // 133\n        // We need to make the selector at least as restrictive as the actual                                         // 134\n        // tailing selector (ie, we need to specify the DB name) or else we might                                     // 135\n        // find a TS that won't show up in the actual tail stream.                                                    // 136\n        try {                                                                                                         // 137\n          var lastEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, self._baseOplogSelector, { fields: { ts: 1 }, sort: { $natural: -1 } });\n          break;                                                                                                      // 141\n        } catch (e) {                                                                                                 // 142\n          // During failover (eg) if we get an exception we should log and retry                                      // 143\n          // instead of crashing.                                                                                     // 144\n          Meteor._debug(\"Got exception while reading last entry: \" + e);                                              // 145\n          Meteor._sleepForMs(100);                                                                                    // 146\n        }                                                                                                             // 147\n      }                                                                                                               // 148\n                                                                                                                      //\n      if (self._stopped) return;                                                                                      // 150\n                                                                                                                      //\n      if (!lastEntry) {                                                                                               // 153\n        // Really, nothing in the oplog? Well, we've processed everything.                                            // 154\n        return;                                                                                                       // 155\n      }                                                                                                               // 156\n                                                                                                                      //\n      var ts = lastEntry.ts;                                                                                          // 158\n      if (!ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));                                  // 159\n                                                                                                                      //\n      if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {                                       // 162\n        // We've already caught up to here.                                                                           // 163\n        return;                                                                                                       // 164\n      }                                                                                                               // 165\n                                                                                                                      //\n      // Insert the future into our list. Almost always, this will be at the end,                                     // 168\n      // but it's conceivable that if we fail over from one primary to another,                                       // 169\n      // the oplog entries we see will go backwards.                                                                  // 170\n      var insertAfter = self._catchingUpFutures.length;                                                               // 171\n      while (insertAfter - 1 > 0 && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {                    // 172\n        insertAfter--;                                                                                                // 174\n      }                                                                                                               // 175\n      var f = new Future();                                                                                           // 176\n      self._catchingUpFutures.splice(insertAfter, 0, { ts: ts, future: f });                                          // 177\n      f.wait();                                                                                                       // 178\n    }                                                                                                                 // 179\n                                                                                                                      //\n    return waitUntilCaughtUp;                                                                                         // 124\n  }(),                                                                                                                // 124\n  _startTailing: function () {                                                                                        // 180\n    function _startTailing() {                                                                                        // 180\n      var self = this;                                                                                                // 181\n      // First, make sure that we're talking to the local database.                                                   // 182\n      var mongodbUri = Npm.require('mongodb-uri');                                                                    // 183\n      if (mongodbUri.parse(self._oplogUrl).database !== 'local') {                                                    // 184\n        throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");              // 185\n      }                                                                                                               // 187\n                                                                                                                      //\n      // We make two separate connections to Mongo. The Node Mongo driver                                             // 189\n      // implements a naive round-robin connection pool: each \"connection\" is a                                       // 190\n      // pool of several (5 by default) TCP connections, and each request is                                          // 191\n      // rotated through the pools. Tailable cursor queries block on the server                                       // 192\n      // until there is some data to return (or until a few seconds have                                              // 193\n      // passed). So if the connection pool used for tailing cursors is the same                                      // 194\n      // pool used for other queries, the other queries will be delayed by seconds                                    // 195\n      // 1/5 of the time.                                                                                             // 196\n      //                                                                                                              // 197\n      // The tail connection will only ever be running a single tail command, so                                      // 198\n      // it only needs to make one underlying TCP connection.                                                         // 199\n      self._oplogTailConnection = new MongoConnection(self._oplogUrl, { poolSize: 1 });                               // 200\n      // XXX better docs, but: it's to get monotonic results                                                          // 202\n      // XXX is it safe to say \"if there's an in flight query, just use its                                           // 203\n      //     results\"? I don't think so but should consider that                                                      // 204\n      self._oplogLastEntryConnection = new MongoConnection(self._oplogUrl, { poolSize: 1 });                          // 205\n                                                                                                                      //\n      // Now, make sure that there actually is a repl set here. If not, oplog                                         // 208\n      // tailing won't ever find anything!                                                                            // 209\n      // More on the isMasterDoc                                                                                      // 210\n      // https://docs.mongodb.com/manual/reference/command/isMaster/                                                  // 211\n      var f = new Future();                                                                                           // 212\n      self._oplogLastEntryConnection.db.admin().command({ ismaster: 1 }, f.resolver());                               // 213\n      var isMasterDoc = f.wait();                                                                                     // 215\n                                                                                                                      //\n      if (!(isMasterDoc && isMasterDoc.setName)) {                                                                    // 217\n        throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");              // 218\n      }                                                                                                               // 220\n                                                                                                                      //\n      // Find the last oplog entry.                                                                                   // 222\n      var lastOplogEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, {}, { sort: { $natural: -1 }, fields: { ts: 1 } });\n                                                                                                                      //\n      var oplogSelector = _.clone(self._baseOplogSelector);                                                           // 226\n      if (lastOplogEntry) {                                                                                           // 227\n        // Start after the last entry that currently exists.                                                          // 228\n        oplogSelector.ts = { $gt: lastOplogEntry.ts };                                                                // 229\n        // If there are any calls to callWhenProcessedLatest before any other                                         // 230\n        // oplog entries show up, allow callWhenProcessedLatest to call its                                           // 231\n        // callback immediately.                                                                                      // 232\n        self._lastProcessedTS = lastOplogEntry.ts;                                                                    // 233\n      }                                                                                                               // 234\n                                                                                                                      //\n      var cursorDescription = new CursorDescription(OPLOG_COLLECTION, oplogSelector, { tailable: true });             // 236\n                                                                                                                      //\n      self._tailHandle = self._oplogTailConnection.tail(cursorDescription, function (doc) {                           // 239\n        self._entryQueue.push(doc);                                                                                   // 241\n        self._maybeStartWorker();                                                                                     // 242\n      });                                                                                                             // 243\n      self._readyFuture['return']();                                                                                  // 245\n    }                                                                                                                 // 246\n                                                                                                                      //\n    return _startTailing;                                                                                             // 180\n  }(),                                                                                                                // 180\n                                                                                                                      //\n  _maybeStartWorker: function () {                                                                                    // 248\n    function _maybeStartWorker() {                                                                                    // 248\n      var self = this;                                                                                                // 249\n      if (self._workerActive) return;                                                                                 // 250\n      self._workerActive = true;                                                                                      // 252\n      Meteor.defer(function () {                                                                                      // 253\n        try {                                                                                                         // 254\n          while (!self._stopped && !self._entryQueue.isEmpty()) {                                                     // 255\n            // Are we too far behind? Just tell our observers that they need to                                       // 256\n            // repoll, and drop our queue.                                                                            // 257\n            if (self._entryQueue.length > TOO_FAR_BEHIND) {                                                           // 258\n              var lastEntry = self._entryQueue.pop();                                                                 // 259\n              self._entryQueue.clear();                                                                               // 260\n                                                                                                                      //\n              self._onSkippedEntriesHook.each(function (callback) {                                                   // 262\n                callback();                                                                                           // 263\n                return true;                                                                                          // 264\n              });                                                                                                     // 265\n                                                                                                                      //\n              // Free any waitUntilCaughtUp() calls that were waiting for us to                                       // 267\n              // pass something that we just skipped.                                                                 // 268\n              self._setLastProcessedTS(lastEntry.ts);                                                                 // 269\n              continue;                                                                                               // 270\n            }                                                                                                         // 271\n                                                                                                                      //\n            var doc = self._entryQueue.shift();                                                                       // 273\n                                                                                                                      //\n            if (!(doc.ns && doc.ns.length > self._dbName.length + 1 && doc.ns.substr(0, self._dbName.length + 1) === self._dbName + '.')) {\n              throw new Error(\"Unexpected ns\");                                                                       // 278\n            }                                                                                                         // 279\n                                                                                                                      //\n            var trigger = { collection: doc.ns.substr(self._dbName.length + 1),                                       // 281\n              dropCollection: false,                                                                                  // 282\n              dropDatabase: false,                                                                                    // 283\n              op: doc };                                                                                              // 284\n                                                                                                                      //\n            // Is it a special command and the collection name is hidden somewhere                                    // 286\n            // in operator?                                                                                           // 287\n            if (trigger.collection === \"$cmd\") {                                                                      // 288\n              if (doc.o.dropDatabase) {                                                                               // 289\n                delete trigger.collection;                                                                            // 290\n                trigger.dropDatabase = true;                                                                          // 291\n              } else if (_.has(doc.o, 'drop')) {                                                                      // 292\n                trigger.collection = doc.o.drop;                                                                      // 293\n                trigger.dropCollection = true;                                                                        // 294\n                trigger.id = null;                                                                                    // 295\n              } else {                                                                                                // 296\n                throw Error(\"Unknown command \" + JSON.stringify(doc));                                                // 297\n              }                                                                                                       // 298\n            } else {                                                                                                  // 299\n              // All other ops have an id.                                                                            // 300\n              trigger.id = idForOp(doc);                                                                              // 301\n            }                                                                                                         // 302\n                                                                                                                      //\n            self._crossbar.fire(trigger);                                                                             // 304\n                                                                                                                      //\n            // Now that we've processed this operation, process pending                                               // 306\n            // sequencers.                                                                                            // 307\n            if (!doc.ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));                              // 308\n            self._setLastProcessedTS(doc.ts);                                                                         // 310\n          }                                                                                                           // 311\n        } finally {                                                                                                   // 312\n          self._workerActive = false;                                                                                 // 313\n        }                                                                                                             // 314\n      });                                                                                                             // 315\n    }                                                                                                                 // 316\n                                                                                                                      //\n    return _maybeStartWorker;                                                                                         // 248\n  }(),                                                                                                                // 248\n  _setLastProcessedTS: function () {                                                                                  // 317\n    function _setLastProcessedTS(ts) {                                                                                // 317\n      var self = this;                                                                                                // 318\n      self._lastProcessedTS = ts;                                                                                     // 319\n      while (!_.isEmpty(self._catchingUpFutures) && self._catchingUpFutures[0].ts.lessThanOrEqual(self._lastProcessedTS)) {\n        var sequencer = self._catchingUpFutures.shift();                                                              // 323\n        sequencer.future['return']();                                                                                 // 324\n      }                                                                                                               // 325\n    }                                                                                                                 // 326\n                                                                                                                      //\n    return _setLastProcessedTS;                                                                                       // 317\n  }(),                                                                                                                // 317\n                                                                                                                      //\n  //Methods used on tests to dinamically change TOO_FAR_BEHIND                                                        // 328\n  _defineTooFarBehind: function () {                                                                                  // 329\n    function _defineTooFarBehind(value) {                                                                             // 329\n      TOO_FAR_BEHIND = value;                                                                                         // 330\n    }                                                                                                                 // 331\n                                                                                                                      //\n    return _defineTooFarBehind;                                                                                       // 329\n  }(),                                                                                                                // 329\n  _resetTooFarBehind: function () {                                                                                   // 332\n    function _resetTooFarBehind() {                                                                                   // 332\n      TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;                                               // 333\n    }                                                                                                                 // 334\n                                                                                                                      //\n    return _resetTooFarBehind;                                                                                        // 332\n  }()                                                                                                                 // 332\n});                                                                                                                   // 79\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"observe_multiplex.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/observe_multiplex.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Future = Npm.require('fibers/future');                                                                            // 1\n                                                                                                                      //\nObserveMultiplexer = function ObserveMultiplexer(options) {                                                           // 3\n  var self = this;                                                                                                    // 4\n                                                                                                                      //\n  if (!options || !_.has(options, 'ordered')) throw Error(\"must specified ordered\");                                  // 6\n                                                                                                                      //\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", 1);              // 9\n                                                                                                                      //\n  self._ordered = options.ordered;                                                                                    // 12\n  self._onStop = options.onStop || function () {};                                                                    // 13\n  self._queue = new Meteor._SynchronousQueue();                                                                       // 14\n  self._handles = {};                                                                                                 // 15\n  self._readyFuture = new Future();                                                                                   // 16\n  self._cache = new LocalCollection._CachingChangeObserver({                                                          // 17\n    ordered: options.ordered });                                                                                      // 18\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet                                                // 19\n  // running. removeHandle uses this to know if it's time to call the onStop                                          // 20\n  // callback.                                                                                                        // 21\n  self._addHandleTasksScheduledButNotPerformed = 0;                                                                   // 22\n                                                                                                                      //\n  _.each(self.callbackNames(), function (callbackName) {                                                              // 24\n    self[callbackName] = function () /* ... */{                                                                       // 25\n      self._applyCallback(callbackName, _.toArray(arguments));                                                        // 26\n    };                                                                                                                // 27\n  });                                                                                                                 // 28\n};                                                                                                                    // 29\n                                                                                                                      //\n_.extend(ObserveMultiplexer.prototype, {                                                                              // 31\n  addHandleAndSendInitialAdds: function () {                                                                          // 32\n    function addHandleAndSendInitialAdds(handle) {                                                                    // 32\n      var self = this;                                                                                                // 33\n                                                                                                                      //\n      // Check this before calling runTask (even though runTask does the same                                         // 35\n      // check) so that we don't leak an ObserveMultiplexer on error by                                               // 36\n      // incrementing _addHandleTasksScheduledButNotPerformed and never                                               // 37\n      // decrementing it.                                                                                             // 38\n      if (!self._queue.safeToRunTask()) throw new Error(\"Can't call observeChanges from an observe callback on the same query\");\n      ++self._addHandleTasksScheduledButNotPerformed;                                                                 // 42\n                                                                                                                      //\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", 1);               // 44\n                                                                                                                      //\n      self._queue.runTask(function () {                                                                               // 47\n        self._handles[handle._id] = handle;                                                                           // 48\n        // Send out whatever adds we have so far (whether or not we the                                               // 49\n        // multiplexer is ready).                                                                                     // 50\n        self._sendAdds(handle);                                                                                       // 51\n        --self._addHandleTasksScheduledButNotPerformed;                                                               // 52\n      });                                                                                                             // 53\n      // *outside* the task, since otherwise we'd deadlock                                                            // 54\n      self._readyFuture.wait();                                                                                       // 55\n    }                                                                                                                 // 56\n                                                                                                                      //\n    return addHandleAndSendInitialAdds;                                                                               // 32\n  }(),                                                                                                                // 32\n                                                                                                                      //\n  // Remove an observe handle. If it was the last observe handle, call the                                            // 58\n  // onStop callback; you cannot add any more observe handles after this.                                             // 59\n  //                                                                                                                  // 60\n  // This is not synchronized with polls and handle additions: this means that                                        // 61\n  // you can safely call it from within an observe callback, but it also means                                        // 62\n  // that we have to be careful when we iterate over _handles.                                                        // 63\n  removeHandle: function () {                                                                                         // 64\n    function removeHandle(id) {                                                                                       // 64\n      var self = this;                                                                                                // 65\n                                                                                                                      //\n      // This should not be possible: you can only call removeHandle by having                                        // 67\n      // access to the ObserveHandle, which isn't returned to user code until the                                     // 68\n      // multiplex is ready.                                                                                          // 69\n      if (!self._ready()) throw new Error(\"Can't remove handles until the multiplex is ready\");                       // 70\n                                                                                                                      //\n      delete self._handles[id];                                                                                       // 73\n                                                                                                                      //\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", -1);              // 75\n                                                                                                                      //\n      if (_.isEmpty(self._handles) && self._addHandleTasksScheduledButNotPerformed === 0) {                           // 78\n        self._stop();                                                                                                 // 80\n      }                                                                                                               // 81\n    }                                                                                                                 // 82\n                                                                                                                      //\n    return removeHandle;                                                                                              // 64\n  }(),                                                                                                                // 64\n  _stop: function () {                                                                                                // 83\n    function _stop(options) {                                                                                         // 83\n      var self = this;                                                                                                // 84\n      options = options || {};                                                                                        // 85\n                                                                                                                      //\n      // It shouldn't be possible for us to stop when all our handles still                                           // 87\n      // haven't been returned from observeChanges!                                                                   // 88\n      if (!self._ready() && !options.fromQueryError) throw Error(\"surprising _stop: not ready\");                      // 89\n                                                                                                                      //\n      // Call stop callback (which kills the underlying process which sends us                                        // 92\n      // callbacks and removes us from the connection's dictionary).                                                  // 93\n      self._onStop();                                                                                                 // 94\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", -1);         // 95\n                                                                                                                      //\n      // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop                                      // 98\n      // callback should make our connection forget about us).                                                        // 99\n      self._handles = null;                                                                                           // 100\n    }                                                                                                                 // 101\n                                                                                                                      //\n    return _stop;                                                                                                     // 83\n  }(),                                                                                                                // 83\n                                                                                                                      //\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding                                       // 103\n  // adds have been processed. Does not block.                                                                        // 104\n  ready: function () {                                                                                                // 105\n    function ready() {                                                                                                // 105\n      var self = this;                                                                                                // 106\n      self._queue.queueTask(function () {                                                                             // 107\n        if (self._ready()) throw Error(\"can't make ObserveMultiplex ready twice!\");                                   // 108\n        self._readyFuture['return']();                                                                                // 110\n      });                                                                                                             // 111\n    }                                                                                                                 // 112\n                                                                                                                      //\n    return ready;                                                                                                     // 105\n  }(),                                                                                                                // 105\n                                                                                                                      //\n  // If trying to execute the query results in an error, call this. This is                                           // 114\n  // intended for permanent errors, not transient network errors that could be                                        // 115\n  // fixed. It should only be called before ready(), because if you called ready                                      // 116\n  // that meant that you managed to run the query once. It will stop this                                             // 117\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus                                           // 118\n  // observeChanges calls) to throw the error.                                                                        // 119\n  queryError: function () {                                                                                           // 120\n    function queryError(err) {                                                                                        // 120\n      var self = this;                                                                                                // 121\n      self._queue.runTask(function () {                                                                               // 122\n        if (self._ready()) throw Error(\"can't claim query has an error after it worked!\");                            // 123\n        self._stop({ fromQueryError: true });                                                                         // 125\n        self._readyFuture['throw'](err);                                                                              // 126\n      });                                                                                                             // 127\n    }                                                                                                                 // 128\n                                                                                                                      //\n    return queryError;                                                                                                // 120\n  }(),                                                                                                                // 120\n                                                                                                                      //\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"                                        // 130\n  // and observe callbacks which came before this call have been propagated to                                        // 131\n  // all handles. \"ready\" must have already been called on this multiplexer.                                          // 132\n  onFlush: function () {                                                                                              // 133\n    function onFlush(cb) {                                                                                            // 133\n      var self = this;                                                                                                // 134\n      self._queue.queueTask(function () {                                                                             // 135\n        if (!self._ready()) throw Error(\"only call onFlush on a multiplexer that will be ready\");                     // 136\n        cb();                                                                                                         // 138\n      });                                                                                                             // 139\n    }                                                                                                                 // 140\n                                                                                                                      //\n    return onFlush;                                                                                                   // 133\n  }(),                                                                                                                // 133\n  callbackNames: function () {                                                                                        // 141\n    function callbackNames() {                                                                                        // 141\n      var self = this;                                                                                                // 142\n      if (self._ordered) return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];else return [\"added\", \"changed\", \"removed\"];\n    }                                                                                                                 // 147\n                                                                                                                      //\n    return callbackNames;                                                                                             // 141\n  }(),                                                                                                                // 141\n  _ready: function () {                                                                                               // 148\n    function _ready() {                                                                                               // 148\n      return this._readyFuture.isResolved();                                                                          // 149\n    }                                                                                                                 // 150\n                                                                                                                      //\n    return _ready;                                                                                                    // 148\n  }(),                                                                                                                // 148\n  _applyCallback: function () {                                                                                       // 151\n    function _applyCallback(callbackName, args) {                                                                     // 151\n      var self = this;                                                                                                // 152\n      self._queue.queueTask(function () {                                                                             // 153\n        // If we stopped in the meantime, do nothing.                                                                 // 154\n        if (!self._handles) return;                                                                                   // 155\n                                                                                                                      //\n        // First, apply the change to the cache.                                                                      // 158\n        // XXX We could make applyChange callbacks promise not to hang on to any                                      // 159\n        // state from their arguments (assuming that their supplied callbacks                                         // 160\n        // don't) and skip this clone. Currently 'changed' hangs on to state                                          // 161\n        // though.                                                                                                    // 162\n        self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));                                         // 163\n                                                                                                                      //\n        // If we haven't finished the initial adds, then we should only be getting                                    // 165\n        // adds.                                                                                                      // 166\n        if (!self._ready() && callbackName !== 'added' && callbackName !== 'addedBefore') {                           // 167\n          throw new Error(\"Got \" + callbackName + \" during initial adds\");                                            // 169\n        }                                                                                                             // 170\n                                                                                                                      //\n        // Now multiplex the callbacks out to all observe handles. It's OK if                                         // 172\n        // these calls yield; since we're inside a task, no other use of our queue                                    // 173\n        // can continue until these are done. (But we do have to be careful to not                                    // 174\n        // use a handle that got removed, because removeHandle does not use the                                       // 175\n        // queue; thus, we iterate over an array of keys that we control.)                                            // 176\n        _.each(_.keys(self._handles), function (handleId) {                                                           // 177\n          var handle = self._handles && self._handles[handleId];                                                      // 178\n          if (!handle) return;                                                                                        // 179\n          var callback = handle['_' + callbackName];                                                                  // 181\n          // clone arguments so that callbacks can mutate their arguments                                             // 182\n          callback && callback.apply(null, EJSON.clone(args));                                                        // 183\n        });                                                                                                           // 184\n      });                                                                                                             // 185\n    }                                                                                                                 // 186\n                                                                                                                      //\n    return _applyCallback;                                                                                            // 151\n  }(),                                                                                                                // 151\n                                                                                                                      //\n  // Sends initial adds to a handle. It should only be called from within a task                                      // 188\n  // (the task that is processing the addHandleAndSendInitialAdds call). It                                           // 189\n  // synchronously invokes the handle's added or addedBefore; there's no need to                                      // 190\n  // flush the queue afterwards to ensure that the callbacks get out.                                                 // 191\n  _sendAdds: function () {                                                                                            // 192\n    function _sendAdds(handle) {                                                                                      // 192\n      var self = this;                                                                                                // 193\n      if (self._queue.safeToRunTask()) throw Error(\"_sendAdds may only be called from within a task!\");               // 194\n      var add = self._ordered ? handle._addedBefore : handle._added;                                                  // 196\n      if (!add) return;                                                                                               // 197\n      // note: docs may be an _IdMap or an OrderedDict                                                                // 199\n      self._cache.docs.forEach(function (doc, id) {                                                                   // 200\n        if (!_.has(self._handles, handle._id)) throw Error(\"handle got removed before sending initial adds!\");        // 201\n        var fields = EJSON.clone(doc);                                                                                // 203\n        delete fields._id;                                                                                            // 204\n        if (self._ordered) add(id, fields, null); // we're going in order, so add at end                              // 205\n        else add(id, fields);                                                                                         // 205\n      });                                                                                                             // 209\n    }                                                                                                                 // 210\n                                                                                                                      //\n    return _sendAdds;                                                                                                 // 192\n  }()                                                                                                                 // 192\n});                                                                                                                   // 31\n                                                                                                                      //\nvar nextObserveHandleId = 1;                                                                                          // 214\nObserveHandle = function ObserveHandle(multiplexer, callbacks) {                                                      // 215\n  var self = this;                                                                                                    // 216\n  // The end user is only supposed to call stop().  The other fields are                                              // 217\n  // accessible to the multiplexer, though.                                                                           // 218\n  self._multiplexer = multiplexer;                                                                                    // 219\n  _.each(multiplexer.callbackNames(), function (name) {                                                               // 220\n    if (callbacks[name]) {                                                                                            // 221\n      self['_' + name] = callbacks[name];                                                                             // 222\n    } else if (name === \"addedBefore\" && callbacks.added) {                                                           // 223\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an                                           // 224\n      // ordered observe where for some reason you don't get ordering data on                                         // 225\n      // the adds.  I dunno, we wrote tests for it, there must have been a                                            // 226\n      // reason.                                                                                                      // 227\n      self._addedBefore = function (id, fields, before) {                                                             // 228\n        callbacks.added(id, fields);                                                                                  // 229\n      };                                                                                                              // 230\n    }                                                                                                                 // 231\n  });                                                                                                                 // 232\n  self._stopped = false;                                                                                              // 233\n  self._id = nextObserveHandleId++;                                                                                   // 234\n};                                                                                                                    // 235\nObserveHandle.prototype.stop = function () {                                                                          // 236\n  var self = this;                                                                                                    // 237\n  if (self._stopped) return;                                                                                          // 238\n  self._stopped = true;                                                                                               // 240\n  self._multiplexer.removeHandle(self._id);                                                                           // 241\n};                                                                                                                    // 242\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"doc_fetcher.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/doc_fetcher.js                                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');                                                                                    // 1\nvar Future = Npm.require('fibers/future');                                                                            // 2\n                                                                                                                      //\nDocFetcher = function DocFetcher(mongoConnection) {                                                                   // 4\n  var self = this;                                                                                                    // 5\n  self._mongoConnection = mongoConnection;                                                                            // 6\n  // Map from cache key -> [callback]                                                                                 // 7\n  self._callbacksForCacheKey = {};                                                                                    // 8\n};                                                                                                                    // 9\n                                                                                                                      //\n_.extend(DocFetcher.prototype, {                                                                                      // 11\n  // Fetches document \"id\" from collectionName, returning it or null if not                                           // 12\n  // found.                                                                                                           // 13\n  //                                                                                                                  // 14\n  // If you make multiple calls to fetch() with the same cacheKey (a string),                                         // 15\n  // DocFetcher may assume that they all return the same document. (It does                                           // 16\n  // not check to see if collectionName/id match.)                                                                    // 17\n  //                                                                                                                  // 18\n  // You may assume that callback is never called synchronously (and in fact                                          // 19\n  // OplogObserveDriver does so).                                                                                     // 20\n  fetch: function () {                                                                                                // 21\n    function fetch(collectionName, id, cacheKey, callback) {                                                          // 21\n      var self = this;                                                                                                // 22\n                                                                                                                      //\n      check(collectionName, String);                                                                                  // 24\n      // id is some sort of scalar                                                                                    // 25\n      check(cacheKey, String);                                                                                        // 26\n                                                                                                                      //\n      // If there's already an in-progress fetch for this cache key, yield until                                      // 28\n      // it's done and return whatever it returns.                                                                    // 29\n      if (_.has(self._callbacksForCacheKey, cacheKey)) {                                                              // 30\n        self._callbacksForCacheKey[cacheKey].push(callback);                                                          // 31\n        return;                                                                                                       // 32\n      }                                                                                                               // 33\n                                                                                                                      //\n      var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];                                              // 35\n                                                                                                                      //\n      Fiber(function () {                                                                                             // 37\n        try {                                                                                                         // 38\n          var doc = self._mongoConnection.findOne(collectionName, { _id: id }) || null;                               // 39\n          // Return doc to all relevant callbacks. Note that this array can                                           // 41\n          // continue to grow during callback excecution.                                                             // 42\n          while (!_.isEmpty(callbacks)) {                                                                             // 43\n            // Clone the document so that the various calls to fetch don't return                                     // 44\n            // objects that are intertwingled with each other. Clone before                                           // 45\n            // popping the future, so that if clone throws, the error gets passed                                     // 46\n            // to the next callback.                                                                                  // 47\n            var clonedDoc = EJSON.clone(doc);                                                                         // 48\n            callbacks.pop()(null, clonedDoc);                                                                         // 49\n          }                                                                                                           // 50\n        } catch (e) {                                                                                                 // 51\n          while (!_.isEmpty(callbacks)) {                                                                             // 52\n            callbacks.pop()(e);                                                                                       // 53\n          }                                                                                                           // 54\n        } finally {                                                                                                   // 55\n          // XXX consider keeping the doc around for a period of time before                                          // 56\n          // removing from the cache                                                                                  // 57\n          delete self._callbacksForCacheKey[cacheKey];                                                                // 58\n        }                                                                                                             // 59\n      }).run();                                                                                                       // 60\n    }                                                                                                                 // 61\n                                                                                                                      //\n    return fetch;                                                                                                     // 21\n  }()                                                                                                                 // 21\n});                                                                                                                   // 11\n                                                                                                                      //\nMongoTest.DocFetcher = DocFetcher;                                                                                    // 64\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"polling_observe_driver.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/polling_observe_driver.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nPollingObserveDriver = function PollingObserveDriver(options) {                                                       // 1\n  var self = this;                                                                                                    // 2\n                                                                                                                      //\n  self._cursorDescription = options.cursorDescription;                                                                // 4\n  self._mongoHandle = options.mongoHandle;                                                                            // 5\n  self._ordered = options.ordered;                                                                                    // 6\n  self._multiplexer = options.multiplexer;                                                                            // 7\n  self._stopCallbacks = [];                                                                                           // 8\n  self._stopped = false;                                                                                              // 9\n                                                                                                                      //\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(self._cursorDescription);                      // 11\n                                                                                                                      //\n  // previous results snapshot.  on each poll cycle, diffs against                                                    // 14\n  // results drives the callbacks.                                                                                    // 15\n  self._results = null;                                                                                               // 16\n                                                                                                                      //\n  // The number of _pollMongo calls that have been added to self._taskQueue but                                       // 18\n  // have not started running. Used to make sure we never schedule more than one                                      // 19\n  // _pollMongo (other than possibly the one that is currently running). It's                                         // 20\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,                                       // 21\n  // it's either 0 (for \"no polls scheduled other than maybe one currently                                            // 22\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can                                       // 23\n  // also be 2 if incremented by _suspendPolling.                                                                     // 24\n  self._pollsScheduledButNotStarted = 0;                                                                              // 25\n  self._pendingWrites = []; // people to notify when polling completes                                                // 26\n                                                                                                                      //\n  // Make sure to create a separately throttled function for each                                                     // 28\n  // PollingObserveDriver object.                                                                                     // 29\n  self._ensurePollIsScheduled = _.throttle(self._unthrottledEnsurePollIsScheduled, self._cursorDescription.options.pollingThrottleMs || 50 /* ms */);\n                                                                                                                      //\n  // XXX figure out if we still need a queue                                                                          // 34\n  self._taskQueue = new Meteor._SynchronousQueue();                                                                   // 35\n                                                                                                                      //\n  var listenersHandle = listenAll(self._cursorDescription, function (notification) {                                  // 37\n    // When someone does a transaction that might affect us, schedule a poll                                          // 39\n    // of the database. If that transaction happens inside of a write fence,                                          // 40\n    // block the fence until we've polled and notified observers.                                                     // 41\n    var fence = DDPServer._CurrentWriteFence.get();                                                                   // 42\n    if (fence) self._pendingWrites.push(fence.beginWrite());                                                          // 43\n    // Ensure a poll is scheduled... but if we already know that one is,                                              // 45\n    // don't hit the throttled _ensurePollIsScheduled function (which might                                           // 46\n    // lead to us calling it unnecessarily in <pollingThrottleMs> ms).                                                // 47\n    if (self._pollsScheduledButNotStarted === 0) self._ensurePollIsScheduled();                                       // 48\n  });                                                                                                                 // 50\n  self._stopCallbacks.push(function () {                                                                              // 52\n    listenersHandle.stop();                                                                                           // 52\n  });                                                                                                                 // 52\n                                                                                                                      //\n  // every once and a while, poll even if we don't think we're dirty, for                                             // 54\n  // eventual consistency with database writes from outside the Meteor                                                // 55\n  // universe.                                                                                                        // 56\n  //                                                                                                                  // 57\n  // For testing, there's an undocumented callback argument to observeChanges                                         // 58\n  // which disables time-based polling and gets called at the beginning of each                                       // 59\n  // poll.                                                                                                            // 60\n  if (options._testOnlyPollCallback) {                                                                                // 61\n    self._testOnlyPollCallback = options._testOnlyPollCallback;                                                       // 62\n  } else {                                                                                                            // 63\n    var pollingInterval = self._cursorDescription.options.pollingIntervalMs || self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n    10 * 1000;                                                                                                        // 67\n    var intervalHandle = Meteor.setInterval(_.bind(self._ensurePollIsScheduled, self), pollingInterval);              // 68\n    self._stopCallbacks.push(function () {                                                                            // 70\n      Meteor.clearInterval(intervalHandle);                                                                           // 71\n    });                                                                                                               // 72\n  }                                                                                                                   // 73\n                                                                                                                      //\n  // Make sure we actually poll soon!                                                                                 // 75\n  self._unthrottledEnsurePollIsScheduled();                                                                           // 76\n                                                                                                                      //\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", 1);           // 78\n};                                                                                                                    // 80\n                                                                                                                      //\n_.extend(PollingObserveDriver.prototype, {                                                                            // 82\n  // This is always called through _.throttle (except once at startup).                                               // 83\n  _unthrottledEnsurePollIsScheduled: function () {                                                                    // 84\n    function _unthrottledEnsurePollIsScheduled() {                                                                    // 84\n      var self = this;                                                                                                // 85\n      if (self._pollsScheduledButNotStarted > 0) return;                                                              // 86\n      ++self._pollsScheduledButNotStarted;                                                                            // 88\n      self._taskQueue.queueTask(function () {                                                                         // 89\n        self._pollMongo();                                                                                            // 90\n      });                                                                                                             // 91\n    }                                                                                                                 // 92\n                                                                                                                      //\n    return _unthrottledEnsurePollIsScheduled;                                                                         // 84\n  }(),                                                                                                                // 84\n                                                                                                                      //\n  // test-only interface for controlling polling.                                                                     // 94\n  //                                                                                                                  // 95\n  // _suspendPolling blocks until any currently running and scheduled polls are                                       // 96\n  // done, and prevents any further polls from being scheduled. (new                                                  // 97\n  // ObserveHandles can be added and receive their initial added callbacks,                                           // 98\n  // though.)                                                                                                         // 99\n  //                                                                                                                  // 100\n  // _resumePolling immediately polls, and allows further polls to occur.                                             // 101\n  _suspendPolling: function () {                                                                                      // 102\n    function _suspendPolling() {                                                                                      // 102\n      var self = this;                                                                                                // 103\n      // Pretend that there's another poll scheduled (which will prevent                                              // 104\n      // _ensurePollIsScheduled from queueing any more polls).                                                        // 105\n      ++self._pollsScheduledButNotStarted;                                                                            // 106\n      // Now block until all currently running or scheduled polls are done.                                           // 107\n      self._taskQueue.runTask(function () {});                                                                        // 108\n                                                                                                                      //\n      // Confirm that there is only one \"poll\" (the fake one we're pretending to                                      // 110\n      // have) scheduled.                                                                                             // 111\n      if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n    }                                                                                                                 // 115\n                                                                                                                      //\n    return _suspendPolling;                                                                                           // 102\n  }(),                                                                                                                // 102\n  _resumePolling: function () {                                                                                       // 116\n    function _resumePolling() {                                                                                       // 116\n      var self = this;                                                                                                // 117\n      // We should be in the same state as in the end of _suspendPolling.                                             // 118\n      if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n      // Run a poll synchronously (which will counteract the                                                          // 122\n      // ++_pollsScheduledButNotStarted from _suspendPolling).                                                        // 123\n      self._taskQueue.runTask(function () {                                                                           // 124\n        self._pollMongo();                                                                                            // 125\n      });                                                                                                             // 126\n    }                                                                                                                 // 127\n                                                                                                                      //\n    return _resumePolling;                                                                                            // 116\n  }(),                                                                                                                // 116\n                                                                                                                      //\n  _pollMongo: function () {                                                                                           // 129\n    function _pollMongo() {                                                                                           // 129\n      var self = this;                                                                                                // 130\n      --self._pollsScheduledButNotStarted;                                                                            // 131\n                                                                                                                      //\n      if (self._stopped) return;                                                                                      // 133\n                                                                                                                      //\n      var first = false;                                                                                              // 136\n      var oldResults = self._results;                                                                                 // 137\n      if (!oldResults) {                                                                                              // 138\n        first = true;                                                                                                 // 139\n        // XXX maybe use OrderedDict instead?                                                                         // 140\n        oldResults = self._ordered ? [] : new LocalCollection._IdMap();                                               // 141\n      }                                                                                                               // 142\n                                                                                                                      //\n      self._testOnlyPollCallback && self._testOnlyPollCallback();                                                     // 144\n                                                                                                                      //\n      // Save the list of pending writes which this round will commit.                                                // 146\n      var writesForCycle = self._pendingWrites;                                                                       // 147\n      self._pendingWrites = [];                                                                                       // 148\n                                                                                                                      //\n      // Get the new query results. (This yields.)                                                                    // 150\n      try {                                                                                                           // 151\n        var newResults = self._synchronousCursor.getRawObjects(self._ordered);                                        // 152\n      } catch (e) {                                                                                                   // 153\n        if (first && typeof e.code === 'number') {                                                                    // 154\n          // This is an error document sent to us by mongod, not a connection                                         // 155\n          // error generated by the client. And we've never seen this query work                                      // 156\n          // successfully. Probably it's a bad selector or something, so we should                                    // 157\n          // NOT retry. Instead, we should halt the observe (which ends up calling                                    // 158\n          // `stop` on us).                                                                                           // 159\n          self._multiplexer.queryError(new Error(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.message));\n          return;                                                                                                     // 164\n        }                                                                                                             // 165\n                                                                                                                      //\n        // getRawObjects can throw if we're having trouble talking to the                                             // 167\n        // database.  That's fine --- we will repoll later anyway. But we should                                      // 168\n        // make sure not to lose track of this cycle's writes.                                                        // 169\n        // (It also can throw if there's just something invalid about this query;                                     // 170\n        // unfortunately the ObserveDriver API doesn't provide a good way to                                          // 171\n        // \"cancel\" the observe from the inside in this case.                                                         // 172\n        Array.prototype.push.apply(self._pendingWrites, writesForCycle);                                              // 173\n        Meteor._debug(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.stack);   // 174\n        return;                                                                                                       // 176\n      }                                                                                                               // 177\n                                                                                                                      //\n      // Run diffs.                                                                                                   // 179\n      if (!self._stopped) {                                                                                           // 180\n        LocalCollection._diffQueryChanges(self._ordered, oldResults, newResults, self._multiplexer);                  // 181\n      }                                                                                                               // 183\n                                                                                                                      //\n      // Signals the multiplexer to allow all observeChanges calls that share this                                    // 185\n      // multiplexer to return. (This happens asynchronously, via the                                                 // 186\n      // multiplexer's queue.)                                                                                        // 187\n      if (first) self._multiplexer.ready();                                                                           // 188\n                                                                                                                      //\n      // Replace self._results atomically.  (This assignment is what makes `first`                                    // 191\n      // stay through on the next cycle, so we've waited until after we've                                            // 192\n      // committed to ready-ing the multiplexer.)                                                                     // 193\n      self._results = newResults;                                                                                     // 194\n                                                                                                                      //\n      // Once the ObserveMultiplexer has processed everything we've done in this                                      // 196\n      // round, mark all the writes which existed before this call as                                                 // 197\n      // commmitted. (If new writes have shown up in the meantime, there'll                                           // 198\n      // already be another _pollMongo task scheduled.)                                                               // 199\n      self._multiplexer.onFlush(function () {                                                                         // 200\n        _.each(writesForCycle, function (w) {                                                                         // 201\n          w.committed();                                                                                              // 202\n        });                                                                                                           // 203\n      });                                                                                                             // 204\n    }                                                                                                                 // 205\n                                                                                                                      //\n    return _pollMongo;                                                                                                // 129\n  }(),                                                                                                                // 129\n                                                                                                                      //\n  stop: function () {                                                                                                 // 207\n    function stop() {                                                                                                 // 207\n      var self = this;                                                                                                // 208\n      self._stopped = true;                                                                                           // 209\n      _.each(self._stopCallbacks, function (c) {                                                                      // 210\n        c();                                                                                                          // 210\n      });                                                                                                             // 210\n      // Release any write fences that are waiting on us.                                                             // 211\n      _.each(self._pendingWrites, function (w) {                                                                      // 212\n        w.committed();                                                                                                // 213\n      });                                                                                                             // 214\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", -1);      // 215\n    }                                                                                                                 // 217\n                                                                                                                      //\n    return stop;                                                                                                      // 207\n  }()                                                                                                                 // 207\n});                                                                                                                   // 82\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oplog_observe_driver.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/oplog_observe_driver.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Fiber = Npm.require('fibers');                                                                                    // 1\nvar Future = Npm.require('fibers/future');                                                                            // 2\n                                                                                                                      //\nvar PHASE = {                                                                                                         // 4\n  QUERYING: \"QUERYING\",                                                                                               // 5\n  FETCHING: \"FETCHING\",                                                                                               // 6\n  STEADY: \"STEADY\"                                                                                                    // 7\n};                                                                                                                    // 4\n                                                                                                                      //\n// Exception thrown by _needToPollQuery which unrolls the stack up to the                                             // 10\n// enclosing call to finishIfNeedToPollQuery.                                                                         // 11\nvar SwitchedToQuery = function SwitchedToQuery() {};                                                                  // 12\nvar finishIfNeedToPollQuery = function finishIfNeedToPollQuery(f) {                                                   // 13\n  return function () {                                                                                                // 14\n    try {                                                                                                             // 15\n      f.apply(this, arguments);                                                                                       // 16\n    } catch (e) {                                                                                                     // 17\n      if (!(e instanceof SwitchedToQuery)) throw e;                                                                   // 18\n    }                                                                                                                 // 20\n  };                                                                                                                  // 21\n};                                                                                                                    // 22\n                                                                                                                      //\nvar currentId = 0;                                                                                                    // 24\n                                                                                                                      //\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows                                         // 26\n// the Mongo operation log instead of just re-polling the query. It obeys the                                         // 27\n// same simple interface: constructing it starts sending observeChanges                                               // 28\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop                                       // 29\n// it by calling the stop() method.                                                                                   // 30\nOplogObserveDriver = function OplogObserveDriver(options) {                                                           // 31\n  var self = this;                                                                                                    // 32\n  self._usesOplog = true; // tests look at this                                                                       // 33\n                                                                                                                      //\n  self._id = currentId;                                                                                               // 35\n  currentId++;                                                                                                        // 36\n                                                                                                                      //\n  self._cursorDescription = options.cursorDescription;                                                                // 38\n  self._mongoHandle = options.mongoHandle;                                                                            // 39\n  self._multiplexer = options.multiplexer;                                                                            // 40\n                                                                                                                      //\n  if (options.ordered) {                                                                                              // 42\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");                                         // 43\n  }                                                                                                                   // 44\n                                                                                                                      //\n  var sorter = options.sorter;                                                                                        // 46\n  // We don't support $near and other geo-queries so it's OK to initialize the                                        // 47\n  // comparator only once in the constructor.                                                                         // 48\n  var comparator = sorter && sorter.getComparator();                                                                  // 49\n                                                                                                                      //\n  if (options.cursorDescription.options.limit) {                                                                      // 51\n    // There are several properties ordered driver implements:                                                        // 52\n    // - _limit is a positive number                                                                                  // 53\n    // - _comparator is a function-comparator by which the query is ordered                                           // 54\n    // - _unpublishedBuffer is non-null Min/Max Heap,                                                                 // 55\n    //                      the empty buffer in STEADY phase implies that the                                         // 56\n    //                      everything that matches the queries selector fits                                         // 57\n    //                      into published set.                                                                       // 58\n    // - _published - Min Heap (also implements IdMap methods)                                                        // 59\n                                                                                                                      //\n    var heapOptions = { IdMap: LocalCollection._IdMap };                                                              // 61\n    self._limit = self._cursorDescription.options.limit;                                                              // 62\n    self._comparator = comparator;                                                                                    // 63\n    self._sorter = sorter;                                                                                            // 64\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);                                                // 65\n    // We need something that can find Max value in addition to IdMap interface                                       // 66\n    self._published = new MaxHeap(comparator, heapOptions);                                                           // 67\n  } else {                                                                                                            // 68\n    self._limit = 0;                                                                                                  // 69\n    self._comparator = null;                                                                                          // 70\n    self._sorter = null;                                                                                              // 71\n    self._unpublishedBuffer = null;                                                                                   // 72\n    self._published = new LocalCollection._IdMap();                                                                   // 73\n  }                                                                                                                   // 74\n                                                                                                                      //\n  // Indicates if it is safe to insert a new document at the end of the buffer                                        // 76\n  // for this query. i.e. it is known that there are no documents matching the                                        // 77\n  // selector those are not in published or buffer.                                                                   // 78\n  self._safeAppendToBuffer = false;                                                                                   // 79\n                                                                                                                      //\n  self._stopped = false;                                                                                              // 81\n  self._stopHandles = [];                                                                                             // 82\n                                                                                                                      //\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", 1);             // 84\n                                                                                                                      //\n  self._registerPhaseChange(PHASE.QUERYING);                                                                          // 87\n                                                                                                                      //\n  var selector = self._cursorDescription.selector;                                                                    // 89\n  self._matcher = options.matcher;                                                                                    // 90\n  var projection = self._cursorDescription.options.fields || {};                                                      // 91\n  self._projectionFn = LocalCollection._compileProjection(projection);                                                // 92\n  // Projection function, result of combining important fields for selector and                                       // 93\n  // existing fields projection                                                                                       // 94\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);                                           // 95\n  if (sorter) self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);                          // 96\n  self._sharedProjectionFn = LocalCollection._compileProjection(self._sharedProjection);                              // 98\n                                                                                                                      //\n  self._needToFetch = new LocalCollection._IdMap();                                                                   // 101\n  self._currentlyFetching = null;                                                                                     // 102\n  self._fetchGeneration = 0;                                                                                          // 103\n                                                                                                                      //\n  self._requeryWhenDoneThisQuery = false;                                                                             // 105\n  self._writesToCommitWhenWeReachSteady = [];                                                                         // 106\n                                                                                                                      //\n  // If the oplog handle tells us that it skipped some entries (because it got                                        // 108\n  // behind, say), re-poll.                                                                                           // 109\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(finishIfNeedToPollQuery(function () {        // 110\n    self._needToPollQuery();                                                                                          // 112\n  })));                                                                                                               // 113\n                                                                                                                      //\n  forEachTrigger(self._cursorDescription, function (trigger) {                                                        // 116\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(trigger, function (notification) {             // 117\n      Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {                                                   // 119\n        var op = notification.op;                                                                                     // 120\n        if (notification.dropCollection || notification.dropDatabase) {                                               // 121\n          // Note: this call is not allowed to block on anything (especially                                          // 122\n          // on waiting for oplog entries to catch up) because that will block                                        // 123\n          // onOplogEntry!                                                                                            // 124\n          self._needToPollQuery();                                                                                    // 125\n        } else {                                                                                                      // 126\n          // All other operators should be handled depending on phase                                                 // 127\n          if (self._phase === PHASE.QUERYING) self._handleOplogEntryQuerying(op);else self._handleOplogEntrySteadyOrFetching(op);\n        }                                                                                                             // 132\n      }));                                                                                                            // 133\n    }));                                                                                                              // 134\n  });                                                                                                                 // 136\n                                                                                                                      //\n  // XXX ordering w.r.t. everything else?                                                                             // 138\n  self._stopHandles.push(listenAll(self._cursorDescription, function (notification) {                                 // 139\n    // If we're not in a pre-fire write fence, we don't have to do anything.                                          // 141\n    var fence = DDPServer._CurrentWriteFence.get();                                                                   // 142\n    if (!fence || fence.fired) return;                                                                                // 143\n                                                                                                                      //\n    if (fence._oplogObserveDrivers) {                                                                                 // 146\n      fence._oplogObserveDrivers[self._id] = self;                                                                    // 147\n      return;                                                                                                         // 148\n    }                                                                                                                 // 149\n                                                                                                                      //\n    fence._oplogObserveDrivers = {};                                                                                  // 151\n    fence._oplogObserveDrivers[self._id] = self;                                                                      // 152\n                                                                                                                      //\n    fence.onBeforeFire(function () {                                                                                  // 154\n      var drivers = fence._oplogObserveDrivers;                                                                       // 155\n      delete fence._oplogObserveDrivers;                                                                              // 156\n                                                                                                                      //\n      // This fence cannot fire until we've caught up to \"this point\" in the                                          // 158\n      // oplog, and all observers made it back to the steady state.                                                   // 159\n      self._mongoHandle._oplogHandle.waitUntilCaughtUp();                                                             // 160\n                                                                                                                      //\n      _.each(drivers, function (driver) {                                                                             // 162\n        if (driver._stopped) return;                                                                                  // 163\n                                                                                                                      //\n        var write = fence.beginWrite();                                                                               // 166\n        if (driver._phase === PHASE.STEADY) {                                                                         // 167\n          // Make sure that all of the callbacks have made it through the                                             // 168\n          // multiplexer and been delivered to ObserveHandles before committing                                       // 169\n          // writes.                                                                                                  // 170\n          driver._multiplexer.onFlush(function () {                                                                   // 171\n            write.committed();                                                                                        // 172\n          });                                                                                                         // 173\n        } else {                                                                                                      // 174\n          driver._writesToCommitWhenWeReachSteady.push(write);                                                        // 175\n        }                                                                                                             // 176\n      });                                                                                                             // 177\n    });                                                                                                               // 178\n  }));                                                                                                                // 179\n                                                                                                                      //\n  // When Mongo fails over, we need to repoll the query, in case we processed an                                      // 182\n  // oplog entry that got rolled back.                                                                                // 183\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(function () {                          // 184\n    self._needToPollQuery();                                                                                          // 186\n  })));                                                                                                               // 187\n                                                                                                                      //\n  // Give _observeChanges a chance to add the new ObserveHandle to our                                                // 189\n  // multiplexer, so that the added calls get streamed.                                                               // 190\n  Meteor.defer(finishIfNeedToPollQuery(function () {                                                                  // 191\n    self._runInitialQuery();                                                                                          // 192\n  }));                                                                                                                // 193\n};                                                                                                                    // 194\n                                                                                                                      //\n_.extend(OplogObserveDriver.prototype, {                                                                              // 196\n  _addPublished: function () {                                                                                        // 197\n    function _addPublished(id, doc) {                                                                                 // 197\n      var self = this;                                                                                                // 198\n      Meteor._noYieldsAllowed(function () {                                                                           // 199\n        var fields = _.clone(doc);                                                                                    // 200\n        delete fields._id;                                                                                            // 201\n        self._published.set(id, self._sharedProjectionFn(doc));                                                       // 202\n        self._multiplexer.added(id, self._projectionFn(fields));                                                      // 203\n                                                                                                                      //\n        // After adding this document, the published set might be overflowed                                          // 205\n        // (exceeding capacity specified by limit). If so, push the maximum                                           // 206\n        // element to the buffer, we might want to save it in memory to reduce the                                    // 207\n        // amount of Mongo lookups in the future.                                                                     // 208\n        if (self._limit && self._published.size() > self._limit) {                                                    // 209\n          // XXX in theory the size of published is no more than limit+1                                              // 210\n          if (self._published.size() !== self._limit + 1) {                                                           // 211\n            throw new Error(\"After adding to published, \" + (self._published.size() - self._limit) + \" documents are overflowing the set\");\n          }                                                                                                           // 215\n                                                                                                                      //\n          var overflowingDocId = self._published.maxElementId();                                                      // 217\n          var overflowingDoc = self._published.get(overflowingDocId);                                                 // 218\n                                                                                                                      //\n          if (EJSON.equals(overflowingDocId, id)) {                                                                   // 220\n            throw new Error(\"The document just added is overflowing the published set\");                              // 221\n          }                                                                                                           // 222\n                                                                                                                      //\n          self._published.remove(overflowingDocId);                                                                   // 224\n          self._multiplexer.removed(overflowingDocId);                                                                // 225\n          self._addBuffered(overflowingDocId, overflowingDoc);                                                        // 226\n        }                                                                                                             // 227\n      });                                                                                                             // 228\n    }                                                                                                                 // 229\n                                                                                                                      //\n    return _addPublished;                                                                                             // 197\n  }(),                                                                                                                // 197\n  _removePublished: function () {                                                                                     // 230\n    function _removePublished(id) {                                                                                   // 230\n      var self = this;                                                                                                // 231\n      Meteor._noYieldsAllowed(function () {                                                                           // 232\n        self._published.remove(id);                                                                                   // 233\n        self._multiplexer.removed(id);                                                                                // 234\n        if (!self._limit || self._published.size() === self._limit) return;                                           // 235\n                                                                                                                      //\n        if (self._published.size() > self._limit) throw Error(\"self._published got too big\");                         // 238\n                                                                                                                      //\n        // OK, we are publishing less than the limit. Maybe we should look in the                                     // 241\n        // buffer to find the next element past what we were publishing before.                                       // 242\n                                                                                                                      //\n        if (!self._unpublishedBuffer.empty()) {                                                                       // 244\n          // There's something in the buffer; move the first thing in it to                                           // 245\n          // _published.                                                                                              // 246\n          var newDocId = self._unpublishedBuffer.minElementId();                                                      // 247\n          var newDoc = self._unpublishedBuffer.get(newDocId);                                                         // 248\n          self._removeBuffered(newDocId);                                                                             // 249\n          self._addPublished(newDocId, newDoc);                                                                       // 250\n          return;                                                                                                     // 251\n        }                                                                                                             // 252\n                                                                                                                      //\n        // There's nothing in the buffer.  This could mean one of a few things.                                       // 254\n                                                                                                                      //\n        // (a) We could be in the middle of re-running the query (specifically, we                                    // 256\n        // could be in _publishNewResults). In that case, _unpublishedBuffer is                                       // 257\n        // empty because we clear it at the beginning of _publishNewResults. In                                       // 258\n        // this case, our caller already knows the entire answer to the query and                                     // 259\n        // we don't need to do anything fancy here.  Just return.                                                     // 260\n        if (self._phase === PHASE.QUERYING) return;                                                                   // 261\n                                                                                                                      //\n        // (b) We're pretty confident that the union of _published and                                                // 264\n        // _unpublishedBuffer contain all documents that match selector. Because                                      // 265\n        // _unpublishedBuffer is empty, that means we're confident that _published                                    // 266\n        // contains all documents that match selector. So we have nothing to do.                                      // 267\n        if (self._safeAppendToBuffer) return;                                                                         // 268\n                                                                                                                      //\n        // (c) Maybe there are other documents out there that should be in our                                        // 271\n        // buffer. But in that case, when we emptied _unpublishedBuffer in                                            // 272\n        // _removeBuffered, we should have called _needToPollQuery, which will                                        // 273\n        // either put something in _unpublishedBuffer or set _safeAppendToBuffer                                      // 274\n        // (or both), and it will put us in QUERYING for that whole time. So in                                       // 275\n        // fact, we shouldn't be able to get here.                                                                    // 276\n                                                                                                                      //\n        throw new Error(\"Buffer inexplicably empty\");                                                                 // 278\n      });                                                                                                             // 279\n    }                                                                                                                 // 280\n                                                                                                                      //\n    return _removePublished;                                                                                          // 230\n  }(),                                                                                                                // 230\n  _changePublished: function () {                                                                                     // 281\n    function _changePublished(id, oldDoc, newDoc) {                                                                   // 281\n      var self = this;                                                                                                // 282\n      Meteor._noYieldsAllowed(function () {                                                                           // 283\n        self._published.set(id, self._sharedProjectionFn(newDoc));                                                    // 284\n        var projectedNew = self._projectionFn(newDoc);                                                                // 285\n        var projectedOld = self._projectionFn(oldDoc);                                                                // 286\n        var changed = DiffSequence.makeChangedFields(projectedNew, projectedOld);                                     // 287\n        if (!_.isEmpty(changed)) self._multiplexer.changed(id, changed);                                              // 289\n      });                                                                                                             // 291\n    }                                                                                                                 // 292\n                                                                                                                      //\n    return _changePublished;                                                                                          // 281\n  }(),                                                                                                                // 281\n  _addBuffered: function () {                                                                                         // 293\n    function _addBuffered(id, doc) {                                                                                  // 293\n      var self = this;                                                                                                // 294\n      Meteor._noYieldsAllowed(function () {                                                                           // 295\n        self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));                                               // 296\n                                                                                                                      //\n        // If something is overflowing the buffer, we just remove it from cache                                       // 298\n        if (self._unpublishedBuffer.size() > self._limit) {                                                           // 299\n          var maxBufferedId = self._unpublishedBuffer.maxElementId();                                                 // 300\n                                                                                                                      //\n          self._unpublishedBuffer.remove(maxBufferedId);                                                              // 302\n                                                                                                                      //\n          // Since something matching is removed from cache (both published set and                                   // 304\n          // buffer), set flag to false                                                                               // 305\n          self._safeAppendToBuffer = false;                                                                           // 306\n        }                                                                                                             // 307\n      });                                                                                                             // 308\n    }                                                                                                                 // 309\n                                                                                                                      //\n    return _addBuffered;                                                                                              // 293\n  }(),                                                                                                                // 293\n  // Is called either to remove the doc completely from matching set or to move                                       // 310\n  // it to the published set later.                                                                                   // 311\n  _removeBuffered: function () {                                                                                      // 312\n    function _removeBuffered(id) {                                                                                    // 312\n      var self = this;                                                                                                // 313\n      Meteor._noYieldsAllowed(function () {                                                                           // 314\n        self._unpublishedBuffer.remove(id);                                                                           // 315\n        // To keep the contract \"buffer is never empty in STEADY phase unless the                                     // 316\n        // everything matching fits into published\" true, we poll everything as                                       // 317\n        // soon as we see the buffer becoming empty.                                                                  // 318\n        if (!self._unpublishedBuffer.size() && !self._safeAppendToBuffer) self._needToPollQuery();                    // 319\n      });                                                                                                             // 321\n    }                                                                                                                 // 322\n                                                                                                                      //\n    return _removeBuffered;                                                                                           // 312\n  }(),                                                                                                                // 312\n  // Called when a document has joined the \"Matching\" results set.                                                    // 323\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published                                       // 324\n  // and the effect of limit enforced.                                                                                // 325\n  _addMatching: function () {                                                                                         // 326\n    function _addMatching(doc) {                                                                                      // 326\n      var self = this;                                                                                                // 327\n      Meteor._noYieldsAllowed(function () {                                                                           // 328\n        var id = doc._id;                                                                                             // 329\n        if (self._published.has(id)) throw Error(\"tried to add something already published \" + id);                   // 330\n        if (self._limit && self._unpublishedBuffer.has(id)) throw Error(\"tried to add something already existed in buffer \" + id);\n                                                                                                                      //\n        var limit = self._limit;                                                                                      // 335\n        var comparator = self._comparator;                                                                            // 336\n        var maxPublished = limit && self._published.size() > 0 ? self._published.get(self._published.maxElementId()) : null;\n        var maxBuffered = limit && self._unpublishedBuffer.size() > 0 ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId()) : null;\n        // The query is unlimited or didn't publish enough documents yet or the                                       // 342\n        // new document would fit into published set pushing the maximum element                                      // 343\n        // out, then we need to publish the doc.                                                                      // 344\n        var toPublish = !limit || self._published.size() < limit || comparator(doc, maxPublished) < 0;                // 345\n                                                                                                                      //\n        // Otherwise we might need to buffer it (only in case of limited query).                                      // 348\n        // Buffering is allowed if the buffer is not filled up yet and all                                            // 349\n        // matching docs are either in the published set or in the buffer.                                            // 350\n        var canAppendToBuffer = !toPublish && self._safeAppendToBuffer && self._unpublishedBuffer.size() < limit;     // 351\n                                                                                                                      //\n        // Or if it is small enough to be safely inserted to the middle or the                                        // 354\n        // beginning of the buffer.                                                                                   // 355\n        var canInsertIntoBuffer = !toPublish && maxBuffered && comparator(doc, maxBuffered) <= 0;                     // 356\n                                                                                                                      //\n        var toBuffer = canAppendToBuffer || canInsertIntoBuffer;                                                      // 359\n                                                                                                                      //\n        if (toPublish) {                                                                                              // 361\n          self._addPublished(id, doc);                                                                                // 362\n        } else if (toBuffer) {                                                                                        // 363\n          self._addBuffered(id, doc);                                                                                 // 364\n        } else {                                                                                                      // 365\n          // dropping it and not saving to the cache                                                                  // 366\n          self._safeAppendToBuffer = false;                                                                           // 367\n        }                                                                                                             // 368\n      });                                                                                                             // 369\n    }                                                                                                                 // 370\n                                                                                                                      //\n    return _addMatching;                                                                                              // 326\n  }(),                                                                                                                // 326\n  // Called when a document leaves the \"Matching\" results set.                                                        // 371\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published                                       // 372\n  // and the effect of limit enforced.                                                                                // 373\n  _removeMatching: function () {                                                                                      // 374\n    function _removeMatching(id) {                                                                                    // 374\n      var self = this;                                                                                                // 375\n      Meteor._noYieldsAllowed(function () {                                                                           // 376\n        if (!self._published.has(id) && !self._limit) throw Error(\"tried to remove something matching but not cached \" + id);\n                                                                                                                      //\n        if (self._published.has(id)) {                                                                                // 380\n          self._removePublished(id);                                                                                  // 381\n        } else if (self._unpublishedBuffer.has(id)) {                                                                 // 382\n          self._removeBuffered(id);                                                                                   // 383\n        }                                                                                                             // 384\n      });                                                                                                             // 385\n    }                                                                                                                 // 386\n                                                                                                                      //\n    return _removeMatching;                                                                                           // 374\n  }(),                                                                                                                // 374\n  _handleDoc: function () {                                                                                           // 387\n    function _handleDoc(id, newDoc) {                                                                                 // 387\n      var self = this;                                                                                                // 388\n      Meteor._noYieldsAllowed(function () {                                                                           // 389\n        var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;                                      // 390\n                                                                                                                      //\n        var publishedBefore = self._published.has(id);                                                                // 392\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);                                          // 393\n        var cachedBefore = publishedBefore || bufferedBefore;                                                         // 394\n                                                                                                                      //\n        if (matchesNow && !cachedBefore) {                                                                            // 396\n          self._addMatching(newDoc);                                                                                  // 397\n        } else if (cachedBefore && !matchesNow) {                                                                     // 398\n          self._removeMatching(id);                                                                                   // 399\n        } else if (cachedBefore && matchesNow) {                                                                      // 400\n          var oldDoc = self._published.get(id);                                                                       // 401\n          var comparator = self._comparator;                                                                          // 402\n          var minBuffered = self._limit && self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n                                                                                                                      //\n          if (publishedBefore) {                                                                                      // 406\n            // Unlimited case where the document stays in published once it                                           // 407\n            // matches or the case when we don't have enough matching docs to                                         // 408\n            // publish or the changed but matching doc will stay in published                                         // 409\n            // anyways.                                                                                               // 410\n            //                                                                                                        // 411\n            // XXX: We rely on the emptiness of buffer. Be sure to maintain the                                       // 412\n            // fact that buffer can't be empty if there are matching documents not                                    // 413\n            // published. Notably, we don't want to schedule repoll and continue                                      // 414\n            // relying on this property.                                                                              // 415\n            var staysInPublished = !self._limit || self._unpublishedBuffer.size() === 0 || comparator(newDoc, minBuffered) <= 0;\n                                                                                                                      //\n            if (staysInPublished) {                                                                                   // 420\n              self._changePublished(id, oldDoc, newDoc);                                                              // 421\n            } else {                                                                                                  // 422\n              // after the change doc doesn't stay in the published, remove it                                        // 423\n              self._removePublished(id);                                                                              // 424\n              // but it can move into buffered now, check it                                                          // 425\n              var maxBuffered = self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());                  // 426\n                                                                                                                      //\n              var toBuffer = self._safeAppendToBuffer || maxBuffered && comparator(newDoc, maxBuffered) <= 0;         // 429\n                                                                                                                      //\n              if (toBuffer) {                                                                                         // 432\n                self._addBuffered(id, newDoc);                                                                        // 433\n              } else {                                                                                                // 434\n                // Throw away from both published set and buffer                                                      // 435\n                self._safeAppendToBuffer = false;                                                                     // 436\n              }                                                                                                       // 437\n            }                                                                                                         // 438\n          } else if (bufferedBefore) {                                                                                // 439\n            oldDoc = self._unpublishedBuffer.get(id);                                                                 // 440\n            // remove the old version manually instead of using _removeBuffered so                                    // 441\n            // we don't trigger the querying immediately.  if we end this block                                       // 442\n            // with the buffer empty, we will need to trigger the query poll                                          // 443\n            // manually too.                                                                                          // 444\n            self._unpublishedBuffer.remove(id);                                                                       // 445\n                                                                                                                      //\n            var maxPublished = self._published.get(self._published.maxElementId());                                   // 447\n            var maxBuffered = self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());\n                                                                                                                      //\n            // the buffered doc was updated, it could move to published                                               // 453\n            var toPublish = comparator(newDoc, maxPublished) < 0;                                                     // 454\n                                                                                                                      //\n            // or stays in buffer even after the change                                                               // 456\n            var staysInBuffer = !toPublish && self._safeAppendToBuffer || !toPublish && maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n                                                                                                                      //\n            if (toPublish) {                                                                                          // 461\n              self._addPublished(id, newDoc);                                                                         // 462\n            } else if (staysInBuffer) {                                                                               // 463\n              // stays in buffer but changes                                                                          // 464\n              self._unpublishedBuffer.set(id, newDoc);                                                                // 465\n            } else {                                                                                                  // 466\n              // Throw away from both published set and buffer                                                        // 467\n              self._safeAppendToBuffer = false;                                                                       // 468\n              // Normally this check would have been done in _removeBuffered but                                      // 469\n              // we didn't use it, so we need to do it ourself now.                                                   // 470\n              if (!self._unpublishedBuffer.size()) {                                                                  // 471\n                self._needToPollQuery();                                                                              // 472\n              }                                                                                                       // 473\n            }                                                                                                         // 474\n          } else {                                                                                                    // 475\n            throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");             // 476\n          }                                                                                                           // 477\n        }                                                                                                             // 478\n      });                                                                                                             // 479\n    }                                                                                                                 // 480\n                                                                                                                      //\n    return _handleDoc;                                                                                                // 387\n  }(),                                                                                                                // 387\n  _fetchModifiedDocuments: function () {                                                                              // 481\n    function _fetchModifiedDocuments() {                                                                              // 481\n      var self = this;                                                                                                // 482\n      Meteor._noYieldsAllowed(function () {                                                                           // 483\n        self._registerPhaseChange(PHASE.FETCHING);                                                                    // 484\n        // Defer, because nothing called from the oplog entry handler may yield,                                      // 485\n        // but fetch() yields.                                                                                        // 486\n        Meteor.defer(finishIfNeedToPollQuery(function () {                                                            // 487\n          while (!self._stopped && !self._needToFetch.empty()) {                                                      // 488\n            if (self._phase === PHASE.QUERYING) {                                                                     // 489\n              // While fetching, we decided to go into QUERYING mode, and then we                                     // 490\n              // saw another oplog entry, so _needToFetch is not empty. But we                                        // 491\n              // shouldn't fetch these documents until AFTER the query is done.                                       // 492\n              break;                                                                                                  // 493\n            }                                                                                                         // 494\n                                                                                                                      //\n            // Being in steady phase here would be surprising.                                                        // 496\n            if (self._phase !== PHASE.FETCHING) throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);   // 497\n                                                                                                                      //\n            self._currentlyFetching = self._needToFetch;                                                              // 500\n            var thisGeneration = ++self._fetchGeneration;                                                             // 501\n            self._needToFetch = new LocalCollection._IdMap();                                                         // 502\n            var waiting = 0;                                                                                          // 503\n            var fut = new Future();                                                                                   // 504\n            // This loop is safe, because _currentlyFetching will not be updated                                      // 505\n            // during this loop (in fact, it is never mutated).                                                       // 506\n            self._currentlyFetching.forEach(function (cacheKey, id) {                                                 // 507\n              waiting++;                                                                                              // 508\n              self._mongoHandle._docFetcher.fetch(self._cursorDescription.collectionName, id, cacheKey, finishIfNeedToPollQuery(function (err, doc) {\n                try {                                                                                                 // 512\n                  if (err) {                                                                                          // 513\n                    Meteor._debug(\"Got exception while fetching documents: \" + err);                                  // 514\n                    // If we get an error from the fetcher (eg, trouble                                               // 516\n                    // connecting to Mongo), let's just abandon the fetch phase                                       // 517\n                    // altogether and fall back to polling. It's not like we're                                       // 518\n                    // getting live updates anyway.                                                                   // 519\n                    if (self._phase !== PHASE.QUERYING) {                                                             // 520\n                      self._needToPollQuery();                                                                        // 521\n                    }                                                                                                 // 522\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit                                       // 525\n                    // _pollQuery call (eg, in another fiber) which should                                            // 526\n                    // effectively cancel this round of fetches.  (_pollQuery                                         // 527\n                    // increments the generation.)                                                                    // 528\n                    self._handleDoc(id, doc);                                                                         // 529\n                  }                                                                                                   // 530\n                } finally {                                                                                           // 531\n                  waiting--;                                                                                          // 532\n                  // Because fetch() never calls its callback synchronously,                                          // 533\n                  // this is safe (ie, we won't call fut.return() before the                                          // 534\n                  // forEach is done).                                                                                // 535\n                  if (waiting === 0) fut['return']();                                                                 // 536\n                }                                                                                                     // 538\n              }));                                                                                                    // 539\n            });                                                                                                       // 540\n            fut.wait();                                                                                               // 541\n            // Exit now if we've had a _pollQuery call (here or in another fiber).                                    // 542\n            if (self._phase === PHASE.QUERYING) return;                                                               // 543\n            self._currentlyFetching = null;                                                                           // 545\n          }                                                                                                           // 546\n          // We're done fetching, so we can be steady, unless we've had a                                             // 547\n          // _pollQuery call (here or in another fiber).                                                              // 548\n          if (self._phase !== PHASE.QUERYING) self._beSteady();                                                       // 549\n        }));                                                                                                          // 551\n      });                                                                                                             // 552\n    }                                                                                                                 // 553\n                                                                                                                      //\n    return _fetchModifiedDocuments;                                                                                   // 481\n  }(),                                                                                                                // 481\n  _beSteady: function () {                                                                                            // 554\n    function _beSteady() {                                                                                            // 554\n      var self = this;                                                                                                // 555\n      Meteor._noYieldsAllowed(function () {                                                                           // 556\n        self._registerPhaseChange(PHASE.STEADY);                                                                      // 557\n        var writes = self._writesToCommitWhenWeReachSteady;                                                           // 558\n        self._writesToCommitWhenWeReachSteady = [];                                                                   // 559\n        self._multiplexer.onFlush(function () {                                                                       // 560\n          _.each(writes, function (w) {                                                                               // 561\n            w.committed();                                                                                            // 562\n          });                                                                                                         // 563\n        });                                                                                                           // 564\n      });                                                                                                             // 565\n    }                                                                                                                 // 566\n                                                                                                                      //\n    return _beSteady;                                                                                                 // 554\n  }(),                                                                                                                // 554\n  _handleOplogEntryQuerying: function () {                                                                            // 567\n    function _handleOplogEntryQuerying(op) {                                                                          // 567\n      var self = this;                                                                                                // 568\n      Meteor._noYieldsAllowed(function () {                                                                           // 569\n        self._needToFetch.set(idForOp(op), op.ts.toString());                                                         // 570\n      });                                                                                                             // 571\n    }                                                                                                                 // 572\n                                                                                                                      //\n    return _handleOplogEntryQuerying;                                                                                 // 567\n  }(),                                                                                                                // 567\n  _handleOplogEntrySteadyOrFetching: function () {                                                                    // 573\n    function _handleOplogEntrySteadyOrFetching(op) {                                                                  // 573\n      var self = this;                                                                                                // 574\n      Meteor._noYieldsAllowed(function () {                                                                           // 575\n        var id = idForOp(op);                                                                                         // 576\n        // If we're already fetching this one, or about to, we can't optimize;                                        // 577\n        // make sure that we fetch it again if necessary.                                                             // 578\n        if (self._phase === PHASE.FETCHING && (self._currentlyFetching && self._currentlyFetching.has(id) || self._needToFetch.has(id))) {\n          self._needToFetch.set(id, op.ts.toString());                                                                // 582\n          return;                                                                                                     // 583\n        }                                                                                                             // 584\n                                                                                                                      //\n        if (op.op === 'd') {                                                                                          // 586\n          if (self._published.has(id) || self._limit && self._unpublishedBuffer.has(id)) self._removeMatching(id);    // 587\n        } else if (op.op === 'i') {                                                                                   // 590\n          if (self._published.has(id)) throw new Error(\"insert found for already-existing ID in published\");          // 591\n          if (self._unpublishedBuffer && self._unpublishedBuffer.has(id)) throw new Error(\"insert found for already-existing ID in buffer\");\n                                                                                                                      //\n          // XXX what if selector yields?  for now it can't but later it could                                        // 596\n          // have $where                                                                                              // 597\n          if (self._matcher.documentMatches(op.o).result) self._addMatching(op.o);                                    // 598\n        } else if (op.op === 'u') {                                                                                   // 600\n          // Is this a modifier ($set/$unset, which may require us to poll the                                        // 601\n          // database to figure out if the whole document matches the selector) or                                    // 602\n          // a replacement (in which case we can just directly re-evaluate the                                        // 603\n          // selector)?                                                                                               // 604\n          var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');                                             // 605\n          // If this modifier modifies something inside an EJSON custom type (ie,                                     // 606\n          // anything with EJSON$), then we can't try to use                                                          // 607\n          // LocalCollection._modify, since that just mutates the EJSON encoding,                                     // 608\n          // not the actual object.                                                                                   // 609\n          var canDirectlyModifyDoc = !isReplace && modifierCanBeDirectlyApplied(op.o);                                // 610\n                                                                                                                      //\n          var publishedBefore = self._published.has(id);                                                              // 613\n          var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);                                        // 614\n                                                                                                                      //\n          if (isReplace) {                                                                                            // 616\n            self._handleDoc(id, _.extend({ _id: id }, op.o));                                                         // 617\n          } else if ((publishedBefore || bufferedBefore) && canDirectlyModifyDoc) {                                   // 618\n            // Oh great, we actually know what the document is, so we can apply                                       // 620\n            // this directly.                                                                                         // 621\n            var newDoc = self._published.has(id) ? self._published.get(id) : self._unpublishedBuffer.get(id);         // 622\n            newDoc = EJSON.clone(newDoc);                                                                             // 624\n                                                                                                                      //\n            newDoc._id = id;                                                                                          // 626\n            try {                                                                                                     // 627\n              LocalCollection._modify(newDoc, op.o);                                                                  // 628\n            } catch (e) {                                                                                             // 629\n              if (e.name !== \"MinimongoError\") throw e;                                                               // 630\n              // We didn't understand the modifier.  Re-fetch.                                                        // 632\n              self._needToFetch.set(id, op.ts.toString());                                                            // 633\n              if (self._phase === PHASE.STEADY) {                                                                     // 634\n                self._fetchModifiedDocuments();                                                                       // 635\n              }                                                                                                       // 636\n              return;                                                                                                 // 637\n            }                                                                                                         // 638\n            self._handleDoc(id, self._sharedProjectionFn(newDoc));                                                    // 639\n          } else if (!canDirectlyModifyDoc || self._matcher.canBecomeTrueByModifier(op.o) || self._sorter && self._sorter.affectedByModifier(op.o)) {\n            self._needToFetch.set(id, op.ts.toString());                                                              // 643\n            if (self._phase === PHASE.STEADY) self._fetchModifiedDocuments();                                         // 644\n          }                                                                                                           // 646\n        } else {                                                                                                      // 647\n          throw Error(\"XXX SURPRISING OPERATION: \" + op);                                                             // 648\n        }                                                                                                             // 649\n      });                                                                                                             // 650\n    }                                                                                                                 // 651\n                                                                                                                      //\n    return _handleOplogEntrySteadyOrFetching;                                                                         // 573\n  }(),                                                                                                                // 573\n  // Yields!                                                                                                          // 652\n  _runInitialQuery: function () {                                                                                     // 653\n    function _runInitialQuery() {                                                                                     // 653\n      var self = this;                                                                                                // 654\n      if (self._stopped) throw new Error(\"oplog stopped surprisingly early\");                                         // 655\n                                                                                                                      //\n      self._runQuery({ initial: true }); // yields                                                                    // 658\n                                                                                                                      //\n      if (self._stopped) return; // can happen on queryError                                                          // 660\n                                                                                                                      //\n      // Allow observeChanges calls to return. (After this, it's possible for                                         // 663\n      // stop() to be called.)                                                                                        // 664\n      self._multiplexer.ready();                                                                                      // 665\n                                                                                                                      //\n      self._doneQuerying(); // yields                                                                                 // 667\n    }                                                                                                                 // 668\n                                                                                                                      //\n    return _runInitialQuery;                                                                                          // 653\n  }(),                                                                                                                // 653\n                                                                                                                      //\n  // In various circumstances, we may just want to stop processing the oplog and                                      // 670\n  // re-run the initial query, just as if we were a PollingObserveDriver.                                             // 671\n  //                                                                                                                  // 672\n  // This function may not block, because it is called from an oplog entry                                            // 673\n  // handler.                                                                                                         // 674\n  //                                                                                                                  // 675\n  // XXX We should call this when we detect that we've been in FETCHING for \"too                                      // 676\n  // long\".                                                                                                           // 677\n  //                                                                                                                  // 678\n  // XXX We should call this when we detect Mongo failover (since that might                                          // 679\n  // mean that some of the oplog entries we have processed have been rolled                                           // 680\n  // back). The Node Mongo driver is in the middle of a bunch of huge                                                 // 681\n  // refactorings, including the way that it notifies you when primary                                                // 682\n  // changes. Will put off implementing this until driver 1.4 is out.                                                 // 683\n  _pollQuery: function () {                                                                                           // 684\n    function _pollQuery() {                                                                                           // 684\n      var self = this;                                                                                                // 685\n      Meteor._noYieldsAllowed(function () {                                                                           // 686\n        if (self._stopped) return;                                                                                    // 687\n                                                                                                                      //\n        // Yay, we get to forget about all the things we thought we had to fetch.                                     // 690\n        self._needToFetch = new LocalCollection._IdMap();                                                             // 691\n        self._currentlyFetching = null;                                                                               // 692\n        ++self._fetchGeneration; // ignore any in-flight fetches                                                      // 693\n        self._registerPhaseChange(PHASE.QUERYING);                                                                    // 694\n                                                                                                                      //\n        // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery                                       // 696\n        // here because SwitchedToQuery is not thrown in QUERYING mode.                                               // 697\n        Meteor.defer(function () {                                                                                    // 698\n          self._runQuery();                                                                                           // 699\n          self._doneQuerying();                                                                                       // 700\n        });                                                                                                           // 701\n      });                                                                                                             // 702\n    }                                                                                                                 // 703\n                                                                                                                      //\n    return _pollQuery;                                                                                                // 684\n  }(),                                                                                                                // 684\n                                                                                                                      //\n  // Yields!                                                                                                          // 705\n  _runQuery: function () {                                                                                            // 706\n    function _runQuery(options) {                                                                                     // 706\n      var self = this;                                                                                                // 707\n      options = options || {};                                                                                        // 708\n      var newResults, newBuffer;                                                                                      // 709\n                                                                                                                      //\n      // This while loop is just to retry failures.                                                                   // 711\n      while (true) {                                                                                                  // 712\n        // If we've been stopped, we don't have to run anything any more.                                             // 713\n        if (self._stopped) return;                                                                                    // 714\n                                                                                                                      //\n        newResults = new LocalCollection._IdMap();                                                                    // 717\n        newBuffer = new LocalCollection._IdMap();                                                                     // 718\n                                                                                                                      //\n        // Query 2x documents as the half excluded from the original query will go                                    // 720\n        // into unpublished buffer to reduce additional Mongo lookups in cases                                        // 721\n        // when documents are removed from the published set and need a                                               // 722\n        // replacement.                                                                                               // 723\n        // XXX needs more thought on non-zero skip                                                                    // 724\n        // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for                                      // 725\n        // buffer if such is needed.                                                                                  // 726\n        var cursor = self._cursorForQuery({ limit: self._limit * 2 });                                                // 727\n        try {                                                                                                         // 728\n          cursor.forEach(function (doc, i) {                                                                          // 729\n            // yields                                                                                                 // 729\n            if (!self._limit || i < self._limit) newResults.set(doc._id, doc);else newBuffer.set(doc._id, doc);       // 730\n          });                                                                                                         // 734\n          break;                                                                                                      // 735\n        } catch (e) {                                                                                                 // 736\n          if (options.initial && typeof e.code === 'number') {                                                        // 737\n            // This is an error document sent to us by mongod, not a connection                                       // 738\n            // error generated by the client. And we've never seen this query work                                    // 739\n            // successfully. Probably it's a bad selector or something, so we                                         // 740\n            // should NOT retry. Instead, we should halt the observe (which ends                                      // 741\n            // up calling `stop` on us).                                                                              // 742\n            self._multiplexer.queryError(e);                                                                          // 743\n            return;                                                                                                   // 744\n          }                                                                                                           // 745\n                                                                                                                      //\n          // During failover (eg) if we get an exception we should log and retry                                      // 747\n          // instead of crashing.                                                                                     // 748\n          Meteor._debug(\"Got exception while polling query: \" + e);                                                   // 749\n          Meteor._sleepForMs(100);                                                                                    // 750\n        }                                                                                                             // 751\n      }                                                                                                               // 752\n                                                                                                                      //\n      if (self._stopped) return;                                                                                      // 754\n                                                                                                                      //\n      self._publishNewResults(newResults, newBuffer);                                                                 // 757\n    }                                                                                                                 // 758\n                                                                                                                      //\n    return _runQuery;                                                                                                 // 706\n  }(),                                                                                                                // 706\n                                                                                                                      //\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)                                      // 760\n  // ensures that we will query again later.                                                                          // 761\n  //                                                                                                                  // 762\n  // This function may not block, because it is called from an oplog entry                                            // 763\n  // handler. However, if we were not already in the QUERYING phase, it throws                                        // 764\n  // an exception that is caught by the closest surrounding                                                           // 765\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running                                        // 766\n  // close that was designed for another phase inside PHASE.QUERYING.                                                 // 767\n  //                                                                                                                  // 768\n  // (It's also necessary whenever logic in this file yields to check that other                                      // 769\n  // phases haven't put us into QUERYING mode, though; eg,                                                            // 770\n  // _fetchModifiedDocuments does this.)                                                                              // 771\n  _needToPollQuery: function () {                                                                                     // 772\n    function _needToPollQuery() {                                                                                     // 772\n      var self = this;                                                                                                // 773\n      Meteor._noYieldsAllowed(function () {                                                                           // 774\n        if (self._stopped) return;                                                                                    // 775\n                                                                                                                      //\n        // If we're not already in the middle of a query, we can query now                                            // 778\n        // (possibly pausing FETCHING).                                                                               // 779\n        if (self._phase !== PHASE.QUERYING) {                                                                         // 780\n          self._pollQuery();                                                                                          // 781\n          throw new SwitchedToQuery();                                                                                // 782\n        }                                                                                                             // 783\n                                                                                                                      //\n        // We're currently in QUERYING. Set a flag to ensure that we run another                                      // 785\n        // query when we're done.                                                                                     // 786\n        self._requeryWhenDoneThisQuery = true;                                                                        // 787\n      });                                                                                                             // 788\n    }                                                                                                                 // 789\n                                                                                                                      //\n    return _needToPollQuery;                                                                                          // 772\n  }(),                                                                                                                // 772\n                                                                                                                      //\n  // Yields!                                                                                                          // 791\n  _doneQuerying: function () {                                                                                        // 792\n    function _doneQuerying() {                                                                                        // 792\n      var self = this;                                                                                                // 793\n                                                                                                                      //\n      if (self._stopped) return;                                                                                      // 795\n      self._mongoHandle._oplogHandle.waitUntilCaughtUp(); // yields                                                   // 797\n      if (self._stopped) return;                                                                                      // 798\n      if (self._phase !== PHASE.QUERYING) throw Error(\"Phase unexpectedly \" + self._phase);                           // 800\n                                                                                                                      //\n      Meteor._noYieldsAllowed(function () {                                                                           // 803\n        if (self._requeryWhenDoneThisQuery) {                                                                         // 804\n          self._requeryWhenDoneThisQuery = false;                                                                     // 805\n          self._pollQuery();                                                                                          // 806\n        } else if (self._needToFetch.empty()) {                                                                       // 807\n          self._beSteady();                                                                                           // 808\n        } else {                                                                                                      // 809\n          self._fetchModifiedDocuments();                                                                             // 810\n        }                                                                                                             // 811\n      });                                                                                                             // 812\n    }                                                                                                                 // 813\n                                                                                                                      //\n    return _doneQuerying;                                                                                             // 792\n  }(),                                                                                                                // 792\n                                                                                                                      //\n  _cursorForQuery: function () {                                                                                      // 815\n    function _cursorForQuery(optionsOverwrite) {                                                                      // 815\n      var self = this;                                                                                                // 816\n      return Meteor._noYieldsAllowed(function () {                                                                    // 817\n        // The query we run is almost the same as the cursor we are observing,                                        // 818\n        // with a few changes. We need to read all the fields that are relevant to                                    // 819\n        // the selector, not just the fields we are going to publish (that's the                                      // 820\n        // \"shared\" projection). And we don't want to apply any transform in the                                      // 821\n        // cursor, because observeChanges shouldn't use the transform.                                                // 822\n        var options = _.clone(self._cursorDescription.options);                                                       // 823\n                                                                                                                      //\n        // Allow the caller to modify the options. Useful to specify different                                        // 825\n        // skip and limit values.                                                                                     // 826\n        _.extend(options, optionsOverwrite);                                                                          // 827\n                                                                                                                      //\n        options.fields = self._sharedProjection;                                                                      // 829\n        delete options.transform;                                                                                     // 830\n        // We are NOT deep cloning fields or selector here, which should be OK.                                       // 831\n        var description = new CursorDescription(self._cursorDescription.collectionName, self._cursorDescription.selector, options);\n        return new Cursor(self._mongoHandle, description);                                                            // 836\n      });                                                                                                             // 837\n    }                                                                                                                 // 838\n                                                                                                                      //\n    return _cursorForQuery;                                                                                           // 815\n  }(),                                                                                                                // 815\n                                                                                                                      //\n  // Replace self._published with newResults (both are IdMaps), invoking observe                                      // 841\n  // callbacks on the multiplexer.                                                                                    // 842\n  // Replace self._unpublishedBuffer with newBuffer.                                                                  // 843\n  //                                                                                                                  // 844\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We                                       // 845\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict                                        // 846\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.                                          // 847\n  _publishNewResults: function () {                                                                                   // 848\n    function _publishNewResults(newResults, newBuffer) {                                                              // 848\n      var self = this;                                                                                                // 849\n      Meteor._noYieldsAllowed(function () {                                                                           // 850\n                                                                                                                      //\n        // If the query is limited and there is a buffer, shut down so it doesn't                                     // 852\n        // stay in a way.                                                                                             // 853\n        if (self._limit) {                                                                                            // 854\n          self._unpublishedBuffer.clear();                                                                            // 855\n        }                                                                                                             // 856\n                                                                                                                      //\n        // First remove anything that's gone. Be careful not to modify                                                // 858\n        // self._published while iterating over it.                                                                   // 859\n        var idsToRemove = [];                                                                                         // 860\n        self._published.forEach(function (doc, id) {                                                                  // 861\n          if (!newResults.has(id)) idsToRemove.push(id);                                                              // 862\n        });                                                                                                           // 864\n        _.each(idsToRemove, function (id) {                                                                           // 865\n          self._removePublished(id);                                                                                  // 866\n        });                                                                                                           // 867\n                                                                                                                      //\n        // Now do adds and changes.                                                                                   // 869\n        // If self has a buffer and limit, the new fetched result will be                                             // 870\n        // limited correctly as the query has sort specifier.                                                         // 871\n        newResults.forEach(function (doc, id) {                                                                       // 872\n          self._handleDoc(id, doc);                                                                                   // 873\n        });                                                                                                           // 874\n                                                                                                                      //\n        // Sanity-check that everything we tried to put into _published ended up                                      // 876\n        // there.                                                                                                     // 877\n        // XXX if this is slow, remove it later                                                                       // 878\n        if (self._published.size() !== newResults.size()) {                                                           // 879\n          throw Error(\"The Mongo server and the Meteor query disagree on how \" + \"many documents match your query. Maybe it is hitting a Mongo \" + \"edge case? The query is: \" + EJSON.stringify(self._cursorDescription.selector));\n        }                                                                                                             // 885\n        self._published.forEach(function (doc, id) {                                                                  // 886\n          if (!newResults.has(id)) throw Error(\"_published has a doc that newResults doesn't; \" + id);                // 887\n        });                                                                                                           // 889\n                                                                                                                      //\n        // Finally, replace the buffer                                                                                // 891\n        newBuffer.forEach(function (doc, id) {                                                                        // 892\n          self._addBuffered(id, doc);                                                                                 // 893\n        });                                                                                                           // 894\n                                                                                                                      //\n        self._safeAppendToBuffer = newBuffer.size() < self._limit;                                                    // 896\n      });                                                                                                             // 897\n    }                                                                                                                 // 898\n                                                                                                                      //\n    return _publishNewResults;                                                                                        // 848\n  }(),                                                                                                                // 848\n                                                                                                                      //\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so                                      // 900\n  // it shouldn't actually be possible to call it until the multiplexer is                                            // 901\n  // ready.                                                                                                           // 902\n  //                                                                                                                  // 903\n  // It's important to check self._stopped after every call in this file that                                         // 904\n  // can yield!                                                                                                       // 905\n  stop: function () {                                                                                                 // 906\n    function stop() {                                                                                                 // 906\n      var self = this;                                                                                                // 907\n      if (self._stopped) return;                                                                                      // 908\n      self._stopped = true;                                                                                           // 910\n      _.each(self._stopHandles, function (handle) {                                                                   // 911\n        handle.stop();                                                                                                // 912\n      });                                                                                                             // 913\n                                                                                                                      //\n      // Note: we *don't* use multiplexer.onFlush here because this stop                                              // 915\n      // callback is actually invoked by the multiplexer itself when it has                                           // 916\n      // determined that there are no handles left. So nothing is actually going                                      // 917\n      // to get flushed (and it's probably not valid to call methods on the                                           // 918\n      // dying multiplexer).                                                                                          // 919\n      _.each(self._writesToCommitWhenWeReachSteady, function (w) {                                                    // 920\n        w.committed(); // maybe yields?                                                                               // 921\n      });                                                                                                             // 922\n      self._writesToCommitWhenWeReachSteady = null;                                                                   // 923\n                                                                                                                      //\n      // Proactively drop references to potentially big things.                                                       // 925\n      self._published = null;                                                                                         // 926\n      self._unpublishedBuffer = null;                                                                                 // 927\n      self._needToFetch = null;                                                                                       // 928\n      self._currentlyFetching = null;                                                                                 // 929\n      self._oplogEntryHandle = null;                                                                                  // 930\n      self._listenersHandle = null;                                                                                   // 931\n                                                                                                                      //\n      Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", -1);        // 933\n    }                                                                                                                 // 935\n                                                                                                                      //\n    return stop;                                                                                                      // 906\n  }(),                                                                                                                // 906\n                                                                                                                      //\n  _registerPhaseChange: function () {                                                                                 // 937\n    function _registerPhaseChange(phase) {                                                                            // 937\n      var self = this;                                                                                                // 938\n      Meteor._noYieldsAllowed(function () {                                                                           // 939\n        var now = new Date();                                                                                         // 940\n                                                                                                                      //\n        if (self._phase) {                                                                                            // 942\n          var timeDiff = now - self._phaseStartTime;                                                                  // 943\n          Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n        }                                                                                                             // 946\n                                                                                                                      //\n        self._phase = phase;                                                                                          // 948\n        self._phaseStartTime = now;                                                                                   // 949\n      });                                                                                                             // 950\n    }                                                                                                                 // 951\n                                                                                                                      //\n    return _registerPhaseChange;                                                                                      // 937\n  }()                                                                                                                 // 937\n});                                                                                                                   // 196\n                                                                                                                      //\n// Does our oplog tailing code support this cursor? For now, we are being very                                        // 954\n// conservative and allowing only simple queries with simple options.                                                 // 955\n// (This is a \"static method\".)                                                                                       // 956\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {                                          // 957\n  // First, check the options.                                                                                        // 958\n  var options = cursorDescription.options;                                                                            // 959\n                                                                                                                      //\n  // Did the user say no explicitly?                                                                                  // 961\n  // underscored version of the option is COMPAT with 1.2                                                             // 962\n  if (options.disableOplog || options._disableOplog) return false;                                                    // 963\n                                                                                                                      //\n  // skip is not supported: to support it we would need to keep track of all                                          // 966\n  // \"skipped\" documents or at least their ids.                                                                       // 967\n  // limit w/o a sort specifier is not supported: current implementation needs a                                      // 968\n  // deterministic way to order documents.                                                                            // 969\n  if (options.skip || options.limit && !options.sort) return false;                                                   // 970\n                                                                                                                      //\n  // If a fields projection option is given check if it is supported by                                               // 972\n  // minimongo (some operators are not supported).                                                                    // 973\n  if (options.fields) {                                                                                               // 974\n    try {                                                                                                             // 975\n      LocalCollection._checkSupportedProjection(options.fields);                                                      // 976\n    } catch (e) {                                                                                                     // 977\n      if (e.name === \"MinimongoError\") return false;else throw e;                                                     // 978\n    }                                                                                                                 // 982\n  }                                                                                                                   // 983\n                                                                                                                      //\n  // We don't allow the following selectors:                                                                          // 985\n  //   - $where (not confident that we provide the same JS environment                                                // 986\n  //             as Mongo, and can yield!)                                                                            // 987\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility                                         // 988\n  //            of returning an ID multiple times, though even polling maybe                                          // 989\n  //            have a bug there)                                                                                     // 990\n  //           XXX: once we support it, we would need to think more on how we                                         // 991\n  //           initialize the comparators when we create the driver.                                                  // 992\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();                                                               // 993\n};                                                                                                                    // 994\n                                                                                                                      //\nvar modifierCanBeDirectlyApplied = function modifierCanBeDirectlyApplied(modifier) {                                  // 996\n  return _.all(modifier, function (fields, operation) {                                                               // 997\n    return _.all(fields, function (value, field) {                                                                    // 998\n      return !/EJSON\\$/.test(field);                                                                                  // 999\n    });                                                                                                               // 1000\n  });                                                                                                                 // 1001\n};                                                                                                                    // 1002\n                                                                                                                      //\nMongoInternals.OplogObserveDriver = OplogObserveDriver;                                                               // 1004\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"local_collection_driver.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/local_collection_driver.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nLocalCollectionDriver = function LocalCollectionDriver() {                                                            // 1\n  var self = this;                                                                                                    // 2\n  self.noConnCollections = {};                                                                                        // 3\n};                                                                                                                    // 4\n                                                                                                                      //\nvar ensureCollection = function ensureCollection(name, collections) {                                                 // 6\n  if (!(name in collections)) collections[name] = new LocalCollection(name);                                          // 7\n  return collections[name];                                                                                           // 9\n};                                                                                                                    // 10\n                                                                                                                      //\n_.extend(LocalCollectionDriver.prototype, {                                                                           // 12\n  open: function () {                                                                                                 // 13\n    function open(name, conn) {                                                                                       // 13\n      var self = this;                                                                                                // 14\n      if (!name) return new LocalCollection();                                                                        // 15\n      if (!conn) {                                                                                                    // 17\n        return ensureCollection(name, self.noConnCollections);                                                        // 18\n      }                                                                                                               // 19\n      if (!conn._mongo_livedata_collections) conn._mongo_livedata_collections = {};                                   // 20\n      // XXX is there a way to keep track of a connection's collections without                                       // 22\n      // dangling it off the connection object?                                                                       // 23\n      return ensureCollection(name, conn._mongo_livedata_collections);                                                // 24\n    }                                                                                                                 // 25\n                                                                                                                      //\n    return open;                                                                                                      // 13\n  }()                                                                                                                 // 13\n});                                                                                                                   // 12\n                                                                                                                      //\n// singleton                                                                                                          // 28\nLocalCollectionDriver = new LocalCollectionDriver();                                                                  // 29\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"remote_collection_driver.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/remote_collection_driver.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nMongoInternals.RemoteCollectionDriver = function (mongo_url, options) {                                               // 1\n  var self = this;                                                                                                    // 3\n  self.mongo = new MongoConnection(mongo_url, options);                                                               // 4\n};                                                                                                                    // 5\n                                                                                                                      //\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {                                                           // 7\n  open: function () {                                                                                                 // 8\n    function open(name) {                                                                                             // 8\n      var self = this;                                                                                                // 9\n      var ret = {};                                                                                                   // 10\n      _.each(['find', 'findOne', 'insert', 'update', 'upsert', 'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection', 'dropCollection', 'rawCollection'], function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);                                                             // 16\n      });                                                                                                             // 17\n      return ret;                                                                                                     // 18\n    }                                                                                                                 // 19\n                                                                                                                      //\n    return open;                                                                                                      // 8\n  }()                                                                                                                 // 8\n});                                                                                                                   // 7\n                                                                                                                      //\n// Create the singleton RemoteCollectionDriver only on demand, so we                                                  // 23\n// only require Mongo configuration if it's actually used (eg, not if                                                 // 24\n// you're only trying to receive data from a remote DDP server.)                                                      // 25\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {                                                   // 26\n  var connectionOptions = {};                                                                                         // 27\n                                                                                                                      //\n  var mongoUrl = process.env.MONGO_URL;                                                                               // 29\n                                                                                                                      //\n  if (process.env.MONGO_OPLOG_URL) {                                                                                  // 31\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;                                                         // 32\n  }                                                                                                                   // 33\n                                                                                                                      //\n  if (!mongoUrl) throw new Error(\"MONGO_URL must be set in environment\");                                             // 35\n                                                                                                                      //\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);                                      // 38\n});                                                                                                                   // 39\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"collection.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/collection.js                                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// options.connection, if given, is a LivedataClient or LivedataServer                                                // 1\n// XXX presently there is no way to destroy/clean up a Collection                                                     // 2\n                                                                                                                      //\n/**                                                                                                                   // 4\n * @summary Namespace for MongoDB-related items                                                                       //\n * @namespace                                                                                                         //\n */                                                                                                                   //\nMongo = {};                                                                                                           // 8\n                                                                                                                      //\n/**                                                                                                                   // 10\n * @summary Constructor for a Collection                                                                              //\n * @locus Anywhere                                                                                                    //\n * @instancename collection                                                                                           //\n * @class                                                                                                             //\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]                                                                                          //\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n                                                                                                                      //\n - **`'STRING'`**: random strings                                                                                     //\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                                                 //\n                                                                                                                      //\nThe default id generation technique is `'STRING'`.                                                                    //\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n */                                                                                                                   //\nMongo.Collection = function (name, options) {                                                                         // 27\n  var self = this;                                                                                                    // 28\n  if (!(self instanceof Mongo.Collection)) throw new Error('use \"new\" to construct a Mongo.Collection');              // 29\n                                                                                                                      //\n  if (!name && name !== null) {                                                                                       // 32\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" + \"saved or synchronized over the network. (Pass null for \" + \"the collection name to turn off this warning.)\");\n    name = null;                                                                                                      // 36\n  }                                                                                                                   // 37\n                                                                                                                      //\n  if (name !== null && typeof name !== \"string\") {                                                                    // 39\n    throw new Error(\"First argument to new Mongo.Collection must be a string or null\");                               // 40\n  }                                                                                                                   // 42\n                                                                                                                      //\n  if (options && options.methods) {                                                                                   // 44\n    // Backwards compatibility hack with original signature (which passed                                             // 45\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"                                // 46\n    // method.)                                                                                                       // 47\n    // XXX remove before 1.0                                                                                          // 48\n    options = { connection: options };                                                                                // 49\n  }                                                                                                                   // 50\n  // Backwards compatibility: \"connection\" used to be called \"manager\".                                               // 51\n  if (options && options.manager && !options.connection) {                                                            // 52\n    options.connection = options.manager;                                                                             // 53\n  }                                                                                                                   // 54\n  options = _.extend({                                                                                                // 55\n    connection: undefined,                                                                                            // 56\n    idGeneration: 'STRING',                                                                                           // 57\n    transform: null,                                                                                                  // 58\n    _driver: undefined,                                                                                               // 59\n    _preventAutopublish: false                                                                                        // 60\n  }, options);                                                                                                        // 55\n                                                                                                                      //\n  switch (options.idGeneration) {                                                                                     // 63\n    case 'MONGO':                                                                                                     // 64\n      self._makeNewID = function () {                                                                                 // 65\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                   // 66\n        return new Mongo.ObjectID(src.hexString(24));                                                                 // 69\n      };                                                                                                              // 70\n      break;                                                                                                          // 71\n    case 'STRING':                                                                                                    // 72\n    default:                                                                                                          // 73\n      self._makeNewID = function () {                                                                                 // 74\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                   // 75\n        return src.id();                                                                                              // 78\n      };                                                                                                              // 79\n      break;                                                                                                          // 80\n  }                                                                                                                   // 63\n                                                                                                                      //\n  self._transform = LocalCollection.wrapTransform(options.transform);                                                 // 83\n                                                                                                                      //\n  if (!name || options.connection === null)                                                                           // 85\n    // note: nameless collections never have a connection                                                             // 86\n    self._connection = null;else if (options.connection) self._connection = options.connection;else if (Meteor.isClient) self._connection = Meteor.connection;else self._connection = Meteor.server;\n                                                                                                                      //\n  if (!options._driver) {                                                                                             // 95\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==                                         // 96\n    // null. We should fully support the case of \"want to use a Mongo-backed                                          // 97\n    // collection from Node code without webapp\", but we don't yet.                                                   // 98\n    // #MeteorServerNull                                                                                              // 99\n    if (name && self._connection === Meteor.server && typeof MongoInternals !== \"undefined\" && MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();                                               // 103\n    } else {                                                                                                          // 104\n      options._driver = LocalCollectionDriver;                                                                        // 105\n    }                                                                                                                 // 106\n  }                                                                                                                   // 107\n                                                                                                                      //\n  self._collection = options._driver.open(name, self._connection);                                                    // 109\n  self._name = name;                                                                                                  // 110\n  self._driver = options._driver;                                                                                     // 111\n                                                                                                                      //\n  if (self._connection && self._connection.registerStore) {                                                           // 113\n    // OK, we're going to be a slave, replicating some remote                                                         // 114\n    // database, except possibly with some temporary divergence while                                                 // 115\n    // we have unacknowledged RPC's.                                                                                  // 116\n    var ok = self._connection.registerStore(name, {                                                                   // 117\n      // Called at the beginning of a batch of updates. batchSize is the number                                       // 118\n      // of update calls to expect.                                                                                   // 119\n      //                                                                                                              // 120\n      // XXX This interface is pretty janky. reset probably ought to go back to                                       // 121\n      // being its own function, and callers shouldn't have to calculate                                              // 122\n      // batchSize. The optimization of not calling pause/remove should be                                            // 123\n      // delayed until later: the first call to update() should buffer its                                            // 124\n      // message, and then we can either directly apply it at endUpdate time if                                       // 125\n      // it was the only update, or do pauseObservers/apply/apply at the next                                         // 126\n      // update() if there's another one.                                                                             // 127\n      beginUpdate: function () {                                                                                      // 128\n        function beginUpdate(batchSize, reset) {                                                                      // 128\n          // pause observers so users don't see flicker when updating several                                         // 129\n          // objects at once (including the post-reconnect reset-and-reapply                                          // 130\n          // stage), and so that a re-sorting of a query can take advantage of the                                    // 131\n          // full _diffQuery moved calculation instead of applying change one at a                                    // 132\n          // time.                                                                                                    // 133\n          if (batchSize > 1 || reset) self._collection.pauseObservers();                                              // 134\n                                                                                                                      //\n          if (reset) self._collection.remove({});                                                                     // 137\n        }                                                                                                             // 139\n                                                                                                                      //\n        return beginUpdate;                                                                                           // 128\n      }(),                                                                                                            // 128\n                                                                                                                      //\n      // Apply an update.                                                                                             // 141\n      // XXX better specify this interface (not in terms of a wire message)?                                          // 142\n      update: function () {                                                                                           // 143\n        function update(msg) {                                                                                        // 143\n          var mongoId = MongoID.idParse(msg.id);                                                                      // 144\n          var doc = self._collection.findOne(mongoId);                                                                // 145\n                                                                                                                      //\n          // Is this a \"replace the whole doc\" message coming from the quiescence                                     // 147\n          // of method writes to an object? (Note that 'undefined' is a valid                                         // 148\n          // value meaning \"remove it\".)                                                                              // 149\n          if (msg.msg === 'replace') {                                                                                // 150\n            var replace = msg.replace;                                                                                // 151\n            if (!replace) {                                                                                           // 152\n              if (doc) self._collection.remove(mongoId);                                                              // 153\n            } else if (!doc) {                                                                                        // 155\n              self._collection.insert(replace);                                                                       // 156\n            } else {                                                                                                  // 157\n              // XXX check that replace has no $ ops                                                                  // 158\n              self._collection.update(mongoId, replace);                                                              // 159\n            }                                                                                                         // 160\n            return;                                                                                                   // 161\n          } else if (msg.msg === 'added') {                                                                           // 162\n            if (doc) {                                                                                                // 163\n              throw new Error(\"Expected not to find a document already present for an add\");                          // 164\n            }                                                                                                         // 165\n            self._collection.insert(_.extend({ _id: mongoId }, msg.fields));                                          // 166\n          } else if (msg.msg === 'removed') {                                                                         // 167\n            if (!doc) throw new Error(\"Expected to find a document already present for removed\");                     // 168\n            self._collection.remove(mongoId);                                                                         // 170\n          } else if (msg.msg === 'changed') {                                                                         // 171\n            if (!doc) throw new Error(\"Expected to find a document to change\");                                       // 172\n            if (!_.isEmpty(msg.fields)) {                                                                             // 174\n              var modifier = {};                                                                                      // 175\n              _.each(msg.fields, function (value, key) {                                                              // 176\n                if (value === undefined) {                                                                            // 177\n                  if (!modifier.$unset) modifier.$unset = {};                                                         // 178\n                  modifier.$unset[key] = 1;                                                                           // 180\n                } else {                                                                                              // 181\n                  if (!modifier.$set) modifier.$set = {};                                                             // 182\n                  modifier.$set[key] = value;                                                                         // 184\n                }                                                                                                     // 185\n              });                                                                                                     // 186\n              self._collection.update(mongoId, modifier);                                                             // 187\n            }                                                                                                         // 188\n          } else {                                                                                                    // 189\n            throw new Error(\"I don't know how to deal with this message\");                                            // 190\n          }                                                                                                           // 191\n        }                                                                                                             // 193\n                                                                                                                      //\n        return update;                                                                                                // 143\n      }(),                                                                                                            // 143\n                                                                                                                      //\n      // Called at the end of a batch of updates.                                                                     // 195\n      endUpdate: function () {                                                                                        // 196\n        function endUpdate() {                                                                                        // 196\n          self._collection.resumeObservers();                                                                         // 197\n        }                                                                                                             // 198\n                                                                                                                      //\n        return endUpdate;                                                                                             // 196\n      }(),                                                                                                            // 196\n                                                                                                                      //\n      // Called around method stub invocations to capture the original versions                                       // 200\n      // of modified documents.                                                                                       // 201\n      saveOriginals: function () {                                                                                    // 202\n        function saveOriginals() {                                                                                    // 202\n          self._collection.saveOriginals();                                                                           // 203\n        }                                                                                                             // 204\n                                                                                                                      //\n        return saveOriginals;                                                                                         // 202\n      }(),                                                                                                            // 202\n      retrieveOriginals: function () {                                                                                // 205\n        function retrieveOriginals() {                                                                                // 205\n          return self._collection.retrieveOriginals();                                                                // 206\n        }                                                                                                             // 207\n                                                                                                                      //\n        return retrieveOriginals;                                                                                     // 205\n      }(),                                                                                                            // 205\n                                                                                                                      //\n      // Used to preserve current versions of documents across a store reset.                                         // 209\n      getDoc: function () {                                                                                           // 210\n        function getDoc(id) {                                                                                         // 210\n          return self.findOne(id);                                                                                    // 211\n        }                                                                                                             // 212\n                                                                                                                      //\n        return getDoc;                                                                                                // 210\n      }(),                                                                                                            // 210\n                                                                                                                      //\n      // To be able to get back to the collection from the store.                                                     // 214\n      _getCollection: function () {                                                                                   // 215\n        function _getCollection() {                                                                                   // 215\n          return self;                                                                                                // 216\n        }                                                                                                             // 217\n                                                                                                                      //\n        return _getCollection;                                                                                        // 215\n      }()                                                                                                             // 215\n    });                                                                                                               // 117\n                                                                                                                      //\n    if (!ok) {                                                                                                        // 220\n      var message = \"There is already a collection named \\\"\" + name + \"\\\"\";                                           // 221\n      if (options._suppressSameNameError === true) {                                                                  // 222\n        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined                     // 223\n        // for this collection name, but this will simply be another reference to it and everything                   // 224\n        // should work. However, we have historically thrown an error here, so for now we will                        // 225\n        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in                     // 226\n        // and give this some real world testing.                                                                     // 227\n        console.warn ? console.warn(message) : console.log(message);                                                  // 228\n      } else {                                                                                                        // 229\n        throw new Error(message);                                                                                     // 230\n      }                                                                                                               // 231\n    }                                                                                                                 // 232\n  }                                                                                                                   // 233\n                                                                                                                      //\n  // XXX don't define these until allow or deny is actually used for this                                             // 235\n  // collection. Could be hard if the security rules are only defined on the                                          // 236\n  // server.                                                                                                          // 237\n  if (options.defineMutationMethods !== false) {                                                                      // 238\n    try {                                                                                                             // 239\n      self._defineMutationMethods({ useExisting: options._suppressSameNameError === true });                          // 240\n    } catch (error) {                                                                                                 // 241\n      // Throw a more understandable error on the server for same collection name                                     // 242\n      if (error.message === \"A method named '/\" + name + \"/insert' is already defined\") throw new Error(\"There is already a collection named \\\"\" + name + \"\\\"\");\n      throw error;                                                                                                    // 245\n    }                                                                                                                 // 246\n  }                                                                                                                   // 247\n                                                                                                                      //\n  // autopublish                                                                                                      // 249\n  if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {          // 250\n    self._connection.publish(null, function () {                                                                      // 252\n      return self.find();                                                                                             // 253\n    }, { is_auto: true });                                                                                            // 254\n  }                                                                                                                   // 255\n};                                                                                                                    // 256\n                                                                                                                      //\n///                                                                                                                   // 258\n/// Main collection API                                                                                               // 259\n///                                                                                                                   // 260\n                                                                                                                      //\n                                                                                                                      //\n_.extend(Mongo.Collection.prototype, {                                                                                // 263\n                                                                                                                      //\n  _getFindSelector: function () {                                                                                     // 265\n    function _getFindSelector(args) {                                                                                 // 265\n      if (args.length == 0) return {};else return args[0];                                                            // 266\n    }                                                                                                                 // 270\n                                                                                                                      //\n    return _getFindSelector;                                                                                          // 265\n  }(),                                                                                                                // 265\n                                                                                                                      //\n  _getFindOptions: function () {                                                                                      // 272\n    function _getFindOptions(args) {                                                                                  // 272\n      var self = this;                                                                                                // 273\n      if (args.length < 2) {                                                                                          // 274\n        return { transform: self._transform };                                                                        // 275\n      } else {                                                                                                        // 276\n        check(args[1], Match.Optional(Match.ObjectIncluding({                                                         // 277\n          fields: Match.Optional(Match.OneOf(Object, undefined)),                                                     // 278\n          sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),                                      // 279\n          limit: Match.Optional(Match.OneOf(Number, undefined)),                                                      // 280\n          skip: Match.Optional(Match.OneOf(Number, undefined))                                                        // 281\n        })));                                                                                                         // 277\n                                                                                                                      //\n        return _.extend({                                                                                             // 284\n          transform: self._transform                                                                                  // 285\n        }, args[1]);                                                                                                  // 284\n      }                                                                                                               // 287\n    }                                                                                                                 // 288\n                                                                                                                      //\n    return _getFindOptions;                                                                                           // 272\n  }(),                                                                                                                // 272\n                                                                                                                      //\n  /**                                                                                                                 // 290\n   * @summary Find the documents in a collection that match the selector.                                             //\n   * @locus Anywhere                                                                                                  //\n   * @method find                                                                                                     //\n   * @memberOf Mongo.Collection                                                                                       //\n   * @instance                                                                                                        //\n   * @param {MongoSelector} [selector] A query describing the documents to find                                       //\n   * @param {Object} [options]                                                                                        //\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     //\n   * @param {Number} options.skip Number of results to skip at the beginning                                          //\n   * @param {Number} options.limit Maximum number of results to return                                                //\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           //\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity               //\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).\n   * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.\n   * @returns {Mongo.Cursor}                                                                                          //\n   */                                                                                                                 //\n  find: function () {                                                                                                 // 309\n    function find() /* selector, options */{                                                                          // 309\n      // Collection.find() (return all docs) behaves differently                                                      // 310\n      // from Collection.find(undefined) (return 0 docs).  so be                                                      // 311\n      // careful about the length of arguments.                                                                       // 312\n      var self = this;                                                                                                // 313\n      var argArray = _.toArray(arguments);                                                                            // 314\n      return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray));                  // 315\n    }                                                                                                                 // 317\n                                                                                                                      //\n    return find;                                                                                                      // 309\n  }(),                                                                                                                // 309\n                                                                                                                      //\n  /**                                                                                                                 // 319\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.\n   * @locus Anywhere                                                                                                  //\n   * @method findOne                                                                                                  //\n   * @memberOf Mongo.Collection                                                                                       //\n   * @instance                                                                                                        //\n   * @param {MongoSelector} [selector] A query describing the documents to find                                       //\n   * @param {Object} [options]                                                                                        //\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                     //\n   * @param {Number} options.skip Number of results to skip at the beginning                                          //\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                           //\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity                   //\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}                                                                                                //\n   */                                                                                                                 //\n  findOne: function () {                                                                                              // 334\n    function findOne() /* selector, options */{                                                                       // 334\n      var self = this;                                                                                                // 335\n      var argArray = _.toArray(arguments);                                                                            // 336\n      return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray));               // 337\n    }                                                                                                                 // 339\n                                                                                                                      //\n    return findOne;                                                                                                   // 334\n  }()                                                                                                                 // 334\n                                                                                                                      //\n});                                                                                                                   // 263\n                                                                                                                      //\nMongo.Collection._publishCursor = function (cursor, sub, collection) {                                                // 343\n  var observeHandle = cursor.observeChanges({                                                                         // 344\n    added: function () {                                                                                              // 345\n      function added(id, fields) {                                                                                    // 345\n        sub.added(collection, id, fields);                                                                            // 346\n      }                                                                                                               // 347\n                                                                                                                      //\n      return added;                                                                                                   // 345\n    }(),                                                                                                              // 345\n    changed: function () {                                                                                            // 348\n      function changed(id, fields) {                                                                                  // 348\n        sub.changed(collection, id, fields);                                                                          // 349\n      }                                                                                                               // 350\n                                                                                                                      //\n      return changed;                                                                                                 // 348\n    }(),                                                                                                              // 348\n    removed: function () {                                                                                            // 351\n      function removed(id) {                                                                                          // 351\n        sub.removed(collection, id);                                                                                  // 352\n      }                                                                                                               // 353\n                                                                                                                      //\n      return removed;                                                                                                 // 351\n    }()                                                                                                               // 351\n  });                                                                                                                 // 344\n                                                                                                                      //\n  // We don't call sub.ready() here: it gets called in livedata_server, after                                         // 356\n  // possibly calling _publishCursor on multiple returned cursors.                                                    // 357\n                                                                                                                      //\n  // register stop callback (expects lambda w/ no args).                                                              // 359\n  sub.onStop(function () {                                                                                            // 360\n    observeHandle.stop();                                                                                             // 360\n  });                                                                                                                 // 360\n                                                                                                                      //\n  // return the observeHandle in case it needs to be stopped early                                                    // 362\n  return observeHandle;                                                                                               // 363\n};                                                                                                                    // 364\n                                                                                                                      //\n// protect against dangerous selectors.  falsey and {_id: falsey} are both                                            // 366\n// likely programmer error, and not what you want, particularly for destructive                                       // 367\n// operations.  JS regexps don't serialize over DDP but can be trivially                                              // 368\n// replaced by $regex.                                                                                                // 369\nMongo.Collection._rewriteSelector = function (selector) {                                                             // 370\n  // shorthand -- scalars match _id                                                                                   // 371\n  if (LocalCollection._selectorIsId(selector)) selector = { _id: selector };                                          // 372\n                                                                                                                      //\n  if (_.isArray(selector)) {                                                                                          // 375\n    // This is consistent with the Mongo console itself; if we don't do this                                          // 376\n    // check passing an empty array ends up selecting all items                                                       // 377\n    throw new Error(\"Mongo selector can't be an array.\");                                                             // 378\n  }                                                                                                                   // 379\n                                                                                                                      //\n  if (!selector || '_id' in selector && !selector._id)                                                                // 381\n    // can't match anything                                                                                           // 382\n    return { _id: Random.id() };                                                                                      // 383\n                                                                                                                      //\n  var ret = {};                                                                                                       // 385\n  _.each(selector, function (value, key) {                                                                            // 386\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                                // 387\n    if (value instanceof RegExp) {                                                                                    // 388\n      ret[key] = convertRegexpToMongoSelector(value);                                                                 // 389\n    } else if (value && value.$regex instanceof RegExp) {                                                             // 390\n      ret[key] = convertRegexpToMongoSelector(value.$regex);                                                          // 391\n      // if value is {$regex: /foo/, $options: ...} then $options                                                     // 392\n      // override the ones set on $regex.                                                                             // 393\n      if (value.$options !== undefined) ret[key].$options = value.$options;                                           // 394\n    } else if (_.contains(['$or', '$and', '$nor'], key)) {                                                            // 396\n      // Translate lower levels of $and/$or/$nor                                                                      // 398\n      ret[key] = _.map(value, function (v) {                                                                          // 399\n        return Mongo.Collection._rewriteSelector(v);                                                                  // 400\n      });                                                                                                             // 401\n    } else {                                                                                                          // 402\n      ret[key] = value;                                                                                               // 403\n    }                                                                                                                 // 404\n  });                                                                                                                 // 405\n  return ret;                                                                                                         // 406\n};                                                                                                                    // 407\n                                                                                                                      //\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                                 // 409\n// selector                                                                                                           // 410\nfunction convertRegexpToMongoSelector(regexp) {                                                                       // 411\n  check(regexp, RegExp); // safety belt                                                                               // 412\n                                                                                                                      //\n  var selector = { $regex: regexp.source };                                                                           // 414\n  var regexOptions = '';                                                                                              // 415\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                                                // 416\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                                  // 417\n  if (regexp.ignoreCase) regexOptions += 'i';                                                                         // 418\n  if (regexp.multiline) regexOptions += 'm';                                                                          // 420\n  if (regexOptions) selector.$options = regexOptions;                                                                 // 422\n                                                                                                                      //\n  return selector;                                                                                                    // 425\n};                                                                                                                    // 426\n                                                                                                                      //\n// 'insert' immediately returns the inserted document's new _id.                                                      // 428\n// The others return values immediately if you are in a stub, an in-memory                                            // 429\n// unmanaged collection, or a mongo-backed collection and you don't pass a                                            // 430\n// callback. 'update' and 'remove' return the number of affected                                                      // 431\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                        // 432\n// insert happened, 'insertedId'.                                                                                     // 433\n//                                                                                                                    // 434\n// Otherwise, the semantics are exactly like other methods: they take                                                 // 435\n// a callback as an optional last argument; if no callback is                                                         // 436\n// provided, they block until the operation is complete, and throw an                                                 // 437\n// exception if it fails; if a callback is provided, then they don't                                                  // 438\n// necessarily block, and they call the callback when they finish with error and                                      // 439\n// result arguments.  (The insert method provides the document ID as its result;                                      // 440\n// update and remove provide the number of affected docs as the result; upsert                                        // 441\n// provides an object with numberAffected and maybe insertedId.)                                                      // 442\n//                                                                                                                    // 443\n// On the client, blocking is impossible, so if a callback                                                            // 444\n// isn't provided, they just return immediately and any error                                                         // 445\n// information is lost.                                                                                               // 446\n//                                                                                                                    // 447\n// There's one more tweak. On the client, if you don't provide a                                                      // 448\n// callback, then if there is an error, a message will be logged with                                                 // 449\n// Meteor._debug.                                                                                                     // 450\n//                                                                                                                    // 451\n// The intent (though this is actually determined by the underlying                                                   // 452\n// drivers) is that the operations should be done synchronously, not                                                  // 453\n// generating their result until the database has acknowledged                                                        // 454\n// them. In the future maybe we should provide a flag to turn this                                                    // 455\n// off.                                                                                                               // 456\n                                                                                                                      //\n/**                                                                                                                   // 458\n * @summary Insert a document in the collection.  Returns its unique _id.                                             //\n * @locus Anywhere                                                                                                    //\n * @method  insert                                                                                                    //\n * @memberOf Mongo.Collection                                                                                         //\n * @instance                                                                                                          //\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */                                                                                                                   //\nMongo.Collection.prototype.insert = function () {                                                                     // 467\n  function insert(doc, callback) {                                                                                    // 467\n    // Make sure we were passed a document to insert                                                                  // 468\n    if (!doc) {                                                                                                       // 469\n      throw new Error(\"insert requires an argument\");                                                                 // 470\n    }                                                                                                                 // 471\n                                                                                                                      //\n    // Shallow-copy the document and possibly generate an ID                                                          // 473\n    doc = _.extend({}, doc);                                                                                          // 474\n                                                                                                                      //\n    if ('_id' in doc) {                                                                                               // 476\n      if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {                          // 477\n        throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");                  // 479\n      }                                                                                                               // 480\n    } else {                                                                                                          // 481\n      var generateId = true;                                                                                          // 482\n                                                                                                                      //\n      // Don't generate the id if we're the client and the 'outermost' call                                           // 484\n      // This optimization saves us passing both the randomSeed and the id                                            // 485\n      // Passing both is redundant.                                                                                   // 486\n      if (this._isRemoteCollection()) {                                                                               // 487\n        var enclosing = DDP._CurrentInvocation.get();                                                                 // 488\n        if (!enclosing) {                                                                                             // 489\n          generateId = false;                                                                                         // 490\n        }                                                                                                             // 491\n      }                                                                                                               // 492\n                                                                                                                      //\n      if (generateId) {                                                                                               // 494\n        doc._id = this._makeNewID();                                                                                  // 495\n      }                                                                                                               // 496\n    }                                                                                                                 // 497\n                                                                                                                      //\n    // On inserts, always return the id that we generated; on all other                                               // 499\n    // operations, just return the result from the collection.                                                        // 500\n    var chooseReturnValueFromCollectionResult = function () {                                                         // 501\n      function chooseReturnValueFromCollectionResult(result) {                                                        // 501\n        if (doc._id) {                                                                                                // 502\n          return doc._id;                                                                                             // 503\n        }                                                                                                             // 504\n                                                                                                                      //\n        // XXX what is this for??                                                                                     // 506\n        // It's some iteraction between the callback to _callMutatorMethod and                                        // 507\n        // the return value conversion                                                                                // 508\n        doc._id = result;                                                                                             // 509\n                                                                                                                      //\n        return result;                                                                                                // 511\n      }                                                                                                               // 512\n                                                                                                                      //\n      return chooseReturnValueFromCollectionResult;                                                                   // 501\n    }();                                                                                                              // 501\n                                                                                                                      //\n    var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);                              // 514\n                                                                                                                      //\n    if (this._isRemoteCollection()) {                                                                                 // 517\n      var result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);                                         // 518\n      return chooseReturnValueFromCollectionResult(result);                                                           // 519\n    }                                                                                                                 // 520\n                                                                                                                      //\n    // it's my collection.  descend into the collection object                                                        // 522\n    // and propagate any exception.                                                                                   // 523\n    try {                                                                                                             // 524\n      // If the user provided a callback and the collection implements this                                           // 525\n      // operation asynchronously, then queryRet will be undefined, and the                                           // 526\n      // result will be returned through the callback instead.                                                        // 527\n      var _result = this._collection.insert(doc, wrappedCallback);                                                    // 528\n      return chooseReturnValueFromCollectionResult(_result);                                                          // 529\n    } catch (e) {                                                                                                     // 530\n      if (callback) {                                                                                                 // 531\n        callback(e);                                                                                                  // 532\n        return null;                                                                                                  // 533\n      }                                                                                                               // 534\n      throw e;                                                                                                        // 535\n    }                                                                                                                 // 536\n  }                                                                                                                   // 537\n                                                                                                                      //\n  return insert;                                                                                                      // 467\n}();                                                                                                                  // 467\n                                                                                                                      //\n/**                                                                                                                   // 539\n * @summary Modify one or more documents in the collection. Returns the number of matched documents.                  //\n * @locus Anywhere                                                                                                    //\n * @method update                                                                                                     //\n * @memberOf Mongo.Collection                                                                                         //\n * @instance                                                                                                          //\n * @param {MongoSelector} selector Specifies which documents to modify                                                //\n * @param {MongoModifier} modifier Specifies how to modify the documents                                              //\n * @param {Object} [options]                                                                                          //\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.                      //\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                   //\nMongo.Collection.prototype.update = function () {                                                                     // 552\n  function update(selector, modifier) {                                                                               // 552\n    for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      optionsAndCallback[_key - 2] = arguments[_key];                                                                 // 552\n    }                                                                                                                 // 552\n                                                                                                                      //\n    var callback = popCallbackFromArgs(optionsAndCallback);                                                           // 553\n                                                                                                                      //\n    selector = Mongo.Collection._rewriteSelector(selector);                                                           // 555\n                                                                                                                      //\n    // We've already popped off the callback, so we are left with an array                                            // 557\n    // of one or zero items                                                                                           // 558\n    var options = _.clone(optionsAndCallback[0]) || {};                                                               // 559\n    if (options && options.upsert) {                                                                                  // 560\n      // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                             // 561\n      if (options.insertedId) {                                                                                       // 562\n        if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error(\"insertedId must be string or ObjectID\");\n      } else if (!selector._id) {                                                                                     // 566\n        options.insertedId = this._makeNewID();                                                                       // 567\n      }                                                                                                               // 568\n    }                                                                                                                 // 569\n                                                                                                                      //\n    var wrappedCallback = wrapCallback(callback);                                                                     // 571\n                                                                                                                      //\n    if (this._isRemoteCollection()) {                                                                                 // 573\n      var args = [selector, modifier, options];                                                                       // 574\n                                                                                                                      //\n      return this._callMutatorMethod(\"update\", args, wrappedCallback);                                                // 580\n    }                                                                                                                 // 581\n                                                                                                                      //\n    // it's my collection.  descend into the collection object                                                        // 583\n    // and propagate any exception.                                                                                   // 584\n    try {                                                                                                             // 585\n      // If the user provided a callback and the collection implements this                                           // 586\n      // operation asynchronously, then queryRet will be undefined, and the                                           // 587\n      // result will be returned through the callback instead.                                                        // 588\n      return this._collection.update(selector, modifier, options, wrappedCallback);                                   // 589\n    } catch (e) {                                                                                                     // 591\n      if (callback) {                                                                                                 // 592\n        callback(e);                                                                                                  // 593\n        return null;                                                                                                  // 594\n      }                                                                                                               // 595\n      throw e;                                                                                                        // 596\n    }                                                                                                                 // 597\n  }                                                                                                                   // 598\n                                                                                                                      //\n  return update;                                                                                                      // 552\n}();                                                                                                                  // 552\n                                                                                                                      //\n/**                                                                                                                   // 600\n * @summary Remove documents from the collection                                                                      //\n * @locus Anywhere                                                                                                    //\n * @method remove                                                                                                     //\n * @memberOf Mongo.Collection                                                                                         //\n * @instance                                                                                                          //\n * @param {MongoSelector} selector Specifies which documents to remove                                                //\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.                   //\n */                                                                                                                   //\nMongo.Collection.prototype.remove = function () {                                                                     // 609\n  function remove(selector, callback) {                                                                               // 609\n    selector = Mongo.Collection._rewriteSelector(selector);                                                           // 610\n                                                                                                                      //\n    var wrappedCallback = wrapCallback(callback);                                                                     // 612\n                                                                                                                      //\n    if (this._isRemoteCollection()) {                                                                                 // 614\n      return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);                                          // 615\n    }                                                                                                                 // 616\n                                                                                                                      //\n    // it's my collection.  descend into the collection object                                                        // 618\n    // and propagate any exception.                                                                                   // 619\n    try {                                                                                                             // 620\n      // If the user provided a callback and the collection implements this                                           // 621\n      // operation asynchronously, then queryRet will be undefined, and the                                           // 622\n      // result will be returned through the callback instead.                                                        // 623\n      return this._collection.remove(selector, wrappedCallback);                                                      // 624\n    } catch (e) {                                                                                                     // 625\n      if (callback) {                                                                                                 // 626\n        callback(e);                                                                                                  // 627\n        return null;                                                                                                  // 628\n      }                                                                                                               // 629\n      throw e;                                                                                                        // 630\n    }                                                                                                                 // 631\n  }                                                                                                                   // 632\n                                                                                                                      //\n  return remove;                                                                                                      // 609\n}();                                                                                                                  // 609\n                                                                                                                      //\n// Determine if this collection is simply a minimongo representation of a real                                        // 634\n// database on another server                                                                                         // 635\nMongo.Collection.prototype._isRemoteCollection = function () {                                                        // 636\n  function _isRemoteCollection() {                                                                                    // 636\n    // XXX see #MeteorServerNull                                                                                      // 637\n    return this._connection && this._connection !== Meteor.server;                                                    // 638\n  }                                                                                                                   // 639\n                                                                                                                      //\n  return _isRemoteCollection;                                                                                         // 636\n}();                                                                                                                  // 636\n                                                                                                                      //\n// Convert the callback to not return a result if there is an error                                                   // 641\nfunction wrapCallback(callback, convertResult) {                                                                      // 642\n  if (!callback) {                                                                                                    // 643\n    return;                                                                                                           // 644\n  }                                                                                                                   // 645\n                                                                                                                      //\n  // If no convert function was passed in, just use a \"blank function\"                                                // 647\n  convertResult = convertResult || _.identity;                                                                        // 648\n                                                                                                                      //\n  return function (error, result) {                                                                                   // 650\n    callback(error, !error && convertResult(result));                                                                 // 651\n  };                                                                                                                  // 652\n}                                                                                                                     // 653\n                                                                                                                      //\n/**                                                                                                                   // 655\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere                                                                                                    //\n * @param {MongoSelector} selector Specifies which documents to modify                                                //\n * @param {MongoModifier} modifier Specifies how to modify the documents                                              //\n * @param {Object} [options]                                                                                          //\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                   //\nMongo.Collection.prototype.upsert = function () {                                                                     // 664\n  function upsert(selector, modifier, options, callback) {                                                            // 664\n    if (!callback && typeof options === \"function\") {                                                                 // 666\n      callback = options;                                                                                             // 667\n      options = {};                                                                                                   // 668\n    }                                                                                                                 // 669\n                                                                                                                      //\n    var updateOptions = _.extend({}, options, {                                                                       // 671\n      _returnObject: true,                                                                                            // 672\n      upsert: true                                                                                                    // 673\n    });                                                                                                               // 671\n                                                                                                                      //\n    return this.update(selector, modifier, updateOptions, callback);                                                  // 676\n  }                                                                                                                   // 677\n                                                                                                                      //\n  return upsert;                                                                                                      // 664\n}();                                                                                                                  // 664\n                                                                                                                      //\n// We'll actually design an index API later. For now, we just pass through to                                         // 679\n// Mongo's, but make it synchronous.                                                                                  // 680\nMongo.Collection.prototype._ensureIndex = function (index, options) {                                                 // 681\n  var self = this;                                                                                                    // 682\n  if (!self._collection._ensureIndex) throw new Error(\"Can only call _ensureIndex on server collections\");            // 683\n  self._collection._ensureIndex(index, options);                                                                      // 685\n};                                                                                                                    // 686\nMongo.Collection.prototype._dropIndex = function (index) {                                                            // 687\n  var self = this;                                                                                                    // 688\n  if (!self._collection._dropIndex) throw new Error(\"Can only call _dropIndex on server collections\");                // 689\n  self._collection._dropIndex(index);                                                                                 // 691\n};                                                                                                                    // 692\nMongo.Collection.prototype._dropCollection = function () {                                                            // 693\n  var self = this;                                                                                                    // 694\n  if (!self._collection.dropCollection) throw new Error(\"Can only call _dropCollection on server collections\");       // 695\n  self._collection.dropCollection();                                                                                  // 697\n};                                                                                                                    // 698\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                              // 699\n  var self = this;                                                                                                    // 700\n  if (!self._collection._createCappedCollection) throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);                                                   // 703\n};                                                                                                                    // 704\n                                                                                                                      //\n/**                                                                                                                   // 706\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                      //\n */                                                                                                                   //\nMongo.Collection.prototype.rawCollection = function () {                                                              // 710\n  var self = this;                                                                                                    // 711\n  if (!self._collection.rawCollection) {                                                                              // 712\n    throw new Error(\"Can only call rawCollection on server collections\");                                             // 713\n  }                                                                                                                   // 714\n  return self._collection.rawCollection();                                                                            // 715\n};                                                                                                                    // 716\n                                                                                                                      //\n/**                                                                                                                   // 718\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                      //\n */                                                                                                                   //\nMongo.Collection.prototype.rawDatabase = function () {                                                                // 722\n  var self = this;                                                                                                    // 723\n  if (!(self._driver.mongo && self._driver.mongo.db)) {                                                               // 724\n    throw new Error(\"Can only call rawDatabase on server collections\");                                               // 725\n  }                                                                                                                   // 726\n  return self._driver.mongo.db;                                                                                       // 727\n};                                                                                                                    // 728\n                                                                                                                      //\n/**                                                                                                                   // 731\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere                                                                                                    //\n * @class                                                                                                             //\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create             //\n */                                                                                                                   //\nMongo.ObjectID = MongoID.ObjectID;                                                                                    // 737\n                                                                                                                      //\n/**                                                                                                                   // 739\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.            //\n * @class                                                                                                             //\n * @instanceName cursor                                                                                               //\n */                                                                                                                   //\nMongo.Cursor = LocalCollection.Cursor;                                                                                // 744\n                                                                                                                      //\n/**                                                                                                                   // 746\n * @deprecated in 0.9.1                                                                                               //\n */                                                                                                                   //\nMongo.Collection.Cursor = Mongo.Cursor;                                                                               // 749\n                                                                                                                      //\n/**                                                                                                                   // 751\n * @deprecated in 0.9.1                                                                                               //\n */                                                                                                                   //\nMongo.Collection.ObjectID = Mongo.ObjectID;                                                                           // 754\n                                                                                                                      //\n/**                                                                                                                   // 756\n * @deprecated in 0.9.1                                                                                               //\n */                                                                                                                   //\nMeteor.Collection = Mongo.Collection;                                                                                 // 759\n                                                                                                                      //\n// Allow deny stuff is now in the allow-deny package                                                                  // 761\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);                                                 // 762\n                                                                                                                      //\nfunction popCallbackFromArgs(args) {                                                                                  // 764\n  // Pull off any callback (or perhaps a 'callback' variable that was passed                                          // 765\n  // in undefined, like how 'upsert' does it).                                                                        // 766\n  if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {            // 767\n    return args.pop();                                                                                                // 770\n  }                                                                                                                   // 771\n}                                                                                                                     // 772\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection_options.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mongo/connection_options.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**                                                                                                                   // 1\n * @summary Allows for user specified connection options                                                              //\n * @example http://mongodb.github.io/node-mongodb-native/2.2/reference/connecting/connection-settings/                //\n * @locus Server                                                                                                      //\n * @param {Object} options User specified Mongo connection options                                                    //\n */                                                                                                                   //\nMongo.setConnectionOptions = function () {                                                                            // 7\n  function setConnectionOptions(options) {                                                                            // 7\n    check(options, Object);                                                                                           // 8\n    Mongo._connectionOptions = options;                                                                               // 9\n  }                                                                                                                   // 10\n                                                                                                                      //\n  return setConnectionOptions;                                                                                        // 7\n}();                                                                                                                  // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/mongo/mongo_driver.js\");\nrequire(\"./node_modules/meteor/mongo/oplog_tailing.js\");\nrequire(\"./node_modules/meteor/mongo/observe_multiplex.js\");\nrequire(\"./node_modules/meteor/mongo/doc_fetcher.js\");\nrequire(\"./node_modules/meteor/mongo/polling_observe_driver.js\");\nrequire(\"./node_modules/meteor/mongo/oplog_observe_driver.js\");\nrequire(\"./node_modules/meteor/mongo/local_collection_driver.js\");\nrequire(\"./node_modules/meteor/mongo/remote_collection_driver.js\");\nrequire(\"./node_modules/meteor/mongo/collection.js\");\nrequire(\"./node_modules/meteor/mongo/connection_options.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.mongo = {}, {\n  MongoInternals: MongoInternals,\n  MongoTest: MongoTest,\n  Mongo: Mongo\n});\n\n})();\n","servePath":"/packages/mongo.js","sourceMap":{"version":3,"sources":["/packages/mongo/mongo_driver.js","/packages/mongo/oplog_tailing.js","/packages/mongo/observe_multiplex.js","/packages/mongo/doc_fetcher.js","/packages/mongo/polling_observe_driver.js","/packages/mongo/oplog_observe_driver.js","/packages/mongo/local_collection_driver.js","/packages/mongo/remote_collection_driver.js","/packages/mongo/collection.js","/packages/mongo/connection_options.js"],"names":["path","Npm","require","MongoDB","NpmModuleMongodb","Fiber","Future","join","MongoInternals","MongoTest","NpmModules","mongodb","version","NpmModuleMongodbVersion","module","NpmModule","replaceNames","filter","thing","_","isArray","map","bind","ret","each","value","key","Timestamp","prototype","clone","makeMongoLegal","name","unmakeMongoLegal","substr","replaceMongoAtomWithMeteor","document","Binary","buffer","Uint8Array","ObjectID","Mongo","toHexString","size","EJSON","fromJSONValue","undefined","replaceMeteorAtomWithMongo","isBinary","Buffer","_isCustomType","toJSONValue","replaceTypes","atomTransformer","replacedTopLevelAtom","val","valReplaced","MongoConnection","url","options","self","_observeMultiplexers","_onFailoverHook","Hook","mongoOptions","extend","db","safe","server","autoReconnect","reconnectTries","Infinity","replSet","_connectionOptions","test","native_parser","has","poolSize","_primary","_oplogHandle","_docFetcher","connectFuture","connect","Meteor","bindEnvironment","err","serverConfig","isMasterDoc","primary","on","kind","doc","callback","me","resolver","wait","oplogUrl","Package","OplogHandle","databaseName","DocFetcher","close","Error","oplogHandle","stop","wrap","rawCollection","collectionName","future","collection","_createCappedCollection","byteSize","maxDocuments","createCollection","capped","max","_maybeBeginWrite","fence","DDPServer","_CurrentWriteFence","get","beginWrite","committed","_onFailover","register","writeCallback","write","refresh","result","refreshErr","bindEnvironmentForWrite","_insert","collection_name","sendError","e","expected","LocalCollection","_isPlainObject","id","_id","insert","_refresh","selector","refreshKey","specificIds","_idsMatchedBySelector","_remove","wrappedCallback","driverResult","transformResult","numberAffected","remove","_dropCollection","cb","dropCollection","drop","_dropDatabase","dropDatabase","_update","mod","Function","mongoOpts","upsert","multi","fullResult","mongoSelector","mongoMod","isModify","isModificationMod","knownId","_forbidReplace","insertedId","simulateUpsertWithInsertedId","_returnObject","update","meteorResult","isReplace","k","mongoResult","upserted","length","n","NUM_OPTIMISTIC_TRIES","_isCannotChangeIdError","code","errmsg","indexOf","newDoc","selectorDoc","_removeDollarOperators","trail","split","obj","leaf","pop","shift","_modify","isInsert","mongoOptsForUpdate","mongoOptsForInsert","tries","doUpdate","doConditionalInsert","replacementWithId","method","wrapAsync","apply","arguments","find","Cursor","CursorDescription","findOne","limit","fetch","_ensureIndex","index","indexName","ensureIndex","_dropIndex","dropIndex","Collection","_rewriteSelector","mongo","cursorDescription","_mongo","_cursorDescription","_synchronousCursor","tailable","_createSynchronousCursor","selfForIteration","useTransform","rewind","getTransform","transform","_publishCursor","sub","_getCollectionName","observe","callbacks","_observeFromObserveChanges","observeChanges","ordered","_observeChangesCallbacksAreOrdered","_observeChanges","pick","cursorOptions","sort","skip","awaitdata","numberOfRetries","OPLOG_COLLECTION","ts","oplogReplay","dbCursor","fields","SynchronousCursor","_dbCursor","_selfForIteration","_transform","wrapTransform","_synchronousNextObject","nextObject","_synchronousCount","count","_visitedIds","_IdMap","_nextObject","set","forEach","thisArg","_rewind","call","res","push","identity","applySkipLimit","getRawObjects","results","tail","docCallback","cursor","stopped","lastTS","loop","newSelector","$gt","setTimeout","defer","_observeChangesTailable","observeKey","JSON","stringify","multiplexer","observeDriver","firstHandle","_noYieldsAllowed","ObserveMultiplexer","onStop","observeHandle","ObserveHandle","matcher","sorter","canUseOplog","all","_testOnlyPollCallback","Minimongo","Matcher","OplogObserveDriver","cursorSupported","Sorter","f","driverClass","PollingObserveDriver","mongoHandle","_observeDriver","addHandleAndSendInitialAdds","listenAll","listenCallback","listeners","forEachTrigger","trigger","_InvalidationCrossbar","listen","listener","triggerCallback","addedBefore","added","MongoTimestamp","Connection","TOO_FAR_BEHIND","process","env","METEOR_OPLOG_TOO_FAR_BEHIND","showTS","getHighBits","getLowBits","idForOp","op","o","o2","dbName","_oplogUrl","_dbName","_oplogLastEntryConnection","_oplogTailConnection","_stopped","_tailHandle","_readyFuture","_crossbar","_Crossbar","factPackage","factName","_baseOplogSelector","ns","RegExp","_escapeRegExp","$or","$in","$exists","_catchingUpFutures","_lastProcessedTS","_onSkippedEntriesHook","debugPrintExceptions","_entryQueue","_DoubleEndedQueue","_workerActive","_startTailing","onOplogEntry","originalCallback","notification","_debug","stack","listenHandle","onSkippedEntries","waitUntilCaughtUp","lastEntry","$natural","_sleepForMs","lessThanOrEqual","insertAfter","greaterThan","splice","mongodbUri","parse","database","admin","command","ismaster","setName","lastOplogEntry","oplogSelector","_maybeStartWorker","isEmpty","clear","_setLastProcessedTS","fire","sequencer","_defineTooFarBehind","_resetTooFarBehind","facts","Facts","incrementServerFact","_ordered","_onStop","_queue","_SynchronousQueue","_handles","_cache","_CachingChangeObserver","_addHandleTasksScheduledButNotPerformed","callbackNames","callbackName","_applyCallback","toArray","handle","safeToRunTask","runTask","_sendAdds","removeHandle","_ready","_stop","fromQueryError","ready","queueTask","queryError","onFlush","isResolved","args","applyChange","keys","handleId","add","_addedBefore","_added","docs","nextObserveHandleId","_multiplexer","before","mongoConnection","_mongoConnection","_callbacksForCacheKey","cacheKey","check","String","clonedDoc","run","_mongoHandle","_stopCallbacks","_results","_pollsScheduledButNotStarted","_pendingWrites","_ensurePollIsScheduled","throttle","_unthrottledEnsurePollIsScheduled","pollingThrottleMs","_taskQueue","listenersHandle","pollingInterval","pollingIntervalMs","_pollingInterval","intervalHandle","setInterval","clearInterval","_pollMongo","_suspendPolling","_resumePolling","first","oldResults","writesForCycle","newResults","message","Array","_diffQueryChanges","w","c","PHASE","QUERYING","FETCHING","STEADY","SwitchedToQuery","finishIfNeedToPollQuery","currentId","_usesOplog","comparator","getComparator","heapOptions","IdMap","_limit","_comparator","_sorter","_unpublishedBuffer","MinMaxHeap","_published","MaxHeap","_safeAppendToBuffer","_stopHandles","_registerPhaseChange","_matcher","projection","_projectionFn","_compileProjection","_sharedProjection","combineIntoProjection","_sharedProjectionFn","_needToFetch","_currentlyFetching","_fetchGeneration","_requeryWhenDoneThisQuery","_writesToCommitWhenWeReachSteady","_needToPollQuery","_phase","_handleOplogEntryQuerying","_handleOplogEntrySteadyOrFetching","fired","_oplogObserveDrivers","onBeforeFire","drivers","driver","_runInitialQuery","_addPublished","overflowingDocId","maxElementId","overflowingDoc","equals","removed","_addBuffered","_removePublished","empty","newDocId","minElementId","_removeBuffered","_changePublished","oldDoc","projectedNew","projectedOld","changed","DiffSequence","makeChangedFields","maxBufferedId","_addMatching","maxPublished","maxBuffered","toPublish","canAppendToBuffer","canInsertIntoBuffer","toBuffer","_removeMatching","_handleDoc","matchesNow","documentMatches","publishedBefore","bufferedBefore","cachedBefore","minBuffered","staysInPublished","staysInBuffer","_fetchModifiedDocuments","thisGeneration","waiting","fut","_beSteady","writes","toString","canDirectlyModifyDoc","modifierCanBeDirectlyApplied","canBecomeTrueByModifier","affectedByModifier","_runQuery","initial","_doneQuerying","_pollQuery","newBuffer","_cursorForQuery","i","_publishNewResults","optionsOverwrite","description","idsToRemove","_oplogEntryHandle","_listenersHandle","phase","now","Date","timeDiff","_phaseStartTime","disableOplog","_disableOplog","_checkSupportedProjection","hasWhere","hasGeoQuery","modifier","operation","field","LocalCollectionDriver","noConnCollections","ensureCollection","collections","open","conn","_mongo_livedata_collections","RemoteCollectionDriver","mongo_url","m","defaultRemoteCollectionDriver","once","connectionOptions","mongoUrl","MONGO_URL","MONGO_OPLOG_URL","methods","connection","manager","idGeneration","_driver","_preventAutopublish","_makeNewID","src","DDP","randomStream","Random","insecure","hexString","_connection","isClient","_collection","_name","registerStore","ok","beginUpdate","batchSize","reset","pauseObservers","msg","mongoId","MongoID","idParse","replace","$unset","$set","endUpdate","resumeObservers","saveOriginals","retrieveOriginals","getDoc","_getCollection","_suppressSameNameError","console","warn","log","defineMutationMethods","_defineMutationMethods","useExisting","error","autopublish","publish","is_auto","_getFindSelector","_getFindOptions","Match","Optional","ObjectIncluding","OneOf","Object","Number","argArray","_selectorIsId","convertRegexpToMongoSelector","$regex","$options","contains","v","regexp","source","regexOptions","ignoreCase","multiline","generateId","_isRemoteCollection","enclosing","_CurrentInvocation","chooseReturnValueFromCollectionResult","wrapCallback","_callMutatorMethod","optionsAndCallback","popCallbackFromArgs","convertResult","updateOptions","rawDatabase","AllowDeny","CollectionPrototype","setConnectionOptions"],"mappings":"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","file":"/packages/mongo.js","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]\n      && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  var mongoOptions = _.extend({\n    db: { safe: true },\n    // http://mongodb.github.io/node-mongodb-native/2.2/api/Server.html\n    server: {\n      // Reconnect on error.\n      autoReconnect: true,\n      // Try to reconnect forever, instead of stopping after 30 tries (the\n      // default), with each attempt separated by 1000ms.\n      reconnectTries: Infinity\n    },\n    replSet: {}\n  }, Mongo._connectionOptions);\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // Internally the oplog connections specify their own poolSize\n  // which we don't want to overwrite with any user defined value\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n\n  var connectFuture = new Future;\n  MongoDB.connect(\n    url,\n    mongoOptions,\n    Meteor.bindEnvironment(\n      function (err, db) {\n        if (err) {\n          throw err;\n        }\n\n        // First, figure out what the current primary is, if any.\n        if (db.serverConfig.isMasterDoc) {\n          self._primary = db.serverConfig.isMasterDoc.primary;\n        }\n\n        db.serverConfig.on(\n          'joined', Meteor.bindEnvironment(function (kind, doc) {\n            if (kind === 'primary') {\n              if (doc.primary !== self._primary) {\n                self._primary = doc.primary;\n                self._onFailoverHook.each(function (callback) {\n                  callback();\n                  return true;\n                });\n              }\n            } else if (doc.me === self._primary) {\n              // The thing we thought was primary is now something other than\n              // primary.  Forget that we thought it was primary.  (This means\n              // that if a server stops being primary and then starts being\n              // primary again without another server becoming primary in the\n              // middle, we'll correctly count it as a failover.)\n              self._primary = null;\n            }\n          }));\n\n        // Allow the constructor to return.\n        connectFuture['return'](db);\n      },\n      connectFuture.resolver()  // onException\n    )\n  );\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future;\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence)\n    return fence.beginWrite();\n  else\n    return {committed: function () {}};\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback)\n      callback(err, result);\n    else if (err)\n      throw err;\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    var wrappedCallback = function(err, driverResult) {\n      callback(err, transformResult(driverResult).numberAffected);\n    };\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                       {safe: true}, wrappedCallback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n    return;\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && ! isModify) {\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.upsert && (! knownId) && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod,\n        isModify, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (err, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject)\n            callback(err, result.numberAffected);\n          else\n            callback(err, result);\n        }\n      );\n    } else {\n      collection.update(\n        mongoSelector, mongoMod, mongoOpts,\n        bindEnvironmentForWrite(function (err, result) {\n          if (! err) {\n            var meteorResult = transformResult(result);\n            if (meteorResult && options._returnObject) {\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n\n              if (options.upsert && meteorResult.insertedId && knownId) {\n                meteorResult.insertedId = knownId;\n              }\n              callback(err, meteorResult);\n            } else {\n              callback(err, meteorResult.numberAffected);\n            }\n          } else {\n            callback(err);\n          }\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function (mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in mod) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\n      \"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar transformResult = function (driverResult) {\n  var meteorResult = { numberAffected: 0 };\n  if (driverResult) {\n    mongoResult = driverResult.result;\n\n    // On updates with upsert:true, the inserted values come as a list of\n    // upserted values -- even with options.multi, when the upsert does insert,\n    // it only inserts one element.\n    if (mongoResult.upserted) {\n      meteorResult.numberAffected += mongoResult.upserted.length;\n\n      if (mongoResult.upserted.length == 1) {\n        meteorResult.insertedId = mongoResult.upserted[0]._id;\n      }\n    } else {\n      meteorResult.numberAffected = mongoResult.n;\n    }\n  }\n\n  return meteorResult;\n};\n\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596)\n    return true;\n  if (err.errmsg.indexOf(\"cannot change _id of a document\") === 0)\n    return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.errmsg.indexOf(\"The _id field cannot be changed\") === 0)\n    return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while ((key = trail.shift())) {\n          if (typeof obj[key] !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate,\n                        bindEnvironmentForWrite(function (err, result) {\n                          if (err) {\n                            callback(err);\n                          } else if (result && result.result.n != 0) {\n                            callback(null, {\n                              numberAffected: result.result.n\n                            });\n                          } else {\n                            doConditionalInsert();\n                          }\n                        }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    var replacementWithId = _.extend(\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n      newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\n                      bindEnvironmentForWrite(function (err, result) {\n                        if (err) {\n                          // figure out if this is a\n                          // \"cannot change _id of document\" error, and\n                          // if so, try doUpdate() again, up to 3 times.\n                          if (MongoConnection._isCannotChangeIdError(err)) {\n                            doUpdate();\n                          } else {\n                            callback(err);\n                          }\n                        } else {\n                          callback(null, {\n                            numberAffected: result.result.upserted.length,\n                            insertedId: insertedId,\n                          });\n                        }\n                      }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, {\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\n          // Cursor, not the SynchronousCursor.\n          selfForIteration: self,\n          useTransform: true\n        });\n    }\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {\n};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n}\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(\n    dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    var self = this;\n\n    while (true) {\n      var doc = self._synchronousNextObject().wait();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function (applySkipLimit: false) {\n    var self = this;\n    return self._synchronousCount(applySkipLimit).wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS = undefined;\n  var loop = function () {\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields &&\n      (cursorDescription.options.fields._id === 0 ||\n       cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort,\n                                        { matcher: matcher });\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n","var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\n\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function (ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function (op) {\n  if (op.op === 'd')\n    return op.o._id;\n  else if (op.op === 'i')\n    return op.o._id;\n  else if (op.op === 'u')\n    return op.o2._id;\n  else if (op.op === 'c')\n    throw Error(\"Operator 'c' doesn't supply an object with id: \" +\n                EJSON.stringify(op));\n  else\n    throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function (oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [\n      { op: {$in: ['i', 'u', 'd']} },\n      // drop collection\n      { op: 'c', 'o.drop': { $exists: true } },\n      { op: 'c', 'o.dropDatabase': 1 },\n    ]\n  };\n\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    if (self._tailHandle)\n      self._tailHandle.stop();\n    // XXX should close connections too\n  },\n  onOplogEntry: function (trigger, callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onOplogEntry on stopped handle!\");\n\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.\n    self._readyFuture.wait();\n\n    var originalCallback = callback;\n    callback = Meteor.bindEnvironment(function (notification) {\n      // XXX can we avoid this clone by making oplog.js careful?\n      originalCallback(EJSON.clone(notification));\n    }, function (err) {\n      Meteor._debug(\"Error in oplog callback\", err.stack);\n    });\n    var listenHandle = self._crossbar.listen(trigger, callback);\n    return {\n      stop: function () {\n        listenHandle.stop();\n      }\n    };\n  },\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function (callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onSkippedEntries on stopped handle!\");\n    return self._onSkippedEntriesHook.register(callback);\n  },\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");\n\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.\n    self._readyFuture.wait();\n\n    while (!self._stopped) {\n      // We need to make the selector at least as restrictive as the actual\n      // tailing selector (ie, we need to specify the DB name) or else we might\n      // find a TS that won't show up in the actual tail stream.\n      try {\n        var lastEntry = self._oplogLastEntryConnection.findOne(\n          OPLOG_COLLECTION, self._baseOplogSelector,\n          {fields: {ts: 1}, sort: {$natural: -1}});\n        break;\n      } catch (e) {\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while reading last entry: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    if (!lastEntry) {\n      // Really, nothing in the oplog? Well, we've processed everything.\n      return;\n    }\n\n    var ts = lastEntry.ts;\n    if (!ts)\n      throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n      // We've already caught up to here.\n      return;\n    }\n\n\n    // Insert the future into our list. Almost always, this will be at the end,\n    // but it's conceivable that if we fail over from one primary to another,\n    // the oplog entries we see will go backwards.\n    var insertAfter = self._catchingUpFutures.length;\n    while (insertAfter - 1 > 0\n           && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n      insertAfter--;\n    }\n    var f = new Future;\n    self._catchingUpFutures.splice(insertAfter, 0, {ts: ts, future: f});\n    f.wait();\n  },\n  _startTailing: function () {\n    var self = this;\n    // First, make sure that we're talking to the local database.\n    var mongodbUri = Npm.require('mongodb-uri');\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // We make two separate connections to Mongo. The Node Mongo driver\n    // implements a naive round-robin connection pool: each \"connection\" is a\n    // pool of several (5 by default) TCP connections, and each request is\n    // rotated through the pools. Tailable cursor queries block on the server\n    // until there is some data to return (or until a few seconds have\n    // passed). So if the connection pool used for tailing cursors is the same\n    // pool used for other queries, the other queries will be delayed by seconds\n    // 1/5 of the time.\n    //\n    // The tail connection will only ever be running a single tail command, so\n    // it only needs to make one underlying TCP connection.\n    self._oplogTailConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n    // XXX better docs, but: it's to get monotonic results\n    // XXX is it safe to say \"if there's an in flight query, just use its\n    //     results\"? I don't think so but should consider that\n    self._oplogLastEntryConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n\n    // Now, make sure that there actually is a repl set here. If not, oplog\n    // tailing won't ever find anything!\n    // More on the isMasterDoc\n    // https://docs.mongodb.com/manual/reference/command/isMaster/\n    var f = new Future;\n    self._oplogLastEntryConnection.db.admin().command(\n      { ismaster: 1 }, f.resolver());\n    var isMasterDoc = f.wait();\n\n    if (!(isMasterDoc && isMasterDoc.setName)) {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // Find the last oplog entry.\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(\n      OPLOG_COLLECTION, {}, {sort: {$natural: -1}, fields: {ts: 1}});\n\n    var oplogSelector = _.clone(self._baseOplogSelector);\n    if (lastOplogEntry) {\n      // Start after the last entry that currently exists.\n      oplogSelector.ts = {$gt: lastOplogEntry.ts};\n      // If there are any calls to callWhenProcessedLatest before any other\n      // oplog entries show up, allow callWhenProcessedLatest to call its\n      // callback immediately.\n      self._lastProcessedTS = lastOplogEntry.ts;\n    }\n\n    var cursorDescription = new CursorDescription(\n      OPLOG_COLLECTION, oplogSelector, {tailable: true});\n\n    self._tailHandle = self._oplogTailConnection.tail(\n      cursorDescription, function (doc) {\n        self._entryQueue.push(doc);\n        self._maybeStartWorker();\n      }\n    );\n    self._readyFuture.return();\n  },\n\n  _maybeStartWorker: function () {\n    var self = this;\n    if (self._workerActive)\n      return;\n    self._workerActive = true;\n    Meteor.defer(function () {\n      try {\n        while (! self._stopped && ! self._entryQueue.isEmpty()) {\n          // Are we too far behind? Just tell our observers that they need to\n          // repoll, and drop our queue.\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {\n            var lastEntry = self._entryQueue.pop();\n            self._entryQueue.clear();\n\n            self._onSkippedEntriesHook.each(function (callback) {\n              callback();\n              return true;\n            });\n\n            // Free any waitUntilCaughtUp() calls that were waiting for us to\n            // pass something that we just skipped.\n            self._setLastProcessedTS(lastEntry.ts);\n            continue;\n          }\n\n          var doc = self._entryQueue.shift();\n\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 &&\n                doc.ns.substr(0, self._dbName.length + 1) ===\n                (self._dbName + '.'))) {\n            throw new Error(\"Unexpected ns\");\n          }\n\n          var trigger = {collection: doc.ns.substr(self._dbName.length + 1),\n                         dropCollection: false,\n                         dropDatabase: false,\n                         op: doc};\n\n          // Is it a special command and the collection name is hidden somewhere\n          // in operator?\n          if (trigger.collection === \"$cmd\") {\n            if (doc.o.dropDatabase) {\n              delete trigger.collection;\n              trigger.dropDatabase = true;\n            } else if (_.has(doc.o, 'drop')) {\n              trigger.collection = doc.o.drop;\n              trigger.dropCollection = true;\n              trigger.id = null;\n            } else {\n              throw Error(\"Unknown command \" + JSON.stringify(doc));\n            }\n          } else {\n            // All other ops have an id.\n            trigger.id = idForOp(doc);\n          }\n\n          self._crossbar.fire(trigger);\n\n          // Now that we've processed this operation, process pending\n          // sequencers.\n          if (!doc.ts)\n            throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n          self._setLastProcessedTS(doc.ts);\n        }\n      } finally {\n        self._workerActive = false;\n      }\n    });\n  },\n  _setLastProcessedTS: function (ts) {\n    var self = this;\n    self._lastProcessedTS = ts;\n    while (!_.isEmpty(self._catchingUpFutures)\n           && self._catchingUpFutures[0].ts.lessThanOrEqual(\n             self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();\n      sequencer.future.return();\n    }\n  },\n\n  //Methods used on tests to dinamically change TOO_FAR_BEHIND\n  _defineTooFarBehind: function(value) {\n    TOO_FAR_BEHIND = value;\n  },\n  _resetTooFarBehind: function() {\n    TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n  }\n});\n","var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function (options) {\n  var self = this;\n\n  if (!options || !_.has(options, 'ordered'))\n    throw Error(\"must specified ordered\");\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-multiplexers\", 1);\n\n  self._ordered = options.ordered;\n  self._onStop = options.onStop || function () {};\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future;\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered});\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function (/* ... */) {\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function (handle) {\n    var self = this;\n\n    // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak an ObserveMultiplexer on error by\n    // incrementing _addHandleTasksScheduledButNotPerformed and never\n    // decrementing it.\n    if (!self._queue.safeToRunTask())\n      throw new Error(\n        \"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", 1);\n\n    self._queue.runTask(function () {\n      self._handles[handle._id] = handle;\n      // Send out whatever adds we have so far (whether or not we the\n      // multiplexer is ready).\n      self._sendAdds(handle);\n      --self._addHandleTasksScheduledButNotPerformed;\n    });\n    // *outside* the task, since otherwise we'd deadlock\n    self._readyFuture.wait();\n  },\n\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function (id) {\n    var self = this;\n\n    // This should not be possible: you can only call removeHandle by having\n    // access to the ObserveHandle, which isn't returned to user code until the\n    // multiplex is ready.\n    if (!self._ready())\n      throw new Error(\"Can't remove handles until the multiplex is ready\");\n\n    delete self._handles[id];\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", -1);\n\n    if (_.isEmpty(self._handles) &&\n        self._addHandleTasksScheduledButNotPerformed === 0) {\n      self._stop();\n    }\n  },\n  _stop: function (options) {\n    var self = this;\n    options = options || {};\n\n    // It shouldn't be possible for us to stop when all our handles still\n    // haven't been returned from observeChanges!\n    if (! self._ready() && ! options.fromQueryError)\n      throw Error(\"surprising _stop: not ready\");\n\n    // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).\n    self._onStop();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-multiplexers\", -1);\n\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).\n    self._handles = null;\n  },\n\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (self._ready())\n        throw Error(\"can't make ObserveMultiplex ready twice!\");\n      self._readyFuture.return();\n    });\n  },\n\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function (err) {\n    var self = this;\n    self._queue.runTask(function () {\n      if (self._ready())\n        throw Error(\"can't claim query has an error after it worked!\");\n      self._stop({fromQueryError: true});\n      self._readyFuture.throw(err);\n    });\n  },\n\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function (cb) {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (!self._ready())\n        throw Error(\"only call onFlush on a multiplexer that will be ready\");\n      cb();\n    });\n  },\n  callbackNames: function () {\n    var self = this;\n    if (self._ordered)\n      return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];\n    else\n      return [\"added\", \"changed\", \"removed\"];\n  },\n  _ready: function () {\n    return this._readyFuture.isResolved();\n  },\n  _applyCallback: function (callbackName, args) {\n    var self = this;\n    self._queue.queueTask(function () {\n      // If we stopped in the meantime, do nothing.\n      if (!self._handles)\n        return;\n\n      // First, apply the change to the cache.\n      // XXX We could make applyChange callbacks promise not to hang on to any\n      // state from their arguments (assuming that their supplied callbacks\n      // don't) and skip this clone. Currently 'changed' hangs on to state\n      // though.\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));\n\n      // If we haven't finished the initial adds, then we should only be getting\n      // adds.\n      if (!self._ready() &&\n          (callbackName !== 'added' && callbackName !== 'addedBefore')) {\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");\n      }\n\n      // Now multiplex the callbacks out to all observe handles. It's OK if\n      // these calls yield; since we're inside a task, no other use of our queue\n      // can continue until these are done. (But we do have to be careful to not\n      // use a handle that got removed, because removeHandle does not use the\n      // queue; thus, we iterate over an array of keys that we control.)\n      _.each(_.keys(self._handles), function (handleId) {\n        var handle = self._handles && self._handles[handleId];\n        if (!handle)\n          return;\n        var callback = handle['_' + callbackName];\n        // clone arguments so that callbacks can mutate their arguments\n        callback && callback.apply(null, EJSON.clone(args));\n      });\n    });\n  },\n\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function (handle) {\n    var self = this;\n    if (self._queue.safeToRunTask())\n      throw Error(\"_sendAdds may only be called from within a task!\");\n    var add = self._ordered ? handle._addedBefore : handle._added;\n    if (!add)\n      return;\n    // note: docs may be an _IdMap or an OrderedDict\n    self._cache.docs.forEach(function (doc, id) {\n      if (!_.has(self._handles, handle._id))\n        throw Error(\"handle got removed before sending initial adds!\");\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (self._ordered)\n        add(id, fields, null); // we're going in order, so add at end\n      else\n        add(id, fields);\n    });\n  }\n});\n\n\nvar nextObserveHandleId = 1;\nObserveHandle = function (multiplexer, callbacks) {\n  var self = this;\n  // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n  self._multiplexer = multiplexer;\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped)\n    return;\n  self._stopped = true;\n  self._multiplexer.removeHandle(self._id);\n};\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nDocFetcher = function (mongoConnection) {\n  var self = this;\n  self._mongoConnection = mongoConnection;\n  // Map from cache key -> [callback]\n  self._callbacksForCacheKey = {};\n};\n\n_.extend(DocFetcher.prototype, {\n  // Fetches document \"id\" from collectionName, returning it or null if not\n  // found.\n  //\n  // If you make multiple calls to fetch() with the same cacheKey (a string),\n  // DocFetcher may assume that they all return the same document. (It does\n  // not check to see if collectionName/id match.)\n  //\n  // You may assume that callback is never called synchronously (and in fact\n  // OplogObserveDriver does so).\n  fetch: function (collectionName, id, cacheKey, callback) {\n    var self = this;\n\n    check(collectionName, String);\n    // id is some sort of scalar\n    check(cacheKey, String);\n\n    // If there's already an in-progress fetch for this cache key, yield until\n    // it's done and return whatever it returns.\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {\n      self._callbacksForCacheKey[cacheKey].push(callback);\n      return;\n    }\n\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];\n\n    Fiber(function () {\n      try {\n        var doc = self._mongoConnection.findOne(\n          collectionName, {_id: id}) || null;\n        // Return doc to all relevant callbacks. Note that this array can\n        // continue to grow during callback excecution.\n        while (!_.isEmpty(callbacks)) {\n          // Clone the document so that the various calls to fetch don't return\n          // objects that are intertwingled with each other. Clone before\n          // popping the future, so that if clone throws, the error gets passed\n          // to the next callback.\n          var clonedDoc = EJSON.clone(doc);\n          callbacks.pop()(null, clonedDoc);\n        }\n      } catch (e) {\n        while (!_.isEmpty(callbacks)) {\n          callbacks.pop()(e);\n        }\n      } finally {\n        // XXX consider keeping the doc around for a period of time before\n        // removing from the cache\n        delete self._callbacksForCacheKey[cacheKey];\n      }\n    }).run();\n  }\n});\n\nMongoTest.DocFetcher = DocFetcher;\n","PollingObserveDriver = function (options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n    self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled,\n    self._cursorDescription.options.pollingThrottleMs || 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(\n    self._cursorDescription, function (notification) {\n      // When someone does a transaction that might affect us, schedule a poll\n      // of the database. If that transaction happens inside of a write fence,\n      // block the fence until we've polled and notified observers.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (fence)\n        self._pendingWrites.push(fence.beginWrite());\n      // Ensure a poll is scheduled... but if we already know that one is,\n      // don't hit the throttled _ensurePollIsScheduled function (which might\n      // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n      if (self._pollsScheduledButNotStarted === 0)\n        self._ensurePollIsScheduled();\n    }\n  );\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval =\n          self._cursorDescription.options.pollingIntervalMs ||\n          self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n          10 * 1000;\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    if (self._stopped)\n      return;\n\n    var first = false;\n    var oldResults = self._results;\n    if (!oldResults) {\n      first = true;\n      // XXX maybe use OrderedDict instead?\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (This yields.)\n    try {\n      var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof(e.code) === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(\n          new Error(\n            \"Exception while polling query \" +\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;\n      }\n\n      // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n      Meteor._debug(\"Exception while polling query \" +\n                    JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n      return;\n    }\n\n    // Run diffs.\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._multiplexer);\n    }\n\n    // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n    if (first)\n      self._multiplexer.ready();\n\n    // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n    self._results = newResults;\n\n    // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n    _.each(self._stopCallbacks, function (c) { c(); });\n    // Release any write fences that are waiting on us.\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function () {};\nvar finishIfNeedToPollQuery = function (f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery))\n        throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function (options) {\n  var self = this;\n  self._usesOplog = true;  // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap;\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  var selector = self._cursorDescription.selector;\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter)\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(\n    self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap;\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(\n    finishIfNeedToPollQuery(function () {\n      self._needToPollQuery();\n    })\n  ));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(\n      trigger, function (notification) {\n        Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n          var op = notification.op;\n          if (notification.dropCollection || notification.dropDatabase) {\n            // Note: this call is not allowed to block on anything (especially\n            // on waiting for oplog entries to catch up) because that will block\n            // onOplogEntry!\n            self._needToPollQuery();\n          } else {\n            // All other operators should be handled depending on phase\n            if (self._phase === PHASE.QUERYING)\n              self._handleOplogEntryQuerying(op);\n            else\n              self._handleOplogEntrySteadyOrFetching(op);\n          }\n        }));\n      }\n    ));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(\n    self._cursorDescription, function (notification) {\n      // If we're not in a pre-fire write fence, we don't have to do anything.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (!fence || fence.fired)\n        return;\n\n      if (fence._oplogObserveDrivers) {\n        fence._oplogObserveDrivers[self._id] = self;\n        return;\n      }\n\n      fence._oplogObserveDrivers = {};\n      fence._oplogObserveDrivers[self._id] = self;\n\n      fence.onBeforeFire(function () {\n        var drivers = fence._oplogObserveDrivers;\n        delete fence._oplogObserveDrivers;\n\n        // This fence cannot fire until we've caught up to \"this point\" in the\n        // oplog, and all observers made it back to the steady state.\n        self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n        _.each(drivers, function (driver) {\n          if (driver._stopped)\n            return;\n\n          var write = fence.beginWrite();\n          if (driver._phase === PHASE.STEADY) {\n            // Make sure that all of the callbacks have made it through the\n            // multiplexer and been delivered to ObserveHandles before committing\n            // writes.\n            driver._multiplexer.onFlush(function () {\n              write.committed();\n            });\n          } else {\n            driver._writesToCommitWhenWeReachSteady.push(write);\n          }\n        });\n      });\n    }\n  ));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(\n    function () {\n      self._needToPollQuery();\n    })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = _.clone(doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" +\n                          (self._published.size() - self._limit) +\n                          \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (! self._limit || self._published.size() === self._limit)\n        return;\n\n      if (self._published.size() > self._limit)\n        throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING)\n        return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer)\n        return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function (id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(\n        projectedNew, projectedOld);\n      if (!_.isEmpty(changed))\n        self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)\n        self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function (doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id))\n        throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id))\n        throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = (limit && self._published.size() > 0) ?\n        self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())\n        : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = ! limit || self._published.size() < limit ||\n        comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&\n        self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&\n        comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (! self._published.has(id) && ! self._limit)\n        throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function (id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = ! self._limit ||\n            self._unpublishedBuffer.size() === 0 ||\n            comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            var maxBuffered = self._unpublishedBuffer.get(\n              self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer ||\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(\n            self._published.maxElementId());\n          var maxBuffered = self._unpublishedBuffer.size() &&\n                self._unpublishedBuffer.get(\n                  self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||\n                (!toPublish && maxBuffered &&\n                 comparator(newDoc, maxBuffered) <= 0);\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (! self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.FETCHING);\n      // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.\n      Meteor.defer(finishIfNeedToPollQuery(function () {\n        while (!self._stopped && !self._needToFetch.empty()) {\n          if (self._phase === PHASE.QUERYING) {\n            // While fetching, we decided to go into QUERYING mode, and then we\n            // saw another oplog entry, so _needToFetch is not empty. But we\n            // shouldn't fetch these documents until AFTER the query is done.\n            break;\n          }\n\n          // Being in steady phase here would be surprising.\n          if (self._phase !== PHASE.FETCHING)\n            throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n          self._currentlyFetching = self._needToFetch;\n          var thisGeneration = ++self._fetchGeneration;\n          self._needToFetch = new LocalCollection._IdMap;\n          var waiting = 0;\n          var fut = new Future;\n          // This loop is safe, because _currentlyFetching will not be updated\n          // during this loop (in fact, it is never mutated).\n          self._currentlyFetching.forEach(function (cacheKey, id) {\n            waiting++;\n            self._mongoHandle._docFetcher.fetch(\n              self._cursorDescription.collectionName, id, cacheKey,\n              finishIfNeedToPollQuery(function (err, doc) {\n                try {\n                  if (err) {\n                    Meteor._debug(\"Got exception while fetching documents: \" +\n                                  err);\n                    // If we get an error from the fetcher (eg, trouble\n                    // connecting to Mongo), let's just abandon the fetch phase\n                    // altogether and fall back to polling. It's not like we're\n                    // getting live updates anyway.\n                    if (self._phase !== PHASE.QUERYING) {\n                      self._needToPollQuery();\n                    }\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING\n                             && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0)\n                    fut.return();\n                }\n              }));\n          });\n          fut.wait();\n          // Exit now if we've had a _pollQuery call (here or in another fiber).\n          if (self._phase === PHASE.QUERYING)\n            return;\n          self._currentlyFetching = null;\n        }\n        // We're done fetching, so we can be steady, unless we've had a\n        // _pollQuery call (here or in another fiber).\n        if (self._phase !== PHASE.QUERYING)\n          self._beSteady();\n      }));\n    });\n  },\n  _beSteady: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.STEADY);\n      var writes = self._writesToCommitWhenWeReachSteady;\n      self._writesToCommitWhenWeReachSteady = [];\n      self._multiplexer.onFlush(function () {\n        _.each(writes, function (w) {\n          w.committed();\n        });\n      });\n    });\n  },\n  _handleOplogEntryQuerying: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op.ts.toString());\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n      if (self._phase === PHASE.FETCHING &&\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||\n           self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) ||\n            (self._limit && self._unpublishedBuffer.has(id)))\n          self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id))\n          throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))\n          throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result)\n          self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc =\n          !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, _.extend({_id: id}, op.o));\n        } else if ((publishedBefore || bufferedBefore) &&\n                   canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id)\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\")\n              throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc ||\n                   self._matcher.canBecomeTrueByModifier(op.o) ||\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {\n          self._needToFetch.set(id, op.ts.toString());\n          if (self._phase === PHASE.STEADY)\n            self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n  // Yields!\n  _runInitialQuery: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"oplog stopped surprisingly early\");\n\n    self._runQuery({initial: true});  // yields\n\n    if (self._stopped)\n      return;  // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    self._multiplexer.ready();\n\n    self._doneQuerying();  // yields\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap;\n      self._currentlyFetching = null;\n      ++self._fetchGeneration;  // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(function () {\n        self._runQuery();\n        self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  _runQuery: function (options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped)\n        return;\n\n      newResults = new LocalCollection._IdMap;\n      newBuffer = new LocalCollection._IdMap;\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        cursor.forEach(function (doc, i) {  // yields\n          if (!self._limit || i < self._limit)\n            newResults.set(doc._id, doc);\n          else\n            newBuffer.set(doc._id, doc);\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof(e.code) === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery;\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: function () {\n    var self = this;\n\n    if (self._stopped)\n      return;\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp();  // yields\n    if (self._stopped)\n      return;\n    if (self._phase !== PHASE.QUERYING)\n      throw Error(\"Phase unexpectedly \" + self._phase);\n\n    Meteor._noYieldsAllowed(function () {\n      if (self._requeryWhenDoneThisQuery) {\n        self._requeryWhenDoneThisQuery = false;\n        self._pollQuery();\n      } else if (self._needToFetch.empty()) {\n        self._beSteady();\n      } else {\n        self._fetchModifiedDocuments();\n      }\n    });\n  },\n\n  _cursorForQuery: function (optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = _.clone(self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      _.extend(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(\n        self._cursorDescription.collectionName,\n        self._cursorDescription.selector,\n        options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function (newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          idsToRemove.push(id);\n      });\n      _.each(idsToRemove, function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        throw Error(\n          \"The Mongo server and the Meteor query disagree on how \" +\n            \"many documents match your query. Maybe it is hitting a Mongo \" +\n            \"edge case? The query is: \" +\n            EJSON.stringify(self._cursorDescription.selector));\n      }\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    _.each(self._stopHandles, function (handle) {\n      handle.stop();\n    });\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n      w.committed();  // maybe yields?\n    });\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-oplog\", -1);\n  },\n\n  _registerPhaseChange: function (phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date;\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package.facts && Package.facts.Facts.incrementServerFact(\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  // underscored version of the option is COMPAT with 1.2\n  if (options.disableOplog || options._disableOplog)\n    return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || (options.limit && !options.sort)) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\")\n        return false;\n      else\n        throw e;\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function (modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;\n","LocalCollectionDriver = function () {\n  var self = this;\n  self.noConnCollections = {};\n};\n\nvar ensureCollection = function (name, collections) {\n  if (!(name in collections))\n    collections[name] = new LocalCollection(name);\n  return collections[name];\n};\n\n_.extend(LocalCollectionDriver.prototype, {\n  open: function (name, conn) {\n    var self = this;\n    if (!name)\n      return new LocalCollection;\n    if (! conn) {\n      return ensureCollection(name, self.noConnCollections);\n    }\n    if (! conn._mongo_livedata_collections)\n      conn._mongo_livedata_collections = {};\n    // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?\n    return ensureCollection(name, conn._mongo_livedata_collections);\n  }\n});\n\n// singleton\nLocalCollectionDriver = new LocalCollectionDriver;\n","MongoInternals.RemoteCollectionDriver = function (\n  mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'upsert',\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',\n       'dropCollection', 'rawCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});\n","// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Mongo.Collection))\n    throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\n      \"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return new Mongo.ObjectID(src.hexString(24));\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return src.id();\n    };\n    break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function(id) {\n        return self.findOne(id);\n      },\n\n      // To be able to get back to the collection from the store.\n      _getCollection: function () {\n        return self;\n      }\n    });\n\n    if (!ok) {\n      const message = `There is already a collection named \"${name}\"`;\n      if (options._suppressSameNameError === true) {\n        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined\n        // for this collection name, but this will simply be another reference to it and everything\n        // should work. However, we have historically thrown an error here, so for now we will\n        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in\n        // and give this some real world testing.\n        console.warn ? console.warn(message) : console.log(message);\n      } else {\n        throw new Error(message);\n      }\n    }\n  }\n\n  // XXX don't define these until allow or deny is actually used for this\n  // collection. Could be hard if the security rules are only defined on the\n  // server.\n  if (options.defineMutationMethods !== false) {\n    try {\n      self._defineMutationMethods({ useExisting: (options._suppressSameNameError === true) });\n    } catch (error) {\n      // Throw a more understandable error on the server for same collection name\n      if (error.message === `A method named '/${name}/insert' is already defined`)\n        throw new Error(`There is already a collection named \"${name}\"`);\n      throw error;\n    }\n  }\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection\n      && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n     })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).\n   * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.\n   * @returns {Mongo.Cursor}\n   */\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n\n  // return the observeHandle in case it needs to be stopped early\n  return observeHandle;\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nfunction convertRegexpToMongoSelector(regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n};\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\nMongo.Collection.prototype.insert = function insert(doc, callback) {\n  // Make sure we were passed a document to insert\n  if (!doc) {\n    throw new Error(\"insert requires an argument\");\n  }\n\n  // Shallow-copy the document and possibly generate an ID\n  doc = _.extend({}, doc);\n\n  if ('_id' in doc) {\n    if (!doc._id || !(typeof doc._id === 'string'\n          || doc._id instanceof Mongo.ObjectID)) {\n      throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n    }\n  } else {\n    let generateId = true;\n\n    // Don't generate the id if we're the client and the 'outermost' call\n    // This optimization saves us passing both the randomSeed and the id\n    // Passing both is redundant.\n    if (this._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n\n    if (generateId) {\n      doc._id = this._makeNewID();\n    }\n  }\n\n  // On inserts, always return the id that we generated; on all other\n  // operations, just return the result from the collection.\n  var chooseReturnValueFromCollectionResult = function (result) {\n    if (doc._id) {\n      return doc._id;\n    }\n\n    // XXX what is this for??\n    // It's some iteraction between the callback to _callMutatorMethod and\n    // the return value conversion\n    doc._id = result;\n\n    return result;\n  };\n\n  const wrappedCallback = wrapCallback(\n    callback, chooseReturnValueFromCollectionResult);\n\n  if (this._isRemoteCollection()) {\n    const result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    const result = this._collection.insert(doc, wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of matched documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.update = function update(selector, modifier, ...optionsAndCallback) {\n  const callback = popCallbackFromArgs(optionsAndCallback);\n\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  // We've already popped off the callback, so we are left with an array\n  // of one or zero items\n  const options = _.clone(optionsAndCallback[0]) || {};\n  if (options && options.upsert) {\n    // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n    if (options.insertedId) {\n      if (!(typeof options.insertedId === 'string'\n            || options.insertedId instanceof Mongo.ObjectID))\n        throw new Error(\"insertedId must be string or ObjectID\");\n    } else if (! selector._id) {\n      options.insertedId = this._makeNewID();\n    }\n  }\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    const args = [\n      selector,\n      modifier,\n      options\n    ];\n\n    return this._callMutatorMethod(\"update\", args, wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.update(\n      selector, modifier, options, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\nMongo.Collection.prototype.remove = function remove(selector, callback) {\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.remove(selector, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n// Determine if this collection is simply a minimongo representation of a real\n// database on another server\nMongo.Collection.prototype._isRemoteCollection = function _isRemoteCollection() {\n  // XXX see #MeteorServerNull\n  return this._connection && this._connection !== Meteor.server;\n}\n\n// Convert the callback to not return a result if there is an error\nfunction wrapCallback(callback, convertResult) {\n  if (!callback) {\n    return;\n  }\n\n  // If no convert function was passed in, just use a \"blank function\"\n  convertResult = convertResult || _.identity;\n\n  return (error, result) => {\n    callback(error, ! error && convertResult(result));\n  };\n}\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function upsert(\n    selector, modifier, options, callback) {\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  const updateOptions = _.extend({}, options, {\n    _returnObject: true,\n    upsert: true\n  });\n\n  return this.update(selector, modifier, updateOptions, callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection)\n    throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (! self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (! (self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n\n// Allow deny stuff is now in the allow-deny package\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);\n\nfunction popCallbackFromArgs(args) {\n  // Pull off any callback (or perhaps a 'callback' variable that was passed\n  // in undefined, like how 'upsert' does it).\n  if (args.length &&\n      (args[args.length - 1] === undefined ||\n       args[args.length - 1] instanceof Function)) {\n    return args.pop();\n  }\n}\n","/**\n * @summary Allows for user specified connection options\n * @example http://mongodb.github.io/node-mongodb-native/2.2/reference/connecting/connection-settings/\n * @locus Server\n * @param {Object} options User specified Mongo connection options\n */\nMongo.setConnectionOptions = function setConnectionOptions (options) {\n  check(options, Object);\n  Mongo._connectionOptions = options;\n}\n"]}}]