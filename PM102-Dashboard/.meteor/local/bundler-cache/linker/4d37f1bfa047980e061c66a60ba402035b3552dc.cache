[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"reactive-dict\":{\"reactive-dict.js\":[\"babel-runtime/helpers/typeof\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/reactive-dict.js                                                                        //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar _typeof;module.import('babel-runtime/helpers/typeof',{\"default\":function(v){_typeof=v}});                     //\n// XXX come up with a serialization method which canonicalizes object key                                         // 1\n// order, which would allow us to use objects as values for equals.                                               // 2\nvar stringify = function stringify(value) {                                                                       // 3\n  if (value === undefined) return 'undefined';                                                                    // 4\n  return EJSON.stringify(value);                                                                                  // 6\n};                                                                                                                // 7\nvar parse = function parse(serialized) {                                                                          // 8\n  if (serialized === undefined || serialized === 'undefined') return undefined;                                   // 9\n  return EJSON.parse(serialized);                                                                                 // 11\n};                                                                                                                // 12\n                                                                                                                  //\nvar changed = function changed(v) {                                                                               // 14\n  v && v.changed();                                                                                               // 15\n};                                                                                                                // 16\n                                                                                                                  //\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                                               // 18\nReactiveDict = function (_ReactiveDict) {                                                                         // 19\n  function ReactiveDict(_x) {                                                                                     // 19\n    return _ReactiveDict.apply(this, arguments);                                                                  // 19\n  }                                                                                                               // 19\n                                                                                                                  //\n  ReactiveDict.toString = function () {                                                                           // 19\n    return _ReactiveDict.toString();                                                                              // 19\n  };                                                                                                              // 19\n                                                                                                                  //\n  return ReactiveDict;                                                                                            // 19\n}(function (dictName) {                                                                                           // 19\n  // this.keys: key -> value                                                                                      // 20\n  if (dictName) {                                                                                                 // 21\n    if (typeof dictName === 'string') {                                                                           // 22\n      // the normal case, argument is a string name.                                                              // 23\n      // _registerDictForMigrate will throw an error on duplicate name.                                           // 24\n      ReactiveDict._registerDictForMigrate(dictName, this);                                                       // 25\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                                                 // 26\n      this.name = dictName;                                                                                       // 27\n    } else if ((typeof dictName === 'undefined' ? 'undefined' : _typeof(dictName)) === 'object') {                // 28\n      // back-compat case: dictName is actually migrationData                                                     // 29\n      this.keys = dictName;                                                                                       // 30\n    } else {                                                                                                      // 31\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                                              // 32\n    }                                                                                                             // 33\n  } else {                                                                                                        // 34\n    // no name given; no migration will be performed                                                              // 35\n    this.keys = {};                                                                                               // 36\n  }                                                                                                               // 37\n                                                                                                                  //\n  this.allDeps = new Tracker.Dependency();                                                                        // 39\n  this.keyDeps = {}; // key -> Dependency                                                                         // 40\n  this.keyValueDeps = {}; // key -> Dependency                                                                    // 41\n});                                                                                                               // 42\n                                                                                                                  //\n_.extend(ReactiveDict.prototype, {                                                                                // 44\n  // set() began as a key/value method, but we are now overloading it                                             // 45\n  // to take an object of key/value pairs, similar to backbone                                                    // 46\n  // http://backbonejs.org/#Model-set                                                                             // 47\n                                                                                                                  //\n  set: function () {                                                                                              // 49\n    function set(keyOrObject, value) {                                                                            // 49\n      var self = this;                                                                                            // 50\n                                                                                                                  //\n      if ((typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' && value === undefined) {\n        // Called as `dict.set({...})`                                                                            // 53\n        self._setObject(keyOrObject);                                                                             // 54\n        return;                                                                                                   // 55\n      }                                                                                                           // 56\n      // the input isn't an object, so it must be a key                                                           // 57\n      // and we resume with the rest of the function                                                              // 58\n      var key = keyOrObject;                                                                                      // 59\n                                                                                                                  //\n      value = stringify(value);                                                                                   // 61\n                                                                                                                  //\n      var keyExisted = _.has(self.keys, key);                                                                     // 63\n      var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';                                         // 64\n      var isNewValue = value !== oldSerializedValue;                                                              // 65\n                                                                                                                  //\n      self.keys[key] = value;                                                                                     // 67\n                                                                                                                  //\n      if (isNewValue || !keyExisted) {                                                                            // 69\n        self.allDeps.changed();                                                                                   // 70\n      }                                                                                                           // 71\n                                                                                                                  //\n      if (isNewValue) {                                                                                           // 73\n        changed(self.keyDeps[key]);                                                                               // 74\n        if (self.keyValueDeps[key]) {                                                                             // 75\n          changed(self.keyValueDeps[key][oldSerializedValue]);                                                    // 76\n          changed(self.keyValueDeps[key][value]);                                                                 // 77\n        }                                                                                                         // 78\n      }                                                                                                           // 79\n    }                                                                                                             // 80\n                                                                                                                  //\n    return set;                                                                                                   // 49\n  }(),                                                                                                            // 49\n                                                                                                                  //\n  setDefault: function () {                                                                                       // 82\n    function setDefault(keyOrObject, value) {                                                                     // 82\n      var self = this;                                                                                            // 83\n                                                                                                                  //\n      if ((typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' && value === undefined) {\n        // Called as `dict.setDefault({...})`                                                                     // 86\n        self._setDefaultObject(keyOrObject);                                                                      // 87\n        return;                                                                                                   // 88\n      }                                                                                                           // 89\n      // the input isn't an object, so it must be a key                                                           // 90\n      // and we resume with the rest of the function                                                              // 91\n      var key = keyOrObject;                                                                                      // 92\n                                                                                                                  //\n      if (!_.has(self.keys, key)) {                                                                               // 94\n        self.set(key, value);                                                                                     // 95\n      }                                                                                                           // 96\n    }                                                                                                             // 97\n                                                                                                                  //\n    return setDefault;                                                                                            // 82\n  }(),                                                                                                            // 82\n                                                                                                                  //\n  get: function () {                                                                                              // 99\n    function get(key) {                                                                                           // 99\n      var self = this;                                                                                            // 100\n      self._ensureKey(key);                                                                                       // 101\n      self.keyDeps[key].depend();                                                                                 // 102\n      return parse(self.keys[key]);                                                                               // 103\n    }                                                                                                             // 104\n                                                                                                                  //\n    return get;                                                                                                   // 99\n  }(),                                                                                                            // 99\n                                                                                                                  //\n  equals: function () {                                                                                           // 106\n    function equals(key, value) {                                                                                 // 106\n      var self = this;                                                                                            // 107\n                                                                                                                  //\n      // Mongo.ObjectID is in the 'mongo' package                                                                 // 109\n      var ObjectID = null;                                                                                        // 110\n      if (Package.mongo) {                                                                                        // 111\n        ObjectID = Package.mongo.Mongo.ObjectID;                                                                  // 112\n      }                                                                                                           // 113\n                                                                                                                  //\n      // We don't allow objects (or arrays that might include objects) for                                        // 115\n      // .equals, because JSON.stringify doesn't canonicalize object key                                          // 116\n      // order. (We can make equals have the right return value by parsing the                                    // 117\n      // current value and using EJSON.equals, but we won't have a canonical                                      // 118\n      // element of keyValueDeps[key] to store the dependency.) You can still use                                 // 119\n      // \"EJSON.equals(reactiveDict.get(key), value)\".                                                            // 120\n      //                                                                                                          // 121\n      // XXX we could allow arrays as long as we recursively check that there                                     // 122\n      // are no objects                                                                                           // 123\n      if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n        throw new Error(\"ReactiveDict.equals: value must be scalar\");                                             // 131\n      }                                                                                                           // 132\n      var serializedValue = stringify(value);                                                                     // 133\n                                                                                                                  //\n      if (Tracker.active) {                                                                                       // 135\n        self._ensureKey(key);                                                                                     // 136\n                                                                                                                  //\n        if (!_.has(self.keyValueDeps[key], serializedValue)) self.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n                                                                                                                  //\n        var isNew = self.keyValueDeps[key][serializedValue].depend();                                             // 141\n        if (isNew) {                                                                                              // 142\n          Tracker.onInvalidate(function () {                                                                      // 143\n            // clean up [key][serializedValue] if it's now empty, so we don't                                     // 144\n            // use O(n) memory for n = values seen ever                                                           // 145\n            if (!self.keyValueDeps[key][serializedValue].hasDependents()) delete self.keyValueDeps[key][serializedValue];\n          });                                                                                                     // 148\n        }                                                                                                         // 149\n      }                                                                                                           // 150\n                                                                                                                  //\n      var oldValue = undefined;                                                                                   // 152\n      if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                                                // 153\n      return EJSON.equals(oldValue, value);                                                                       // 154\n    }                                                                                                             // 155\n                                                                                                                  //\n    return equals;                                                                                                // 106\n  }(),                                                                                                            // 106\n                                                                                                                  //\n  all: function () {                                                                                              // 157\n    function all() {                                                                                              // 157\n      this.allDeps.depend();                                                                                      // 158\n      var ret = {};                                                                                               // 159\n      _.each(this.keys, function (value, key) {                                                                   // 160\n        ret[key] = parse(value);                                                                                  // 161\n      });                                                                                                         // 162\n      return ret;                                                                                                 // 163\n    }                                                                                                             // 164\n                                                                                                                  //\n    return all;                                                                                                   // 157\n  }(),                                                                                                            // 157\n                                                                                                                  //\n  clear: function () {                                                                                            // 166\n    function clear() {                                                                                            // 166\n      var self = this;                                                                                            // 167\n                                                                                                                  //\n      var oldKeys = self.keys;                                                                                    // 169\n      self.keys = {};                                                                                             // 170\n                                                                                                                  //\n      self.allDeps.changed();                                                                                     // 172\n                                                                                                                  //\n      _.each(oldKeys, function (value, key) {                                                                     // 174\n        changed(self.keyDeps[key]);                                                                               // 175\n        if (self.keyValueDeps[key]) {                                                                             // 176\n          changed(self.keyValueDeps[key][value]);                                                                 // 177\n          changed(self.keyValueDeps[key]['undefined']);                                                           // 178\n        }                                                                                                         // 179\n      });                                                                                                         // 180\n    }                                                                                                             // 182\n                                                                                                                  //\n    return clear;                                                                                                 // 166\n  }(),                                                                                                            // 166\n                                                                                                                  //\n  'delete': function () {                                                                                         // 184\n    function _delete(key) {                                                                                       // 184\n      var self = this;                                                                                            // 185\n      var didRemove = false;                                                                                      // 186\n                                                                                                                  //\n      if (_.has(self.keys, key)) {                                                                                // 188\n        var oldValue = self.keys[key];                                                                            // 189\n        delete self.keys[key];                                                                                    // 190\n        changed(self.keyDeps[key]);                                                                               // 191\n        if (self.keyValueDeps[key]) {                                                                             // 192\n          changed(self.keyValueDeps[key][oldValue]);                                                              // 193\n          changed(self.keyValueDeps[key]['undefined']);                                                           // 194\n        }                                                                                                         // 195\n        self.allDeps.changed();                                                                                   // 196\n        didRemove = true;                                                                                         // 197\n      }                                                                                                           // 198\n                                                                                                                  //\n      return didRemove;                                                                                           // 200\n    }                                                                                                             // 201\n                                                                                                                  //\n    return _delete;                                                                                               // 184\n  }(),                                                                                                            // 184\n                                                                                                                  //\n  _setObject: function () {                                                                                       // 203\n    function _setObject(object) {                                                                                 // 203\n      var self = this;                                                                                            // 204\n                                                                                                                  //\n      _.each(object, function (value, key) {                                                                      // 206\n        self.set(key, value);                                                                                     // 207\n      });                                                                                                         // 208\n    }                                                                                                             // 209\n                                                                                                                  //\n    return _setObject;                                                                                            // 203\n  }(),                                                                                                            // 203\n                                                                                                                  //\n  _setDefaultObject: function () {                                                                                // 211\n    function _setDefaultObject(object) {                                                                          // 211\n      var self = this;                                                                                            // 212\n                                                                                                                  //\n      _.each(object, function (value, key) {                                                                      // 214\n        self.setDefault(key, value);                                                                              // 215\n      });                                                                                                         // 216\n    }                                                                                                             // 217\n                                                                                                                  //\n    return _setDefaultObject;                                                                                     // 211\n  }(),                                                                                                            // 211\n                                                                                                                  //\n  _ensureKey: function () {                                                                                       // 219\n    function _ensureKey(key) {                                                                                    // 219\n      var self = this;                                                                                            // 220\n      if (!(key in self.keyDeps)) {                                                                               // 221\n        self.keyDeps[key] = new Tracker.Dependency();                                                             // 222\n        self.keyValueDeps[key] = {};                                                                              // 223\n      }                                                                                                           // 224\n    }                                                                                                             // 225\n                                                                                                                  //\n    return _ensureKey;                                                                                            // 219\n  }(),                                                                                                            // 219\n                                                                                                                  //\n  // Get a JSON value that can be passed to the constructor to                                                    // 227\n  // create a new ReactiveDict with the same contents as this one                                                 // 228\n  _getMigrationData: function () {                                                                                // 229\n    function _getMigrationData() {                                                                                // 229\n      // XXX sanitize and make sure it's JSONible?                                                                // 230\n      return this.keys;                                                                                           // 231\n    }                                                                                                             // 232\n                                                                                                                  //\n    return _getMigrationData;                                                                                     // 229\n  }()                                                                                                             // 229\n});                                                                                                               // 44\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"migration.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/migration.js                                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nReactiveDict._migratedDictData = {}; // name -> data                                                              // 1\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                                                        // 2\n                                                                                                                  //\nReactiveDict._loadMigratedDict = function (dictName) {                                                            // 4\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];           // 5\n                                                                                                                  //\n  return null;                                                                                                    // 8\n};                                                                                                                // 9\n                                                                                                                  //\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                                                // 11\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n                                                                                                                  //\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                                                  // 15\n};                                                                                                                // 16\n                                                                                                                  //\nif (Meteor.isClient && Package.reload) {                                                                          // 18\n  // Put old migrated data into ReactiveDict._migratedDictData,                                                   // 19\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                                                  // 20\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');                                      // 21\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts;                 // 22\n                                                                                                                  //\n  // On migration, assemble the data from all the dicts that have been                                            // 25\n  // registered.                                                                                                  // 26\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                                                 // 27\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                                            // 28\n    var dataToMigrate = {};                                                                                       // 29\n                                                                                                                  //\n    for (var dictName in meteorBabelHelpers.sanitizeForInObject(dictsToMigrate)) {                                // 31\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();                                     // 32\n    }return [true, { dicts: dataToMigrate }];                                                                     // 31\n  });                                                                                                             // 35\n}                                                                                                                 // 36\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/reactive-dict/reactive-dict.js\");\nrequire(\"./node_modules/meteor/reactive-dict/migration.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['reactive-dict'] = {}, {\n  ReactiveDict: ReactiveDict\n});\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["/packages/reactive-dict/reactive-dict.js","/packages/reactive-dict/migration.js"],"names":["stringify","value","undefined","EJSON","parse","serialized","changed","v","ReactiveDict","dictName","_registerDictForMigrate","keys","_loadMigratedDict","name","Error","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","_","extend","prototype","set","keyOrObject","self","_setObject","key","keyExisted","has","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","Package","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","each","clear","oldKeys","didRemove","object","_getMigrationData","_migratedDictData","_dictsToMigrate","dict","Meteor","isClient","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate"],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function (v) {\n  v && v.changed();\n};\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nReactiveDict = function (dictName) {\n  // this.keys: key -> value\n  if (dictName) {\n    if (typeof dictName === 'string') {\n      // the normal case, argument is a string name.\n      // _registerDictForMigrate will throw an error on duplicate name.\n      ReactiveDict._registerDictForMigrate(dictName, this);\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};\n      this.name = dictName;\n    } else if (typeof dictName === 'object') {\n      // back-compat case: dictName is actually migrationData\n      this.keys = dictName;\n    } else {\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n    }\n  } else {\n    // no name given; no migration will be performed\n    this.keys = {};\n  }\n\n  this.allDeps = new Tracker.Dependency;\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n};\n\n_.extend(ReactiveDict.prototype, {\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  set: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      self._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    value = stringify(value);\n\n    var keyExisted = _.has(self.keys, key);\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';\n    var isNewValue = (value !== oldSerializedValue);\n\n    self.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      self.allDeps.changed();\n    }\n\n    if (isNewValue) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldSerializedValue]);\n        changed(self.keyValueDeps[key][value]);\n      }\n    }\n  },\n\n  setDefault: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      self._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    if (! _.has(self.keys, key)) {\n      self.set(key, value);\n    }\n  },\n\n  get: function (key) {\n    var self = this;\n    self._ensureKey(key);\n    self.keyDeps[key].depend();\n    return parse(self.keys[key]);\n  },\n\n  equals: function (key, value) {\n    var self = this;\n\n    // Mongo.ObjectID is in the 'mongo' package\n    var ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    var serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      self._ensureKey(key);\n\n      if (! _.has(self.keyValueDeps[key], serializedValue))\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n\n      var isNew = self.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(function () {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())\n            delete self.keyValueDeps[key][serializedValue];\n        });\n      }\n    }\n\n    var oldValue = undefined;\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n    return EJSON.equals(oldValue, value);\n  },\n\n  all: function() {\n    this.allDeps.depend();\n    var ret = {};\n    _.each(this.keys, function(value, key) {\n      ret[key] = parse(value);\n    });\n    return ret;\n  },\n\n  clear: function() {\n    var self = this;\n\n    var oldKeys = self.keys;\n    self.keys = {};\n\n    self.allDeps.changed();\n\n    _.each(oldKeys, function(value, key) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][value]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n    });\n\n  },\n\n  delete: function(key) {\n    var self = this;\n    var didRemove = false;\n\n    if (_.has(self.keys, key)) {\n      var oldValue = self.keys[key];\n      delete self.keys[key];\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldValue]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n      self.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  },\n\n  _setObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.set(key, value);\n    });\n  },\n\n  _setDefaultObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.setDefault(key, value);\n    });\n  },\n\n  _ensureKey: function (key) {\n    var self = this;\n    if (!(key in self.keyDeps)) {\n      self.keyDeps[key] = new Tracker.Dependency;\n      self.keyValueDeps[key] = {};\n    }\n  },\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData: function () {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n});\n","ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]}}]