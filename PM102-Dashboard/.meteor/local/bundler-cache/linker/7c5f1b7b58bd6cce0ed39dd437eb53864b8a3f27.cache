[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Spiderable;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/spiderable/spiderable.js                                                                               //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nSpiderable = {};\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/spiderable/spiderable_server.js                                                                        //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar fs = Npm.require('fs');\nvar child_process = Npm.require('child_process');\nvar querystring = Npm.require('querystring');\nvar urlParser = Npm.require('url');\n\n// list of bot user agents that we want to serve statically, but do\n// not obey the _escaped_fragment_ protocol. The page is served\n// statically to any client whos user agent matches any of these\n// regexps. Users may modify this array.\n//\n// An original goal with the spiderable package was to avoid doing\n// user-agent based tests. But the reality is not enough bots support\n// the _escaped_fragment_ protocol, so we need to hardcode a list\n// here. I shed a silent tear.\nSpiderable.userAgentRegExps = [\n  /^facebookexternalhit/i,\n  /^Facebot/,\n  /^linkedinbot/i,\n  /^twitterbot/i,\n  /^slackbot-linkexpanding/i\n];\n\n// how long to let phantomjs run before we kill it (and send down the\n// regular page instead). Users may modify this number.\nSpiderable.requestTimeoutMs = 15*1000;\n// maximum size of result HTML. node's default is 200k which is too\n// small for our docs.\nvar MAX_BUFFER = 5*1024*1024; // 5MB\n\n// Exported for tests.\nSpiderable._urlForPhantom = function (siteAbsoluteUrl, requestUrl) {\n  // reassembling url without escaped fragment if exists\n  var parsedUrl = urlParser.parse(requestUrl);\n  var parsedQuery = querystring.parse(parsedUrl.query);\n  var escapedFragment = parsedQuery['_escaped_fragment_'];\n  delete parsedQuery['_escaped_fragment_'];\n\n  var parsedAbsoluteUrl = urlParser.parse(siteAbsoluteUrl);\n  // If the ROOT_URL contains a path, Meteor strips that path off of the\n  // request's URL before we see it. So we concatenate the pathname from\n  // the request's URL with the root URL's pathname to get the full\n  // pathname.\n  if (parsedUrl.pathname.charAt(0) === \"/\") {\n    parsedUrl.pathname = parsedUrl.pathname.substring(1);\n  }\n  parsedAbsoluteUrl.pathname = urlParser.resolve(parsedAbsoluteUrl.pathname,\n                                                 parsedUrl.pathname);\n  parsedAbsoluteUrl.query = parsedQuery;\n  // `url.format` will only use `query` if `search` is absent\n  parsedAbsoluteUrl.search = null;\n\n  if (escapedFragment !== undefined && escapedFragment !== null && escapedFragment.length > 0) {\n    parsedAbsoluteUrl.hash = '!' + decodeURIComponent(escapedFragment);\n  }\n\n  return urlParser.format(parsedAbsoluteUrl);\n};\n\nvar PHANTOM_SCRIPT = Assets.getText(\"phantom_script.js\");\n\nWebApp.connectHandlers.use(function (req, res, next) {\n  // _escaped_fragment_ comes from Google's AJAX crawling spec:\n  // https://developers.google.com/webmasters/ajax-crawling/docs/specification\n  if (/\\?.*_escaped_fragment_=/.test(req.url) ||\n      _.any(Spiderable.userAgentRegExps, function (re) {\n        return re.test(req.headers['user-agent']); })) {\n\n    var url = Spiderable._urlForPhantom(Meteor.absoluteUrl(), req.url);\n\n    // This string is going to be put into a bash script, so it's important\n    // that 'url' (which comes from the network) can neither exploit phantomjs\n    // or the bash script. JSON stringification should prevent it from\n    // exploiting phantomjs, and since the output of JSON.stringify shouldn't\n    // be able to contain newlines, it should be unable to exploit bash as\n    // well.\n    var phantomScript = \"var url = \" + JSON.stringify(url) + \";\" +\n          PHANTOM_SCRIPT;\n\n    // Allow override of phantomjs args via env var\n    // We use one env var to try to keep env-var explosion under control.\n    // We're not going to document this unless it is actually needed;\n    // (if you find yourself needing this please let us know the use case!)\n    var phantomJsArgs = process.env.METEOR_PKG_SPIDERABLE_PHANTOMJS_ARGS || '';\n\n    // Default image loading to off (we don't need images)\n    if (phantomJsArgs.indexOf(\"--load-images=\") === -1) {\n      phantomJsArgs += \" --load-images=no\";\n    }\n\n    // POODLE means SSLv3 is being turned off everywhere.\n    // phantomjs currently defaults to SSLv3, and won't use TLS.\n    // Use --ssl-protocol to set the default to TLSv1\n    // (another option would be 'any', but really, we want to say >= TLSv1)\n    // More info: https://groups.google.com/forum/#!topic/meteor-core/uZhT3AHwpsI\n    if (phantomJsArgs.indexOf(\"--ssl-protocol=\") === -1) {\n      phantomJsArgs += \" --ssl-protocol=TLSv1\";\n    }\n\n    // Run phantomjs.\n    //\n    // Use '/dev/stdin' to avoid writing to a temporary file. We can't\n    // just omit the file, as PhantomJS takes that to mean 'use a\n    // REPL' and exits as soon as stdin closes.\n    //\n    // However, Node 0.8 broke the ability to open /dev/stdin in the\n    // subprocess, so we can't just write our string to the process's stdin\n    // directly; see https://gist.github.com/3751746 for the gory details. We\n    // work around this with a bash heredoc. (We previous used a \"cat |\"\n    // instead, but that meant we couldn't use exec and had to manage several\n    // processes.)\n    child_process.execFile(\n      '/usr/bin/env',\n      ['bash', '-c',\n       (\"exec phantomjs \" + phantomJsArgs + \" /dev/stdin <<'END'\\n\" +\n        phantomScript + \"END\\n\")],\n      {timeout: Spiderable.requestTimeoutMs, maxBuffer: MAX_BUFFER},\n      function (error, stdout, stderr) {\n        if (!error && /<html/i.test(stdout)) {\n          res.writeHead(200, {'Content-Type': 'text/html; charset=UTF-8'});\n          res.end(stdout);\n        } else {\n          // phantomjs failed. Don't send the error, instead send the\n          // normal page.\n          if (error && error.code === 127)\n            Meteor._debug(\"spiderable: phantomjs not installed. Download and install from http://phantomjs.org/\");\n          else\n            Meteor._debug(\"spiderable: phantomjs failed at \" + url + \":\", error, \"\\nstderr:\", stderr, \"\\nstdout:\", stdout);\n\n          next();\n        }\n      });\n  } else {\n    next();\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.spiderable = {}, {\n  Spiderable: Spiderable\n});\n\n})();\n","servePath":"/packages/spiderable.js"}]