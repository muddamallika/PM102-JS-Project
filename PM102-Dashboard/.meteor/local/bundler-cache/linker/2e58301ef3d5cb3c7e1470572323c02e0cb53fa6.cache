[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Random = Package.random.Random;\nvar Hook = Package['callback-hook'].Hook;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Accounts, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-base\":{\"client_main.js\":[\"./accounts_client.js\",\"./url_client.js\",\"./localstorage_token.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/client_main.js                                                                             //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({AccountsClient:function(){return AccountsClient},AccountsTest:function(){return AccountsTest}});var AccountsClient;module.import(\"./accounts_client.js\",{\"AccountsClient\":function(v){AccountsClient=v}});var AccountsTest;module.import(\"./url_client.js\",{\"AccountsTest\":function(v){AccountsTest=v}});module.import(\"./localstorage_token.js\");\n                                                                                                                     // 2\n                                                                                                                     // 3\n                                                                                                                     //\n/**                                                                                                                  // 5\n * @namespace Accounts                                                                                               //\n * @summary The namespace for all client-side accounts-related methods.                                              //\n */                                                                                                                  //\nAccounts = new AccountsClient();                                                                                     // 9\n                                                                                                                     //\n/**                                                                                                                  // 11\n * @summary A [Mongo.Collection](#collections) containing user documents.                                            //\n * @locus Anywhere                                                                                                   //\n * @type {Mongo.Collection}                                                                                          //\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.users = Accounts.users;                                                                                       // 17\n                                                                                                                     //\n                                                                                                                     // 19\n                                                                                                                     // 20\n                                                                                                                     // 21\n                                                                                                                     // 22\n                                                                                                                     // 23\n                                                                                                                     // 24\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"accounts_client.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"./accounts_common.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/accounts_client.js                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({AccountsClient:function(){return AccountsClient}});var _classCallCheck;module.import(\"babel-runtime/helpers/classCallCheck\",{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import(\"babel-runtime/helpers/possibleConstructorReturn\",{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import(\"babel-runtime/helpers/inherits\",{\"default\":function(v){_inherits=v}});var AccountsCommon;module.import(\"./accounts_common.js\",{\"AccountsCommon\":function(v){AccountsCommon=v}});\n                                                                                                                     //\n                                                                                                                     //\n                                                                                                                     // 1\n                                                                                                                     //\n/**                                                                                                                  // 3\n * @summary Constructor for the `Accounts` object on the client.                                                     //\n * @locus Client                                                                                                     //\n * @class AccountsClient                                                                                             //\n * @extends AccountsCommon                                                                                           //\n * @instancename accountsClient                                                                                      //\n * @param {Object} options an object with fields:                                                                    //\n * @param {Object} options.connection Optional DDP connection to reuse.                                              //\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.                                    //\n */                                                                                                                  //\nvar AccountsClient = function (_AccountsCommon) {                                                                    // 13\n  _inherits(AccountsClient, _AccountsCommon);                                                                        // 13\n                                                                                                                     //\n  function AccountsClient(options) {                                                                                 // 14\n    _classCallCheck(this, AccountsClient);                                                                           // 14\n                                                                                                                     //\n    var _this = _possibleConstructorReturn(this, _AccountsCommon.call(this, options));                               // 14\n                                                                                                                     //\n    _this._loggingIn = false;                                                                                        // 17\n    _this._loggingInDeps = new Tracker.Dependency();                                                                 // 18\n                                                                                                                     //\n    _this._loginServicesHandle = _this.connection.subscribe(\"meteor.loginServiceConfiguration\");                     // 20\n                                                                                                                     //\n    _this._pageLoadLoginCallbacks = [];                                                                              // 23\n    _this._pageLoadLoginAttemptInfo = null;                                                                          // 24\n                                                                                                                     //\n    // Defined in url_client.js.                                                                                     // 26\n    _this._initUrlMatching();                                                                                        // 27\n                                                                                                                     //\n    // Defined in localstorage_token.js.                                                                             // 29\n    _this._initLocalStorage();                                                                                       // 30\n    return _this;                                                                                                    // 14\n  }                                                                                                                  // 31\n                                                                                                                     //\n  ///                                                                                                                // 33\n  /// CURRENT USER                                                                                                   // 34\n  ///                                                                                                                // 35\n                                                                                                                     //\n  // @override                                                                                                       // 37\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype.userId = function () {                                                                    // 13\n    function userId() {                                                                                              // 13\n      return this.connection.userId();                                                                               // 39\n    }                                                                                                                // 40\n                                                                                                                     //\n    return userId;                                                                                                   // 13\n  }();                                                                                                               // 13\n                                                                                                                     //\n  // This is mostly just called within this file, but Meteor.loginWithPassword                                       // 42\n  // also uses it to make loggingIn() be true during the beginPasswordExchange                                       // 43\n  // method call too.                                                                                                // 44\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype._setLoggingIn = function () {                                                             // 13\n    function _setLoggingIn(x) {                                                                                      // 13\n      if (this._loggingIn !== x) {                                                                                   // 46\n        this._loggingIn = x;                                                                                         // 47\n        this._loggingInDeps.changed();                                                                               // 48\n      }                                                                                                              // 49\n    }                                                                                                                // 50\n                                                                                                                     //\n    return _setLoggingIn;                                                                                            // 13\n  }();                                                                                                               // 13\n                                                                                                                     //\n  /**                                                                                                                // 52\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client                                                                                                   //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype.loggingIn = function () {                                                                 // 13\n    function loggingIn() {                                                                                           // 13\n      this._loggingInDeps.depend();                                                                                  // 57\n      return this._loggingIn;                                                                                        // 58\n    }                                                                                                                // 59\n                                                                                                                     //\n    return loggingIn;                                                                                                // 13\n  }();                                                                                                               // 13\n                                                                                                                     //\n  /**                                                                                                                // 61\n   * @summary Log the user out.                                                                                      //\n   * @locus Client                                                                                                   //\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype.logout = function () {                                                                    // 13\n    function logout(callback) {                                                                                      // 13\n      var self = this;                                                                                               // 67\n      self.connection.apply('logout', [], {                                                                          // 68\n        wait: true                                                                                                   // 69\n      }, function (error, result) {                                                                                  // 68\n        if (error) {                                                                                                 // 71\n          callback && callback(error);                                                                               // 72\n        } else {                                                                                                     // 73\n          self.makeClientLoggedOut();                                                                                // 74\n          callback && callback();                                                                                    // 75\n        }                                                                                                            // 76\n      });                                                                                                            // 77\n    }                                                                                                                // 78\n                                                                                                                     //\n    return logout;                                                                                                   // 13\n  }();                                                                                                               // 13\n                                                                                                                     //\n  /**                                                                                                                // 80\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client                                                                                                   //\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsClient.prototype.logoutOtherClients = function () {                                                        // 13\n    function logoutOtherClients(callback) {                                                                          // 13\n      var self = this;                                                                                               // 86\n                                                                                                                     //\n      // We need to make two method calls: one to replace our current token,                                         // 88\n      // and another to remove all tokens except the current one. We want to                                         // 89\n      // call these two methods one after the other, without any other                                               // 90\n      // methods running between them. For example, we don't want `logout`                                           // 91\n      // to be called in between our two method calls (otherwise the second                                          // 92\n      // method call would return an error). Another example: we don't want                                          // 93\n      // logout to be called before the callback for `getNewToken`;                                                  // 94\n      // otherwise we would momentarily log the user out and then write a                                            // 95\n      // new token to localStorage.                                                                                  // 96\n      //                                                                                                             // 97\n      // To accomplish this, we make both calls as wait methods, and queue                                           // 98\n      // them one after the other, without spinning off the event loop in                                            // 99\n      // between. Even though we queue `removeOtherTokens` before                                                    // 100\n      // `getNewToken`, we won't actually send the `removeOtherTokens` call                                          // 101\n      // until the `getNewToken` callback has finished running, because they                                         // 102\n      // are both wait methods.                                                                                      // 103\n      self.connection.apply('getNewToken', [], { wait: true }, function (err, result) {                              // 104\n        if (!err) {                                                                                                  // 109\n          self._storeLoginToken(self.userId(), result.token, result.tokenExpires);                                   // 110\n        }                                                                                                            // 115\n      });                                                                                                            // 116\n                                                                                                                     //\n      self.connection.apply('removeOtherTokens', [], { wait: true }, function (err) {                                // 119\n        callback && callback(err);                                                                                   // 124\n      });                                                                                                            // 125\n    }                                                                                                                // 127\n                                                                                                                     //\n    return logoutOtherClients;                                                                                       // 13\n  }();                                                                                                               // 13\n                                                                                                                     //\n  return AccountsClient;                                                                                             // 13\n}(AccountsCommon);;                                                                                                  // 13\n                                                                                                                     //\nvar Ap = AccountsClient.prototype;                                                                                   // 130\n                                                                                                                     //\n/**                                                                                                                  // 132\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client                                                                                                     //\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.loggingIn = function () {                                                                                     // 137\n  return Accounts.loggingIn();                                                                                       // 138\n};                                                                                                                   // 139\n                                                                                                                     //\n///                                                                                                                  // 141\n/// LOGIN METHODS                                                                                                    // 142\n///                                                                                                                  // 143\n                                                                                                                     //\n// Call a login method on the server.                                                                                // 145\n//                                                                                                                   // 146\n// A login method is a method which on success calls `this.setUserId(id)` and                                        // 147\n// `Accounts._setLoginToken` on the server and returns an object with fields                                         // 148\n// 'id' (containing the user id), 'token' (containing a resume token), and                                           // 149\n// optionally `tokenExpires`.                                                                                        // 150\n//                                                                                                                   // 151\n// This function takes care of:                                                                                      // 152\n//   - Updating the Meteor.loggingIn() reactive data source                                                          // 153\n//   - Calling the method in 'wait' mode                                                                             // 154\n//   - On success, saving the resume token to localStorage                                                           // 155\n//   - On success, calling Accounts.connection.setUserId()                                                           // 156\n//   - Setting up an onReconnect handler which logs in with                                                          // 157\n//     the resume token                                                                                              // 158\n//                                                                                                                   // 159\n// Options:                                                                                                          // 160\n// - methodName: The method to call (default 'login')                                                                // 161\n// - methodArguments: The arguments for the method                                                                   // 162\n// - validateResult: If provided, will be called with the result of the                                              // 163\n//                 method. If it throws, the client will not be logged in (and                                       // 164\n//                 its error will be passed to the callback).                                                        // 165\n// - userCallback: Will be called with no arguments once the user is fully                                           // 166\n//                 logged in, or with the error on error.                                                            // 167\n//                                                                                                                   // 168\nAp.callLoginMethod = function (options) {                                                                            // 169\n  var self = this;                                                                                                   // 170\n                                                                                                                     //\n  options = _.extend({                                                                                               // 172\n    methodName: 'login',                                                                                             // 173\n    methodArguments: [{}],                                                                                           // 174\n    _suppressLoggingIn: false                                                                                        // 175\n  }, options);                                                                                                       // 172\n                                                                                                                     //\n  // Set defaults for callback arguments to no-op functions; make sure we                                            // 178\n  // override falsey values too.                                                                                     // 179\n  _.each(['validateResult', 'userCallback'], function (f) {                                                          // 180\n    if (!options[f]) options[f] = function () {};                                                                    // 181\n  });                                                                                                                // 183\n                                                                                                                     //\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.                                              // 185\n  var loginCallbacks = _.once(function (error) {                                                                     // 186\n    if (!error) {                                                                                                    // 187\n      self._onLoginHook.each(function (callback) {                                                                   // 188\n        callback();                                                                                                  // 189\n        return true;                                                                                                 // 190\n      });                                                                                                            // 191\n    } else {                                                                                                         // 192\n      self._onLoginFailureHook.each(function (callback) {                                                            // 193\n        callback({ error: error });                                                                                  // 194\n        return true;                                                                                                 // 195\n      });                                                                                                            // 196\n    }                                                                                                                // 197\n    options.userCallback.apply(this, arguments);                                                                     // 198\n  });                                                                                                                // 199\n                                                                                                                     //\n  var reconnected = false;                                                                                           // 201\n                                                                                                                     //\n  // We want to set up onReconnect as soon as we get a result token back from                                        // 203\n  // the server, without having to wait for subscriptions to rerun. This is                                          // 204\n  // because if we disconnect and reconnect between getting the result and                                           // 205\n  // getting the results of subscription rerun, we WILL NOT re-send this                                             // 206\n  // method (because we never re-send methods whose results we've received)                                          // 207\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"                                            // 208\n  // time. This will lead to makeClientLoggedIn(result.id) even though we                                            // 209\n  // haven't actually sent a login method!                                                                           // 210\n  //                                                                                                                 // 211\n  // But by making sure that we send this \"resume\" login in that case (and                                           // 212\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate                                         // 213\n  // client-side userId. (It's important that livedata_connection guarantees                                         // 214\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback                                          // 215\n  // will occur before the callback from the resume login call.)                                                     // 216\n  var onResultReceived = function onResultReceived(err, result) {                                                    // 217\n    if (err || !result || !result.token) {                                                                           // 218\n      // Leave onReconnect alone if there was an error, so that if the user was                                      // 219\n      // already logged in they will still get logged in on reconnect.                                               // 220\n      // See issue #4970.                                                                                            // 221\n    } else {                                                                                                         // 222\n      self.connection.onReconnect = function () {                                                                    // 223\n        reconnected = true;                                                                                          // 224\n        // If our token was updated in storage, use the latest one.                                                  // 225\n        var storedToken = self._storedLoginToken();                                                                  // 226\n        if (storedToken) {                                                                                           // 227\n          result = {                                                                                                 // 228\n            token: storedToken,                                                                                      // 229\n            tokenExpires: self._storedLoginTokenExpires()                                                            // 230\n          };                                                                                                         // 228\n        }                                                                                                            // 232\n        if (!result.tokenExpires) result.tokenExpires = self._tokenExpiration(new Date());                           // 233\n        if (self._tokenExpiresSoon(result.tokenExpires)) {                                                           // 235\n          self.makeClientLoggedOut();                                                                                // 236\n        } else {                                                                                                     // 237\n          self.callLoginMethod({                                                                                     // 238\n            methodArguments: [{ resume: result.token }],                                                             // 239\n            // Reconnect quiescence ensures that the user doesn't see an                                             // 240\n            // intermediate state before the login method finishes. So we don't                                      // 241\n            // need to show a logging-in animation.                                                                  // 242\n            _suppressLoggingIn: true,                                                                                // 243\n            userCallback: function () {                                                                              // 244\n              function userCallback(error) {                                                                         // 244\n                var storedTokenNow = self._storedLoginToken();                                                       // 245\n                if (error) {                                                                                         // 246\n                  // If we had a login error AND the current stored token is the                                     // 247\n                  // one that we tried to log in with, then declare ourselves                                        // 248\n                  // logged out. If there's a token in storage but it's not the                                      // 249\n                  // token that we tried to log in with, we don't know anything                                      // 250\n                  // about whether that token is valid or not, so do nothing. The                                    // 251\n                  // periodic localStorage poll will decide if we are logged in or                                   // 252\n                  // out with this token, if it hasn't already. Of course, even                                      // 253\n                  // with this check, another tab could insert a new valid token                                     // 254\n                  // immediately before we clear localStorage here, which would                                      // 255\n                  // lead to both tabs being logged out, but by checking the token                                   // 256\n                  // in storage right now we hope to make that unlikely to happen.                                   // 257\n                  //                                                                                                 // 258\n                  // If there is no token in storage right now, we don't have to                                     // 259\n                  // do anything; whatever code removed the token from storage was                                   // 260\n                  // responsible for calling `makeClientLoggedOut()`, or the                                         // 261\n                  // periodic localStorage poll will call `makeClientLoggedOut`                                      // 262\n                  // eventually if another tab wiped the token from storage.                                         // 263\n                  if (storedTokenNow && storedTokenNow === result.token) {                                           // 264\n                    self.makeClientLoggedOut();                                                                      // 265\n                  }                                                                                                  // 266\n                }                                                                                                    // 267\n                // Possibly a weird callback to call, but better than nothing if                                     // 268\n                // there is a reconnect between \"login result received\" and \"data                                    // 269\n                // ready\".                                                                                           // 270\n                loginCallbacks(error);                                                                               // 271\n              }                                                                                                      // 272\n                                                                                                                     //\n              return userCallback;                                                                                   // 244\n            }() });                                                                                                  // 244\n        }                                                                                                            // 273\n      };                                                                                                             // 274\n    }                                                                                                                // 275\n  };                                                                                                                 // 276\n                                                                                                                     //\n  // This callback is called once the local cache of the current-user                                                // 278\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to                                        // 279\n  // date.                                                                                                           // 280\n  var loggedInAndDataReadyCallback = function loggedInAndDataReadyCallback(error, result) {                          // 281\n    // If the login method returns its result but the connection is lost                                             // 282\n    // before the data is in the local cache, it'll set an onReconnect (see                                          // 283\n    // above). The onReconnect will try to log in using the token, and *it*                                          // 284\n    // will call userCallback via its own version of this                                                            // 285\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.                                           // 286\n    if (reconnected) return;                                                                                         // 287\n                                                                                                                     //\n    // Note that we need to call this even if _suppressLoggingIn is true,                                            // 290\n    // because it could be matching a _setLoggingIn(true) from a                                                     // 291\n    // half-completed pre-reconnect login method.                                                                    // 292\n    self._setLoggingIn(false);                                                                                       // 293\n    if (error || !result) {                                                                                          // 294\n      error = error || new Error(\"No result from call to \" + options.methodName);                                    // 295\n      loginCallbacks(error);                                                                                         // 297\n      return;                                                                                                        // 298\n    }                                                                                                                // 299\n    try {                                                                                                            // 300\n      options.validateResult(result);                                                                                // 301\n    } catch (e) {                                                                                                    // 302\n      loginCallbacks(e);                                                                                             // 303\n      return;                                                                                                        // 304\n    }                                                                                                                // 305\n                                                                                                                     //\n    // Make the client logged in. (The user data should already be loaded!)                                          // 307\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);                                           // 308\n    loginCallbacks();                                                                                                // 309\n  };                                                                                                                 // 310\n                                                                                                                     //\n  if (!options._suppressLoggingIn) self._setLoggingIn(true);                                                         // 312\n  self.connection.apply(options.methodName, options.methodArguments, { wait: true, onResultReceived: onResultReceived }, loggedInAndDataReadyCallback);\n};                                                                                                                   // 319\n                                                                                                                     //\nAp.makeClientLoggedOut = function () {                                                                               // 321\n  // Ensure client was successfully logged in before running logout hooks.                                           // 322\n  if (this.connection._userId) {                                                                                     // 323\n    this._onLogoutHook.each(function (callback) {                                                                    // 324\n      callback();                                                                                                    // 325\n      return true;                                                                                                   // 326\n    });                                                                                                              // 327\n  }                                                                                                                  // 328\n  this._unstoreLoginToken();                                                                                         // 329\n  this.connection.setUserId(null);                                                                                   // 330\n  this.connection.onReconnect = null;                                                                                // 331\n};                                                                                                                   // 332\n                                                                                                                     //\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {                                                     // 334\n  this._storeLoginToken(userId, token, tokenExpires);                                                                // 335\n  this.connection.setUserId(userId);                                                                                 // 336\n};                                                                                                                   // 337\n                                                                                                                     //\n/**                                                                                                                  // 339\n * @summary Log the user out.                                                                                        //\n * @locus Client                                                                                                     //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.logout = function (callback) {                                                                                // 345\n  return Accounts.logout(callback);                                                                                  // 346\n};                                                                                                                   // 347\n                                                                                                                     //\n/**                                                                                                                  // 349\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client                                                                                                     //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.logoutOtherClients = function (callback) {                                                                    // 355\n  return Accounts.logoutOtherClients(callback);                                                                      // 356\n};                                                                                                                   // 357\n                                                                                                                     //\n///                                                                                                                  // 360\n/// LOGIN SERVICES                                                                                                   // 361\n///                                                                                                                  // 362\n                                                                                                                     //\n// A reactive function returning whether the loginServiceConfiguration                                               // 364\n// subscription is ready. Used by accounts-ui to hide the login button                                               // 365\n// until we have all the configuration loaded                                                                        // 366\n//                                                                                                                   // 367\nAp.loginServicesConfigured = function () {                                                                           // 368\n  return this._loginServicesHandle.ready();                                                                          // 369\n};                                                                                                                   // 370\n                                                                                                                     //\n// Some login services such as the redirect login flow or the resume                                                 // 373\n// login handler can log the user in at page load time.  The                                                         // 374\n// Meteor.loginWithX functions have a callback argument, but the                                                     // 375\n// callback function instance won't be in memory any longer if the                                                   // 376\n// page was reloaded.  The `onPageLoadLogin` function allows a                                                       // 377\n// callback to be registered for the case where the login was                                                        // 378\n// initiated in a previous VM, and we now have the result of the login                                               // 379\n// attempt in a new VM.                                                                                              // 380\n                                                                                                                     //\n// Register a callback to be called if we have information about a                                                   // 382\n// login attempt at page load time.  Call the callback immediately if                                                // 383\n// we already have the page load login attempt info, otherwise stash                                                 // 384\n// the callback to be called if and when we do get the attempt info.                                                 // 385\n//                                                                                                                   // 386\nAp.onPageLoadLogin = function (f) {                                                                                  // 387\n  if (this._pageLoadLoginAttemptInfo) {                                                                              // 388\n    f(this._pageLoadLoginAttemptInfo);                                                                               // 389\n  } else {                                                                                                           // 390\n    this._pageLoadLoginCallbacks.push(f);                                                                            // 391\n  }                                                                                                                  // 392\n};                                                                                                                   // 393\n                                                                                                                     //\n// Receive the information about the login attempt at page load time.                                                // 396\n// Call registered callbacks, and also record the info in case                                                       // 397\n// someone's callback hasn't been registered yet.                                                                    // 398\n//                                                                                                                   // 399\nAp._pageLoadLogin = function (attemptInfo) {                                                                         // 400\n  if (this._pageLoadLoginAttemptInfo) {                                                                              // 401\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");                                     // 402\n    return;                                                                                                          // 403\n  }                                                                                                                  // 404\n                                                                                                                     //\n  _.each(this._pageLoadLoginCallbacks, function (callback) {                                                         // 406\n    callback(attemptInfo);                                                                                           // 407\n  });                                                                                                                // 408\n                                                                                                                     //\n  this._pageLoadLoginCallbacks = [];                                                                                 // 410\n  this._pageLoadLoginAttemptInfo = attemptInfo;                                                                      // 411\n};                                                                                                                   // 412\n                                                                                                                     //\n///                                                                                                                  // 415\n/// HANDLEBARS HELPERS                                                                                               // 416\n///                                                                                                                  // 417\n                                                                                                                     //\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}                                            // 419\n// global helpers.                                                                                                   // 420\nif (Package.blaze) {                                                                                                 // 421\n  /**                                                                                                                // 422\n   * @global                                                                                                         //\n   * @name  currentUser                                                                                              //\n   * @isHelper true                                                                                                  //\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */                                                                                                                //\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {                                           // 428\n    return Meteor.user();                                                                                            // 429\n  });                                                                                                                // 430\n                                                                                                                     //\n  /**                                                                                                                // 432\n   * @global                                                                                                         //\n   * @name  loggingIn                                                                                                //\n   * @isHelper true                                                                                                  //\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).                                                         //\n   */                                                                                                                //\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {                                             // 438\n    return Meteor.loggingIn();                                                                                       // 439\n  });                                                                                                                // 440\n}                                                                                                                    // 441\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"accounts_common.js\":[\"babel-runtime/helpers/classCallCheck\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/accounts_common.js                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({AccountsCommon:function(){return AccountsCommon}});var _classCallCheck;module.import(\"babel-runtime/helpers/classCallCheck\",{\"default\":function(v){_classCallCheck=v}});\n/**                                                                                                                  // 1\n * @summary Super-constructor for AccountsClient and AccountsServer.                                                 //\n * @locus Anywhere                                                                                                   //\n * @class AccountsCommon                                                                                             //\n * @instancename accountsClientOrServer                                                                              //\n * @param options {Object} an object with fields:                                                                    //\n * - connection {Object} Optional DDP connection to reuse.                                                           //\n * - ddpUrl {String} Optional URL for creating a new DDP connection.                                                 //\n */                                                                                                                  //\nvar AccountsCommon = function () {                                                                                   // 10\n  function AccountsCommon(options) {                                                                                 // 11\n    _classCallCheck(this, AccountsCommon);                                                                           // 11\n                                                                                                                     //\n    // Currently this is read directly by packages like accounts-password                                            // 12\n    // and accounts-ui-unstyled.                                                                                     // 13\n    this._options = {};                                                                                              // 14\n                                                                                                                     //\n    // Note that setting this.connection = null causes this.users to be a                                            // 16\n    // LocalCollection, which is not what we want.                                                                   // 17\n    this.connection = undefined;                                                                                     // 18\n    this._initConnection(options || {});                                                                             // 19\n                                                                                                                     //\n    // There is an allow call in accounts_server.js that restricts writes to                                         // 21\n    // this collection.                                                                                              // 22\n    this.users = new Mongo.Collection(\"users\", {                                                                     // 23\n      _preventAutopublish: true,                                                                                     // 24\n      connection: this.connection                                                                                    // 25\n    });                                                                                                              // 23\n                                                                                                                     //\n    // Callback exceptions are printed with Meteor._debug and ignored.                                               // 28\n    this._onLoginHook = new Hook({                                                                                   // 29\n      bindEnvironment: false,                                                                                        // 30\n      debugPrintExceptions: \"onLogin callback\"                                                                       // 31\n    });                                                                                                              // 29\n                                                                                                                     //\n    this._onLoginFailureHook = new Hook({                                                                            // 34\n      bindEnvironment: false,                                                                                        // 35\n      debugPrintExceptions: \"onLoginFailure callback\"                                                                // 36\n    });                                                                                                              // 34\n                                                                                                                     //\n    this._onLogoutHook = new Hook({                                                                                  // 39\n      bindEnvironment: false,                                                                                        // 40\n      debugPrintExceptions: \"onLogout callback\"                                                                      // 41\n    });                                                                                                              // 39\n  }                                                                                                                  // 43\n                                                                                                                     //\n  /**                                                                                                                // 45\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                    //\n   * @locus Anywhere but publish functions                                                                           //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.userId = function () {                                                                    // 10\n    function userId() {                                                                                              // 10\n      throw new Error(\"userId method not implemented\");                                                              // 50\n    }                                                                                                                // 51\n                                                                                                                     //\n    return userId;                                                                                                   // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  /**                                                                                                                // 53\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.                //\n   * @locus Anywhere but publish functions                                                                           //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.user = function () {                                                                      // 10\n    function user() {                                                                                                // 10\n      var userId = this.userId();                                                                                    // 58\n      return userId ? this.users.findOne(userId) : null;                                                             // 59\n    }                                                                                                                // 60\n                                                                                                                     //\n    return user;                                                                                                     // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  // Set up config for the accounts system. Call this on both the client                                             // 62\n  // and the server.                                                                                                 // 63\n  //                                                                                                                 // 64\n  // Note that this method gets overridden on AccountsServer.prototype, but                                          // 65\n  // the overriding method calls the overridden method.                                                              // 66\n  //                                                                                                                 // 67\n  // XXX we should add some enforcement that this is called on both the                                              // 68\n  // client and the server. Otherwise, a user can                                                                    // 69\n  // 'forbidClientAccountCreation' only on the client and while it looks                                             // 70\n  // like their app is secure, the server will still accept createUser                                               // 71\n  // calls. https://github.com/meteor/meteor/issues/828                                                              // 72\n  //                                                                                                                 // 73\n  // @param options {Object} an object with fields:                                                                  // 74\n  // - sendVerificationEmail {Boolean}                                                                               // 75\n  //     Send email address verification emails to new users created from                                            // 76\n  //     client signups.                                                                                             // 77\n  // - forbidClientAccountCreation {Boolean}                                                                         // 78\n  //     Do not allow clients to create accounts directly.                                                           // 79\n  // - restrictCreationByEmailDomain {Function or String}                                                            // 80\n  //     Require created users to have an email matching the function or                                             // 81\n  //     having the string as domain.                                                                                // 82\n  // - loginExpirationInDays {Number}                                                                                // 83\n  //     Number of days since login until a user is logged out (login token                                          // 84\n  //     expires).                                                                                                   // 85\n  // - passwordResetTokenExpirationInDays {Number}                                                                   // 86\n  //     Number of days since password reset token creation until the                                                // 87\n  //     token cannt be used any longer (password reset token expires).                                              // 88\n                                                                                                                     //\n  /**                                                                                                                // 90\n   * @summary Set global accounts options.                                                                           //\n   * @locus Anywhere                                                                                                 //\n   * @param {Object} options                                                                                         //\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.config = function () {                                                                    // 10\n    function config(options) {                                                                                       // 10\n      var self = this;                                                                                               // 103\n                                                                                                                     //\n      // We don't want users to accidentally only call Accounts.config on the                                        // 105\n      // client, where some of the options will have partial effects (eg removing                                    // 106\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation                                 // 107\n      // is set, or redirecting Google login to a specific-domain page) without                                      // 108\n      // having their full effects.                                                                                  // 109\n      if (Meteor.isServer) {                                                                                         // 110\n        __meteor_runtime_config__.accountsConfigCalled = true;                                                       // 111\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {                                                  // 112\n        // XXX would be nice to \"crash\" the client and replace the UI with an error                                  // 113\n        // message, but there's no trivial way to do this.                                                           // 114\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      }                                                                                                              // 117\n                                                                                                                     //\n      // We need to validate the oauthSecretKey option at the time                                                   // 119\n      // Accounts.config is called. We also deliberately don't store the                                             // 120\n      // oauthSecretKey in Accounts._options.                                                                        // 121\n      if (_.has(options, \"oauthSecretKey\")) {                                                                        // 122\n        if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");       // 123\n        if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);                                 // 127\n        options = _.omit(options, \"oauthSecretKey\");                                                                 // 128\n      }                                                                                                              // 129\n                                                                                                                     //\n      // validate option keys                                                                                        // 131\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\"];\n      _.each(_.keys(options), function (key) {                                                                       // 134\n        if (!_.contains(VALID_KEYS, key)) {                                                                          // 135\n          throw new Error(\"Accounts.config: Invalid key: \" + key);                                                   // 136\n        }                                                                                                            // 137\n      });                                                                                                            // 138\n                                                                                                                     //\n      // set values in Accounts._options                                                                             // 140\n      _.each(VALID_KEYS, function (key) {                                                                            // 141\n        if (key in options) {                                                                                        // 142\n          if (key in self._options) {                                                                                // 143\n            throw new Error(\"Can't set `\" + key + \"` more than once\");                                               // 144\n          }                                                                                                          // 145\n          self._options[key] = options[key];                                                                         // 146\n        }                                                                                                            // 147\n      });                                                                                                            // 148\n    }                                                                                                                // 149\n                                                                                                                     //\n    return config;                                                                                                   // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  /**                                                                                                                // 151\n   * @summary Register a callback to be called after a login attempt succeeds.                                       //\n   * @locus Anywhere                                                                                                 //\n   * @param {Function} func The callback to be called when login is successful.                                      //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.onLogin = function () {                                                                   // 10\n    function onLogin(func) {                                                                                         // 10\n      return this._onLoginHook.register(func);                                                                       // 157\n    }                                                                                                                // 158\n                                                                                                                     //\n    return onLogin;                                                                                                  // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  /**                                                                                                                // 160\n   * @summary Register a callback to be called after a login attempt fails.                                          //\n   * @locus Anywhere                                                                                                 //\n   * @param {Function} func The callback to be called after the login has failed.                                    //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.onLoginFailure = function () {                                                            // 10\n    function onLoginFailure(func) {                                                                                  // 10\n      return this._onLoginFailureHook.register(func);                                                                // 166\n    }                                                                                                                // 167\n                                                                                                                     //\n    return onLoginFailure;                                                                                           // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  /**                                                                                                                // 169\n   * @summary Register a callback to be called after a logout attempt succeeds.                                      //\n   * @locus Anywhere                                                                                                 //\n   * @param {Function} func The callback to be called when logout is successful.                                     //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  AccountsCommon.prototype.onLogout = function () {                                                                  // 10\n    function onLogout(func) {                                                                                        // 10\n      return this._onLogoutHook.register(func);                                                                      // 175\n    }                                                                                                                // 176\n                                                                                                                     //\n    return onLogout;                                                                                                 // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  AccountsCommon.prototype._initConnection = function () {                                                           // 10\n    function _initConnection(options) {                                                                              // 10\n      if (!Meteor.isClient) {                                                                                        // 179\n        return;                                                                                                      // 180\n      }                                                                                                              // 181\n                                                                                                                     //\n      // The connection used by the Accounts system. This is the connection                                          // 183\n      // that will get logged in by Meteor.login(), and this is the                                                  // 184\n      // connection whose login state will be reflected by Meteor.userId().                                          // 185\n      //                                                                                                             // 186\n      // It would be much preferable for this to be in accounts_client.js,                                           // 187\n      // but it has to be here because it's needed to create the                                                     // 188\n      // Meteor.users collection.                                                                                    // 189\n                                                                                                                     //\n      if (options.connection) {                                                                                      // 191\n        this.connection = options.connection;                                                                        // 192\n      } else if (options.ddpUrl) {                                                                                   // 193\n        this.connection = DDP.connect(options.ddpUrl);                                                               // 194\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client                                          // 197\n        // to a different authentication server. This is for a very                                                  // 198\n        // particular use case that comes up when implementing a oauth                                               // 199\n        // server. Unsupported and may go away at any point in time.                                                 // 200\n        //                                                                                                           // 201\n        // We will eventually provide a general way to use account-base                                              // 202\n        // against any DDP connection, not just one special one.                                                     // 203\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);                            // 204\n      } else {                                                                                                       // 206\n        this.connection = Meteor.connection;                                                                         // 207\n      }                                                                                                              // 208\n    }                                                                                                                // 209\n                                                                                                                     //\n    return _initConnection;                                                                                          // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  AccountsCommon.prototype._getTokenLifetimeMs = function () {                                                       // 10\n    function _getTokenLifetimeMs() {                                                                                 // 10\n      return (this._options.loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;           // 212\n    }                                                                                                                // 214\n                                                                                                                     //\n    return _getTokenLifetimeMs;                                                                                      // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  AccountsCommon.prototype._getPasswordResetTokenLifetimeMs = function () {                                          // 10\n    function _getPasswordResetTokenLifetimeMs() {                                                                    // 10\n      return (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }                                                                                                                // 219\n                                                                                                                     //\n    return _getPasswordResetTokenLifetimeMs;                                                                         // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  AccountsCommon.prototype._getPasswordEnrollTokenLifetimeMs = function () {                                         // 10\n    function _getPasswordEnrollTokenLifetimeMs() {                                                                   // 10\n      return (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }                                                                                                                // 224\n                                                                                                                     //\n    return _getPasswordEnrollTokenLifetimeMs;                                                                        // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  AccountsCommon.prototype._tokenExpiration = function () {                                                          // 10\n    function _tokenExpiration(when) {                                                                                // 10\n      // We pass when through the Date constructor for backwards compatibility;                                      // 227\n      // `when` used to be a number.                                                                                 // 228\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());                                        // 229\n    }                                                                                                                // 230\n                                                                                                                     //\n    return _tokenExpiration;                                                                                         // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  AccountsCommon.prototype._tokenExpiresSoon = function () {                                                         // 10\n    function _tokenExpiresSoon(when) {                                                                               // 10\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();                                                           // 233\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;                                                     // 234\n      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;                                        // 235\n      return new Date() > new Date(when) - minLifetimeMs;                                                            // 237\n    }                                                                                                                // 238\n                                                                                                                     //\n    return _tokenExpiresSoon;                                                                                        // 10\n  }();                                                                                                               // 10\n                                                                                                                     //\n  return AccountsCommon;                                                                                             // 10\n}();                                                                                                                 // 10\n                                                                                                                     //\nvar Ap = AccountsCommon.prototype;                                                                                   // 241\n                                                                                                                     //\n// Note that Accounts is defined separately in accounts_client.js and                                                // 243\n// accounts_server.js.                                                                                               // 244\n                                                                                                                     //\n/**                                                                                                                  // 246\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                      //\n * @locus Anywhere but publish functions                                                                             //\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.userId = function () {                                                                                        // 251\n  return Accounts.userId();                                                                                          // 252\n};                                                                                                                   // 253\n                                                                                                                     //\n/**                                                                                                                  // 255\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.                  //\n * @locus Anywhere but publish functions                                                                             //\n * @importFromPackage meteor                                                                                         //\n */                                                                                                                  //\nMeteor.user = function () {                                                                                          // 260\n  return Accounts.user();                                                                                            // 261\n};                                                                                                                   // 262\n                                                                                                                     //\n// how long (in days) until a login token expires                                                                    // 264\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;                                                                              // 265\n// how long (in days) until reset password token expires                                                             // 266\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;                                                                // 267\n// how long (in days) until enrol password token expires                                                             // 268\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;                                                              // 269\n// Clients don't try to auto-login with a token that is going to expire within                                       // 270\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.                                        // 271\n// Tries to avoid abrupt disconnects from expiring tokens.                                                           // 272\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour                                                                  // 273\n// how often (in milliseconds) we check for expired tokens                                                           // 274\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes                                                                // 275\n// how long we wait before logging out clients when Meteor.logoutOtherClients is                                     // 276\n// called                                                                                                            // 277\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;                                                                               // 278\n                                                                                                                     //\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility                              // 280\nMeteor.startup(function () {                                                                                         // 281\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                                  // 282\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;                                                // 284\n  Ap.ConfigError = ServiceConfiguration.ConfigError;                                                                 // 285\n});                                                                                                                  // 286\n                                                                                                                     //\n// Thrown when the user cancels the login process (eg, closes an oauth                                               // 288\n// popup, declines retina scan, etc)                                                                                 // 289\nvar lceName = 'Accounts.LoginCancelledError';                                                                        // 290\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {                                      // 291\n  this.message = description;                                                                                        // 294\n});                                                                                                                  // 295\nAp.LoginCancelledError.prototype.name = lceName;                                                                     // 297\n                                                                                                                     //\n// This is used to transmit specific subclass errors over the wire. We should                                        // 299\n// come up with a more generic way to do this (eg, with some sort of symbolic                                        // 300\n// error code rather than a number).                                                                                 // 301\nAp.LoginCancelledError.numericError = 0x8acdc2f;                                                                     // 302\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"localstorage_token.js\":[\"./accounts_client.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/localstorage_token.js                                                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar AccountsClient;module.import(\"./accounts_client.js\",{\"AccountsClient\":function(v){AccountsClient=v}});           // 1\nvar Ap = AccountsClient.prototype;                                                                                   // 2\n                                                                                                                     //\n// This file deals with storing a login token and user id in the                                                     // 4\n// browser's localStorage facility. It polls local storage every few                                                 // 5\n// seconds to synchronize login state between multiple tabs in the same                                              // 6\n// browser.                                                                                                          // 7\n                                                                                                                     //\n// Login with a Meteor access token. This is the only public function                                                // 9\n// here.                                                                                                             // 10\nMeteor.loginWithToken = function (token, callback) {                                                                 // 11\n  return Accounts.loginWithToken(token, callback);                                                                   // 12\n};                                                                                                                   // 13\n                                                                                                                     //\nAp.loginWithToken = function (token, callback) {                                                                     // 15\n  this.callLoginMethod({                                                                                             // 16\n    methodArguments: [{                                                                                              // 17\n      resume: token                                                                                                  // 18\n    }],                                                                                                              // 17\n    userCallback: callback                                                                                           // 20\n  });                                                                                                                // 16\n};                                                                                                                   // 22\n                                                                                                                     //\n// Semi-internal API. Call this function to re-enable auto login after                                               // 24\n// if it was disabled at startup.                                                                                    // 25\nAp._enableAutoLogin = function () {                                                                                  // 26\n  this._autoLoginEnabled = true;                                                                                     // 27\n  this._pollStoredLoginToken();                                                                                      // 28\n};                                                                                                                   // 29\n                                                                                                                     //\n///                                                                                                                  // 32\n/// STORING                                                                                                          // 33\n///                                                                                                                  // 34\n                                                                                                                     //\n// Call this from the top level of the test file for any test that does                                              // 36\n// logging in and out, to protect multiple tabs running the same tests                                               // 37\n// simultaneously from interfering with each others' localStorage.                                                   // 38\nAp._isolateLoginTokenForTest = function () {                                                                         // 39\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();                                                         // 40\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();                                                                 // 41\n};                                                                                                                   // 42\n                                                                                                                     //\nAp._storeLoginToken = function (userId, token, tokenExpires) {                                                       // 44\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);                                                            // 45\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);                                                         // 46\n  if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());                                               // 47\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);                                          // 49\n                                                                                                                     //\n  // to ensure that the localstorage poller doesn't end up trying to                                                 // 51\n  // connect a second time                                                                                           // 52\n  this._lastLoginTokenWhenPolled = token;                                                                            // 53\n};                                                                                                                   // 54\n                                                                                                                     //\nAp._unstoreLoginToken = function () {                                                                                // 56\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);                                                                 // 57\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);                                                             // 58\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);                                                     // 59\n                                                                                                                     //\n  // to ensure that the localstorage poller doesn't end up trying to                                                 // 61\n  // connect a second time                                                                                           // 62\n  this._lastLoginTokenWhenPolled = null;                                                                             // 63\n};                                                                                                                   // 64\n                                                                                                                     //\n// This is private, but it is exported for now because it is used by a                                               // 66\n// test in accounts-password.                                                                                        // 67\n//                                                                                                                   // 68\nAp._storedLoginToken = function () {                                                                                 // 69\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);                                                         // 70\n};                                                                                                                   // 71\n                                                                                                                     //\nAp._storedLoginTokenExpires = function () {                                                                          // 73\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);                                                 // 74\n};                                                                                                                   // 75\n                                                                                                                     //\nAp._storedUserId = function () {                                                                                     // 77\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);                                                             // 78\n};                                                                                                                   // 79\n                                                                                                                     //\nAp._unstoreLoginTokenIfExpiresSoon = function () {                                                                   // 81\n  var tokenExpires = this._storedLoginTokenExpires();                                                                // 82\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {                                              // 83\n    this._unstoreLoginToken();                                                                                       // 84\n  }                                                                                                                  // 85\n};                                                                                                                   // 86\n                                                                                                                     //\n///                                                                                                                  // 88\n/// AUTO-LOGIN                                                                                                       // 89\n///                                                                                                                  // 90\n                                                                                                                     //\nAp._initLocalStorage = function () {                                                                                 // 92\n  var self = this;                                                                                                   // 93\n                                                                                                                     //\n  // Key names to use in localStorage                                                                                // 95\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";                                                                        // 96\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";                                                         // 97\n  self.USER_ID_KEY = \"Meteor.userId\";                                                                                // 98\n                                                                                                                     //\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                            // 100\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {                                                  // 101\n    // We want to keep using the same keys for existing apps that do not                                             // 102\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have                                           // 103\n    // to log in again after an app updates to a version of Meteor that                                              // 104\n    // contains this code, but it's generally preferable to namespace the                                            // 105\n    // keys so that connections from distinct apps to distinct DDP URLs                                              // 106\n    // will be distinct in Meteor._localStorage.                                                                     // 107\n    var namespace = \":\" + this.connection._stream.rawUrl;                                                            // 108\n    if (rootUrlPathPrefix) {                                                                                         // 109\n      namespace += \":\" + rootUrlPathPrefix;                                                                          // 110\n    }                                                                                                                // 111\n    self.LOGIN_TOKEN_KEY += namespace;                                                                               // 112\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;                                                                       // 113\n    self.USER_ID_KEY += namespace;                                                                                   // 114\n  }                                                                                                                  // 115\n                                                                                                                     //\n  if (self._autoLoginEnabled) {                                                                                      // 117\n    // Immediately try to log in via local storage, so that any DDP                                                  // 118\n    // messages are sent after we have established our user account                                                  // 119\n    self._unstoreLoginTokenIfExpiresSoon();                                                                          // 120\n    var token = self._storedLoginToken();                                                                            // 121\n    if (token) {                                                                                                     // 122\n      // On startup, optimistically present us as logged in while the                                                // 123\n      // request is in flight. This reduces page flicker on startup.                                                 // 124\n      var userId = self._storedUserId();                                                                             // 125\n      userId && self.connection.setUserId(userId);                                                                   // 126\n      self.loginWithToken(token, function (err) {                                                                    // 127\n        if (err) {                                                                                                   // 128\n          Meteor._debug(\"Error logging in with token: \" + err);                                                      // 129\n          self.makeClientLoggedOut();                                                                                // 130\n        }                                                                                                            // 131\n                                                                                                                     //\n        self._pageLoadLogin({                                                                                        // 133\n          type: \"resume\",                                                                                            // 134\n          allowed: !err,                                                                                             // 135\n          error: err,                                                                                                // 136\n          methodName: \"login\",                                                                                       // 137\n          // XXX This is duplicate code with loginWithToken, but                                                     // 138\n          // loginWithToken can also be called at other times besides                                                // 139\n          // page load.                                                                                              // 140\n          methodArguments: [{ resume: token }]                                                                       // 141\n        });                                                                                                          // 133\n      });                                                                                                            // 143\n    }                                                                                                                // 144\n  }                                                                                                                  // 145\n                                                                                                                     //\n  // Poll local storage every 3 seconds to login if someone logged in in                                             // 147\n  // another tab                                                                                                     // 148\n  self._lastLoginTokenWhenPolled = token;                                                                            // 149\n                                                                                                                     //\n  if (self._pollIntervalTimer) {                                                                                     // 151\n    // Unlikely that _initLocalStorage will be called more than once for                                             // 152\n    // the same AccountsClient instance, but just in case...                                                         // 153\n    clearInterval(self._pollIntervalTimer);                                                                          // 154\n  }                                                                                                                  // 155\n                                                                                                                     //\n  self._pollIntervalTimer = setInterval(function () {                                                                // 157\n    self._pollStoredLoginToken();                                                                                    // 158\n  }, 3000);                                                                                                          // 159\n};                                                                                                                   // 160\n                                                                                                                     //\nAp._pollStoredLoginToken = function () {                                                                             // 162\n  var self = this;                                                                                                   // 163\n                                                                                                                     //\n  if (!self._autoLoginEnabled) {                                                                                     // 165\n    return;                                                                                                          // 166\n  }                                                                                                                  // 167\n                                                                                                                     //\n  var currentLoginToken = self._storedLoginToken();                                                                  // 169\n                                                                                                                     //\n  // != instead of !== just to make sure undefined and null are treated the same                                     // 171\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {                                                         // 172\n    if (currentLoginToken) {                                                                                         // 173\n      self.loginWithToken(currentLoginToken, function (err) {                                                        // 174\n        if (err) {                                                                                                   // 175\n          self.makeClientLoggedOut();                                                                                // 176\n        }                                                                                                            // 177\n      });                                                                                                            // 178\n    } else {                                                                                                         // 179\n      self.logout();                                                                                                 // 180\n    }                                                                                                                // 181\n  }                                                                                                                  // 182\n                                                                                                                     //\n  self._lastLoginTokenWhenPolled = currentLoginToken;                                                                // 184\n};                                                                                                                   // 185\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"url_client.js\":[\"./accounts_client.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/accounts-base/url_client.js                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({AccountsTest:function(){return AccountsTest}});var AccountsClient;module.import(\"./accounts_client.js\",{\"AccountsClient\":function(v){AccountsClient=v}});\n                                                                                                                     //\nvar Ap = AccountsClient.prototype;                                                                                   // 3\n                                                                                                                     //\n// All of the special hash URLs we support for accounts interactions                                                 // 5\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];                                            // 6\n                                                                                                                     //\nvar savedHash = window.location.hash;                                                                                // 8\n                                                                                                                     //\nAp._initUrlMatching = function () {                                                                                  // 10\n  // By default, allow the autologin process to happen.                                                              // 11\n  this._autoLoginEnabled = true;                                                                                     // 12\n                                                                                                                     //\n  // We only support one callback per URL.                                                                           // 14\n  this._accountsCallbacks = {};                                                                                      // 15\n                                                                                                                     //\n  // Try to match the saved value of window.location.hash.                                                           // 17\n  this._attemptToMatchHash();                                                                                        // 18\n};                                                                                                                   // 19\n                                                                                                                     //\n// Separate out this functionality for testing                                                                       // 21\n                                                                                                                     //\nAp._attemptToMatchHash = function () {                                                                               // 23\n  _attemptToMatchHash(this, savedHash, defaultSuccessHandler);                                                       // 24\n};                                                                                                                   // 25\n                                                                                                                     //\n// Note that both arguments are optional and are currently only passed by                                            // 27\n// accounts_url_tests.js.                                                                                            // 28\nfunction _attemptToMatchHash(accounts, hash, success) {                                                              // 29\n  _.each(accountsPaths, function (urlPart) {                                                                         // 30\n    var token;                                                                                                       // 31\n                                                                                                                     //\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");                                                   // 33\n    var match = hash.match(tokenRegex);                                                                              // 34\n                                                                                                                     //\n    if (match) {                                                                                                     // 36\n      token = match[1];                                                                                              // 37\n                                                                                                                     //\n      // XXX COMPAT WITH 0.9.3                                                                                       // 39\n      if (urlPart === \"reset-password\") {                                                                            // 40\n        accounts._resetPasswordToken = token;                                                                        // 41\n      } else if (urlPart === \"verify-email\") {                                                                       // 42\n        accounts._verifyEmailToken = token;                                                                          // 43\n      } else if (urlPart === \"enroll-account\") {                                                                     // 44\n        accounts._enrollAccountToken = token;                                                                        // 45\n      }                                                                                                              // 46\n    } else {                                                                                                         // 47\n      return;                                                                                                        // 48\n    }                                                                                                                // 49\n                                                                                                                     //\n    // If no handlers match the hash, then maybe it's meant to be consumed                                           // 51\n    // by some entirely different code, so we only clear it the first time                                           // 52\n    // a handler successfully matches. Note that later handlers reuse the                                            // 53\n    // savedHash, so clearing window.location.hash here will not interfere                                           // 54\n    // with their needs.                                                                                             // 55\n    window.location.hash = \"\";                                                                                       // 56\n                                                                                                                     //\n    // Do some stuff with the token we matched                                                                       // 58\n    success.call(accounts, token, urlPart);                                                                          // 59\n  });                                                                                                                // 60\n}                                                                                                                    // 61\n                                                                                                                     //\nfunction defaultSuccessHandler(token, urlPart) {                                                                     // 63\n  var self = this;                                                                                                   // 64\n                                                                                                                     //\n  // put login in a suspended state to wait for the interaction to finish                                            // 66\n  self._autoLoginEnabled = false;                                                                                    // 67\n                                                                                                                     //\n  // wait for other packages to register callbacks                                                                   // 69\n  Meteor.startup(function () {                                                                                       // 70\n    // if a callback has been registered for this kind of token, call it                                             // 71\n    if (self._accountsCallbacks[urlPart]) {                                                                          // 72\n      self._accountsCallbacks[urlPart](token, function () {                                                          // 73\n        self._enableAutoLogin();                                                                                     // 74\n      });                                                                                                            // 75\n    }                                                                                                                // 76\n  });                                                                                                                // 77\n}                                                                                                                    // 78\n                                                                                                                     //\n// Export for testing                                                                                                // 80\nvar AccountsTest = {                                                                                                 // 81\n  attemptToMatchHash: function () {                                                                                  // 82\n    function attemptToMatchHash(hash, success) {                                                                     // 82\n      return _attemptToMatchHash(Accounts, hash, success);                                                           // 83\n    }                                                                                                                // 84\n                                                                                                                     //\n    return attemptToMatchHash;                                                                                       // 82\n  }()                                                                                                                // 82\n};                                                                                                                   // 81\n                                                                                                                     //\n// XXX these should be moved to accounts-password eventually. Right now                                              // 87\n// this is prevented by the need to set autoLoginEnabled=false, but in                                               // 88\n// some bright future we won't need to do that anymore.                                                              // 89\n                                                                                                                     //\n/**                                                                                                                  // 91\n * @summary Register a function to call when a reset password link is clicked                                        //\n * in an email sent by                                                                                               //\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).                                            //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onResetPasswordLink                                                                                         //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: A password reset token that can be passed to                                                          //\n * [`Accounts.resetPassword`](#accounts_resetpassword).                                                              //\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal                             //\n * login process is suspended until this function is called, so that the                                             //\n * password for user A can be reset even if user B was logged in.                                                    //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onResetPasswordLink = function (callback) {                                                                       // 108\n  if (this._accountsCallbacks[\"reset-password\"]) {                                                                   // 109\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  // 112\n                                                                                                                     //\n  this._accountsCallbacks[\"reset-password\"] = callback;                                                              // 114\n};                                                                                                                   // 115\n                                                                                                                     //\n/**                                                                                                                  // 117\n * @summary Register a function to call when an email verification link is                                           //\n * clicked in an email sent by                                                                                       //\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).                                              //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onEmailVerificationLink                                                                                     //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: An email verification token that can be passed to                                                     //\n * [`Accounts.verifyEmail`](#accounts_verifyemail).                                                                  //\n * 2. `done`: A function to call when the email verification UI flow is complete.                                    //\n * The normal login process is suspended until this function is called, so                                           //\n * that the user can be notified that they are verifying their email before                                          //\n * being logged in.                                                                                                  //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onEmailVerificationLink = function (callback) {                                                                   // 135\n  if (this._accountsCallbacks[\"verify-email\"]) {                                                                     // 136\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  // 139\n                                                                                                                     //\n  this._accountsCallbacks[\"verify-email\"] = callback;                                                                // 141\n};                                                                                                                   // 142\n                                                                                                                     //\n/**                                                                                                                  // 144\n * @summary Register a function to call when an account enrollment link is                                           //\n * clicked in an email sent by                                                                                       //\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).                                                  //\n * This function should be called in top-level code, not inside                                                      //\n * `Meteor.startup()`.                                                                                               //\n * @memberof! Accounts                                                                                               //\n * @name onEnrollmentLink                                                                                            //\n * @param  {Function} callback The function to call. It is given two arguments:                                      //\n *                                                                                                                   //\n * 1. `token`: A password reset token that can be passed to                                                          //\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly                                             //\n * enrolled account a password.                                                                                      //\n * 2. `done`: A function to call when the enrollment UI flow is complete.                                            //\n * The normal login process is suspended until this function is called, so that                                      //\n * user A can be enrolled even if user B was logged in.                                                              //\n * @locus Client                                                                                                     //\n */                                                                                                                  //\nAp.onEnrollmentLink = function (callback) {                                                                          // 162\n  if (this._accountsCallbacks[\"enroll-account\"]) {                                                                   // 163\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                  // 166\n                                                                                                                     //\n  this._accountsCallbacks[\"enroll-account\"] = callback;                                                              // 168\n};                                                                                                                   // 169\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/accounts-base/client_main.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['accounts-base'] = exports, {\n  Accounts: Accounts\n});\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["/packages/accounts-base/client_main.js","/packages/accounts-base/accounts_client.js","/packages/accounts-base/accounts_common.js","/packages/accounts-base/localstorage_token.js","/packages/accounts-base/url_client.js"],"names":["AccountsClient","AccountsTest","Accounts","Meteor","users","AccountsCommon","options","_loggingIn","_loggingInDeps","Tracker","Dependency","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","_initUrlMatching","_initLocalStorage","userId","_setLoggingIn","x","changed","loggingIn","depend","logout","callback","self","apply","wait","error","result","makeClientLoggedOut","logoutOtherClients","err","_storeLoginToken","token","tokenExpires","Ap","prototype","callLoginMethod","_","extend","methodName","methodArguments","_suppressLoggingIn","each","f","loginCallbacks","once","_onLoginHook","_onLoginFailureHook","userCallback","arguments","reconnected","onResultReceived","onReconnect","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","Error","validateResult","e","makeClientLoggedIn","id","_userId","_onLogoutHook","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","_debug","Package","blaze","Blaze","Template","registerHelper","user","_options","undefined","_initConnection","Mongo","Collection","_preventAutopublish","Hook","bindEnvironment","debugPrintExceptions","findOne","config","isServer","__meteor_runtime_config__","accountsConfigCalled","has","isClient","OAuthEncryption","loadKey","oauthSecretKey","omit","VALID_KEYS","keys","key","contains","onLogin","func","register","onLoginFailure","onLogout","ddpUrl","DDP","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","DEFAULT_LOGIN_EXPIRATION_DAYS","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","when","getTime","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","startup","ServiceConfiguration","loginServiceConfiguration","configurations","ConfigError","lceName","LoginCancelledError","makeErrorType","description","message","name","numericError","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","_localStorage","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","rootUrlPathPrefix","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","type","allowed","_pollIntervalTimer","clearInterval","setInterval","currentLoginToken","accountsPaths","savedHash","window","location","hash","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","accounts","success","urlPart","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","call","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink"],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {AccountsClient} from \"./accounts_client.js\";\nimport {AccountsTest} from \"./url_client.js\";\nimport \"./localstorage_token.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the client version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsClient,\n  AccountsTest,\n};\n","import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = false;\n    this._loggingInDeps = new Tracker.Dependency;\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    // Defined in url_client.js.\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    if (this._loggingIn !== x) {\n      this._loggingIn = x;\n      this._loggingInDeps.changed();\n    }\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    this._loggingInDeps.depend();\n    return this._loggingIn;\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    var self = this;\n    self.connection.apply('logout', [], {\n      wait: true\n    }, function (error, result) {\n      if (error) {\n        callback && callback(error);\n      } else {\n        self.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    var self = this;\n\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    self.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      function (err, result) {\n        if (! err) {\n          self._storeLoginToken(\n            self.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    self.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      function (err) {\n        callback && callback(err);\n      }\n    );\n  }\n};\n\nvar Ap = AccountsClient.prototype;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Call a login method on the server.\n//\n// A login method is a method which on success calls `this.setUserId(id)` and\n// `Accounts._setLoginToken` on the server and returns an object with fields\n// 'id' (containing the user id), 'token' (containing a resume token), and\n// optionally `tokenExpires`.\n//\n// This function takes care of:\n//   - Updating the Meteor.loggingIn() reactive data source\n//   - Calling the method in 'wait' mode\n//   - On success, saving the resume token to localStorage\n//   - On success, calling Accounts.connection.setUserId()\n//   - Setting up an onReconnect handler which logs in with\n//     the resume token\n//\n// Options:\n// - methodName: The method to call (default 'login')\n// - methodArguments: The arguments for the method\n// - validateResult: If provided, will be called with the result of the\n//                 method. If it throws, the client will not be logged in (and\n//                 its error will be passed to the callback).\n// - userCallback: Will be called with no arguments once the user is fully\n//                 logged in, or with the error on error.\n//\nAp.callLoginMethod = function (options) {\n  var self = this;\n\n  options = _.extend({\n    methodName: 'login',\n    methodArguments: [{}],\n    _suppressLoggingIn: false\n  }, options);\n\n  // Set defaults for callback arguments to no-op functions; make sure we\n  // override falsey values too.\n  _.each(['validateResult', 'userCallback'], function (f) {\n    if (!options[f])\n      options[f] = function () {};\n  });\n\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n  var loginCallbacks = _.once(function (error) {\n    if (!error) {\n      self._onLoginHook.each(function (callback) {\n        callback();\n        return true;\n      });\n    } else {\n      self._onLoginFailureHook.each(function (callback) {\n        callback({ error });\n        return true;\n      });\n    }\n    options.userCallback.apply(this, arguments);\n  });\n\n  var reconnected = false;\n\n  // We want to set up onReconnect as soon as we get a result token back from\n  // the server, without having to wait for subscriptions to rerun. This is\n  // because if we disconnect and reconnect between getting the result and\n  // getting the results of subscription rerun, we WILL NOT re-send this\n  // method (because we never re-send methods whose results we've received)\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n  // time. This will lead to makeClientLoggedIn(result.id) even though we\n  // haven't actually sent a login method!\n  //\n  // But by making sure that we send this \"resume\" login in that case (and\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n  // client-side userId. (It's important that livedata_connection guarantees\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n  // will occur before the callback from the resume login call.)\n  var onResultReceived = function (err, result) {\n    if (err || !result || !result.token) {\n      // Leave onReconnect alone if there was an error, so that if the user was\n      // already logged in they will still get logged in on reconnect.\n      // See issue #4970.\n    } else {\n      self.connection.onReconnect = function () {\n        reconnected = true;\n        // If our token was updated in storage, use the latest one.\n        var storedToken = self._storedLoginToken();\n        if (storedToken) {\n          result = {\n            token: storedToken,\n            tokenExpires: self._storedLoginTokenExpires()\n          };\n        }\n        if (! result.tokenExpires)\n          result.tokenExpires = self._tokenExpiration(new Date());\n        if (self._tokenExpiresSoon(result.tokenExpires)) {\n          self.makeClientLoggedOut();\n        } else {\n          self.callLoginMethod({\n            methodArguments: [{resume: result.token}],\n            // Reconnect quiescence ensures that the user doesn't see an\n            // intermediate state before the login method finishes. So we don't\n            // need to show a logging-in animation.\n            _suppressLoggingIn: true,\n            userCallback: function (error) {\n              var storedTokenNow = self._storedLoginToken();\n              if (error) {\n                // If we had a login error AND the current stored token is the\n                // one that we tried to log in with, then declare ourselves\n                // logged out. If there's a token in storage but it's not the\n                // token that we tried to log in with, we don't know anything\n                // about whether that token is valid or not, so do nothing. The\n                // periodic localStorage poll will decide if we are logged in or\n                // out with this token, if it hasn't already. Of course, even\n                // with this check, another tab could insert a new valid token\n                // immediately before we clear localStorage here, which would\n                // lead to both tabs being logged out, but by checking the token\n                // in storage right now we hope to make that unlikely to happen.\n                //\n                // If there is no token in storage right now, we don't have to\n                // do anything; whatever code removed the token from storage was\n                // responsible for calling `makeClientLoggedOut()`, or the\n                // periodic localStorage poll will call `makeClientLoggedOut`\n                // eventually if another tab wiped the token from storage.\n                if (storedTokenNow && storedTokenNow === result.token) {\n                  self.makeClientLoggedOut();\n                }\n              }\n              // Possibly a weird callback to call, but better than nothing if\n              // there is a reconnect between \"login result received\" and \"data\n              // ready\".\n              loginCallbacks(error);\n            }});\n        }\n      };\n    }\n  };\n\n  // This callback is called once the local cache of the current-user\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to\n  // date.\n  var loggedInAndDataReadyCallback = function (error, result) {\n    // If the login method returns its result but the connection is lost\n    // before the data is in the local cache, it'll set an onReconnect (see\n    // above). The onReconnect will try to log in using the token, and *it*\n    // will call userCallback via its own version of this\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.\n    if (reconnected)\n      return;\n\n    // Note that we need to call this even if _suppressLoggingIn is true,\n    // because it could be matching a _setLoggingIn(true) from a\n    // half-completed pre-reconnect login method.\n    self._setLoggingIn(false);\n    if (error || !result) {\n      error = error || new Error(\n        \"No result from call to \" + options.methodName);\n      loginCallbacks(error);\n      return;\n    }\n    try {\n      options.validateResult(result);\n    } catch (e) {\n      loginCallbacks(e);\n      return;\n    }\n\n    // Make the client logged in. (The user data should already be loaded!)\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n    loginCallbacks();\n  };\n\n  if (!options._suppressLoggingIn)\n    self._setLoggingIn(true);\n  self.connection.apply(\n    options.methodName,\n    options.methodArguments,\n    {wait: true, onResultReceived: onResultReceived},\n    loggedInAndDataReadyCallback);\n};\n\nAp.makeClientLoggedOut = function () {\n  // Ensure client was successfully logged in before running logout hooks.\n  if (this.connection._userId) {\n    this._onLogoutHook.each(function (callback) {\n      callback();\n      return true;\n    });\n  }\n  this._unstoreLoginToken();\n  this.connection.setUserId(null);\n  this.connection.onReconnect = null;\n};\n\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {\n  this._storeLoginToken(userId, token, tokenExpires);\n  this.connection.setUserId(userId);\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n\n///\n/// LOGIN SERVICES\n///\n\n// A reactive function returning whether the loginServiceConfiguration\n// subscription is ready. Used by accounts-ui to hide the login button\n// until we have all the configuration loaded\n//\nAp.loginServicesConfigured = function () {\n  return this._loginServicesHandle.ready();\n};\n\n\n// Some login services such as the redirect login flow or the resume\n// login handler can log the user in at page load time.  The\n// Meteor.loginWithX functions have a callback argument, but the\n// callback function instance won't be in memory any longer if the\n// page was reloaded.  The `onPageLoadLogin` function allows a\n// callback to be registered for the case where the login was\n// initiated in a previous VM, and we now have the result of the login\n// attempt in a new VM.\n\n// Register a callback to be called if we have information about a\n// login attempt at page load time.  Call the callback immediately if\n// we already have the page load login attempt info, otherwise stash\n// the callback to be called if and when we do get the attempt info.\n//\nAp.onPageLoadLogin = function (f) {\n  if (this._pageLoadLoginAttemptInfo) {\n    f(this._pageLoadLoginAttemptInfo);\n  } else {\n    this._pageLoadLoginCallbacks.push(f);\n  }\n};\n\n\n// Receive the information about the login attempt at page load time.\n// Call registered callbacks, and also record the info in case\n// someone's callback hasn't been registered yet.\n//\nAp._pageLoadLogin = function (attemptInfo) {\n  if (this._pageLoadLoginAttemptInfo) {\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");\n    return;\n  }\n\n  _.each(this._pageLoadLoginCallbacks, function (callback) {\n    callback(attemptInfo);\n  });\n\n  this._pageLoadLoginCallbacks = [];\n  this._pageLoadLoginAttemptInfo = attemptInfo;\n};\n\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n}\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n   return (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","import {AccountsClient} from \"./accounts_client.js\";\nvar Ap = AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (! tokenExpires)\n    tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{resume: token}]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (! self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};\n","import {AccountsClient} from \"./accounts_client.js\";\n\nvar Ap = AccountsClient.prototype;\n\n// All of the special hash URLs we support for accounts interactions\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];\n\nvar savedHash = window.location.hash;\n\nAp._initUrlMatching = function () {\n  // By default, allow the autologin process to happen.\n  this._autoLoginEnabled = true;\n\n  // We only support one callback per URL.\n  this._accountsCallbacks = {};\n\n  // Try to match the saved value of window.location.hash.\n  this._attemptToMatchHash();\n};\n\n// Separate out this functionality for testing\n\nAp._attemptToMatchHash = function () {\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nfunction attemptToMatchHash(accounts, hash, success) {\n  _.each(accountsPaths, function (urlPart) {\n    var token;\n\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\nfunction defaultSuccessHandler(token, urlPart) {\n  var self = this;\n\n  // put login in a suspended state to wait for the interaction to finish\n  self._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (self._accountsCallbacks[urlPart]) {\n      self._accountsCallbacks[urlPart](token, function () {\n        self._enableAutoLogin();\n      });\n    }\n  });\n}\n\n// Export for testing\nexport var AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n\n// XXX these should be moved to accounts-password eventually. Right now\n// this is prevented by the need to set autoLoginEnabled=false, but in\n// some bright future we won't need to do that anymore.\n\n/**\n * @summary Register a function to call when a reset password link is clicked\n * in an email sent by\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onResetPasswordLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword).\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n * login process is suspended until this function is called, so that the\n * password for user A can be reset even if user B was logged in.\n * @locus Client\n */\nAp.onResetPasswordLink = function (callback) {\n  if (this._accountsCallbacks[\"reset-password\"]) {\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"reset-password\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an email verification link is\n * clicked in an email sent by\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEmailVerificationLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: An email verification token that can be passed to\n * [`Accounts.verifyEmail`](#accounts_verifyemail).\n * 2. `done`: A function to call when the email verification UI flow is complete.\n * The normal login process is suspended until this function is called, so\n * that the user can be notified that they are verifying their email before\n * being logged in.\n * @locus Client\n */\nAp.onEmailVerificationLink = function (callback) {\n  if (this._accountsCallbacks[\"verify-email\"]) {\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"verify-email\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an account enrollment link is\n * clicked in an email sent by\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEnrollmentLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n * enrolled account a password.\n * 2. `done`: A function to call when the enrollment UI flow is complete.\n * The normal login process is suspended until this function is called, so that\n * user A can be enrolled even if user B was logged in.\n * @locus Client\n */\nAp.onEnrollmentLink = function (callback) {\n  if (this._accountsCallbacks[\"enroll-account\"]) {\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"enroll-account\"] = callback;\n};\n"]}}]