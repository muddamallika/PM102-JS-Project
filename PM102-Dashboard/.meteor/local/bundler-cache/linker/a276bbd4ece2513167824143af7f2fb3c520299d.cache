[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar makeInstaller, meteorInstall;\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/modules-runtime/.npm/package/node_modules/install/install.js   //\n// This file is in bare mode and is not in its own closure.                //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nmakeInstaller = function (options) {                                       // 1\n  \"use strict\";                                                            // 2\n                                                                           // 3\n  options = options || {};                                                 // 4\n                                                                           // 5\n  // These file extensions will be appended to required module identifiers\n  // if they do not exactly match an installed module.                     // 7\n  var defaultExtensions = options.extensions || [\".js\", \".json\"];          // 8\n                                                                           // 9\n  // If defined, the options.onInstall function will be called any time    // 10\n  // new modules are installed.                                            // 11\n  var onInstall = options.onInstall;                                       // 12\n                                                                           // 13\n  // If defined, each module-specific require function will be passed to   // 14\n  // this function, along with the module.id of the parent module, and     // 15\n  // the result will be used in place of the original require function.    // 16\n  var wrapRequire = options.wrapRequire;                                   // 17\n                                                                           // 18\n  // If defined, the options.override function will be called before       // 19\n  // looking up any top-level package identifiers in node_modules          // 20\n  // directories. It can either return a string to provide an alternate    // 21\n  // package identifier, or a non-string value to prevent the lookup from  // 22\n  // proceeding.                                                           // 23\n  var override = options.override;                                         // 24\n                                                                           // 25\n  // If defined, the options.fallback function will be called when no      // 26\n  // installed module is found for a required module identifier. Often     // 27\n  // options.fallback will be implemented in terms of the native Node      // 28\n  // require function, which has the ability to load binary modules.       // 29\n  var fallback = options.fallback;                                         // 30\n                                                                           // 31\n  // Nothing special about MISSING.hasOwnProperty, except that it's fewer  // 32\n  // characters than Object.prototype.hasOwnProperty after minification.   // 33\n  var hasOwn = {}.hasOwnProperty;                                          // 34\n                                                                           // 35\n  // The file object representing the root directory of the installed      // 36\n  // module tree.                                                          // 37\n  var root = new File(\"/\", new File(\"/..\"));                               // 38\n  var rootRequire = makeRequire(root);                                     // 39\n                                                                           // 40\n  // Merges the given tree of directories and module factory functions     // 41\n  // into the tree of installed modules and returns a require function     // 42\n  // that behaves as if called from a module in the root directory.        // 43\n  function install(tree, options) {                                        // 44\n    if (isObject(tree)) {                                                  // 45\n      fileMergeContents(root, tree, options);                              // 46\n      if (isFunction(onInstall)) {                                         // 47\n        onInstall(rootRequire);                                            // 48\n      }                                                                    // 49\n    }                                                                      // 50\n    return rootRequire;                                                    // 51\n  }                                                                        // 52\n                                                                           // 53\n  // This constructor will be used to instantiate the module objects       // 54\n  // passed to module factory functions (i.e. the third argument after     // 55\n  // require and exports), and is exposed as install.Module in case the    // 56\n  // caller of makeInstaller wishes to modify Module.prototype.            // 57\n  function Module(id) {                                                    // 58\n    this.id = id;                                                          // 59\n    this.children = [];                                                    // 60\n  }                                                                        // 61\n                                                                           // 62\n  Module.prototype.resolve = function (id) {                               // 63\n    return this.require.resolve(id);                                       // 64\n  };                                                                       // 65\n                                                                           // 66\n  install.Module = Module;                                                 // 67\n                                                                           // 68\n  function getOwn(obj, key) {                                              // 69\n    return hasOwn.call(obj, key) && obj[key];                              // 70\n  }                                                                        // 71\n                                                                           // 72\n  function isObject(value) {                                               // 73\n    return value && typeof value === \"object\";                             // 74\n  }                                                                        // 75\n                                                                           // 76\n  function isFunction(value) {                                             // 77\n    return typeof value === \"function\";                                    // 78\n  }                                                                        // 79\n                                                                           // 80\n  function isString(value) {                                               // 81\n    return typeof value === \"string\";                                      // 82\n  }                                                                        // 83\n                                                                           // 84\n  function makeRequire(file) {                                             // 85\n    function require(id) {                                                 // 86\n      var result = fileResolve(file, id);                                  // 87\n      if (result) {                                                        // 88\n        return fileEvaluate(result, file.m);                               // 89\n      }                                                                    // 90\n                                                                           // 91\n      var error = new Error(\"Cannot find module '\" + id + \"'\");            // 92\n                                                                           // 93\n      if (isFunction(fallback)) {                                          // 94\n        return fallback(                                                   // 95\n          id, // The missing module identifier.                            // 96\n          file.m.id, // The path of the requiring file.                    // 97\n          error // The error we would have thrown.                         // 98\n        );                                                                 // 99\n      }                                                                    // 100\n                                                                           // 101\n      throw error;                                                         // 102\n    }                                                                      // 103\n                                                                           // 104\n    if (isFunction(wrapRequire)) {                                         // 105\n      require = wrapRequire(require, file.m.id);                           // 106\n    }                                                                      // 107\n                                                                           // 108\n    require.resolve = function (id) {                                      // 109\n      var f = fileResolve(file, id);                                       // 110\n      if (f) return f.m.id;                                                // 111\n      var error = new Error(\"Cannot find module '\" + id + \"'\");            // 112\n      if (fallback && isFunction(fallback.resolve)) {                      // 113\n        return fallback.resolve(id, file.m.id, error);                     // 114\n      }                                                                    // 115\n      throw error;                                                         // 116\n    };                                                                     // 117\n                                                                           // 118\n    return require;                                                        // 119\n  }                                                                        // 120\n                                                                           // 121\n  // File objects represent either directories or modules that have been   // 122\n  // installed. When a `File` respresents a directory, its `.c` (contents)\n  // property is an object containing the names of the files (or           // 124\n  // directories) that it contains. When a `File` represents a module, its\n  // `.c` property is a function that can be invoked with the appropriate  // 126\n  // `(require, exports, module)` arguments to evaluate the module. If the\n  // `.c` property is a string, that string will be resolved as a module   // 128\n  // identifier, and the exports of the resulting module will provide the  // 129\n  // exports of the original file. The `.p` (parent) property of a File is\n  // either a directory `File` or `null`. Note that a child may claim      // 131\n  // another `File` as its parent even if the parent does not have an      // 132\n  // entry for that child in its `.c` object.  This is important for       // 133\n  // implementing anonymous files, and preventing child modules from using\n  // `../relative/identifier` syntax to examine unrelated modules.         // 135\n  function File(name, parent) {                                            // 136\n    var file = this;                                                       // 137\n                                                                           // 138\n    // Link to the parent file.                                            // 139\n    file.p = parent = parent || null;                                      // 140\n                                                                           // 141\n    // The module object for this File, which will eventually boast an     // 142\n    // .exports property when/if the file is evaluated.                    // 143\n    file.m = new Module(name);                                             // 144\n  }                                                                        // 145\n                                                                           // 146\n  function fileEvaluate(file, parentModule) {                              // 147\n    var contents = file && file.c;                                         // 148\n    var module = file.m;                                                   // 149\n                                                                           // 150\n    if (! hasOwn.call(module, \"exports\")) {                                // 151\n      if (parentModule) {                                                  // 152\n        module.parent = parentModule;                                      // 153\n        var children = parentModule.children;                              // 154\n        if (Array.isArray(children)) {                                     // 155\n          children.push(module);                                           // 156\n        }                                                                  // 157\n      }                                                                    // 158\n                                                                           // 159\n      // If a Module.prototype.useNode method is defined, give it a chance\n      // to define module.exports based on module.id using Node.           // 161\n      if (! isFunction(module.useNode) ||                                  // 162\n          ! module.useNode()) {                                            // 163\n        contents(                                                          // 164\n          module.require = module.require || makeRequire(file),            // 165\n          module.exports = {},                                             // 166\n          module,                                                          // 167\n          file.m.id,                                                       // 168\n          file.p.m.id                                                      // 169\n        );                                                                 // 170\n      }                                                                    // 171\n                                                                           // 172\n      module.loaded = true;                                                // 173\n    }                                                                      // 174\n                                                                           // 175\n    if (isFunction(module.runModuleSetters)) {                             // 176\n      module.runModuleSetters();                                           // 177\n    }                                                                      // 178\n                                                                           // 179\n    return module.exports;                                                 // 180\n  }                                                                        // 181\n                                                                           // 182\n  function fileIsDirectory(file) {                                         // 183\n    return file && isObject(file.c);                                       // 184\n  }                                                                        // 185\n                                                                           // 186\n  function fileMergeContents(file, contents, options) {                    // 187\n    // If contents is an array of strings and functions, return the last   // 188\n    // function with a `.d` property containing all the strings.           // 189\n    if (Array.isArray(contents)) {                                         // 190\n      var deps = [];                                                       // 191\n                                                                           // 192\n      contents.forEach(function (item) {                                   // 193\n        if (isString(item)) {                                              // 194\n          deps.push(item);                                                 // 195\n        } else if (isFunction(item)) {                                     // 196\n          contents = item;                                                 // 197\n        }                                                                  // 198\n      });                                                                  // 199\n                                                                           // 200\n      if (isFunction(contents)) {                                          // 201\n        contents.d = deps;                                                 // 202\n      } else {                                                             // 203\n        // If the array did not contain a function, merge nothing.         // 204\n        contents = null;                                                   // 205\n      }                                                                    // 206\n                                                                           // 207\n    } else if (isFunction(contents)) {                                     // 208\n      // If contents is already a function, make sure it has `.d`.         // 209\n      contents.d = contents.d || [];                                       // 210\n                                                                           // 211\n    } else if (! isString(contents) &&                                     // 212\n               ! isObject(contents)) {                                     // 213\n      // If contents is neither an array nor a function nor a string nor   // 214\n      // an object, just give up and merge nothing.                        // 215\n      contents = null;                                                     // 216\n    }                                                                      // 217\n                                                                           // 218\n    if (contents) {                                                        // 219\n      file.c = file.c || (isObject(contents) ? {} : contents);             // 220\n      if (isObject(contents) && fileIsDirectory(file)) {                   // 221\n        Object.keys(contents).forEach(function (key) {                     // 222\n          if (key === \"..\") {                                              // 223\n            child = file.p;                                                // 224\n                                                                           // 225\n          } else {                                                         // 226\n            var child = getOwn(file.c, key);                               // 227\n            if (! child) {                                                 // 228\n              child = file.c[key] = new File(                              // 229\n                file.m.id.replace(/\\/*$/, \"/\") + key,                      // 230\n                file                                                       // 231\n              );                                                           // 232\n                                                                           // 233\n              child.o = options;                                           // 234\n            }                                                              // 235\n          }                                                                // 236\n                                                                           // 237\n          fileMergeContents(child, contents[key], options);                // 238\n        });                                                                // 239\n      }                                                                    // 240\n    }                                                                      // 241\n  }                                                                        // 242\n                                                                           // 243\n  function fileGetExtensions(file) {                                       // 244\n    return file.o && file.o.extensions || defaultExtensions;               // 245\n  }                                                                        // 246\n                                                                           // 247\n  function fileAppendIdPart(file, part, extensions) {                      // 248\n    // Always append relative to a directory.                              // 249\n    while (file && ! fileIsDirectory(file)) {                              // 250\n      file = file.p;                                                       // 251\n    }                                                                      // 252\n                                                                           // 253\n    if (! file || ! part || part === \".\") {                                // 254\n      return file;                                                         // 255\n    }                                                                      // 256\n                                                                           // 257\n    if (part === \"..\") {                                                   // 258\n      return file.p;                                                       // 259\n    }                                                                      // 260\n                                                                           // 261\n    var exactChild = getOwn(file.c, part);                                 // 262\n                                                                           // 263\n    // Only consider multiple file extensions if this part is the last     // 264\n    // part of a module identifier and not equal to `.` or `..`, and there\n    // was no exact match or the exact match was a directory.              // 266\n    if (extensions && (! exactChild || fileIsDirectory(exactChild))) {     // 267\n      for (var e = 0; e < extensions.length; ++e) {                        // 268\n        var child = getOwn(file.c, part + extensions[e]);                  // 269\n        if (child) {                                                       // 270\n          return child;                                                    // 271\n        }                                                                  // 272\n      }                                                                    // 273\n    }                                                                      // 274\n                                                                           // 275\n    return exactChild;                                                     // 276\n  }                                                                        // 277\n                                                                           // 278\n  function fileAppendId(file, id, extensions) {                            // 279\n    var parts = id.split(\"/\");                                             // 280\n                                                                           // 281\n    // Use `Array.prototype.every` to terminate iteration early if         // 282\n    // `fileAppendIdPart` returns a falsy value.                           // 283\n    parts.every(function (part, i) {                                       // 284\n      return file = i < parts.length - 1                                   // 285\n        ? fileAppendIdPart(file, part)                                     // 286\n        : fileAppendIdPart(file, part, extensions);                        // 287\n    });                                                                    // 288\n                                                                           // 289\n    return file;                                                           // 290\n  }                                                                        // 291\n                                                                           // 292\n  function fileResolve(file, id, seenDirFiles) {                           // 293\n    var extensions = fileGetExtensions(file);                              // 294\n                                                                           // 295\n    file =                                                                 // 296\n      // Absolute module identifiers (i.e. those that begin with a `/`     // 297\n      // character) are interpreted relative to the root directory, which  // 298\n      // is a slight deviation from Node, which has access to the entire   // 299\n      // file system.                                                      // 300\n      id.charAt(0) === \"/\" ? fileAppendId(root, id, extensions) :          // 301\n      // Relative module identifiers are interpreted relative to the       // 302\n      // current file, naturally.                                          // 303\n      id.charAt(0) === \".\" ? fileAppendId(file, id, extensions) :          // 304\n      // Top-level module identifiers are interpreted as referring to      // 305\n      // packages in `node_modules` directories.                           // 306\n      nodeModulesLookup(file, id, extensions);                             // 307\n                                                                           // 308\n    // If the identifier resolves to a directory, we use the same logic as\n    // Node to find an `index.js` or `package.json` file to evaluate.      // 310\n    while (fileIsDirectory(file)) {                                        // 311\n      seenDirFiles = seenDirFiles || [];                                   // 312\n                                                                           // 313\n      // If the \"main\" field of a `package.json` file resolves to a        // 314\n      // directory we've already considered, then we should not attempt to\n      // read the same `package.json` file again. Using an array as a set  // 316\n      // is acceptable here because the number of directories to consider  // 317\n      // is rarely greater than 1 or 2. Also, using indexOf allows us to   // 318\n      // store File objects instead of strings.                            // 319\n      if (seenDirFiles.indexOf(file) < 0) {                                // 320\n        seenDirFiles.push(file);                                           // 321\n                                                                           // 322\n        var pkgJsonFile = fileAppendIdPart(file, \"package.json\");          // 323\n        var main = pkgJsonFile && fileEvaluate(pkgJsonFile).main;          // 324\n        if (isString(main)) {                                              // 325\n          // The \"main\" field of package.json does not have to begin with  // 326\n          // ./ to be considered relative, so first we try simply          // 327\n          // appending it to the directory path before falling back to a   // 328\n          // full fileResolve, which might return a package from a         // 329\n          // node_modules directory.                                       // 330\n          file = fileAppendId(file, main, extensions) ||                   // 331\n            fileResolve(file, main, seenDirFiles);                         // 332\n                                                                           // 333\n          if (file) {                                                      // 334\n            // The fileAppendId call above may have returned a directory,  // 335\n            // so continue the loop to make sure we resolve it to a        // 336\n            // non-directory file.                                         // 337\n            continue;                                                      // 338\n          }                                                                // 339\n        }                                                                  // 340\n      }                                                                    // 341\n                                                                           // 342\n      // If we didn't find a `package.json` file, or it didn't have a      // 343\n      // resolvable `.main` property, the only possibility left to         // 344\n      // consider is that this directory contains an `index.js` module.    // 345\n      // This assignment almost always terminates the while loop, because  // 346\n      // there's very little chance `fileIsDirectory(file)` will be true   // 347\n      // for the result of `fileAppendIdPart(file, \"index.js\")`. However,  // 348\n      // in principle it is remotely possible that a file called           // 349\n      // `index.js` could be a directory instead of a file.                // 350\n      file = fileAppendIdPart(file, \"index.js\");                           // 351\n    }                                                                      // 352\n                                                                           // 353\n    if (file && isString(file.c)) {                                        // 354\n      file = fileResolve(file, file.c, seenDirFiles);                      // 355\n    }                                                                      // 356\n                                                                           // 357\n    return file;                                                           // 358\n  };                                                                       // 359\n                                                                           // 360\n  function nodeModulesLookup(file, id, extensions) {                       // 361\n    if (isFunction(override)) {                                            // 362\n      id = override(id, file.m.id);                                        // 363\n    }                                                                      // 364\n                                                                           // 365\n    if (isString(id)) {                                                    // 366\n      for (var resolved; file && ! resolved; file = file.p) {              // 367\n        resolved = fileIsDirectory(file) &&                                // 368\n          fileAppendId(file, \"node_modules/\" + id, extensions);            // 369\n      }                                                                    // 370\n                                                                           // 371\n      return resolved;                                                     // 372\n    }                                                                      // 373\n  }                                                                        // 374\n                                                                           // 375\n  return install;                                                          // 376\n};                                                                         // 377\n                                                                           // 378\nif (typeof exports === \"object\") {                                         // 379\n  exports.makeInstaller = makeInstaller;                                   // 380\n}                                                                          // 381\n                                                                           // 382\n/////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/modules-runtime/modules-runtime.js                             //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nvar options = {};                                                          // 1\nvar hasOwn = options.hasOwnProperty;                                       // 2\n                                                                           // 3\n// RegExp matching strings that don't start with a `.` or a `/`.           // 4\nvar topLevelIdPattern = /^[^./]/;                                          // 5\n                                                                           // 6\nif (typeof Profile === \"function\" &&                                       // 7\n    process.env.METEOR_PROFILE) {                                          // 8\n  options.wrapRequire = function (require) {                               // 9\n    return Profile(function (id) {                                         // 10\n      return \"require(\" + JSON.stringify(id) + \")\";                        // 11\n    }, require);                                                           // 12\n  };                                                                       // 13\n}                                                                          // 14\n                                                                           // 15\n// This function will be called whenever a module identifier that hasn't   // 16\n// been installed is required. For backwards compatibility, and so that we\n// can require binary dependencies on the server, we implement the         // 18\n// fallback in terms of Npm.require.                                       // 19\noptions.fallback = function (id, parentId, error) {                        // 20\n  // For simplicity, we honor only top-level module identifiers here.      // 21\n  // We could try to honor relative and absolute module identifiers by     // 22\n  // somehow combining `id` with `dir`, but we'd have to be really careful\n  // that the resulting modules were located in a known directory (not     // 24\n  // some arbitrary location on the file system), and we only really need  // 25\n  // the fallback for dependencies installed in node_modules directories.  // 26\n  if (topLevelIdPattern.test(id)) {                                        // 27\n    if (typeof Npm === \"object\" &&                                         // 28\n        typeof Npm.require === \"function\") {                               // 29\n      return Npm.require(id);                                              // 30\n    }                                                                      // 31\n  }                                                                        // 32\n                                                                           // 33\n  throw error;                                                             // 34\n};                                                                         // 35\n                                                                           // 36\noptions.fallback.resolve = function (id, parentId, error) {                // 37\n  if (Meteor.isServer &&                                                   // 38\n      topLevelIdPattern.test(id)) {                                        // 39\n    // Allow any top-level identifier to resolve to itself on the server,  // 40\n    // so that options.fallback can have a chance to handle it.            // 41\n    return id;                                                             // 42\n  }                                                                        // 43\n                                                                           // 44\n  throw error;                                                             // 45\n};                                                                         // 46\n                                                                           // 47\nmeteorInstall = makeInstaller(options);                                    // 48\nvar Mp = meteorInstall.Module.prototype;                                   // 49\n                                                                           // 50\nif (Meteor.isServer) {                                                     // 51\n  Mp.useNode = function () {                                               // 52\n    if (typeof npmRequire !== \"function\") {                                // 53\n      // Can't use Node if npmRequire is not defined.                      // 54\n      return false;                                                        // 55\n    }                                                                      // 56\n                                                                           // 57\n    var parts = this.id.split(\"/\");                                        // 58\n    var start = 0;                                                         // 59\n    if (parts[start] === \"\") ++start;                                      // 60\n    if (parts[start] === \"node_modules\" &&                                 // 61\n        parts[start + 1] === \"meteor\") {                                   // 62\n      start += 2;                                                          // 63\n    }                                                                      // 64\n                                                                           // 65\n    if (parts.indexOf(\"node_modules\", start) < 0) {                        // 66\n      // Don't try to use Node for modules that aren't in node_modules     // 67\n      // directories.                                                      // 68\n      return false;                                                        // 69\n    }                                                                      // 70\n                                                                           // 71\n    try {                                                                  // 72\n      npmRequire.resolve(this.id);                                         // 73\n    } catch (e) {                                                          // 74\n      return false;                                                        // 75\n    }                                                                      // 76\n                                                                           // 77\n    this.exports = npmRequire(this.id);                                    // 78\n                                                                           // 79\n    return true;                                                           // 80\n  };                                                                       // 81\n}                                                                          // 82\n                                                                           // 83\n/////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['modules-runtime'] = {}, {\n  meteorInstall: meteorInstall\n});\n\n})();\n","servePath":"/packages/modules-runtime.js"}]